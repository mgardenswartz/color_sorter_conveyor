
test-03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a08  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08003b98  08003b98  00004b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c2c  08003c2c  00005060  2**0
                  CONTENTS
  4 .ARM          00000008  08003c2c  08003c2c  00004c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c34  08003c34  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c34  08003c34  00004c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c38  08003c38  00004c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08003c3c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  20000060  08003c9c  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08003c9c  00005288  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a49f  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001854  00000000  00000000  0000f52f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c8  00000000  00000000  00010d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006b4  00000000  00000000  00011650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025932  00000000  00000000  00011d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad96  00000000  00000000  00037636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e768b  00000000  00000000  000423cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00129a57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027ec  00000000  00000000  00129a9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  0012c288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003b80 	.word	0x08003b80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08003b80 	.word	0x08003b80

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <HAL_GPIO_EXTI_Callback>:


char buffer[50] = "";
int string_length = 50;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	80fb      	strh	r3, [r7, #6]
    // Your interrupt handling code here
	if(GPIO_PIN == GPIO_PIN_13){
 800056a:	88fb      	ldrh	r3, [r7, #6]
 800056c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000570:	d111      	bne.n	8000596 <HAL_GPIO_EXTI_Callback+0x36>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000572:	2120      	movs	r1, #32
 8000574:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000578:	f000 fd6a 	bl	8001050 <HAL_GPIO_TogglePin>
		sprintf(buffer, "Interrupt triggered.\r\n");
 800057c:	4908      	ldr	r1, [pc, #32]	@ (80005a0 <HAL_GPIO_EXTI_Callback+0x40>)
 800057e:	4809      	ldr	r0, [pc, #36]	@ (80005a4 <HAL_GPIO_EXTI_Callback+0x44>)
 8000580:	f002 fe5e 	bl	8003240 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, string_length, HAL_MAX_DELAY);
 8000584:	4b08      	ldr	r3, [pc, #32]	@ (80005a8 <HAL_GPIO_EXTI_Callback+0x48>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	b29a      	uxth	r2, r3
 800058a:	f04f 33ff 	mov.w	r3, #4294967295
 800058e:	4905      	ldr	r1, [pc, #20]	@ (80005a4 <HAL_GPIO_EXTI_Callback+0x44>)
 8000590:	4806      	ldr	r0, [pc, #24]	@ (80005ac <HAL_GPIO_EXTI_Callback+0x4c>)
 8000592:	f002 f8fd 	bl	8002790 <HAL_UART_Transmit>
	}

}
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	08003b98 	.word	0x08003b98
 80005a4:	20000104 	.word	0x20000104
 80005a8:	20000000 	.word	0x20000000
 80005ac:	2000007c 	.word	0x2000007c

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f000 fa03 	bl	80009be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f806 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 f87a 	bl	80006b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005c0:	f000 f848 	bl	8000654 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c4:	bf00      	nop
 80005c6:	e7fd      	b.n	80005c4 <main+0x14>

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b096      	sub	sp, #88	@ 0x58
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	2244      	movs	r2, #68	@ 0x44
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f002 fe52 	bl	8003280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	463b      	mov	r3, r7
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
 80005e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ea:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005ee:	f000 fd6f 	bl	80010d0 <HAL_PWREx_ControlVoltageScaling>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005f8:	f000 f8b2 	bl	8000760 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005fc:	2310      	movs	r3, #16
 80005fe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000600:	2301      	movs	r3, #1
 8000602:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000608:	2360      	movs	r3, #96	@ 0x60
 800060a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800060c:	2300      	movs	r3, #0
 800060e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000610:	f107 0314 	add.w	r3, r7, #20
 8000614:	4618      	mov	r0, r3
 8000616:	f000 fdb1 	bl	800117c <HAL_RCC_OscConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000620:	f000 f89e 	bl	8000760 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000624:	230f      	movs	r3, #15
 8000626:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000638:	463b      	mov	r3, r7
 800063a:	2100      	movs	r1, #0
 800063c:	4618      	mov	r0, r3
 800063e:	f001 f979 	bl	8001934 <HAL_RCC_ClockConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000648:	f000 f88a 	bl	8000760 <Error_Handler>
  }
}
 800064c:	bf00      	nop
 800064e:	3758      	adds	r7, #88	@ 0x58
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000658:	4b14      	ldr	r3, [pc, #80]	@ (80006ac <MX_USART2_UART_Init+0x58>)
 800065a:	4a15      	ldr	r2, [pc, #84]	@ (80006b0 <MX_USART2_UART_Init+0x5c>)
 800065c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800065e:	4b13      	ldr	r3, [pc, #76]	@ (80006ac <MX_USART2_UART_Init+0x58>)
 8000660:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000664:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000666:	4b11      	ldr	r3, [pc, #68]	@ (80006ac <MX_USART2_UART_Init+0x58>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800066c:	4b0f      	ldr	r3, [pc, #60]	@ (80006ac <MX_USART2_UART_Init+0x58>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000672:	4b0e      	ldr	r3, [pc, #56]	@ (80006ac <MX_USART2_UART_Init+0x58>)
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000678:	4b0c      	ldr	r3, [pc, #48]	@ (80006ac <MX_USART2_UART_Init+0x58>)
 800067a:	220c      	movs	r2, #12
 800067c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067e:	4b0b      	ldr	r3, [pc, #44]	@ (80006ac <MX_USART2_UART_Init+0x58>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000684:	4b09      	ldr	r3, [pc, #36]	@ (80006ac <MX_USART2_UART_Init+0x58>)
 8000686:	2200      	movs	r2, #0
 8000688:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800068a:	4b08      	ldr	r3, [pc, #32]	@ (80006ac <MX_USART2_UART_Init+0x58>)
 800068c:	2200      	movs	r2, #0
 800068e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000690:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <MX_USART2_UART_Init+0x58>)
 8000692:	2200      	movs	r2, #0
 8000694:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000696:	4805      	ldr	r0, [pc, #20]	@ (80006ac <MX_USART2_UART_Init+0x58>)
 8000698:	f002 f82c 	bl	80026f4 <HAL_UART_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006a2:	f000 f85d 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	2000007c 	.word	0x2000007c
 80006b0:	40004400 	.word	0x40004400

080006b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b088      	sub	sp, #32
 80006b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ba:	f107 030c 	add.w	r3, r7, #12
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ca:	4b23      	ldr	r3, [pc, #140]	@ (8000758 <MX_GPIO_Init+0xa4>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ce:	4a22      	ldr	r2, [pc, #136]	@ (8000758 <MX_GPIO_Init+0xa4>)
 80006d0:	f043 0304 	orr.w	r3, r3, #4
 80006d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006d6:	4b20      	ldr	r3, [pc, #128]	@ (8000758 <MX_GPIO_Init+0xa4>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006da:	f003 0304 	and.w	r3, r3, #4
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000758 <MX_GPIO_Init+0xa4>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e6:	4a1c      	ldr	r2, [pc, #112]	@ (8000758 <MX_GPIO_Init+0xa4>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000758 <MX_GPIO_Init+0xa4>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2120      	movs	r1, #32
 80006fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000702:	f000 fc8d 	bl	8001020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000706:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800070a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800070c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000710:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000712:	2300      	movs	r3, #0
 8000714:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	4619      	mov	r1, r3
 800071c:	480f      	ldr	r0, [pc, #60]	@ (800075c <MX_GPIO_Init+0xa8>)
 800071e:	f000 fad5 	bl	8000ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000722:	2320      	movs	r3, #32
 8000724:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000726:	2301      	movs	r3, #1
 8000728:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000732:	f107 030c 	add.w	r3, r7, #12
 8000736:	4619      	mov	r1, r3
 8000738:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800073c:	f000 fac6 	bl	8000ccc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	2100      	movs	r1, #0
 8000744:	2028      	movs	r0, #40	@ 0x28
 8000746:	f000 fa8a 	bl	8000c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800074a:	2028      	movs	r0, #40	@ 0x28
 800074c:	f000 faa3 	bl	8000c96 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000750:	bf00      	nop
 8000752:	3720      	adds	r7, #32
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40021000 	.word	0x40021000
 800075c:	48000800 	.word	0x48000800

08000760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000764:	b672      	cpsid	i
}
 8000766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000768:	bf00      	nop
 800076a:	e7fd      	b.n	8000768 <Error_Handler+0x8>

0800076c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000772:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <HAL_MspInit+0x44>)
 8000774:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000776:	4a0e      	ldr	r2, [pc, #56]	@ (80007b0 <HAL_MspInit+0x44>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6613      	str	r3, [r2, #96]	@ 0x60
 800077e:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <HAL_MspInit+0x44>)
 8000780:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078a:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <HAL_MspInit+0x44>)
 800078c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800078e:	4a08      	ldr	r2, [pc, #32]	@ (80007b0 <HAL_MspInit+0x44>)
 8000790:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000794:	6593      	str	r3, [r2, #88]	@ 0x58
 8000796:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <HAL_MspInit+0x44>)
 8000798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800079a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	40021000 	.word	0x40021000

080007b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b0ac      	sub	sp, #176	@ 0xb0
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007bc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	2288      	movs	r2, #136	@ 0x88
 80007d2:	2100      	movs	r1, #0
 80007d4:	4618      	mov	r0, r3
 80007d6:	f002 fd53 	bl	8003280 <memset>
  if(huart->Instance==USART2)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a21      	ldr	r2, [pc, #132]	@ (8000864 <HAL_UART_MspInit+0xb0>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d13b      	bne.n	800085c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80007e4:	2302      	movs	r3, #2
 80007e6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	4618      	mov	r0, r3
 80007f2:	f001 fac3 	bl	8001d7c <HAL_RCCEx_PeriphCLKConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80007fc:	f7ff ffb0 	bl	8000760 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000800:	4b19      	ldr	r3, [pc, #100]	@ (8000868 <HAL_UART_MspInit+0xb4>)
 8000802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000804:	4a18      	ldr	r2, [pc, #96]	@ (8000868 <HAL_UART_MspInit+0xb4>)
 8000806:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800080a:	6593      	str	r3, [r2, #88]	@ 0x58
 800080c:	4b16      	ldr	r3, [pc, #88]	@ (8000868 <HAL_UART_MspInit+0xb4>)
 800080e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000810:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000818:	4b13      	ldr	r3, [pc, #76]	@ (8000868 <HAL_UART_MspInit+0xb4>)
 800081a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081c:	4a12      	ldr	r2, [pc, #72]	@ (8000868 <HAL_UART_MspInit+0xb4>)
 800081e:	f043 0301 	orr.w	r3, r3, #1
 8000822:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000824:	4b10      	ldr	r3, [pc, #64]	@ (8000868 <HAL_UART_MspInit+0xb4>)
 8000826:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000828:	f003 0301 	and.w	r3, r3, #1
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000830:	230c      	movs	r3, #12
 8000832:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000836:	2302      	movs	r3, #2
 8000838:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000842:	2303      	movs	r3, #3
 8000844:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000848:	2307      	movs	r3, #7
 800084a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000852:	4619      	mov	r1, r3
 8000854:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000858:	f000 fa38 	bl	8000ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800085c:	bf00      	nop
 800085e:	37b0      	adds	r7, #176	@ 0xb0
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40004400 	.word	0x40004400
 8000868:	40021000 	.word	0x40021000

0800086c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <NMI_Handler+0x4>

08000874 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <HardFault_Handler+0x4>

0800087c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <MemManage_Handler+0x4>

08000884 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <BusFault_Handler+0x4>

0800088c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <UsageFault_Handler+0x4>

08000894 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr

080008a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c2:	f000 f8d1 	bl	8000a68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}

080008ca <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80008ce:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80008d2:	f000 fbd7 	bl	8001084 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <_sbrk>:
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	4a14      	ldr	r2, [pc, #80]	@ (8000938 <_sbrk+0x5c>)
 80008e6:	4b15      	ldr	r3, [pc, #84]	@ (800093c <_sbrk+0x60>)
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	617b      	str	r3, [r7, #20]
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	4b13      	ldr	r3, [pc, #76]	@ (8000940 <_sbrk+0x64>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d102      	bne.n	80008fe <_sbrk+0x22>
 80008f8:	4b11      	ldr	r3, [pc, #68]	@ (8000940 <_sbrk+0x64>)
 80008fa:	4a12      	ldr	r2, [pc, #72]	@ (8000944 <_sbrk+0x68>)
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	4b10      	ldr	r3, [pc, #64]	@ (8000940 <_sbrk+0x64>)
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4413      	add	r3, r2
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	429a      	cmp	r2, r3
 800090a:	d207      	bcs.n	800091c <_sbrk+0x40>
 800090c:	f002 fcc0 	bl	8003290 <__errno>
 8000910:	4603      	mov	r3, r0
 8000912:	220c      	movs	r2, #12
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	f04f 33ff 	mov.w	r3, #4294967295
 800091a:	e009      	b.n	8000930 <_sbrk+0x54>
 800091c:	4b08      	ldr	r3, [pc, #32]	@ (8000940 <_sbrk+0x64>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	4b07      	ldr	r3, [pc, #28]	@ (8000940 <_sbrk+0x64>)
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4413      	add	r3, r2
 800092a:	4a05      	ldr	r2, [pc, #20]	@ (8000940 <_sbrk+0x64>)
 800092c:	6013      	str	r3, [r2, #0]
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	4618      	mov	r0, r3
 8000932:	3718      	adds	r7, #24
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20018000 	.word	0x20018000
 800093c:	00000400 	.word	0x00000400
 8000940:	20000138 	.word	0x20000138
 8000944:	20000288 	.word	0x20000288

08000948 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800094c:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <SystemInit+0x20>)
 800094e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000952:	4a05      	ldr	r2, [pc, #20]	@ (8000968 <SystemInit+0x20>)
 8000954:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000958:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <Reset_Handler>:
 800096c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009a4 <LoopForever+0x2>
 8000970:	f7ff ffea 	bl	8000948 <SystemInit>
 8000974:	480c      	ldr	r0, [pc, #48]	@ (80009a8 <LoopForever+0x6>)
 8000976:	490d      	ldr	r1, [pc, #52]	@ (80009ac <LoopForever+0xa>)
 8000978:	4a0d      	ldr	r2, [pc, #52]	@ (80009b0 <LoopForever+0xe>)
 800097a:	2300      	movs	r3, #0
 800097c:	e002      	b.n	8000984 <LoopCopyDataInit>

0800097e <CopyDataInit>:
 800097e:	58d4      	ldr	r4, [r2, r3]
 8000980:	50c4      	str	r4, [r0, r3]
 8000982:	3304      	adds	r3, #4

08000984 <LoopCopyDataInit>:
 8000984:	18c4      	adds	r4, r0, r3
 8000986:	428c      	cmp	r4, r1
 8000988:	d3f9      	bcc.n	800097e <CopyDataInit>
 800098a:	4a0a      	ldr	r2, [pc, #40]	@ (80009b4 <LoopForever+0x12>)
 800098c:	4c0a      	ldr	r4, [pc, #40]	@ (80009b8 <LoopForever+0x16>)
 800098e:	2300      	movs	r3, #0
 8000990:	e001      	b.n	8000996 <LoopFillZerobss>

08000992 <FillZerobss>:
 8000992:	6013      	str	r3, [r2, #0]
 8000994:	3204      	adds	r2, #4

08000996 <LoopFillZerobss>:
 8000996:	42a2      	cmp	r2, r4
 8000998:	d3fb      	bcc.n	8000992 <FillZerobss>
 800099a:	f002 fc7f 	bl	800329c <__libc_init_array>
 800099e:	f7ff fe07 	bl	80005b0 <main>

080009a2 <LoopForever>:
 80009a2:	e7fe      	b.n	80009a2 <LoopForever>
 80009a4:	20018000 	.word	0x20018000
 80009a8:	20000000 	.word	0x20000000
 80009ac:	20000060 	.word	0x20000060
 80009b0:	08003c3c 	.word	0x08003c3c
 80009b4:	20000060 	.word	0x20000060
 80009b8:	20000288 	.word	0x20000288

080009bc <ADC1_2_IRQHandler>:
 80009bc:	e7fe      	b.n	80009bc <ADC1_2_IRQHandler>

080009be <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b082      	sub	sp, #8
 80009c2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009c4:	2300      	movs	r3, #0
 80009c6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c8:	2003      	movs	r0, #3
 80009ca:	f000 f93d 	bl	8000c48 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009ce:	200f      	movs	r0, #15
 80009d0:	f000 f80e 	bl	80009f0 <HAL_InitTick>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d002      	beq.n	80009e0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009da:	2301      	movs	r3, #1
 80009dc:	71fb      	strb	r3, [r7, #7]
 80009de:	e001      	b.n	80009e4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009e0:	f7ff fec4 	bl	800076c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009e4:	79fb      	ldrb	r3, [r7, #7]
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009f8:	2300      	movs	r3, #0
 80009fa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009fc:	4b17      	ldr	r3, [pc, #92]	@ (8000a5c <HAL_InitTick+0x6c>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d023      	beq.n	8000a4c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a04:	4b16      	ldr	r3, [pc, #88]	@ (8000a60 <HAL_InitTick+0x70>)
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	4b14      	ldr	r3, [pc, #80]	@ (8000a5c <HAL_InitTick+0x6c>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 f949 	bl	8000cb2 <HAL_SYSTICK_Config>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d10f      	bne.n	8000a46 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2b0f      	cmp	r3, #15
 8000a2a:	d809      	bhi.n	8000a40 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	6879      	ldr	r1, [r7, #4]
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295
 8000a34:	f000 f913 	bl	8000c5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a38:	4a0a      	ldr	r2, [pc, #40]	@ (8000a64 <HAL_InitTick+0x74>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6013      	str	r3, [r2, #0]
 8000a3e:	e007      	b.n	8000a50 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a40:	2301      	movs	r3, #1
 8000a42:	73fb      	strb	r3, [r7, #15]
 8000a44:	e004      	b.n	8000a50 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
 8000a48:	73fb      	strb	r3, [r7, #15]
 8000a4a:	e001      	b.n	8000a50 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	2000000c 	.word	0x2000000c
 8000a60:	20000004 	.word	0x20000004
 8000a64:	20000008 	.word	0x20000008

08000a68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <HAL_IncTick+0x20>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	461a      	mov	r2, r3
 8000a72:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <HAL_IncTick+0x24>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4413      	add	r3, r2
 8000a78:	4a04      	ldr	r2, [pc, #16]	@ (8000a8c <HAL_IncTick+0x24>)
 8000a7a:	6013      	str	r3, [r2, #0]
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	2000000c 	.word	0x2000000c
 8000a8c:	2000013c 	.word	0x2000013c

08000a90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  return uwTick;
 8000a94:	4b03      	ldr	r3, [pc, #12]	@ (8000aa4 <HAL_GetTick+0x14>)
 8000a96:	681b      	ldr	r3, [r3, #0]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	2000013c 	.word	0x2000013c

08000aa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	f003 0307 	and.w	r3, r3, #7
 8000ab6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8000aec <__NVIC_SetPriorityGrouping+0x44>)
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000abe:	68ba      	ldr	r2, [r7, #8]
 8000ac0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ad0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ad4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ad8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ada:	4a04      	ldr	r2, [pc, #16]	@ (8000aec <__NVIC_SetPriorityGrouping+0x44>)
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	60d3      	str	r3, [r2, #12]
}
 8000ae0:	bf00      	nop
 8000ae2:	3714      	adds	r7, #20
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af4:	4b04      	ldr	r3, [pc, #16]	@ (8000b08 <__NVIC_GetPriorityGrouping+0x18>)
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	0a1b      	lsrs	r3, r3, #8
 8000afa:	f003 0307 	and.w	r3, r3, #7
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	db0b      	blt.n	8000b36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	f003 021f 	and.w	r2, r3, #31
 8000b24:	4907      	ldr	r1, [pc, #28]	@ (8000b44 <__NVIC_EnableIRQ+0x38>)
 8000b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2a:	095b      	lsrs	r3, r3, #5
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	e000e100 	.word	0xe000e100

08000b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	6039      	str	r1, [r7, #0]
 8000b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	db0a      	blt.n	8000b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	b2da      	uxtb	r2, r3
 8000b60:	490c      	ldr	r1, [pc, #48]	@ (8000b94 <__NVIC_SetPriority+0x4c>)
 8000b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b66:	0112      	lsls	r2, r2, #4
 8000b68:	b2d2      	uxtb	r2, r2
 8000b6a:	440b      	add	r3, r1
 8000b6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b70:	e00a      	b.n	8000b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	4908      	ldr	r1, [pc, #32]	@ (8000b98 <__NVIC_SetPriority+0x50>)
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	f003 030f 	and.w	r3, r3, #15
 8000b7e:	3b04      	subs	r3, #4
 8000b80:	0112      	lsls	r2, r2, #4
 8000b82:	b2d2      	uxtb	r2, r2
 8000b84:	440b      	add	r3, r1
 8000b86:	761a      	strb	r2, [r3, #24]
}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	e000e100 	.word	0xe000e100
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b089      	sub	sp, #36	@ 0x24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	f1c3 0307 	rsb	r3, r3, #7
 8000bb6:	2b04      	cmp	r3, #4
 8000bb8:	bf28      	it	cs
 8000bba:	2304      	movcs	r3, #4
 8000bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	3304      	adds	r3, #4
 8000bc2:	2b06      	cmp	r3, #6
 8000bc4:	d902      	bls.n	8000bcc <NVIC_EncodePriority+0x30>
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	3b03      	subs	r3, #3
 8000bca:	e000      	b.n	8000bce <NVIC_EncodePriority+0x32>
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd4:	69bb      	ldr	r3, [r7, #24]
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	43da      	mvns	r2, r3
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	401a      	ands	r2, r3
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be4:	f04f 31ff 	mov.w	r1, #4294967295
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	fa01 f303 	lsl.w	r3, r1, r3
 8000bee:	43d9      	mvns	r1, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf4:	4313      	orrs	r3, r2
         );
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3724      	adds	r7, #36	@ 0x24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
	...

08000c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c14:	d301      	bcc.n	8000c1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c16:	2301      	movs	r3, #1
 8000c18:	e00f      	b.n	8000c3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c44 <SysTick_Config+0x40>)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c22:	210f      	movs	r1, #15
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	f7ff ff8e 	bl	8000b48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c2c:	4b05      	ldr	r3, [pc, #20]	@ (8000c44 <SysTick_Config+0x40>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c32:	4b04      	ldr	r3, [pc, #16]	@ (8000c44 <SysTick_Config+0x40>)
 8000c34:	2207      	movs	r2, #7
 8000c36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	e000e010 	.word	0xe000e010

08000c48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f7ff ff29 	bl	8000aa8 <__NVIC_SetPriorityGrouping>
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b086      	sub	sp, #24
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	4603      	mov	r3, r0
 8000c66:	60b9      	str	r1, [r7, #8]
 8000c68:	607a      	str	r2, [r7, #4]
 8000c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c70:	f7ff ff3e 	bl	8000af0 <__NVIC_GetPriorityGrouping>
 8000c74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	68b9      	ldr	r1, [r7, #8]
 8000c7a:	6978      	ldr	r0, [r7, #20]
 8000c7c:	f7ff ff8e 	bl	8000b9c <NVIC_EncodePriority>
 8000c80:	4602      	mov	r2, r0
 8000c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c86:	4611      	mov	r1, r2
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff ff5d 	bl	8000b48 <__NVIC_SetPriority>
}
 8000c8e:	bf00      	nop
 8000c90:	3718      	adds	r7, #24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff ff31 	bl	8000b0c <__NVIC_EnableIRQ>
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f7ff ffa2 	bl	8000c04 <SysTick_Config>
 8000cc0:	4603      	mov	r3, r0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b087      	sub	sp, #28
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cda:	e17f      	b.n	8000fdc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce8:	4013      	ands	r3, r2
 8000cea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	f000 8171 	beq.w	8000fd6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f003 0303 	and.w	r3, r3, #3
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d005      	beq.n	8000d0c <HAL_GPIO_Init+0x40>
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f003 0303 	and.w	r3, r3, #3
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d130      	bne.n	8000d6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	2203      	movs	r2, #3
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4013      	ands	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	68da      	ldr	r2, [r3, #12]
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d42:	2201      	movs	r2, #1
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	091b      	lsrs	r3, r3, #4
 8000d58:	f003 0201 	and.w	r2, r3, #1
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f003 0303 	and.w	r3, r3, #3
 8000d76:	2b03      	cmp	r3, #3
 8000d78:	d118      	bne.n	8000dac <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000d80:	2201      	movs	r2, #1
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	08db      	lsrs	r3, r3, #3
 8000d96:	f003 0201 	and.w	r2, r3, #1
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f003 0303 	and.w	r3, r3, #3
 8000db4:	2b03      	cmp	r3, #3
 8000db6:	d017      	beq.n	8000de8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	2203      	movs	r2, #3
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	689a      	ldr	r2, [r3, #8]
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f003 0303 	and.w	r3, r3, #3
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d123      	bne.n	8000e3c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	08da      	lsrs	r2, r3, #3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3208      	adds	r2, #8
 8000dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e00:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	f003 0307 	and.w	r3, r3, #7
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	220f      	movs	r2, #15
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	43db      	mvns	r3, r3
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4013      	ands	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	691a      	ldr	r2, [r3, #16]
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	08da      	lsrs	r2, r3, #3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	3208      	adds	r2, #8
 8000e36:	6939      	ldr	r1, [r7, #16]
 8000e38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	2203      	movs	r2, #3
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4013      	ands	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f003 0203 	and.w	r2, r3, #3
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	f000 80ac 	beq.w	8000fd6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e7e:	4b5f      	ldr	r3, [pc, #380]	@ (8000ffc <HAL_GPIO_Init+0x330>)
 8000e80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e82:	4a5e      	ldr	r2, [pc, #376]	@ (8000ffc <HAL_GPIO_Init+0x330>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e8a:	4b5c      	ldr	r3, [pc, #368]	@ (8000ffc <HAL_GPIO_Init+0x330>)
 8000e8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e96:	4a5a      	ldr	r2, [pc, #360]	@ (8001000 <HAL_GPIO_Init+0x334>)
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	089b      	lsrs	r3, r3, #2
 8000e9c:	3302      	adds	r3, #2
 8000e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	f003 0303 	and.w	r3, r3, #3
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	220f      	movs	r2, #15
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000ec0:	d025      	beq.n	8000f0e <HAL_GPIO_Init+0x242>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a4f      	ldr	r2, [pc, #316]	@ (8001004 <HAL_GPIO_Init+0x338>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d01f      	beq.n	8000f0a <HAL_GPIO_Init+0x23e>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a4e      	ldr	r2, [pc, #312]	@ (8001008 <HAL_GPIO_Init+0x33c>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d019      	beq.n	8000f06 <HAL_GPIO_Init+0x23a>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a4d      	ldr	r2, [pc, #308]	@ (800100c <HAL_GPIO_Init+0x340>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d013      	beq.n	8000f02 <HAL_GPIO_Init+0x236>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a4c      	ldr	r2, [pc, #304]	@ (8001010 <HAL_GPIO_Init+0x344>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d00d      	beq.n	8000efe <HAL_GPIO_Init+0x232>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a4b      	ldr	r2, [pc, #300]	@ (8001014 <HAL_GPIO_Init+0x348>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d007      	beq.n	8000efa <HAL_GPIO_Init+0x22e>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a4a      	ldr	r2, [pc, #296]	@ (8001018 <HAL_GPIO_Init+0x34c>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d101      	bne.n	8000ef6 <HAL_GPIO_Init+0x22a>
 8000ef2:	2306      	movs	r3, #6
 8000ef4:	e00c      	b.n	8000f10 <HAL_GPIO_Init+0x244>
 8000ef6:	2307      	movs	r3, #7
 8000ef8:	e00a      	b.n	8000f10 <HAL_GPIO_Init+0x244>
 8000efa:	2305      	movs	r3, #5
 8000efc:	e008      	b.n	8000f10 <HAL_GPIO_Init+0x244>
 8000efe:	2304      	movs	r3, #4
 8000f00:	e006      	b.n	8000f10 <HAL_GPIO_Init+0x244>
 8000f02:	2303      	movs	r3, #3
 8000f04:	e004      	b.n	8000f10 <HAL_GPIO_Init+0x244>
 8000f06:	2302      	movs	r3, #2
 8000f08:	e002      	b.n	8000f10 <HAL_GPIO_Init+0x244>
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e000      	b.n	8000f10 <HAL_GPIO_Init+0x244>
 8000f0e:	2300      	movs	r3, #0
 8000f10:	697a      	ldr	r2, [r7, #20]
 8000f12:	f002 0203 	and.w	r2, r2, #3
 8000f16:	0092      	lsls	r2, r2, #2
 8000f18:	4093      	lsls	r3, r2
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f20:	4937      	ldr	r1, [pc, #220]	@ (8001000 <HAL_GPIO_Init+0x334>)
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	089b      	lsrs	r3, r3, #2
 8000f26:	3302      	adds	r3, #2
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f2e:	4b3b      	ldr	r3, [pc, #236]	@ (800101c <HAL_GPIO_Init+0x350>)
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	43db      	mvns	r3, r3
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d003      	beq.n	8000f52 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f52:	4a32      	ldr	r2, [pc, #200]	@ (800101c <HAL_GPIO_Init+0x350>)
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f58:	4b30      	ldr	r3, [pc, #192]	@ (800101c <HAL_GPIO_Init+0x350>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	43db      	mvns	r3, r3
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d003      	beq.n	8000f7c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f7c:	4a27      	ldr	r2, [pc, #156]	@ (800101c <HAL_GPIO_Init+0x350>)
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f82:	4b26      	ldr	r3, [pc, #152]	@ (800101c <HAL_GPIO_Init+0x350>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fa6:	4a1d      	ldr	r2, [pc, #116]	@ (800101c <HAL_GPIO_Init+0x350>)
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000fac:	4b1b      	ldr	r3, [pc, #108]	@ (800101c <HAL_GPIO_Init+0x350>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d003      	beq.n	8000fd0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fd0:	4a12      	ldr	r2, [pc, #72]	@ (800101c <HAL_GPIO_Init+0x350>)
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	f47f ae78 	bne.w	8000cdc <HAL_GPIO_Init+0x10>
  }
}
 8000fec:	bf00      	nop
 8000fee:	bf00      	nop
 8000ff0:	371c      	adds	r7, #28
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	40021000 	.word	0x40021000
 8001000:	40010000 	.word	0x40010000
 8001004:	48000400 	.word	0x48000400
 8001008:	48000800 	.word	0x48000800
 800100c:	48000c00 	.word	0x48000c00
 8001010:	48001000 	.word	0x48001000
 8001014:	48001400 	.word	0x48001400
 8001018:	48001800 	.word	0x48001800
 800101c:	40010400 	.word	0x40010400

08001020 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	807b      	strh	r3, [r7, #2]
 800102c:	4613      	mov	r3, r2
 800102e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001030:	787b      	ldrb	r3, [r7, #1]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d003      	beq.n	800103e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001036:	887a      	ldrh	r2, [r7, #2]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800103c:	e002      	b.n	8001044 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800103e:	887a      	ldrh	r2, [r7, #2]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	695b      	ldr	r3, [r3, #20]
 8001060:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001062:	887a      	ldrh	r2, [r7, #2]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4013      	ands	r3, r2
 8001068:	041a      	lsls	r2, r3, #16
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	43d9      	mvns	r1, r3
 800106e:	887b      	ldrh	r3, [r7, #2]
 8001070:	400b      	ands	r3, r1
 8001072:	431a      	orrs	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	619a      	str	r2, [r3, #24]
}
 8001078:	bf00      	nop
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800108e:	4b08      	ldr	r3, [pc, #32]	@ (80010b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001090:	695a      	ldr	r2, [r3, #20]
 8001092:	88fb      	ldrh	r3, [r7, #6]
 8001094:	4013      	ands	r3, r2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d006      	beq.n	80010a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800109a:	4a05      	ldr	r2, [pc, #20]	@ (80010b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800109c:	88fb      	ldrh	r3, [r7, #6]
 800109e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010a0:	88fb      	ldrh	r3, [r7, #6]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fa5c 	bl	8000560 <HAL_GPIO_EXTI_Callback>
  }
}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40010400 	.word	0x40010400

080010b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010b8:	4b04      	ldr	r3, [pc, #16]	@ (80010cc <HAL_PWREx_GetVoltageRange+0x18>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	40007000 	.word	0x40007000

080010d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80010de:	d130      	bne.n	8001142 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80010e0:	4b23      	ldr	r3, [pc, #140]	@ (8001170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80010e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80010ec:	d038      	beq.n	8001160 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ee:	4b20      	ldr	r3, [pc, #128]	@ (8001170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80010f6:	4a1e      	ldr	r2, [pc, #120]	@ (8001170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001174 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2232      	movs	r2, #50	@ 0x32
 8001104:	fb02 f303 	mul.w	r3, r2, r3
 8001108:	4a1b      	ldr	r2, [pc, #108]	@ (8001178 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800110a:	fba2 2303 	umull	r2, r3, r2, r3
 800110e:	0c9b      	lsrs	r3, r3, #18
 8001110:	3301      	adds	r3, #1
 8001112:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001114:	e002      	b.n	800111c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	3b01      	subs	r3, #1
 800111a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800111c:	4b14      	ldr	r3, [pc, #80]	@ (8001170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800111e:	695b      	ldr	r3, [r3, #20]
 8001120:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001124:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001128:	d102      	bne.n	8001130 <HAL_PWREx_ControlVoltageScaling+0x60>
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1f2      	bne.n	8001116 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001130:	4b0f      	ldr	r3, [pc, #60]	@ (8001170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001132:	695b      	ldr	r3, [r3, #20]
 8001134:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001138:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800113c:	d110      	bne.n	8001160 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e00f      	b.n	8001162 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001142:	4b0b      	ldr	r3, [pc, #44]	@ (8001170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800114a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800114e:	d007      	beq.n	8001160 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001150:	4b07      	ldr	r3, [pc, #28]	@ (8001170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001158:	4a05      	ldr	r2, [pc, #20]	@ (8001170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800115a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800115e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	40007000 	.word	0x40007000
 8001174:	20000004 	.word	0x20000004
 8001178:	431bde83 	.word	0x431bde83

0800117c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d101      	bne.n	800118e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e3ca      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800118e:	4b97      	ldr	r3, [pc, #604]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f003 030c 	and.w	r3, r3, #12
 8001196:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001198:	4b94      	ldr	r3, [pc, #592]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	f003 0303 	and.w	r3, r3, #3
 80011a0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0310 	and.w	r3, r3, #16
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f000 80e4 	beq.w	8001378 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d007      	beq.n	80011c6 <HAL_RCC_OscConfig+0x4a>
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	2b0c      	cmp	r3, #12
 80011ba:	f040 808b 	bne.w	80012d4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	f040 8087 	bne.w	80012d4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011c6:	4b89      	ldr	r3, [pc, #548]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d005      	beq.n	80011de <HAL_RCC_OscConfig+0x62>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d101      	bne.n	80011de <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e3a2      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6a1a      	ldr	r2, [r3, #32]
 80011e2:	4b82      	ldr	r3, [pc, #520]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0308 	and.w	r3, r3, #8
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d004      	beq.n	80011f8 <HAL_RCC_OscConfig+0x7c>
 80011ee:	4b7f      	ldr	r3, [pc, #508]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80011f6:	e005      	b.n	8001204 <HAL_RCC_OscConfig+0x88>
 80011f8:	4b7c      	ldr	r3, [pc, #496]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 80011fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011fe:	091b      	lsrs	r3, r3, #4
 8001200:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001204:	4293      	cmp	r3, r2
 8001206:	d223      	bcs.n	8001250 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a1b      	ldr	r3, [r3, #32]
 800120c:	4618      	mov	r0, r3
 800120e:	f000 fd55 	bl	8001cbc <RCC_SetFlashLatencyFromMSIRange>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e383      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800121c:	4b73      	ldr	r3, [pc, #460]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a72      	ldr	r2, [pc, #456]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 8001222:	f043 0308 	orr.w	r3, r3, #8
 8001226:	6013      	str	r3, [r2, #0]
 8001228:	4b70      	ldr	r3, [pc, #448]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6a1b      	ldr	r3, [r3, #32]
 8001234:	496d      	ldr	r1, [pc, #436]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 8001236:	4313      	orrs	r3, r2
 8001238:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800123a:	4b6c      	ldr	r3, [pc, #432]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	021b      	lsls	r3, r3, #8
 8001248:	4968      	ldr	r1, [pc, #416]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 800124a:	4313      	orrs	r3, r2
 800124c:	604b      	str	r3, [r1, #4]
 800124e:	e025      	b.n	800129c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001250:	4b66      	ldr	r3, [pc, #408]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a65      	ldr	r2, [pc, #404]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 8001256:	f043 0308 	orr.w	r3, r3, #8
 800125a:	6013      	str	r3, [r2, #0]
 800125c:	4b63      	ldr	r3, [pc, #396]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a1b      	ldr	r3, [r3, #32]
 8001268:	4960      	ldr	r1, [pc, #384]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 800126a:	4313      	orrs	r3, r2
 800126c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800126e:	4b5f      	ldr	r3, [pc, #380]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	021b      	lsls	r3, r3, #8
 800127c:	495b      	ldr	r1, [pc, #364]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 800127e:	4313      	orrs	r3, r2
 8001280:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d109      	bne.n	800129c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a1b      	ldr	r3, [r3, #32]
 800128c:	4618      	mov	r0, r3
 800128e:	f000 fd15 	bl	8001cbc <RCC_SetFlashLatencyFromMSIRange>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e343      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800129c:	f000 fc4a 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 80012a0:	4602      	mov	r2, r0
 80012a2:	4b52      	ldr	r3, [pc, #328]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	091b      	lsrs	r3, r3, #4
 80012a8:	f003 030f 	and.w	r3, r3, #15
 80012ac:	4950      	ldr	r1, [pc, #320]	@ (80013f0 <HAL_RCC_OscConfig+0x274>)
 80012ae:	5ccb      	ldrb	r3, [r1, r3]
 80012b0:	f003 031f 	and.w	r3, r3, #31
 80012b4:	fa22 f303 	lsr.w	r3, r2, r3
 80012b8:	4a4e      	ldr	r2, [pc, #312]	@ (80013f4 <HAL_RCC_OscConfig+0x278>)
 80012ba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012bc:	4b4e      	ldr	r3, [pc, #312]	@ (80013f8 <HAL_RCC_OscConfig+0x27c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff fb95 	bl	80009f0 <HAL_InitTick>
 80012c6:	4603      	mov	r3, r0
 80012c8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d052      	beq.n	8001376 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	e327      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d032      	beq.n	8001342 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012dc:	4b43      	ldr	r3, [pc, #268]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a42      	ldr	r2, [pc, #264]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012e8:	f7ff fbd2 	bl	8000a90 <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012f0:	f7ff fbce 	bl	8000a90 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e310      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001302:	4b3a      	ldr	r3, [pc, #232]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800130e:	4b37      	ldr	r3, [pc, #220]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a36      	ldr	r2, [pc, #216]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 8001314:	f043 0308 	orr.w	r3, r3, #8
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	4b34      	ldr	r3, [pc, #208]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a1b      	ldr	r3, [r3, #32]
 8001326:	4931      	ldr	r1, [pc, #196]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 8001328:	4313      	orrs	r3, r2
 800132a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800132c:	4b2f      	ldr	r3, [pc, #188]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	69db      	ldr	r3, [r3, #28]
 8001338:	021b      	lsls	r3, r3, #8
 800133a:	492c      	ldr	r1, [pc, #176]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 800133c:	4313      	orrs	r3, r2
 800133e:	604b      	str	r3, [r1, #4]
 8001340:	e01a      	b.n	8001378 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001342:	4b2a      	ldr	r3, [pc, #168]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a29      	ldr	r2, [pc, #164]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 8001348:	f023 0301 	bic.w	r3, r3, #1
 800134c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800134e:	f7ff fb9f 	bl	8000a90 <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001356:	f7ff fb9b 	bl	8000a90 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e2dd      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001368:	4b20      	ldr	r3, [pc, #128]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1f0      	bne.n	8001356 <HAL_RCC_OscConfig+0x1da>
 8001374:	e000      	b.n	8001378 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001376:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	2b00      	cmp	r3, #0
 8001382:	d074      	beq.n	800146e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	2b08      	cmp	r3, #8
 8001388:	d005      	beq.n	8001396 <HAL_RCC_OscConfig+0x21a>
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	2b0c      	cmp	r3, #12
 800138e:	d10e      	bne.n	80013ae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	2b03      	cmp	r3, #3
 8001394:	d10b      	bne.n	80013ae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001396:	4b15      	ldr	r3, [pc, #84]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d064      	beq.n	800146c <HAL_RCC_OscConfig+0x2f0>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d160      	bne.n	800146c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e2ba      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013b6:	d106      	bne.n	80013c6 <HAL_RCC_OscConfig+0x24a>
 80013b8:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0b      	ldr	r2, [pc, #44]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 80013be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	e026      	b.n	8001414 <HAL_RCC_OscConfig+0x298>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013ce:	d115      	bne.n	80013fc <HAL_RCC_OscConfig+0x280>
 80013d0:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a05      	ldr	r2, [pc, #20]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 80013d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	4b03      	ldr	r3, [pc, #12]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a02      	ldr	r2, [pc, #8]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 80013e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013e6:	6013      	str	r3, [r2, #0]
 80013e8:	e014      	b.n	8001414 <HAL_RCC_OscConfig+0x298>
 80013ea:	bf00      	nop
 80013ec:	40021000 	.word	0x40021000
 80013f0:	08003bb0 	.word	0x08003bb0
 80013f4:	20000004 	.word	0x20000004
 80013f8:	20000008 	.word	0x20000008
 80013fc:	4ba0      	ldr	r3, [pc, #640]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a9f      	ldr	r2, [pc, #636]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 8001402:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001406:	6013      	str	r3, [r2, #0]
 8001408:	4b9d      	ldr	r3, [pc, #628]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a9c      	ldr	r2, [pc, #624]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 800140e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001412:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d013      	beq.n	8001444 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141c:	f7ff fb38 	bl	8000a90 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001424:	f7ff fb34 	bl	8000a90 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b64      	cmp	r3, #100	@ 0x64
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e276      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001436:	4b92      	ldr	r3, [pc, #584]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0f0      	beq.n	8001424 <HAL_RCC_OscConfig+0x2a8>
 8001442:	e014      	b.n	800146e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001444:	f7ff fb24 	bl	8000a90 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800144c:	f7ff fb20 	bl	8000a90 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b64      	cmp	r3, #100	@ 0x64
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e262      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800145e:	4b88      	ldr	r3, [pc, #544]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1f0      	bne.n	800144c <HAL_RCC_OscConfig+0x2d0>
 800146a:	e000      	b.n	800146e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800146c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d060      	beq.n	800153c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	2b04      	cmp	r3, #4
 800147e:	d005      	beq.n	800148c <HAL_RCC_OscConfig+0x310>
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	2b0c      	cmp	r3, #12
 8001484:	d119      	bne.n	80014ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	2b02      	cmp	r3, #2
 800148a:	d116      	bne.n	80014ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800148c:	4b7c      	ldr	r3, [pc, #496]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001494:	2b00      	cmp	r3, #0
 8001496:	d005      	beq.n	80014a4 <HAL_RCC_OscConfig+0x328>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d101      	bne.n	80014a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e23f      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a4:	4b76      	ldr	r3, [pc, #472]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	061b      	lsls	r3, r3, #24
 80014b2:	4973      	ldr	r1, [pc, #460]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014b8:	e040      	b.n	800153c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d023      	beq.n	800150a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014c2:	4b6f      	ldr	r3, [pc, #444]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a6e      	ldr	r2, [pc, #440]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 80014c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ce:	f7ff fadf 	bl	8000a90 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d6:	f7ff fadb 	bl	8000a90 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e21d      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014e8:	4b65      	ldr	r3, [pc, #404]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0f0      	beq.n	80014d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f4:	4b62      	ldr	r3, [pc, #392]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	061b      	lsls	r3, r3, #24
 8001502:	495f      	ldr	r1, [pc, #380]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 8001504:	4313      	orrs	r3, r2
 8001506:	604b      	str	r3, [r1, #4]
 8001508:	e018      	b.n	800153c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800150a:	4b5d      	ldr	r3, [pc, #372]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a5c      	ldr	r2, [pc, #368]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 8001510:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001514:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001516:	f7ff fabb 	bl	8000a90 <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800151e:	f7ff fab7 	bl	8000a90 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e1f9      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001530:	4b53      	ldr	r3, [pc, #332]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1f0      	bne.n	800151e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0308 	and.w	r3, r3, #8
 8001544:	2b00      	cmp	r3, #0
 8001546:	d03c      	beq.n	80015c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	695b      	ldr	r3, [r3, #20]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d01c      	beq.n	800158a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001550:	4b4b      	ldr	r3, [pc, #300]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 8001552:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001556:	4a4a      	ldr	r2, [pc, #296]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001560:	f7ff fa96 	bl	8000a90 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001568:	f7ff fa92 	bl	8000a90 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e1d4      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800157a:	4b41      	ldr	r3, [pc, #260]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 800157c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0ef      	beq.n	8001568 <HAL_RCC_OscConfig+0x3ec>
 8001588:	e01b      	b.n	80015c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800158a:	4b3d      	ldr	r3, [pc, #244]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 800158c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001590:	4a3b      	ldr	r2, [pc, #236]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 8001592:	f023 0301 	bic.w	r3, r3, #1
 8001596:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800159a:	f7ff fa79 	bl	8000a90 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015a2:	f7ff fa75 	bl	8000a90 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e1b7      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015b4:	4b32      	ldr	r3, [pc, #200]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 80015b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1ef      	bne.n	80015a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f000 80a6 	beq.w	800171c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015d0:	2300      	movs	r3, #0
 80015d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 80015d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d10d      	bne.n	80015fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015e0:	4b27      	ldr	r3, [pc, #156]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 80015e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015e4:	4a26      	ldr	r2, [pc, #152]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 80015e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80015ec:	4b24      	ldr	r3, [pc, #144]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 80015ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015f8:	2301      	movs	r3, #1
 80015fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015fc:	4b21      	ldr	r3, [pc, #132]	@ (8001684 <HAL_RCC_OscConfig+0x508>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001604:	2b00      	cmp	r3, #0
 8001606:	d118      	bne.n	800163a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001608:	4b1e      	ldr	r3, [pc, #120]	@ (8001684 <HAL_RCC_OscConfig+0x508>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a1d      	ldr	r2, [pc, #116]	@ (8001684 <HAL_RCC_OscConfig+0x508>)
 800160e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001612:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001614:	f7ff fa3c 	bl	8000a90 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800161c:	f7ff fa38 	bl	8000a90 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e17a      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800162e:	4b15      	ldr	r3, [pc, #84]	@ (8001684 <HAL_RCC_OscConfig+0x508>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0f0      	beq.n	800161c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d108      	bne.n	8001654 <HAL_RCC_OscConfig+0x4d8>
 8001642:	4b0f      	ldr	r3, [pc, #60]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 8001644:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001648:	4a0d      	ldr	r2, [pc, #52]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001652:	e029      	b.n	80016a8 <HAL_RCC_OscConfig+0x52c>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	2b05      	cmp	r3, #5
 800165a:	d115      	bne.n	8001688 <HAL_RCC_OscConfig+0x50c>
 800165c:	4b08      	ldr	r3, [pc, #32]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 800165e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001662:	4a07      	ldr	r2, [pc, #28]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 8001664:	f043 0304 	orr.w	r3, r3, #4
 8001668:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800166c:	4b04      	ldr	r3, [pc, #16]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 800166e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001672:	4a03      	ldr	r2, [pc, #12]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800167c:	e014      	b.n	80016a8 <HAL_RCC_OscConfig+0x52c>
 800167e:	bf00      	nop
 8001680:	40021000 	.word	0x40021000
 8001684:	40007000 	.word	0x40007000
 8001688:	4b9c      	ldr	r3, [pc, #624]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 800168a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800168e:	4a9b      	ldr	r2, [pc, #620]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 8001690:	f023 0301 	bic.w	r3, r3, #1
 8001694:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001698:	4b98      	ldr	r3, [pc, #608]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 800169a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800169e:	4a97      	ldr	r2, [pc, #604]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 80016a0:	f023 0304 	bic.w	r3, r3, #4
 80016a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d016      	beq.n	80016de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b0:	f7ff f9ee 	bl	8000a90 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016b6:	e00a      	b.n	80016ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b8:	f7ff f9ea 	bl	8000a90 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e12a      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016ce:	4b8b      	ldr	r3, [pc, #556]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 80016d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d0ed      	beq.n	80016b8 <HAL_RCC_OscConfig+0x53c>
 80016dc:	e015      	b.n	800170a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016de:	f7ff f9d7 	bl	8000a90 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016e4:	e00a      	b.n	80016fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e6:	f7ff f9d3 	bl	8000a90 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e113      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016fc:	4b7f      	ldr	r3, [pc, #508]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 80016fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1ed      	bne.n	80016e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800170a:	7ffb      	ldrb	r3, [r7, #31]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d105      	bne.n	800171c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001710:	4b7a      	ldr	r3, [pc, #488]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 8001712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001714:	4a79      	ldr	r2, [pc, #484]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 8001716:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800171a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001720:	2b00      	cmp	r3, #0
 8001722:	f000 80fe 	beq.w	8001922 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800172a:	2b02      	cmp	r3, #2
 800172c:	f040 80d0 	bne.w	80018d0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001730:	4b72      	ldr	r3, [pc, #456]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	f003 0203 	and.w	r2, r3, #3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001740:	429a      	cmp	r2, r3
 8001742:	d130      	bne.n	80017a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	3b01      	subs	r3, #1
 8001750:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001752:	429a      	cmp	r2, r3
 8001754:	d127      	bne.n	80017a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001760:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001762:	429a      	cmp	r2, r3
 8001764:	d11f      	bne.n	80017a6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001770:	2a07      	cmp	r2, #7
 8001772:	bf14      	ite	ne
 8001774:	2201      	movne	r2, #1
 8001776:	2200      	moveq	r2, #0
 8001778:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800177a:	4293      	cmp	r3, r2
 800177c:	d113      	bne.n	80017a6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001788:	085b      	lsrs	r3, r3, #1
 800178a:	3b01      	subs	r3, #1
 800178c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800178e:	429a      	cmp	r2, r3
 8001790:	d109      	bne.n	80017a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179c:	085b      	lsrs	r3, r3, #1
 800179e:	3b01      	subs	r3, #1
 80017a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d06e      	beq.n	8001884 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	2b0c      	cmp	r3, #12
 80017aa:	d069      	beq.n	8001880 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80017ac:	4b53      	ldr	r3, [pc, #332]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d105      	bne.n	80017c4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80017b8:	4b50      	ldr	r3, [pc, #320]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e0ad      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017c8:	4b4c      	ldr	r3, [pc, #304]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a4b      	ldr	r2, [pc, #300]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 80017ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017d2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017d4:	f7ff f95c 	bl	8000a90 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017dc:	f7ff f958 	bl	8000a90 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e09a      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017ee:	4b43      	ldr	r3, [pc, #268]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f0      	bne.n	80017dc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017fa:	4b40      	ldr	r3, [pc, #256]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 80017fc:	68da      	ldr	r2, [r3, #12]
 80017fe:	4b40      	ldr	r3, [pc, #256]	@ (8001900 <HAL_RCC_OscConfig+0x784>)
 8001800:	4013      	ands	r3, r2
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800180a:	3a01      	subs	r2, #1
 800180c:	0112      	lsls	r2, r2, #4
 800180e:	4311      	orrs	r1, r2
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001814:	0212      	lsls	r2, r2, #8
 8001816:	4311      	orrs	r1, r2
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800181c:	0852      	lsrs	r2, r2, #1
 800181e:	3a01      	subs	r2, #1
 8001820:	0552      	lsls	r2, r2, #21
 8001822:	4311      	orrs	r1, r2
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001828:	0852      	lsrs	r2, r2, #1
 800182a:	3a01      	subs	r2, #1
 800182c:	0652      	lsls	r2, r2, #25
 800182e:	4311      	orrs	r1, r2
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001834:	0912      	lsrs	r2, r2, #4
 8001836:	0452      	lsls	r2, r2, #17
 8001838:	430a      	orrs	r2, r1
 800183a:	4930      	ldr	r1, [pc, #192]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 800183c:	4313      	orrs	r3, r2
 800183e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001840:	4b2e      	ldr	r3, [pc, #184]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a2d      	ldr	r2, [pc, #180]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 8001846:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800184a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800184c:	4b2b      	ldr	r3, [pc, #172]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	4a2a      	ldr	r2, [pc, #168]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 8001852:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001856:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001858:	f7ff f91a 	bl	8000a90 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001860:	f7ff f916 	bl	8000a90 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e058      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001872:	4b22      	ldr	r3, [pc, #136]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f0      	beq.n	8001860 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800187e:	e050      	b.n	8001922 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e04f      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001884:	4b1d      	ldr	r3, [pc, #116]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d148      	bne.n	8001922 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001890:	4b1a      	ldr	r3, [pc, #104]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a19      	ldr	r2, [pc, #100]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 8001896:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800189a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800189c:	4b17      	ldr	r3, [pc, #92]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	4a16      	ldr	r2, [pc, #88]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 80018a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018a8:	f7ff f8f2 	bl	8000a90 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b0:	f7ff f8ee 	bl	8000a90 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e030      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018c2:	4b0e      	ldr	r3, [pc, #56]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0f0      	beq.n	80018b0 <HAL_RCC_OscConfig+0x734>
 80018ce:	e028      	b.n	8001922 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	2b0c      	cmp	r3, #12
 80018d4:	d023      	beq.n	800191e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d6:	4b09      	ldr	r3, [pc, #36]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a08      	ldr	r2, [pc, #32]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 80018dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e2:	f7ff f8d5 	bl	8000a90 <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018e8:	e00c      	b.n	8001904 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ea:	f7ff f8d1 	bl	8000a90 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d905      	bls.n	8001904 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e013      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
 80018fc:	40021000 	.word	0x40021000
 8001900:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001904:	4b09      	ldr	r3, [pc, #36]	@ (800192c <HAL_RCC_OscConfig+0x7b0>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1ec      	bne.n	80018ea <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001910:	4b06      	ldr	r3, [pc, #24]	@ (800192c <HAL_RCC_OscConfig+0x7b0>)
 8001912:	68da      	ldr	r2, [r3, #12]
 8001914:	4905      	ldr	r1, [pc, #20]	@ (800192c <HAL_RCC_OscConfig+0x7b0>)
 8001916:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <HAL_RCC_OscConfig+0x7b4>)
 8001918:	4013      	ands	r3, r2
 800191a:	60cb      	str	r3, [r1, #12]
 800191c:	e001      	b.n	8001922 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e000      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	3720      	adds	r7, #32
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40021000 	.word	0x40021000
 8001930:	feeefffc 	.word	0xfeeefffc

08001934 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d101      	bne.n	8001948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e0e7      	b.n	8001b18 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001948:	4b75      	ldr	r3, [pc, #468]	@ (8001b20 <HAL_RCC_ClockConfig+0x1ec>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	429a      	cmp	r2, r3
 8001954:	d910      	bls.n	8001978 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001956:	4b72      	ldr	r3, [pc, #456]	@ (8001b20 <HAL_RCC_ClockConfig+0x1ec>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f023 0207 	bic.w	r2, r3, #7
 800195e:	4970      	ldr	r1, [pc, #448]	@ (8001b20 <HAL_RCC_ClockConfig+0x1ec>)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	4313      	orrs	r3, r2
 8001964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001966:	4b6e      	ldr	r3, [pc, #440]	@ (8001b20 <HAL_RCC_ClockConfig+0x1ec>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	429a      	cmp	r2, r3
 8001972:	d001      	beq.n	8001978 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e0cf      	b.n	8001b18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d010      	beq.n	80019a6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	4b66      	ldr	r3, [pc, #408]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001990:	429a      	cmp	r2, r3
 8001992:	d908      	bls.n	80019a6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001994:	4b63      	ldr	r3, [pc, #396]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	4960      	ldr	r1, [pc, #384]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d04c      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b03      	cmp	r3, #3
 80019b8:	d107      	bne.n	80019ca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ba:	4b5a      	ldr	r3, [pc, #360]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d121      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e0a6      	b.n	8001b18 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d107      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019d2:	4b54      	ldr	r3, [pc, #336]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d115      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e09a      	b.n	8001b18 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d107      	bne.n	80019fa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019ea:	4b4e      	ldr	r3, [pc, #312]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d109      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e08e      	b.n	8001b18 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019fa:	4b4a      	ldr	r3, [pc, #296]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e086      	b.n	8001b18 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a0a:	4b46      	ldr	r3, [pc, #280]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f023 0203 	bic.w	r2, r3, #3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	4943      	ldr	r1, [pc, #268]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a1c:	f7ff f838 	bl	8000a90 <HAL_GetTick>
 8001a20:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a22:	e00a      	b.n	8001a3a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a24:	f7ff f834 	bl	8000a90 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e06e      	b.n	8001b18 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3a:	4b3a      	ldr	r3, [pc, #232]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f003 020c 	and.w	r2, r3, #12
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d1eb      	bne.n	8001a24 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d010      	beq.n	8001a7a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	4b31      	ldr	r3, [pc, #196]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d208      	bcs.n	8001a7a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a68:	4b2e      	ldr	r3, [pc, #184]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	492b      	ldr	r1, [pc, #172]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a7a:	4b29      	ldr	r3, [pc, #164]	@ (8001b20 <HAL_RCC_ClockConfig+0x1ec>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d210      	bcs.n	8001aaa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a88:	4b25      	ldr	r3, [pc, #148]	@ (8001b20 <HAL_RCC_ClockConfig+0x1ec>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f023 0207 	bic.w	r2, r3, #7
 8001a90:	4923      	ldr	r1, [pc, #140]	@ (8001b20 <HAL_RCC_ClockConfig+0x1ec>)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a98:	4b21      	ldr	r3, [pc, #132]	@ (8001b20 <HAL_RCC_ClockConfig+0x1ec>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d001      	beq.n	8001aaa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e036      	b.n	8001b18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0304 	and.w	r3, r3, #4
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d008      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ab6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	4918      	ldr	r1, [pc, #96]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0308 	and.w	r3, r3, #8
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d009      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ad4:	4b13      	ldr	r3, [pc, #76]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	4910      	ldr	r1, [pc, #64]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ae8:	f000 f824 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 8001aec:	4602      	mov	r2, r0
 8001aee:	4b0d      	ldr	r3, [pc, #52]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	091b      	lsrs	r3, r3, #4
 8001af4:	f003 030f 	and.w	r3, r3, #15
 8001af8:	490b      	ldr	r1, [pc, #44]	@ (8001b28 <HAL_RCC_ClockConfig+0x1f4>)
 8001afa:	5ccb      	ldrb	r3, [r1, r3]
 8001afc:	f003 031f 	and.w	r3, r3, #31
 8001b00:	fa22 f303 	lsr.w	r3, r2, r3
 8001b04:	4a09      	ldr	r2, [pc, #36]	@ (8001b2c <HAL_RCC_ClockConfig+0x1f8>)
 8001b06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b08:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <HAL_RCC_ClockConfig+0x1fc>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7fe ff6f 	bl	80009f0 <HAL_InitTick>
 8001b12:	4603      	mov	r3, r0
 8001b14:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b16:	7afb      	ldrb	r3, [r7, #11]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40022000 	.word	0x40022000
 8001b24:	40021000 	.word	0x40021000
 8001b28:	08003bb0 	.word	0x08003bb0
 8001b2c:	20000004 	.word	0x20000004
 8001b30:	20000008 	.word	0x20000008

08001b34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b089      	sub	sp, #36	@ 0x24
 8001b38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b42:	4b3e      	ldr	r3, [pc, #248]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 030c 	and.w	r3, r3, #12
 8001b4a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b4c:	4b3b      	ldr	r3, [pc, #236]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	f003 0303 	and.w	r3, r3, #3
 8001b54:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d005      	beq.n	8001b68 <HAL_RCC_GetSysClockFreq+0x34>
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	2b0c      	cmp	r3, #12
 8001b60:	d121      	bne.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d11e      	bne.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b68:	4b34      	ldr	r3, [pc, #208]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0308 	and.w	r3, r3, #8
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d107      	bne.n	8001b84 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b74:	4b31      	ldr	r3, [pc, #196]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b7a:	0a1b      	lsrs	r3, r3, #8
 8001b7c:	f003 030f 	and.w	r3, r3, #15
 8001b80:	61fb      	str	r3, [r7, #28]
 8001b82:	e005      	b.n	8001b90 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b84:	4b2d      	ldr	r3, [pc, #180]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	091b      	lsrs	r3, r3, #4
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b90:	4a2b      	ldr	r2, [pc, #172]	@ (8001c40 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b98:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d10d      	bne.n	8001bbc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ba4:	e00a      	b.n	8001bbc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	2b04      	cmp	r3, #4
 8001baa:	d102      	bne.n	8001bb2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bac:	4b25      	ldr	r3, [pc, #148]	@ (8001c44 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bae:	61bb      	str	r3, [r7, #24]
 8001bb0:	e004      	b.n	8001bbc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	2b08      	cmp	r3, #8
 8001bb6:	d101      	bne.n	8001bbc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bb8:	4b23      	ldr	r3, [pc, #140]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	2b0c      	cmp	r3, #12
 8001bc0:	d134      	bne.n	8001c2c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d003      	beq.n	8001bda <HAL_RCC_GetSysClockFreq+0xa6>
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	2b03      	cmp	r3, #3
 8001bd6:	d003      	beq.n	8001be0 <HAL_RCC_GetSysClockFreq+0xac>
 8001bd8:	e005      	b.n	8001be6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001bda:	4b1a      	ldr	r3, [pc, #104]	@ (8001c44 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bdc:	617b      	str	r3, [r7, #20]
      break;
 8001bde:	e005      	b.n	8001bec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001be0:	4b19      	ldr	r3, [pc, #100]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x114>)
 8001be2:	617b      	str	r3, [r7, #20]
      break;
 8001be4:	e002      	b.n	8001bec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	617b      	str	r3, [r7, #20]
      break;
 8001bea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bec:	4b13      	ldr	r3, [pc, #76]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	091b      	lsrs	r3, r3, #4
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001bfa:	4b10      	ldr	r3, [pc, #64]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	0a1b      	lsrs	r3, r3, #8
 8001c00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c04:	697a      	ldr	r2, [r7, #20]
 8001c06:	fb03 f202 	mul.w	r2, r3, r2
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c10:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c12:	4b0a      	ldr	r3, [pc, #40]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	0e5b      	lsrs	r3, r3, #25
 8001c18:	f003 0303 	and.w	r3, r3, #3
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c2c:	69bb      	ldr	r3, [r7, #24]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3724      	adds	r7, #36	@ 0x24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	08003bc8 	.word	0x08003bc8
 8001c44:	00f42400 	.word	0x00f42400
 8001c48:	007a1200 	.word	0x007a1200

08001c4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c50:	4b03      	ldr	r3, [pc, #12]	@ (8001c60 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c52:	681b      	ldr	r3, [r3, #0]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	20000004 	.word	0x20000004

08001c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c68:	f7ff fff0 	bl	8001c4c <HAL_RCC_GetHCLKFreq>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	4b06      	ldr	r3, [pc, #24]	@ (8001c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	0a1b      	lsrs	r3, r3, #8
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	4904      	ldr	r1, [pc, #16]	@ (8001c8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c7a:	5ccb      	ldrb	r3, [r1, r3]
 8001c7c:	f003 031f 	and.w	r3, r3, #31
 8001c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	08003bc0 	.word	0x08003bc0

08001c90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c94:	f7ff ffda 	bl	8001c4c <HAL_RCC_GetHCLKFreq>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	4b06      	ldr	r3, [pc, #24]	@ (8001cb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	0adb      	lsrs	r3, r3, #11
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	4904      	ldr	r1, [pc, #16]	@ (8001cb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ca6:	5ccb      	ldrb	r3, [r1, r3]
 8001ca8:	f003 031f 	and.w	r3, r3, #31
 8001cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	08003bc0 	.word	0x08003bc0

08001cbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001cc8:	4b2a      	ldr	r3, [pc, #168]	@ (8001d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ccc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001cd4:	f7ff f9ee 	bl	80010b4 <HAL_PWREx_GetVoltageRange>
 8001cd8:	6178      	str	r0, [r7, #20]
 8001cda:	e014      	b.n	8001d06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cdc:	4b25      	ldr	r3, [pc, #148]	@ (8001d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce0:	4a24      	ldr	r2, [pc, #144]	@ (8001d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ce2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ce6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ce8:	4b22      	ldr	r3, [pc, #136]	@ (8001d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001cf4:	f7ff f9de 	bl	80010b4 <HAL_PWREx_GetVoltageRange>
 8001cf8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001cfa:	4b1e      	ldr	r3, [pc, #120]	@ (8001d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cfe:	4a1d      	ldr	r2, [pc, #116]	@ (8001d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d04:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d0c:	d10b      	bne.n	8001d26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b80      	cmp	r3, #128	@ 0x80
 8001d12:	d919      	bls.n	8001d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2ba0      	cmp	r3, #160	@ 0xa0
 8001d18:	d902      	bls.n	8001d20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	e013      	b.n	8001d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d20:	2301      	movs	r3, #1
 8001d22:	613b      	str	r3, [r7, #16]
 8001d24:	e010      	b.n	8001d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b80      	cmp	r3, #128	@ 0x80
 8001d2a:	d902      	bls.n	8001d32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	613b      	str	r3, [r7, #16]
 8001d30:	e00a      	b.n	8001d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b80      	cmp	r3, #128	@ 0x80
 8001d36:	d102      	bne.n	8001d3e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d38:	2302      	movs	r3, #2
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	e004      	b.n	8001d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b70      	cmp	r3, #112	@ 0x70
 8001d42:	d101      	bne.n	8001d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d44:	2301      	movs	r3, #1
 8001d46:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d48:	4b0b      	ldr	r3, [pc, #44]	@ (8001d78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f023 0207 	bic.w	r2, r3, #7
 8001d50:	4909      	ldr	r1, [pc, #36]	@ (8001d78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d58:	4b07      	ldr	r3, [pc, #28]	@ (8001d78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d001      	beq.n	8001d6a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e000      	b.n	8001d6c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40021000 	.word	0x40021000
 8001d78:	40022000 	.word	0x40022000

08001d7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d84:	2300      	movs	r3, #0
 8001d86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d88:	2300      	movs	r3, #0
 8001d8a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d041      	beq.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d9c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001da0:	d02a      	beq.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001da2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001da6:	d824      	bhi.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001da8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001dac:	d008      	beq.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001dae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001db2:	d81e      	bhi.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00a      	beq.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001db8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001dbc:	d010      	beq.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001dbe:	e018      	b.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001dc0:	4b86      	ldr	r3, [pc, #536]	@ (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	4a85      	ldr	r2, [pc, #532]	@ (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001dcc:	e015      	b.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f000 fabb 	bl	8002350 <RCCEx_PLLSAI1_Config>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001dde:	e00c      	b.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3320      	adds	r3, #32
 8001de4:	2100      	movs	r1, #0
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 fba6 	bl	8002538 <RCCEx_PLLSAI2_Config>
 8001dec:	4603      	mov	r3, r0
 8001dee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001df0:	e003      	b.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	74fb      	strb	r3, [r7, #19]
      break;
 8001df6:	e000      	b.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001df8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001dfa:	7cfb      	ldrb	r3, [r7, #19]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10b      	bne.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e00:	4b76      	ldr	r3, [pc, #472]	@ (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e06:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e0e:	4973      	ldr	r1, [pc, #460]	@ (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001e16:	e001      	b.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e18:	7cfb      	ldrb	r3, [r7, #19]
 8001e1a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d041      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e2c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001e30:	d02a      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001e32:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001e36:	d824      	bhi.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e3c:	d008      	beq.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e42:	d81e      	bhi.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00a      	beq.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001e48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e4c:	d010      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e4e:	e018      	b.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e50:	4b62      	ldr	r3, [pc, #392]	@ (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	4a61      	ldr	r2, [pc, #388]	@ (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e5a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e5c:	e015      	b.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3304      	adds	r3, #4
 8001e62:	2100      	movs	r1, #0
 8001e64:	4618      	mov	r0, r3
 8001e66:	f000 fa73 	bl	8002350 <RCCEx_PLLSAI1_Config>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e6e:	e00c      	b.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3320      	adds	r3, #32
 8001e74:	2100      	movs	r1, #0
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 fb5e 	bl	8002538 <RCCEx_PLLSAI2_Config>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e80:	e003      	b.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	74fb      	strb	r3, [r7, #19]
      break;
 8001e86:	e000      	b.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001e88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e8a:	7cfb      	ldrb	r3, [r7, #19]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10b      	bne.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e90:	4b52      	ldr	r3, [pc, #328]	@ (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e96:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e9e:	494f      	ldr	r1, [pc, #316]	@ (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001ea6:	e001      	b.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ea8:	7cfb      	ldrb	r3, [r7, #19]
 8001eaa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 80a0 	beq.w	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ebe:	4b47      	ldr	r3, [pc, #284]	@ (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e000      	b.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001ece:	2300      	movs	r3, #0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00d      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed4:	4b41      	ldr	r3, [pc, #260]	@ (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed8:	4a40      	ldr	r2, [pc, #256]	@ (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ede:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ee0:	4b3e      	ldr	r3, [pc, #248]	@ (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ee8:	60bb      	str	r3, [r7, #8]
 8001eea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eec:	2301      	movs	r3, #1
 8001eee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ef0:	4b3b      	ldr	r3, [pc, #236]	@ (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a3a      	ldr	r2, [pc, #232]	@ (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001ef6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001efa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001efc:	f7fe fdc8 	bl	8000a90 <HAL_GetTick>
 8001f00:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f02:	e009      	b.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f04:	f7fe fdc4 	bl	8000a90 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d902      	bls.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	74fb      	strb	r3, [r7, #19]
        break;
 8001f16:	e005      	b.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f18:	4b31      	ldr	r3, [pc, #196]	@ (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0ef      	beq.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001f24:	7cfb      	ldrb	r3, [r7, #19]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d15c      	bne.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f2a:	4b2c      	ldr	r3, [pc, #176]	@ (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f34:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d01f      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d019      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f48:	4b24      	ldr	r3, [pc, #144]	@ (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f52:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f54:	4b21      	ldr	r3, [pc, #132]	@ (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f5a:	4a20      	ldr	r2, [pc, #128]	@ (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f64:	4b1d      	ldr	r3, [pc, #116]	@ (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f6a:	4a1c      	ldr	r2, [pc, #112]	@ (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f74:	4a19      	ldr	r2, [pc, #100]	@ (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d016      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f86:	f7fe fd83 	bl	8000a90 <HAL_GetTick>
 8001f8a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f8c:	e00b      	b.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8e:	f7fe fd7f 	bl	8000a90 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d902      	bls.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	74fb      	strb	r3, [r7, #19]
            break;
 8001fa4:	e006      	b.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0ec      	beq.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001fb4:	7cfb      	ldrb	r3, [r7, #19]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10c      	bne.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fba:	4b08      	ldr	r3, [pc, #32]	@ (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fc0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001fca:	4904      	ldr	r1, [pc, #16]	@ (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001fd2:	e009      	b.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001fd4:	7cfb      	ldrb	r3, [r7, #19]
 8001fd6:	74bb      	strb	r3, [r7, #18]
 8001fd8:	e006      	b.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001fda:	bf00      	nop
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fe4:	7cfb      	ldrb	r3, [r7, #19]
 8001fe6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fe8:	7c7b      	ldrb	r3, [r7, #17]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d105      	bne.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fee:	4b9e      	ldr	r3, [pc, #632]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff2:	4a9d      	ldr	r2, [pc, #628]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ff4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ff8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00a      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002006:	4b98      	ldr	r3, [pc, #608]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800200c:	f023 0203 	bic.w	r2, r3, #3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002014:	4994      	ldr	r1, [pc, #592]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002016:	4313      	orrs	r3, r2
 8002018:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00a      	beq.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002028:	4b8f      	ldr	r3, [pc, #572]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800202a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800202e:	f023 020c 	bic.w	r2, r3, #12
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002036:	498c      	ldr	r1, [pc, #560]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002038:	4313      	orrs	r3, r2
 800203a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0304 	and.w	r3, r3, #4
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00a      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800204a:	4b87      	ldr	r3, [pc, #540]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800204c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002050:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002058:	4983      	ldr	r1, [pc, #524]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800205a:	4313      	orrs	r3, r2
 800205c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0308 	and.w	r3, r3, #8
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00a      	beq.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800206c:	4b7e      	ldr	r3, [pc, #504]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800206e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002072:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207a:	497b      	ldr	r1, [pc, #492]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800207c:	4313      	orrs	r3, r2
 800207e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0310 	and.w	r3, r3, #16
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00a      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800208e:	4b76      	ldr	r3, [pc, #472]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002094:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800209c:	4972      	ldr	r1, [pc, #456]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0320 	and.w	r3, r3, #32
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00a      	beq.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020b0:	4b6d      	ldr	r3, [pc, #436]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020b6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020be:	496a      	ldr	r1, [pc, #424]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00a      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020d2:	4b65      	ldr	r3, [pc, #404]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e0:	4961      	ldr	r1, [pc, #388]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00a      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80020f4:	4b5c      	ldr	r3, [pc, #368]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002102:	4959      	ldr	r1, [pc, #356]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002104:	4313      	orrs	r3, r2
 8002106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00a      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002116:	4b54      	ldr	r3, [pc, #336]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800211c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002124:	4950      	ldr	r1, [pc, #320]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002126:	4313      	orrs	r3, r2
 8002128:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00a      	beq.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002138:	4b4b      	ldr	r3, [pc, #300]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800213a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800213e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002146:	4948      	ldr	r1, [pc, #288]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002148:	4313      	orrs	r3, r2
 800214a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00a      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800215a:	4b43      	ldr	r3, [pc, #268]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002160:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002168:	493f      	ldr	r1, [pc, #252]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800216a:	4313      	orrs	r3, r2
 800216c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d028      	beq.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800217c:	4b3a      	ldr	r3, [pc, #232]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800217e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002182:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800218a:	4937      	ldr	r1, [pc, #220]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800218c:	4313      	orrs	r3, r2
 800218e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002196:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800219a:	d106      	bne.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800219c:	4b32      	ldr	r3, [pc, #200]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	4a31      	ldr	r2, [pc, #196]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021a6:	60d3      	str	r3, [r2, #12]
 80021a8:	e011      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80021b2:	d10c      	bne.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3304      	adds	r3, #4
 80021b8:	2101      	movs	r1, #1
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 f8c8 	bl	8002350 <RCCEx_PLLSAI1_Config>
 80021c0:	4603      	mov	r3, r0
 80021c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80021c4:	7cfb      	ldrb	r3, [r7, #19]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80021ca:	7cfb      	ldrb	r3, [r7, #19]
 80021cc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d028      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80021da:	4b23      	ldr	r3, [pc, #140]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021e8:	491f      	ldr	r1, [pc, #124]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021f8:	d106      	bne.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	4a1a      	ldr	r2, [pc, #104]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002200:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002204:	60d3      	str	r3, [r2, #12]
 8002206:	e011      	b.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800220c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002210:	d10c      	bne.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	3304      	adds	r3, #4
 8002216:	2101      	movs	r1, #1
 8002218:	4618      	mov	r0, r3
 800221a:	f000 f899 	bl	8002350 <RCCEx_PLLSAI1_Config>
 800221e:	4603      	mov	r3, r0
 8002220:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002222:	7cfb      	ldrb	r3, [r7, #19]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002228:	7cfb      	ldrb	r3, [r7, #19]
 800222a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d02b      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002238:	4b0b      	ldr	r3, [pc, #44]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800223e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002246:	4908      	ldr	r1, [pc, #32]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002248:	4313      	orrs	r3, r2
 800224a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002252:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002256:	d109      	bne.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002258:	4b03      	ldr	r3, [pc, #12]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	4a02      	ldr	r2, [pc, #8]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002262:	60d3      	str	r3, [r2, #12]
 8002264:	e014      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002266:	bf00      	nop
 8002268:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002270:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002274:	d10c      	bne.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3304      	adds	r3, #4
 800227a:	2101      	movs	r1, #1
 800227c:	4618      	mov	r0, r3
 800227e:	f000 f867 	bl	8002350 <RCCEx_PLLSAI1_Config>
 8002282:	4603      	mov	r3, r0
 8002284:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002286:	7cfb      	ldrb	r3, [r7, #19]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800228c:	7cfb      	ldrb	r3, [r7, #19]
 800228e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d02f      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800229c:	4b2b      	ldr	r3, [pc, #172]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800229e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80022aa:	4928      	ldr	r1, [pc, #160]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80022b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80022ba:	d10d      	bne.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3304      	adds	r3, #4
 80022c0:	2102      	movs	r1, #2
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 f844 	bl	8002350 <RCCEx_PLLSAI1_Config>
 80022c8:	4603      	mov	r3, r0
 80022ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022cc:	7cfb      	ldrb	r3, [r7, #19]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d014      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80022d2:	7cfb      	ldrb	r3, [r7, #19]
 80022d4:	74bb      	strb	r3, [r7, #18]
 80022d6:	e011      	b.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80022dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80022e0:	d10c      	bne.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	3320      	adds	r3, #32
 80022e6:	2102      	movs	r1, #2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f000 f925 	bl	8002538 <RCCEx_PLLSAI2_Config>
 80022ee:	4603      	mov	r3, r0
 80022f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022f2:	7cfb      	ldrb	r3, [r7, #19]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80022f8:	7cfb      	ldrb	r3, [r7, #19]
 80022fa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00a      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002308:	4b10      	ldr	r3, [pc, #64]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800230a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800230e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002316:	490d      	ldr	r1, [pc, #52]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002318:	4313      	orrs	r3, r2
 800231a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00b      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800232a:	4b08      	ldr	r3, [pc, #32]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800232c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002330:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800233a:	4904      	ldr	r1, [pc, #16]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800233c:	4313      	orrs	r3, r2
 800233e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002342:	7cbb      	ldrb	r3, [r7, #18]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40021000 	.word	0x40021000

08002350 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800235a:	2300      	movs	r3, #0
 800235c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800235e:	4b75      	ldr	r3, [pc, #468]	@ (8002534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d018      	beq.n	800239c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800236a:	4b72      	ldr	r3, [pc, #456]	@ (8002534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	f003 0203 	and.w	r2, r3, #3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d10d      	bne.n	8002396 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
       ||
 800237e:	2b00      	cmp	r3, #0
 8002380:	d009      	beq.n	8002396 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002382:	4b6c      	ldr	r3, [pc, #432]	@ (8002534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	091b      	lsrs	r3, r3, #4
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	1c5a      	adds	r2, r3, #1
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
       ||
 8002392:	429a      	cmp	r2, r3
 8002394:	d047      	beq.n	8002426 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	73fb      	strb	r3, [r7, #15]
 800239a:	e044      	b.n	8002426 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b03      	cmp	r3, #3
 80023a2:	d018      	beq.n	80023d6 <RCCEx_PLLSAI1_Config+0x86>
 80023a4:	2b03      	cmp	r3, #3
 80023a6:	d825      	bhi.n	80023f4 <RCCEx_PLLSAI1_Config+0xa4>
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d002      	beq.n	80023b2 <RCCEx_PLLSAI1_Config+0x62>
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d009      	beq.n	80023c4 <RCCEx_PLLSAI1_Config+0x74>
 80023b0:	e020      	b.n	80023f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80023b2:	4b60      	ldr	r3, [pc, #384]	@ (8002534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d11d      	bne.n	80023fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023c2:	e01a      	b.n	80023fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80023c4:	4b5b      	ldr	r3, [pc, #364]	@ (8002534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d116      	bne.n	80023fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023d4:	e013      	b.n	80023fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80023d6:	4b57      	ldr	r3, [pc, #348]	@ (8002534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10f      	bne.n	8002402 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80023e2:	4b54      	ldr	r3, [pc, #336]	@ (8002534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d109      	bne.n	8002402 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80023f2:	e006      	b.n	8002402 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	73fb      	strb	r3, [r7, #15]
      break;
 80023f8:	e004      	b.n	8002404 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023fa:	bf00      	nop
 80023fc:	e002      	b.n	8002404 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023fe:	bf00      	nop
 8002400:	e000      	b.n	8002404 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002402:	bf00      	nop
    }

    if(status == HAL_OK)
 8002404:	7bfb      	ldrb	r3, [r7, #15]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10d      	bne.n	8002426 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800240a:	4b4a      	ldr	r3, [pc, #296]	@ (8002534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6819      	ldr	r1, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	3b01      	subs	r3, #1
 800241c:	011b      	lsls	r3, r3, #4
 800241e:	430b      	orrs	r3, r1
 8002420:	4944      	ldr	r1, [pc, #272]	@ (8002534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002422:	4313      	orrs	r3, r2
 8002424:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002426:	7bfb      	ldrb	r3, [r7, #15]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d17d      	bne.n	8002528 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800242c:	4b41      	ldr	r3, [pc, #260]	@ (8002534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a40      	ldr	r2, [pc, #256]	@ (8002534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002432:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002436:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002438:	f7fe fb2a 	bl	8000a90 <HAL_GetTick>
 800243c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800243e:	e009      	b.n	8002454 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002440:	f7fe fb26 	bl	8000a90 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d902      	bls.n	8002454 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	73fb      	strb	r3, [r7, #15]
        break;
 8002452:	e005      	b.n	8002460 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002454:	4b37      	ldr	r3, [pc, #220]	@ (8002534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1ef      	bne.n	8002440 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002460:	7bfb      	ldrb	r3, [r7, #15]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d160      	bne.n	8002528 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d111      	bne.n	8002490 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800246c:	4b31      	ldr	r3, [pc, #196]	@ (8002534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002474:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	6892      	ldr	r2, [r2, #8]
 800247c:	0211      	lsls	r1, r2, #8
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	68d2      	ldr	r2, [r2, #12]
 8002482:	0912      	lsrs	r2, r2, #4
 8002484:	0452      	lsls	r2, r2, #17
 8002486:	430a      	orrs	r2, r1
 8002488:	492a      	ldr	r1, [pc, #168]	@ (8002534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800248a:	4313      	orrs	r3, r2
 800248c:	610b      	str	r3, [r1, #16]
 800248e:	e027      	b.n	80024e0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d112      	bne.n	80024bc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002496:	4b27      	ldr	r3, [pc, #156]	@ (8002534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800249e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6892      	ldr	r2, [r2, #8]
 80024a6:	0211      	lsls	r1, r2, #8
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6912      	ldr	r2, [r2, #16]
 80024ac:	0852      	lsrs	r2, r2, #1
 80024ae:	3a01      	subs	r2, #1
 80024b0:	0552      	lsls	r2, r2, #21
 80024b2:	430a      	orrs	r2, r1
 80024b4:	491f      	ldr	r1, [pc, #124]	@ (8002534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	610b      	str	r3, [r1, #16]
 80024ba:	e011      	b.n	80024e0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80024c4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6892      	ldr	r2, [r2, #8]
 80024cc:	0211      	lsls	r1, r2, #8
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6952      	ldr	r2, [r2, #20]
 80024d2:	0852      	lsrs	r2, r2, #1
 80024d4:	3a01      	subs	r2, #1
 80024d6:	0652      	lsls	r2, r2, #25
 80024d8:	430a      	orrs	r2, r1
 80024da:	4916      	ldr	r1, [pc, #88]	@ (8002534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80024e0:	4b14      	ldr	r3, [pc, #80]	@ (8002534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a13      	ldr	r2, [pc, #76]	@ (8002534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80024ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ec:	f7fe fad0 	bl	8000a90 <HAL_GetTick>
 80024f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024f2:	e009      	b.n	8002508 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024f4:	f7fe facc 	bl	8000a90 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d902      	bls.n	8002508 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	73fb      	strb	r3, [r7, #15]
          break;
 8002506:	e005      	b.n	8002514 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002508:	4b0a      	ldr	r3, [pc, #40]	@ (8002534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0ef      	beq.n	80024f4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d106      	bne.n	8002528 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800251a:	4b06      	ldr	r3, [pc, #24]	@ (8002534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800251c:	691a      	ldr	r2, [r3, #16]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	4904      	ldr	r1, [pc, #16]	@ (8002534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002524:	4313      	orrs	r3, r2
 8002526:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002528:	7bfb      	ldrb	r3, [r7, #15]
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40021000 	.word	0x40021000

08002538 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002542:	2300      	movs	r3, #0
 8002544:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002546:	4b6a      	ldr	r3, [pc, #424]	@ (80026f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	f003 0303 	and.w	r3, r3, #3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d018      	beq.n	8002584 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002552:	4b67      	ldr	r3, [pc, #412]	@ (80026f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	f003 0203 	and.w	r2, r3, #3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	429a      	cmp	r2, r3
 8002560:	d10d      	bne.n	800257e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
       ||
 8002566:	2b00      	cmp	r3, #0
 8002568:	d009      	beq.n	800257e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800256a:	4b61      	ldr	r3, [pc, #388]	@ (80026f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	091b      	lsrs	r3, r3, #4
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	1c5a      	adds	r2, r3, #1
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
       ||
 800257a:	429a      	cmp	r2, r3
 800257c:	d047      	beq.n	800260e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	73fb      	strb	r3, [r7, #15]
 8002582:	e044      	b.n	800260e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b03      	cmp	r3, #3
 800258a:	d018      	beq.n	80025be <RCCEx_PLLSAI2_Config+0x86>
 800258c:	2b03      	cmp	r3, #3
 800258e:	d825      	bhi.n	80025dc <RCCEx_PLLSAI2_Config+0xa4>
 8002590:	2b01      	cmp	r3, #1
 8002592:	d002      	beq.n	800259a <RCCEx_PLLSAI2_Config+0x62>
 8002594:	2b02      	cmp	r3, #2
 8002596:	d009      	beq.n	80025ac <RCCEx_PLLSAI2_Config+0x74>
 8002598:	e020      	b.n	80025dc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800259a:	4b55      	ldr	r3, [pc, #340]	@ (80026f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d11d      	bne.n	80025e2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025aa:	e01a      	b.n	80025e2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025ac:	4b50      	ldr	r3, [pc, #320]	@ (80026f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d116      	bne.n	80025e6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025bc:	e013      	b.n	80025e6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025be:	4b4c      	ldr	r3, [pc, #304]	@ (80026f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10f      	bne.n	80025ea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025ca:	4b49      	ldr	r3, [pc, #292]	@ (80026f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d109      	bne.n	80025ea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025da:	e006      	b.n	80025ea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	73fb      	strb	r3, [r7, #15]
      break;
 80025e0:	e004      	b.n	80025ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80025e2:	bf00      	nop
 80025e4:	e002      	b.n	80025ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80025e6:	bf00      	nop
 80025e8:	e000      	b.n	80025ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80025ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10d      	bne.n	800260e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025f2:	4b3f      	ldr	r3, [pc, #252]	@ (80026f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6819      	ldr	r1, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	3b01      	subs	r3, #1
 8002604:	011b      	lsls	r3, r3, #4
 8002606:	430b      	orrs	r3, r1
 8002608:	4939      	ldr	r1, [pc, #228]	@ (80026f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800260a:	4313      	orrs	r3, r2
 800260c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800260e:	7bfb      	ldrb	r3, [r7, #15]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d167      	bne.n	80026e4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002614:	4b36      	ldr	r3, [pc, #216]	@ (80026f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a35      	ldr	r2, [pc, #212]	@ (80026f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800261a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800261e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002620:	f7fe fa36 	bl	8000a90 <HAL_GetTick>
 8002624:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002626:	e009      	b.n	800263c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002628:	f7fe fa32 	bl	8000a90 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d902      	bls.n	800263c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	73fb      	strb	r3, [r7, #15]
        break;
 800263a:	e005      	b.n	8002648 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800263c:	4b2c      	ldr	r3, [pc, #176]	@ (80026f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1ef      	bne.n	8002628 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002648:	7bfb      	ldrb	r3, [r7, #15]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d14a      	bne.n	80026e4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d111      	bne.n	8002678 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002654:	4b26      	ldr	r3, [pc, #152]	@ (80026f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002656:	695b      	ldr	r3, [r3, #20]
 8002658:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800265c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	6892      	ldr	r2, [r2, #8]
 8002664:	0211      	lsls	r1, r2, #8
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	68d2      	ldr	r2, [r2, #12]
 800266a:	0912      	lsrs	r2, r2, #4
 800266c:	0452      	lsls	r2, r2, #17
 800266e:	430a      	orrs	r2, r1
 8002670:	491f      	ldr	r1, [pc, #124]	@ (80026f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002672:	4313      	orrs	r3, r2
 8002674:	614b      	str	r3, [r1, #20]
 8002676:	e011      	b.n	800269c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002678:	4b1d      	ldr	r3, [pc, #116]	@ (80026f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002680:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6892      	ldr	r2, [r2, #8]
 8002688:	0211      	lsls	r1, r2, #8
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6912      	ldr	r2, [r2, #16]
 800268e:	0852      	lsrs	r2, r2, #1
 8002690:	3a01      	subs	r2, #1
 8002692:	0652      	lsls	r2, r2, #25
 8002694:	430a      	orrs	r2, r1
 8002696:	4916      	ldr	r1, [pc, #88]	@ (80026f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002698:	4313      	orrs	r3, r2
 800269a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800269c:	4b14      	ldr	r3, [pc, #80]	@ (80026f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a13      	ldr	r2, [pc, #76]	@ (80026f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a8:	f7fe f9f2 	bl	8000a90 <HAL_GetTick>
 80026ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80026ae:	e009      	b.n	80026c4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026b0:	f7fe f9ee 	bl	8000a90 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d902      	bls.n	80026c4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	73fb      	strb	r3, [r7, #15]
          break;
 80026c2:	e005      	b.n	80026d0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80026c4:	4b0a      	ldr	r3, [pc, #40]	@ (80026f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0ef      	beq.n	80026b0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d106      	bne.n	80026e4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80026d6:	4b06      	ldr	r3, [pc, #24]	@ (80026f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026d8:	695a      	ldr	r2, [r3, #20]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	4904      	ldr	r1, [pc, #16]	@ (80026f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80026e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40021000 	.word	0x40021000

080026f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e040      	b.n	8002788 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800270a:	2b00      	cmp	r3, #0
 800270c:	d106      	bne.n	800271c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7fe f84c 	bl	80007b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2224      	movs	r2, #36	@ 0x24
 8002720:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 0201 	bic.w	r2, r2, #1
 8002730:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002736:	2b00      	cmp	r3, #0
 8002738:	d002      	beq.n	8002740 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 fb6a 	bl	8002e14 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 f8af 	bl	80028a4 <UART_SetConfig>
 8002746:	4603      	mov	r3, r0
 8002748:	2b01      	cmp	r3, #1
 800274a:	d101      	bne.n	8002750 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e01b      	b.n	8002788 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800275e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800276e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 0201 	orr.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 fbe9 	bl	8002f58 <UART_CheckIdleState>
 8002786:	4603      	mov	r3, r0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b08a      	sub	sp, #40	@ 0x28
 8002794:	af02      	add	r7, sp, #8
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	603b      	str	r3, [r7, #0]
 800279c:	4613      	mov	r3, r2
 800279e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027a4:	2b20      	cmp	r3, #32
 80027a6:	d177      	bne.n	8002898 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <HAL_UART_Transmit+0x24>
 80027ae:	88fb      	ldrh	r3, [r7, #6]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e070      	b.n	800289a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2221      	movs	r2, #33	@ 0x21
 80027c4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027c6:	f7fe f963 	bl	8000a90 <HAL_GetTick>
 80027ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	88fa      	ldrh	r2, [r7, #6]
 80027d0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	88fa      	ldrh	r2, [r7, #6]
 80027d8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027e4:	d108      	bne.n	80027f8 <HAL_UART_Transmit+0x68>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d104      	bne.n	80027f8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80027ee:	2300      	movs	r3, #0
 80027f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	61bb      	str	r3, [r7, #24]
 80027f6:	e003      	b.n	8002800 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002800:	e02f      	b.n	8002862 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	2200      	movs	r2, #0
 800280a:	2180      	movs	r1, #128	@ 0x80
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f000 fc4b 	bl	80030a8 <UART_WaitOnFlagUntilTimeout>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d004      	beq.n	8002822 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2220      	movs	r2, #32
 800281c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e03b      	b.n	800289a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d10b      	bne.n	8002840 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	881a      	ldrh	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002834:	b292      	uxth	r2, r2
 8002836:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	3302      	adds	r3, #2
 800283c:	61bb      	str	r3, [r7, #24]
 800283e:	e007      	b.n	8002850 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	781a      	ldrb	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	3301      	adds	r3, #1
 800284e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002856:	b29b      	uxth	r3, r3
 8002858:	3b01      	subs	r3, #1
 800285a:	b29a      	uxth	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002868:	b29b      	uxth	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1c9      	bne.n	8002802 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	2200      	movs	r2, #0
 8002876:	2140      	movs	r1, #64	@ 0x40
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f000 fc15 	bl	80030a8 <UART_WaitOnFlagUntilTimeout>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d004      	beq.n	800288e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2220      	movs	r2, #32
 8002888:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e005      	b.n	800289a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2220      	movs	r2, #32
 8002892:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002894:	2300      	movs	r3, #0
 8002896:	e000      	b.n	800289a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002898:	2302      	movs	r3, #2
  }
}
 800289a:	4618      	mov	r0, r3
 800289c:	3720      	adds	r7, #32
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
	...

080028a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028a8:	b08a      	sub	sp, #40	@ 0x28
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	431a      	orrs	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	431a      	orrs	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	69db      	ldr	r3, [r3, #28]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	4ba4      	ldr	r3, [pc, #656]	@ (8002b64 <UART_SetConfig+0x2c0>)
 80028d4:	4013      	ands	r3, r2
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	6812      	ldr	r2, [r2, #0]
 80028da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028dc:	430b      	orrs	r3, r1
 80028de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a99      	ldr	r2, [pc, #612]	@ (8002b68 <UART_SetConfig+0x2c4>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d004      	beq.n	8002910 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800290c:	4313      	orrs	r3, r2
 800290e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002920:	430a      	orrs	r2, r1
 8002922:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a90      	ldr	r2, [pc, #576]	@ (8002b6c <UART_SetConfig+0x2c8>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d126      	bne.n	800297c <UART_SetConfig+0xd8>
 800292e:	4b90      	ldr	r3, [pc, #576]	@ (8002b70 <UART_SetConfig+0x2cc>)
 8002930:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002934:	f003 0303 	and.w	r3, r3, #3
 8002938:	2b03      	cmp	r3, #3
 800293a:	d81b      	bhi.n	8002974 <UART_SetConfig+0xd0>
 800293c:	a201      	add	r2, pc, #4	@ (adr r2, 8002944 <UART_SetConfig+0xa0>)
 800293e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002942:	bf00      	nop
 8002944:	08002955 	.word	0x08002955
 8002948:	08002965 	.word	0x08002965
 800294c:	0800295d 	.word	0x0800295d
 8002950:	0800296d 	.word	0x0800296d
 8002954:	2301      	movs	r3, #1
 8002956:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800295a:	e116      	b.n	8002b8a <UART_SetConfig+0x2e6>
 800295c:	2302      	movs	r3, #2
 800295e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002962:	e112      	b.n	8002b8a <UART_SetConfig+0x2e6>
 8002964:	2304      	movs	r3, #4
 8002966:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800296a:	e10e      	b.n	8002b8a <UART_SetConfig+0x2e6>
 800296c:	2308      	movs	r3, #8
 800296e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002972:	e10a      	b.n	8002b8a <UART_SetConfig+0x2e6>
 8002974:	2310      	movs	r3, #16
 8002976:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800297a:	e106      	b.n	8002b8a <UART_SetConfig+0x2e6>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a7c      	ldr	r2, [pc, #496]	@ (8002b74 <UART_SetConfig+0x2d0>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d138      	bne.n	80029f8 <UART_SetConfig+0x154>
 8002986:	4b7a      	ldr	r3, [pc, #488]	@ (8002b70 <UART_SetConfig+0x2cc>)
 8002988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800298c:	f003 030c 	and.w	r3, r3, #12
 8002990:	2b0c      	cmp	r3, #12
 8002992:	d82d      	bhi.n	80029f0 <UART_SetConfig+0x14c>
 8002994:	a201      	add	r2, pc, #4	@ (adr r2, 800299c <UART_SetConfig+0xf8>)
 8002996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800299a:	bf00      	nop
 800299c:	080029d1 	.word	0x080029d1
 80029a0:	080029f1 	.word	0x080029f1
 80029a4:	080029f1 	.word	0x080029f1
 80029a8:	080029f1 	.word	0x080029f1
 80029ac:	080029e1 	.word	0x080029e1
 80029b0:	080029f1 	.word	0x080029f1
 80029b4:	080029f1 	.word	0x080029f1
 80029b8:	080029f1 	.word	0x080029f1
 80029bc:	080029d9 	.word	0x080029d9
 80029c0:	080029f1 	.word	0x080029f1
 80029c4:	080029f1 	.word	0x080029f1
 80029c8:	080029f1 	.word	0x080029f1
 80029cc:	080029e9 	.word	0x080029e9
 80029d0:	2300      	movs	r3, #0
 80029d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029d6:	e0d8      	b.n	8002b8a <UART_SetConfig+0x2e6>
 80029d8:	2302      	movs	r3, #2
 80029da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029de:	e0d4      	b.n	8002b8a <UART_SetConfig+0x2e6>
 80029e0:	2304      	movs	r3, #4
 80029e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029e6:	e0d0      	b.n	8002b8a <UART_SetConfig+0x2e6>
 80029e8:	2308      	movs	r3, #8
 80029ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029ee:	e0cc      	b.n	8002b8a <UART_SetConfig+0x2e6>
 80029f0:	2310      	movs	r3, #16
 80029f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029f6:	e0c8      	b.n	8002b8a <UART_SetConfig+0x2e6>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a5e      	ldr	r2, [pc, #376]	@ (8002b78 <UART_SetConfig+0x2d4>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d125      	bne.n	8002a4e <UART_SetConfig+0x1aa>
 8002a02:	4b5b      	ldr	r3, [pc, #364]	@ (8002b70 <UART_SetConfig+0x2cc>)
 8002a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a08:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002a0c:	2b30      	cmp	r3, #48	@ 0x30
 8002a0e:	d016      	beq.n	8002a3e <UART_SetConfig+0x19a>
 8002a10:	2b30      	cmp	r3, #48	@ 0x30
 8002a12:	d818      	bhi.n	8002a46 <UART_SetConfig+0x1a2>
 8002a14:	2b20      	cmp	r3, #32
 8002a16:	d00a      	beq.n	8002a2e <UART_SetConfig+0x18a>
 8002a18:	2b20      	cmp	r3, #32
 8002a1a:	d814      	bhi.n	8002a46 <UART_SetConfig+0x1a2>
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d002      	beq.n	8002a26 <UART_SetConfig+0x182>
 8002a20:	2b10      	cmp	r3, #16
 8002a22:	d008      	beq.n	8002a36 <UART_SetConfig+0x192>
 8002a24:	e00f      	b.n	8002a46 <UART_SetConfig+0x1a2>
 8002a26:	2300      	movs	r3, #0
 8002a28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a2c:	e0ad      	b.n	8002b8a <UART_SetConfig+0x2e6>
 8002a2e:	2302      	movs	r3, #2
 8002a30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a34:	e0a9      	b.n	8002b8a <UART_SetConfig+0x2e6>
 8002a36:	2304      	movs	r3, #4
 8002a38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a3c:	e0a5      	b.n	8002b8a <UART_SetConfig+0x2e6>
 8002a3e:	2308      	movs	r3, #8
 8002a40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a44:	e0a1      	b.n	8002b8a <UART_SetConfig+0x2e6>
 8002a46:	2310      	movs	r3, #16
 8002a48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a4c:	e09d      	b.n	8002b8a <UART_SetConfig+0x2e6>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a4a      	ldr	r2, [pc, #296]	@ (8002b7c <UART_SetConfig+0x2d8>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d125      	bne.n	8002aa4 <UART_SetConfig+0x200>
 8002a58:	4b45      	ldr	r3, [pc, #276]	@ (8002b70 <UART_SetConfig+0x2cc>)
 8002a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a5e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002a62:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a64:	d016      	beq.n	8002a94 <UART_SetConfig+0x1f0>
 8002a66:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a68:	d818      	bhi.n	8002a9c <UART_SetConfig+0x1f8>
 8002a6a:	2b80      	cmp	r3, #128	@ 0x80
 8002a6c:	d00a      	beq.n	8002a84 <UART_SetConfig+0x1e0>
 8002a6e:	2b80      	cmp	r3, #128	@ 0x80
 8002a70:	d814      	bhi.n	8002a9c <UART_SetConfig+0x1f8>
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d002      	beq.n	8002a7c <UART_SetConfig+0x1d8>
 8002a76:	2b40      	cmp	r3, #64	@ 0x40
 8002a78:	d008      	beq.n	8002a8c <UART_SetConfig+0x1e8>
 8002a7a:	e00f      	b.n	8002a9c <UART_SetConfig+0x1f8>
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a82:	e082      	b.n	8002b8a <UART_SetConfig+0x2e6>
 8002a84:	2302      	movs	r3, #2
 8002a86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a8a:	e07e      	b.n	8002b8a <UART_SetConfig+0x2e6>
 8002a8c:	2304      	movs	r3, #4
 8002a8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a92:	e07a      	b.n	8002b8a <UART_SetConfig+0x2e6>
 8002a94:	2308      	movs	r3, #8
 8002a96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a9a:	e076      	b.n	8002b8a <UART_SetConfig+0x2e6>
 8002a9c:	2310      	movs	r3, #16
 8002a9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002aa2:	e072      	b.n	8002b8a <UART_SetConfig+0x2e6>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a35      	ldr	r2, [pc, #212]	@ (8002b80 <UART_SetConfig+0x2dc>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d12a      	bne.n	8002b04 <UART_SetConfig+0x260>
 8002aae:	4b30      	ldr	r3, [pc, #192]	@ (8002b70 <UART_SetConfig+0x2cc>)
 8002ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ab8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002abc:	d01a      	beq.n	8002af4 <UART_SetConfig+0x250>
 8002abe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ac2:	d81b      	bhi.n	8002afc <UART_SetConfig+0x258>
 8002ac4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ac8:	d00c      	beq.n	8002ae4 <UART_SetConfig+0x240>
 8002aca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ace:	d815      	bhi.n	8002afc <UART_SetConfig+0x258>
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <UART_SetConfig+0x238>
 8002ad4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ad8:	d008      	beq.n	8002aec <UART_SetConfig+0x248>
 8002ada:	e00f      	b.n	8002afc <UART_SetConfig+0x258>
 8002adc:	2300      	movs	r3, #0
 8002ade:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ae2:	e052      	b.n	8002b8a <UART_SetConfig+0x2e6>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002aea:	e04e      	b.n	8002b8a <UART_SetConfig+0x2e6>
 8002aec:	2304      	movs	r3, #4
 8002aee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002af2:	e04a      	b.n	8002b8a <UART_SetConfig+0x2e6>
 8002af4:	2308      	movs	r3, #8
 8002af6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002afa:	e046      	b.n	8002b8a <UART_SetConfig+0x2e6>
 8002afc:	2310      	movs	r3, #16
 8002afe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b02:	e042      	b.n	8002b8a <UART_SetConfig+0x2e6>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a17      	ldr	r2, [pc, #92]	@ (8002b68 <UART_SetConfig+0x2c4>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d13a      	bne.n	8002b84 <UART_SetConfig+0x2e0>
 8002b0e:	4b18      	ldr	r3, [pc, #96]	@ (8002b70 <UART_SetConfig+0x2cc>)
 8002b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b14:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002b18:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002b1c:	d01a      	beq.n	8002b54 <UART_SetConfig+0x2b0>
 8002b1e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002b22:	d81b      	bhi.n	8002b5c <UART_SetConfig+0x2b8>
 8002b24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b28:	d00c      	beq.n	8002b44 <UART_SetConfig+0x2a0>
 8002b2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b2e:	d815      	bhi.n	8002b5c <UART_SetConfig+0x2b8>
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d003      	beq.n	8002b3c <UART_SetConfig+0x298>
 8002b34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b38:	d008      	beq.n	8002b4c <UART_SetConfig+0x2a8>
 8002b3a:	e00f      	b.n	8002b5c <UART_SetConfig+0x2b8>
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b42:	e022      	b.n	8002b8a <UART_SetConfig+0x2e6>
 8002b44:	2302      	movs	r3, #2
 8002b46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b4a:	e01e      	b.n	8002b8a <UART_SetConfig+0x2e6>
 8002b4c:	2304      	movs	r3, #4
 8002b4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b52:	e01a      	b.n	8002b8a <UART_SetConfig+0x2e6>
 8002b54:	2308      	movs	r3, #8
 8002b56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b5a:	e016      	b.n	8002b8a <UART_SetConfig+0x2e6>
 8002b5c:	2310      	movs	r3, #16
 8002b5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b62:	e012      	b.n	8002b8a <UART_SetConfig+0x2e6>
 8002b64:	efff69f3 	.word	0xefff69f3
 8002b68:	40008000 	.word	0x40008000
 8002b6c:	40013800 	.word	0x40013800
 8002b70:	40021000 	.word	0x40021000
 8002b74:	40004400 	.word	0x40004400
 8002b78:	40004800 	.word	0x40004800
 8002b7c:	40004c00 	.word	0x40004c00
 8002b80:	40005000 	.word	0x40005000
 8002b84:	2310      	movs	r3, #16
 8002b86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a9f      	ldr	r2, [pc, #636]	@ (8002e0c <UART_SetConfig+0x568>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d17a      	bne.n	8002c8a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b94:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d824      	bhi.n	8002be6 <UART_SetConfig+0x342>
 8002b9c:	a201      	add	r2, pc, #4	@ (adr r2, 8002ba4 <UART_SetConfig+0x300>)
 8002b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba2:	bf00      	nop
 8002ba4:	08002bc9 	.word	0x08002bc9
 8002ba8:	08002be7 	.word	0x08002be7
 8002bac:	08002bd1 	.word	0x08002bd1
 8002bb0:	08002be7 	.word	0x08002be7
 8002bb4:	08002bd7 	.word	0x08002bd7
 8002bb8:	08002be7 	.word	0x08002be7
 8002bbc:	08002be7 	.word	0x08002be7
 8002bc0:	08002be7 	.word	0x08002be7
 8002bc4:	08002bdf 	.word	0x08002bdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bc8:	f7ff f84c 	bl	8001c64 <HAL_RCC_GetPCLK1Freq>
 8002bcc:	61f8      	str	r0, [r7, #28]
        break;
 8002bce:	e010      	b.n	8002bf2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bd0:	4b8f      	ldr	r3, [pc, #572]	@ (8002e10 <UART_SetConfig+0x56c>)
 8002bd2:	61fb      	str	r3, [r7, #28]
        break;
 8002bd4:	e00d      	b.n	8002bf2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bd6:	f7fe ffad 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 8002bda:	61f8      	str	r0, [r7, #28]
        break;
 8002bdc:	e009      	b.n	8002bf2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002be2:	61fb      	str	r3, [r7, #28]
        break;
 8002be4:	e005      	b.n	8002bf2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002bf0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 80fb 	beq.w	8002df0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	4413      	add	r3, r2
 8002c04:	69fa      	ldr	r2, [r7, #28]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d305      	bcc.n	8002c16 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c10:	69fa      	ldr	r2, [r7, #28]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d903      	bls.n	8002c1e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002c1c:	e0e8      	b.n	8002df0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	2200      	movs	r2, #0
 8002c22:	461c      	mov	r4, r3
 8002c24:	4615      	mov	r5, r2
 8002c26:	f04f 0200 	mov.w	r2, #0
 8002c2a:	f04f 0300 	mov.w	r3, #0
 8002c2e:	022b      	lsls	r3, r5, #8
 8002c30:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002c34:	0222      	lsls	r2, r4, #8
 8002c36:	68f9      	ldr	r1, [r7, #12]
 8002c38:	6849      	ldr	r1, [r1, #4]
 8002c3a:	0849      	lsrs	r1, r1, #1
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	4688      	mov	r8, r1
 8002c40:	4681      	mov	r9, r0
 8002c42:	eb12 0a08 	adds.w	sl, r2, r8
 8002c46:	eb43 0b09 	adc.w	fp, r3, r9
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	603b      	str	r3, [r7, #0]
 8002c52:	607a      	str	r2, [r7, #4]
 8002c54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c58:	4650      	mov	r0, sl
 8002c5a:	4659      	mov	r1, fp
 8002c5c:	f7fd fb08 	bl	8000270 <__aeabi_uldivmod>
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	4613      	mov	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c6e:	d308      	bcc.n	8002c82 <UART_SetConfig+0x3de>
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c76:	d204      	bcs.n	8002c82 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	60da      	str	r2, [r3, #12]
 8002c80:	e0b6      	b.n	8002df0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002c88:	e0b2      	b.n	8002df0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c92:	d15e      	bne.n	8002d52 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002c94:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002c98:	2b08      	cmp	r3, #8
 8002c9a:	d828      	bhi.n	8002cee <UART_SetConfig+0x44a>
 8002c9c:	a201      	add	r2, pc, #4	@ (adr r2, 8002ca4 <UART_SetConfig+0x400>)
 8002c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca2:	bf00      	nop
 8002ca4:	08002cc9 	.word	0x08002cc9
 8002ca8:	08002cd1 	.word	0x08002cd1
 8002cac:	08002cd9 	.word	0x08002cd9
 8002cb0:	08002cef 	.word	0x08002cef
 8002cb4:	08002cdf 	.word	0x08002cdf
 8002cb8:	08002cef 	.word	0x08002cef
 8002cbc:	08002cef 	.word	0x08002cef
 8002cc0:	08002cef 	.word	0x08002cef
 8002cc4:	08002ce7 	.word	0x08002ce7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cc8:	f7fe ffcc 	bl	8001c64 <HAL_RCC_GetPCLK1Freq>
 8002ccc:	61f8      	str	r0, [r7, #28]
        break;
 8002cce:	e014      	b.n	8002cfa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cd0:	f7fe ffde 	bl	8001c90 <HAL_RCC_GetPCLK2Freq>
 8002cd4:	61f8      	str	r0, [r7, #28]
        break;
 8002cd6:	e010      	b.n	8002cfa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cd8:	4b4d      	ldr	r3, [pc, #308]	@ (8002e10 <UART_SetConfig+0x56c>)
 8002cda:	61fb      	str	r3, [r7, #28]
        break;
 8002cdc:	e00d      	b.n	8002cfa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cde:	f7fe ff29 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 8002ce2:	61f8      	str	r0, [r7, #28]
        break;
 8002ce4:	e009      	b.n	8002cfa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ce6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002cea:	61fb      	str	r3, [r7, #28]
        break;
 8002cec:	e005      	b.n	8002cfa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002cf8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d077      	beq.n	8002df0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	005a      	lsls	r2, r3, #1
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	085b      	lsrs	r3, r3, #1
 8002d0a:	441a      	add	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d14:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	2b0f      	cmp	r3, #15
 8002d1a:	d916      	bls.n	8002d4a <UART_SetConfig+0x4a6>
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d22:	d212      	bcs.n	8002d4a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	f023 030f 	bic.w	r3, r3, #15
 8002d2c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	085b      	lsrs	r3, r3, #1
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	8afb      	ldrh	r3, [r7, #22]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	8afa      	ldrh	r2, [r7, #22]
 8002d46:	60da      	str	r2, [r3, #12]
 8002d48:	e052      	b.n	8002df0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002d50:	e04e      	b.n	8002df0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d52:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d56:	2b08      	cmp	r3, #8
 8002d58:	d827      	bhi.n	8002daa <UART_SetConfig+0x506>
 8002d5a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d60 <UART_SetConfig+0x4bc>)
 8002d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d60:	08002d85 	.word	0x08002d85
 8002d64:	08002d8d 	.word	0x08002d8d
 8002d68:	08002d95 	.word	0x08002d95
 8002d6c:	08002dab 	.word	0x08002dab
 8002d70:	08002d9b 	.word	0x08002d9b
 8002d74:	08002dab 	.word	0x08002dab
 8002d78:	08002dab 	.word	0x08002dab
 8002d7c:	08002dab 	.word	0x08002dab
 8002d80:	08002da3 	.word	0x08002da3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d84:	f7fe ff6e 	bl	8001c64 <HAL_RCC_GetPCLK1Freq>
 8002d88:	61f8      	str	r0, [r7, #28]
        break;
 8002d8a:	e014      	b.n	8002db6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d8c:	f7fe ff80 	bl	8001c90 <HAL_RCC_GetPCLK2Freq>
 8002d90:	61f8      	str	r0, [r7, #28]
        break;
 8002d92:	e010      	b.n	8002db6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d94:	4b1e      	ldr	r3, [pc, #120]	@ (8002e10 <UART_SetConfig+0x56c>)
 8002d96:	61fb      	str	r3, [r7, #28]
        break;
 8002d98:	e00d      	b.n	8002db6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d9a:	f7fe fecb 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 8002d9e:	61f8      	str	r0, [r7, #28]
        break;
 8002da0:	e009      	b.n	8002db6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002da2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002da6:	61fb      	str	r3, [r7, #28]
        break;
 8002da8:	e005      	b.n	8002db6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002db4:	bf00      	nop
    }

    if (pclk != 0U)
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d019      	beq.n	8002df0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	085a      	lsrs	r2, r3, #1
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	441a      	add	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dce:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	2b0f      	cmp	r3, #15
 8002dd4:	d909      	bls.n	8002dea <UART_SetConfig+0x546>
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ddc:	d205      	bcs.n	8002dea <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	60da      	str	r2, [r3, #12]
 8002de8:	e002      	b.n	8002df0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002dfc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3728      	adds	r7, #40	@ 0x28
 8002e04:	46bd      	mov	sp, r7
 8002e06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40008000 	.word	0x40008000
 8002e10:	00f42400 	.word	0x00f42400

08002e14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e20:	f003 0308 	and.w	r3, r3, #8
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00a      	beq.n	8002e3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00a      	beq.n	8002e60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00a      	beq.n	8002e82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e86:	f003 0304 	and.w	r3, r3, #4
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00a      	beq.n	8002ea4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea8:	f003 0310 	and.w	r3, r3, #16
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00a      	beq.n	8002ec6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eca:	f003 0320 	and.w	r3, r3, #32
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00a      	beq.n	8002ee8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d01a      	beq.n	8002f2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f12:	d10a      	bne.n	8002f2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00a      	beq.n	8002f4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	605a      	str	r2, [r3, #4]
  }
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b098      	sub	sp, #96	@ 0x60
 8002f5c:	af02      	add	r7, sp, #8
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f68:	f7fd fd92 	bl	8000a90 <HAL_GetTick>
 8002f6c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0308 	and.w	r3, r3, #8
 8002f78:	2b08      	cmp	r3, #8
 8002f7a:	d12e      	bne.n	8002fda <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f7c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f84:	2200      	movs	r2, #0
 8002f86:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f88c 	bl	80030a8 <UART_WaitOnFlagUntilTimeout>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d021      	beq.n	8002fda <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f9e:	e853 3f00 	ldrex	r3, [r3]
 8002fa2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002fa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fa6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002faa:	653b      	str	r3, [r7, #80]	@ 0x50
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fb6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002fba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002fbc:	e841 2300 	strex	r3, r2, [r1]
 8002fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002fc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1e6      	bne.n	8002f96 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e062      	b.n	80030a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	d149      	bne.n	800307c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fe8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f856 	bl	80030a8 <UART_WaitOnFlagUntilTimeout>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d03c      	beq.n	800307c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300a:	e853 3f00 	ldrex	r3, [r3]
 800300e:	623b      	str	r3, [r7, #32]
   return(result);
 8003010:	6a3b      	ldr	r3, [r7, #32]
 8003012:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003016:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	461a      	mov	r2, r3
 800301e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003020:	633b      	str	r3, [r7, #48]	@ 0x30
 8003022:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003024:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003026:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003028:	e841 2300 	strex	r3, r2, [r1]
 800302c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800302e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1e6      	bne.n	8003002 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	3308      	adds	r3, #8
 800303a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	e853 3f00 	ldrex	r3, [r3]
 8003042:	60fb      	str	r3, [r7, #12]
   return(result);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f023 0301 	bic.w	r3, r3, #1
 800304a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	3308      	adds	r3, #8
 8003052:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003054:	61fa      	str	r2, [r7, #28]
 8003056:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003058:	69b9      	ldr	r1, [r7, #24]
 800305a:	69fa      	ldr	r2, [r7, #28]
 800305c:	e841 2300 	strex	r3, r2, [r1]
 8003060:	617b      	str	r3, [r7, #20]
   return(result);
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1e5      	bne.n	8003034 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2220      	movs	r2, #32
 800306c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e011      	b.n	80030a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2220      	movs	r2, #32
 8003080:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2220      	movs	r2, #32
 8003086:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3758      	adds	r7, #88	@ 0x58
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	603b      	str	r3, [r7, #0]
 80030b4:	4613      	mov	r3, r2
 80030b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030b8:	e049      	b.n	800314e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c0:	d045      	beq.n	800314e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c2:	f7fd fce5 	bl	8000a90 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d302      	bcc.n	80030d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e048      	b.n	800316e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0304 	and.w	r3, r3, #4
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d031      	beq.n	800314e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	f003 0308 	and.w	r3, r3, #8
 80030f4:	2b08      	cmp	r3, #8
 80030f6:	d110      	bne.n	800311a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2208      	movs	r2, #8
 80030fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 f838 	bl	8003176 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2208      	movs	r2, #8
 800310a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e029      	b.n	800316e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003124:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003128:	d111      	bne.n	800314e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003132:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 f81e 	bl	8003176 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2220      	movs	r2, #32
 800313e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e00f      	b.n	800316e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	69da      	ldr	r2, [r3, #28]
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	4013      	ands	r3, r2
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	429a      	cmp	r2, r3
 800315c:	bf0c      	ite	eq
 800315e:	2301      	moveq	r3, #1
 8003160:	2300      	movne	r3, #0
 8003162:	b2db      	uxtb	r3, r3
 8003164:	461a      	mov	r2, r3
 8003166:	79fb      	ldrb	r3, [r7, #7]
 8003168:	429a      	cmp	r2, r3
 800316a:	d0a6      	beq.n	80030ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003176:	b480      	push	{r7}
 8003178:	b095      	sub	sp, #84	@ 0x54
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003186:	e853 3f00 	ldrex	r3, [r3]
 800318a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800318c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800318e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003192:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	461a      	mov	r2, r3
 800319a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800319c:	643b      	str	r3, [r7, #64]	@ 0x40
 800319e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80031a4:	e841 2300 	strex	r3, r2, [r1]
 80031a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80031aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1e6      	bne.n	800317e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	3308      	adds	r3, #8
 80031b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b8:	6a3b      	ldr	r3, [r7, #32]
 80031ba:	e853 3f00 	ldrex	r3, [r3]
 80031be:	61fb      	str	r3, [r7, #28]
   return(result);
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	f023 0301 	bic.w	r3, r3, #1
 80031c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	3308      	adds	r3, #8
 80031ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031d8:	e841 2300 	strex	r3, r2, [r1]
 80031dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80031de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1e5      	bne.n	80031b0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d118      	bne.n	800321e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	e853 3f00 	ldrex	r3, [r3]
 80031f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	f023 0310 	bic.w	r3, r3, #16
 8003200:	647b      	str	r3, [r7, #68]	@ 0x44
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	461a      	mov	r2, r3
 8003208:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800320a:	61bb      	str	r3, [r7, #24]
 800320c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800320e:	6979      	ldr	r1, [r7, #20]
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	e841 2300 	strex	r3, r2, [r1]
 8003216:	613b      	str	r3, [r7, #16]
   return(result);
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1e6      	bne.n	80031ec <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2220      	movs	r2, #32
 8003222:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003232:	bf00      	nop
 8003234:	3754      	adds	r7, #84	@ 0x54
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
	...

08003240 <siprintf>:
 8003240:	b40e      	push	{r1, r2, r3}
 8003242:	b500      	push	{lr}
 8003244:	b09c      	sub	sp, #112	@ 0x70
 8003246:	ab1d      	add	r3, sp, #116	@ 0x74
 8003248:	9002      	str	r0, [sp, #8]
 800324a:	9006      	str	r0, [sp, #24]
 800324c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003250:	4809      	ldr	r0, [pc, #36]	@ (8003278 <siprintf+0x38>)
 8003252:	9107      	str	r1, [sp, #28]
 8003254:	9104      	str	r1, [sp, #16]
 8003256:	4909      	ldr	r1, [pc, #36]	@ (800327c <siprintf+0x3c>)
 8003258:	f853 2b04 	ldr.w	r2, [r3], #4
 800325c:	9105      	str	r1, [sp, #20]
 800325e:	6800      	ldr	r0, [r0, #0]
 8003260:	9301      	str	r3, [sp, #4]
 8003262:	a902      	add	r1, sp, #8
 8003264:	f000 f994 	bl	8003590 <_svfiprintf_r>
 8003268:	9b02      	ldr	r3, [sp, #8]
 800326a:	2200      	movs	r2, #0
 800326c:	701a      	strb	r2, [r3, #0]
 800326e:	b01c      	add	sp, #112	@ 0x70
 8003270:	f85d eb04 	ldr.w	lr, [sp], #4
 8003274:	b003      	add	sp, #12
 8003276:	4770      	bx	lr
 8003278:	20000010 	.word	0x20000010
 800327c:	ffff0208 	.word	0xffff0208

08003280 <memset>:
 8003280:	4402      	add	r2, r0
 8003282:	4603      	mov	r3, r0
 8003284:	4293      	cmp	r3, r2
 8003286:	d100      	bne.n	800328a <memset+0xa>
 8003288:	4770      	bx	lr
 800328a:	f803 1b01 	strb.w	r1, [r3], #1
 800328e:	e7f9      	b.n	8003284 <memset+0x4>

08003290 <__errno>:
 8003290:	4b01      	ldr	r3, [pc, #4]	@ (8003298 <__errno+0x8>)
 8003292:	6818      	ldr	r0, [r3, #0]
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	20000010 	.word	0x20000010

0800329c <__libc_init_array>:
 800329c:	b570      	push	{r4, r5, r6, lr}
 800329e:	4d0d      	ldr	r5, [pc, #52]	@ (80032d4 <__libc_init_array+0x38>)
 80032a0:	4c0d      	ldr	r4, [pc, #52]	@ (80032d8 <__libc_init_array+0x3c>)
 80032a2:	1b64      	subs	r4, r4, r5
 80032a4:	10a4      	asrs	r4, r4, #2
 80032a6:	2600      	movs	r6, #0
 80032a8:	42a6      	cmp	r6, r4
 80032aa:	d109      	bne.n	80032c0 <__libc_init_array+0x24>
 80032ac:	4d0b      	ldr	r5, [pc, #44]	@ (80032dc <__libc_init_array+0x40>)
 80032ae:	4c0c      	ldr	r4, [pc, #48]	@ (80032e0 <__libc_init_array+0x44>)
 80032b0:	f000 fc66 	bl	8003b80 <_init>
 80032b4:	1b64      	subs	r4, r4, r5
 80032b6:	10a4      	asrs	r4, r4, #2
 80032b8:	2600      	movs	r6, #0
 80032ba:	42a6      	cmp	r6, r4
 80032bc:	d105      	bne.n	80032ca <__libc_init_array+0x2e>
 80032be:	bd70      	pop	{r4, r5, r6, pc}
 80032c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80032c4:	4798      	blx	r3
 80032c6:	3601      	adds	r6, #1
 80032c8:	e7ee      	b.n	80032a8 <__libc_init_array+0xc>
 80032ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80032ce:	4798      	blx	r3
 80032d0:	3601      	adds	r6, #1
 80032d2:	e7f2      	b.n	80032ba <__libc_init_array+0x1e>
 80032d4:	08003c34 	.word	0x08003c34
 80032d8:	08003c34 	.word	0x08003c34
 80032dc:	08003c34 	.word	0x08003c34
 80032e0:	08003c38 	.word	0x08003c38

080032e4 <__retarget_lock_acquire_recursive>:
 80032e4:	4770      	bx	lr

080032e6 <__retarget_lock_release_recursive>:
 80032e6:	4770      	bx	lr

080032e8 <_free_r>:
 80032e8:	b538      	push	{r3, r4, r5, lr}
 80032ea:	4605      	mov	r5, r0
 80032ec:	2900      	cmp	r1, #0
 80032ee:	d041      	beq.n	8003374 <_free_r+0x8c>
 80032f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032f4:	1f0c      	subs	r4, r1, #4
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	bfb8      	it	lt
 80032fa:	18e4      	addlt	r4, r4, r3
 80032fc:	f000 f8e0 	bl	80034c0 <__malloc_lock>
 8003300:	4a1d      	ldr	r2, [pc, #116]	@ (8003378 <_free_r+0x90>)
 8003302:	6813      	ldr	r3, [r2, #0]
 8003304:	b933      	cbnz	r3, 8003314 <_free_r+0x2c>
 8003306:	6063      	str	r3, [r4, #4]
 8003308:	6014      	str	r4, [r2, #0]
 800330a:	4628      	mov	r0, r5
 800330c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003310:	f000 b8dc 	b.w	80034cc <__malloc_unlock>
 8003314:	42a3      	cmp	r3, r4
 8003316:	d908      	bls.n	800332a <_free_r+0x42>
 8003318:	6820      	ldr	r0, [r4, #0]
 800331a:	1821      	adds	r1, r4, r0
 800331c:	428b      	cmp	r3, r1
 800331e:	bf01      	itttt	eq
 8003320:	6819      	ldreq	r1, [r3, #0]
 8003322:	685b      	ldreq	r3, [r3, #4]
 8003324:	1809      	addeq	r1, r1, r0
 8003326:	6021      	streq	r1, [r4, #0]
 8003328:	e7ed      	b.n	8003306 <_free_r+0x1e>
 800332a:	461a      	mov	r2, r3
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	b10b      	cbz	r3, 8003334 <_free_r+0x4c>
 8003330:	42a3      	cmp	r3, r4
 8003332:	d9fa      	bls.n	800332a <_free_r+0x42>
 8003334:	6811      	ldr	r1, [r2, #0]
 8003336:	1850      	adds	r0, r2, r1
 8003338:	42a0      	cmp	r0, r4
 800333a:	d10b      	bne.n	8003354 <_free_r+0x6c>
 800333c:	6820      	ldr	r0, [r4, #0]
 800333e:	4401      	add	r1, r0
 8003340:	1850      	adds	r0, r2, r1
 8003342:	4283      	cmp	r3, r0
 8003344:	6011      	str	r1, [r2, #0]
 8003346:	d1e0      	bne.n	800330a <_free_r+0x22>
 8003348:	6818      	ldr	r0, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	6053      	str	r3, [r2, #4]
 800334e:	4408      	add	r0, r1
 8003350:	6010      	str	r0, [r2, #0]
 8003352:	e7da      	b.n	800330a <_free_r+0x22>
 8003354:	d902      	bls.n	800335c <_free_r+0x74>
 8003356:	230c      	movs	r3, #12
 8003358:	602b      	str	r3, [r5, #0]
 800335a:	e7d6      	b.n	800330a <_free_r+0x22>
 800335c:	6820      	ldr	r0, [r4, #0]
 800335e:	1821      	adds	r1, r4, r0
 8003360:	428b      	cmp	r3, r1
 8003362:	bf04      	itt	eq
 8003364:	6819      	ldreq	r1, [r3, #0]
 8003366:	685b      	ldreq	r3, [r3, #4]
 8003368:	6063      	str	r3, [r4, #4]
 800336a:	bf04      	itt	eq
 800336c:	1809      	addeq	r1, r1, r0
 800336e:	6021      	streq	r1, [r4, #0]
 8003370:	6054      	str	r4, [r2, #4]
 8003372:	e7ca      	b.n	800330a <_free_r+0x22>
 8003374:	bd38      	pop	{r3, r4, r5, pc}
 8003376:	bf00      	nop
 8003378:	20000284 	.word	0x20000284

0800337c <sbrk_aligned>:
 800337c:	b570      	push	{r4, r5, r6, lr}
 800337e:	4e0f      	ldr	r6, [pc, #60]	@ (80033bc <sbrk_aligned+0x40>)
 8003380:	460c      	mov	r4, r1
 8003382:	6831      	ldr	r1, [r6, #0]
 8003384:	4605      	mov	r5, r0
 8003386:	b911      	cbnz	r1, 800338e <sbrk_aligned+0x12>
 8003388:	f000 fba6 	bl	8003ad8 <_sbrk_r>
 800338c:	6030      	str	r0, [r6, #0]
 800338e:	4621      	mov	r1, r4
 8003390:	4628      	mov	r0, r5
 8003392:	f000 fba1 	bl	8003ad8 <_sbrk_r>
 8003396:	1c43      	adds	r3, r0, #1
 8003398:	d103      	bne.n	80033a2 <sbrk_aligned+0x26>
 800339a:	f04f 34ff 	mov.w	r4, #4294967295
 800339e:	4620      	mov	r0, r4
 80033a0:	bd70      	pop	{r4, r5, r6, pc}
 80033a2:	1cc4      	adds	r4, r0, #3
 80033a4:	f024 0403 	bic.w	r4, r4, #3
 80033a8:	42a0      	cmp	r0, r4
 80033aa:	d0f8      	beq.n	800339e <sbrk_aligned+0x22>
 80033ac:	1a21      	subs	r1, r4, r0
 80033ae:	4628      	mov	r0, r5
 80033b0:	f000 fb92 	bl	8003ad8 <_sbrk_r>
 80033b4:	3001      	adds	r0, #1
 80033b6:	d1f2      	bne.n	800339e <sbrk_aligned+0x22>
 80033b8:	e7ef      	b.n	800339a <sbrk_aligned+0x1e>
 80033ba:	bf00      	nop
 80033bc:	20000280 	.word	0x20000280

080033c0 <_malloc_r>:
 80033c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033c4:	1ccd      	adds	r5, r1, #3
 80033c6:	f025 0503 	bic.w	r5, r5, #3
 80033ca:	3508      	adds	r5, #8
 80033cc:	2d0c      	cmp	r5, #12
 80033ce:	bf38      	it	cc
 80033d0:	250c      	movcc	r5, #12
 80033d2:	2d00      	cmp	r5, #0
 80033d4:	4606      	mov	r6, r0
 80033d6:	db01      	blt.n	80033dc <_malloc_r+0x1c>
 80033d8:	42a9      	cmp	r1, r5
 80033da:	d904      	bls.n	80033e6 <_malloc_r+0x26>
 80033dc:	230c      	movs	r3, #12
 80033de:	6033      	str	r3, [r6, #0]
 80033e0:	2000      	movs	r0, #0
 80033e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80034bc <_malloc_r+0xfc>
 80033ea:	f000 f869 	bl	80034c0 <__malloc_lock>
 80033ee:	f8d8 3000 	ldr.w	r3, [r8]
 80033f2:	461c      	mov	r4, r3
 80033f4:	bb44      	cbnz	r4, 8003448 <_malloc_r+0x88>
 80033f6:	4629      	mov	r1, r5
 80033f8:	4630      	mov	r0, r6
 80033fa:	f7ff ffbf 	bl	800337c <sbrk_aligned>
 80033fe:	1c43      	adds	r3, r0, #1
 8003400:	4604      	mov	r4, r0
 8003402:	d158      	bne.n	80034b6 <_malloc_r+0xf6>
 8003404:	f8d8 4000 	ldr.w	r4, [r8]
 8003408:	4627      	mov	r7, r4
 800340a:	2f00      	cmp	r7, #0
 800340c:	d143      	bne.n	8003496 <_malloc_r+0xd6>
 800340e:	2c00      	cmp	r4, #0
 8003410:	d04b      	beq.n	80034aa <_malloc_r+0xea>
 8003412:	6823      	ldr	r3, [r4, #0]
 8003414:	4639      	mov	r1, r7
 8003416:	4630      	mov	r0, r6
 8003418:	eb04 0903 	add.w	r9, r4, r3
 800341c:	f000 fb5c 	bl	8003ad8 <_sbrk_r>
 8003420:	4581      	cmp	r9, r0
 8003422:	d142      	bne.n	80034aa <_malloc_r+0xea>
 8003424:	6821      	ldr	r1, [r4, #0]
 8003426:	1a6d      	subs	r5, r5, r1
 8003428:	4629      	mov	r1, r5
 800342a:	4630      	mov	r0, r6
 800342c:	f7ff ffa6 	bl	800337c <sbrk_aligned>
 8003430:	3001      	adds	r0, #1
 8003432:	d03a      	beq.n	80034aa <_malloc_r+0xea>
 8003434:	6823      	ldr	r3, [r4, #0]
 8003436:	442b      	add	r3, r5
 8003438:	6023      	str	r3, [r4, #0]
 800343a:	f8d8 3000 	ldr.w	r3, [r8]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	bb62      	cbnz	r2, 800349c <_malloc_r+0xdc>
 8003442:	f8c8 7000 	str.w	r7, [r8]
 8003446:	e00f      	b.n	8003468 <_malloc_r+0xa8>
 8003448:	6822      	ldr	r2, [r4, #0]
 800344a:	1b52      	subs	r2, r2, r5
 800344c:	d420      	bmi.n	8003490 <_malloc_r+0xd0>
 800344e:	2a0b      	cmp	r2, #11
 8003450:	d917      	bls.n	8003482 <_malloc_r+0xc2>
 8003452:	1961      	adds	r1, r4, r5
 8003454:	42a3      	cmp	r3, r4
 8003456:	6025      	str	r5, [r4, #0]
 8003458:	bf18      	it	ne
 800345a:	6059      	strne	r1, [r3, #4]
 800345c:	6863      	ldr	r3, [r4, #4]
 800345e:	bf08      	it	eq
 8003460:	f8c8 1000 	streq.w	r1, [r8]
 8003464:	5162      	str	r2, [r4, r5]
 8003466:	604b      	str	r3, [r1, #4]
 8003468:	4630      	mov	r0, r6
 800346a:	f000 f82f 	bl	80034cc <__malloc_unlock>
 800346e:	f104 000b 	add.w	r0, r4, #11
 8003472:	1d23      	adds	r3, r4, #4
 8003474:	f020 0007 	bic.w	r0, r0, #7
 8003478:	1ac2      	subs	r2, r0, r3
 800347a:	bf1c      	itt	ne
 800347c:	1a1b      	subne	r3, r3, r0
 800347e:	50a3      	strne	r3, [r4, r2]
 8003480:	e7af      	b.n	80033e2 <_malloc_r+0x22>
 8003482:	6862      	ldr	r2, [r4, #4]
 8003484:	42a3      	cmp	r3, r4
 8003486:	bf0c      	ite	eq
 8003488:	f8c8 2000 	streq.w	r2, [r8]
 800348c:	605a      	strne	r2, [r3, #4]
 800348e:	e7eb      	b.n	8003468 <_malloc_r+0xa8>
 8003490:	4623      	mov	r3, r4
 8003492:	6864      	ldr	r4, [r4, #4]
 8003494:	e7ae      	b.n	80033f4 <_malloc_r+0x34>
 8003496:	463c      	mov	r4, r7
 8003498:	687f      	ldr	r7, [r7, #4]
 800349a:	e7b6      	b.n	800340a <_malloc_r+0x4a>
 800349c:	461a      	mov	r2, r3
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	42a3      	cmp	r3, r4
 80034a2:	d1fb      	bne.n	800349c <_malloc_r+0xdc>
 80034a4:	2300      	movs	r3, #0
 80034a6:	6053      	str	r3, [r2, #4]
 80034a8:	e7de      	b.n	8003468 <_malloc_r+0xa8>
 80034aa:	230c      	movs	r3, #12
 80034ac:	6033      	str	r3, [r6, #0]
 80034ae:	4630      	mov	r0, r6
 80034b0:	f000 f80c 	bl	80034cc <__malloc_unlock>
 80034b4:	e794      	b.n	80033e0 <_malloc_r+0x20>
 80034b6:	6005      	str	r5, [r0, #0]
 80034b8:	e7d6      	b.n	8003468 <_malloc_r+0xa8>
 80034ba:	bf00      	nop
 80034bc:	20000284 	.word	0x20000284

080034c0 <__malloc_lock>:
 80034c0:	4801      	ldr	r0, [pc, #4]	@ (80034c8 <__malloc_lock+0x8>)
 80034c2:	f7ff bf0f 	b.w	80032e4 <__retarget_lock_acquire_recursive>
 80034c6:	bf00      	nop
 80034c8:	2000027c 	.word	0x2000027c

080034cc <__malloc_unlock>:
 80034cc:	4801      	ldr	r0, [pc, #4]	@ (80034d4 <__malloc_unlock+0x8>)
 80034ce:	f7ff bf0a 	b.w	80032e6 <__retarget_lock_release_recursive>
 80034d2:	bf00      	nop
 80034d4:	2000027c 	.word	0x2000027c

080034d8 <__ssputs_r>:
 80034d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034dc:	688e      	ldr	r6, [r1, #8]
 80034de:	461f      	mov	r7, r3
 80034e0:	42be      	cmp	r6, r7
 80034e2:	680b      	ldr	r3, [r1, #0]
 80034e4:	4682      	mov	sl, r0
 80034e6:	460c      	mov	r4, r1
 80034e8:	4690      	mov	r8, r2
 80034ea:	d82d      	bhi.n	8003548 <__ssputs_r+0x70>
 80034ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80034f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80034f4:	d026      	beq.n	8003544 <__ssputs_r+0x6c>
 80034f6:	6965      	ldr	r5, [r4, #20]
 80034f8:	6909      	ldr	r1, [r1, #16]
 80034fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80034fe:	eba3 0901 	sub.w	r9, r3, r1
 8003502:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003506:	1c7b      	adds	r3, r7, #1
 8003508:	444b      	add	r3, r9
 800350a:	106d      	asrs	r5, r5, #1
 800350c:	429d      	cmp	r5, r3
 800350e:	bf38      	it	cc
 8003510:	461d      	movcc	r5, r3
 8003512:	0553      	lsls	r3, r2, #21
 8003514:	d527      	bpl.n	8003566 <__ssputs_r+0x8e>
 8003516:	4629      	mov	r1, r5
 8003518:	f7ff ff52 	bl	80033c0 <_malloc_r>
 800351c:	4606      	mov	r6, r0
 800351e:	b360      	cbz	r0, 800357a <__ssputs_r+0xa2>
 8003520:	6921      	ldr	r1, [r4, #16]
 8003522:	464a      	mov	r2, r9
 8003524:	f000 fae8 	bl	8003af8 <memcpy>
 8003528:	89a3      	ldrh	r3, [r4, #12]
 800352a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800352e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003532:	81a3      	strh	r3, [r4, #12]
 8003534:	6126      	str	r6, [r4, #16]
 8003536:	6165      	str	r5, [r4, #20]
 8003538:	444e      	add	r6, r9
 800353a:	eba5 0509 	sub.w	r5, r5, r9
 800353e:	6026      	str	r6, [r4, #0]
 8003540:	60a5      	str	r5, [r4, #8]
 8003542:	463e      	mov	r6, r7
 8003544:	42be      	cmp	r6, r7
 8003546:	d900      	bls.n	800354a <__ssputs_r+0x72>
 8003548:	463e      	mov	r6, r7
 800354a:	6820      	ldr	r0, [r4, #0]
 800354c:	4632      	mov	r2, r6
 800354e:	4641      	mov	r1, r8
 8003550:	f000 faa8 	bl	8003aa4 <memmove>
 8003554:	68a3      	ldr	r3, [r4, #8]
 8003556:	1b9b      	subs	r3, r3, r6
 8003558:	60a3      	str	r3, [r4, #8]
 800355a:	6823      	ldr	r3, [r4, #0]
 800355c:	4433      	add	r3, r6
 800355e:	6023      	str	r3, [r4, #0]
 8003560:	2000      	movs	r0, #0
 8003562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003566:	462a      	mov	r2, r5
 8003568:	f000 fad4 	bl	8003b14 <_realloc_r>
 800356c:	4606      	mov	r6, r0
 800356e:	2800      	cmp	r0, #0
 8003570:	d1e0      	bne.n	8003534 <__ssputs_r+0x5c>
 8003572:	6921      	ldr	r1, [r4, #16]
 8003574:	4650      	mov	r0, sl
 8003576:	f7ff feb7 	bl	80032e8 <_free_r>
 800357a:	230c      	movs	r3, #12
 800357c:	f8ca 3000 	str.w	r3, [sl]
 8003580:	89a3      	ldrh	r3, [r4, #12]
 8003582:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003586:	81a3      	strh	r3, [r4, #12]
 8003588:	f04f 30ff 	mov.w	r0, #4294967295
 800358c:	e7e9      	b.n	8003562 <__ssputs_r+0x8a>
	...

08003590 <_svfiprintf_r>:
 8003590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003594:	4698      	mov	r8, r3
 8003596:	898b      	ldrh	r3, [r1, #12]
 8003598:	061b      	lsls	r3, r3, #24
 800359a:	b09d      	sub	sp, #116	@ 0x74
 800359c:	4607      	mov	r7, r0
 800359e:	460d      	mov	r5, r1
 80035a0:	4614      	mov	r4, r2
 80035a2:	d510      	bpl.n	80035c6 <_svfiprintf_r+0x36>
 80035a4:	690b      	ldr	r3, [r1, #16]
 80035a6:	b973      	cbnz	r3, 80035c6 <_svfiprintf_r+0x36>
 80035a8:	2140      	movs	r1, #64	@ 0x40
 80035aa:	f7ff ff09 	bl	80033c0 <_malloc_r>
 80035ae:	6028      	str	r0, [r5, #0]
 80035b0:	6128      	str	r0, [r5, #16]
 80035b2:	b930      	cbnz	r0, 80035c2 <_svfiprintf_r+0x32>
 80035b4:	230c      	movs	r3, #12
 80035b6:	603b      	str	r3, [r7, #0]
 80035b8:	f04f 30ff 	mov.w	r0, #4294967295
 80035bc:	b01d      	add	sp, #116	@ 0x74
 80035be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035c2:	2340      	movs	r3, #64	@ 0x40
 80035c4:	616b      	str	r3, [r5, #20]
 80035c6:	2300      	movs	r3, #0
 80035c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80035ca:	2320      	movs	r3, #32
 80035cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80035d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80035d4:	2330      	movs	r3, #48	@ 0x30
 80035d6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003774 <_svfiprintf_r+0x1e4>
 80035da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80035de:	f04f 0901 	mov.w	r9, #1
 80035e2:	4623      	mov	r3, r4
 80035e4:	469a      	mov	sl, r3
 80035e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035ea:	b10a      	cbz	r2, 80035f0 <_svfiprintf_r+0x60>
 80035ec:	2a25      	cmp	r2, #37	@ 0x25
 80035ee:	d1f9      	bne.n	80035e4 <_svfiprintf_r+0x54>
 80035f0:	ebba 0b04 	subs.w	fp, sl, r4
 80035f4:	d00b      	beq.n	800360e <_svfiprintf_r+0x7e>
 80035f6:	465b      	mov	r3, fp
 80035f8:	4622      	mov	r2, r4
 80035fa:	4629      	mov	r1, r5
 80035fc:	4638      	mov	r0, r7
 80035fe:	f7ff ff6b 	bl	80034d8 <__ssputs_r>
 8003602:	3001      	adds	r0, #1
 8003604:	f000 80a7 	beq.w	8003756 <_svfiprintf_r+0x1c6>
 8003608:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800360a:	445a      	add	r2, fp
 800360c:	9209      	str	r2, [sp, #36]	@ 0x24
 800360e:	f89a 3000 	ldrb.w	r3, [sl]
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 809f 	beq.w	8003756 <_svfiprintf_r+0x1c6>
 8003618:	2300      	movs	r3, #0
 800361a:	f04f 32ff 	mov.w	r2, #4294967295
 800361e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003622:	f10a 0a01 	add.w	sl, sl, #1
 8003626:	9304      	str	r3, [sp, #16]
 8003628:	9307      	str	r3, [sp, #28]
 800362a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800362e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003630:	4654      	mov	r4, sl
 8003632:	2205      	movs	r2, #5
 8003634:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003638:	484e      	ldr	r0, [pc, #312]	@ (8003774 <_svfiprintf_r+0x1e4>)
 800363a:	f7fc fdc9 	bl	80001d0 <memchr>
 800363e:	9a04      	ldr	r2, [sp, #16]
 8003640:	b9d8      	cbnz	r0, 800367a <_svfiprintf_r+0xea>
 8003642:	06d0      	lsls	r0, r2, #27
 8003644:	bf44      	itt	mi
 8003646:	2320      	movmi	r3, #32
 8003648:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800364c:	0711      	lsls	r1, r2, #28
 800364e:	bf44      	itt	mi
 8003650:	232b      	movmi	r3, #43	@ 0x2b
 8003652:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003656:	f89a 3000 	ldrb.w	r3, [sl]
 800365a:	2b2a      	cmp	r3, #42	@ 0x2a
 800365c:	d015      	beq.n	800368a <_svfiprintf_r+0xfa>
 800365e:	9a07      	ldr	r2, [sp, #28]
 8003660:	4654      	mov	r4, sl
 8003662:	2000      	movs	r0, #0
 8003664:	f04f 0c0a 	mov.w	ip, #10
 8003668:	4621      	mov	r1, r4
 800366a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800366e:	3b30      	subs	r3, #48	@ 0x30
 8003670:	2b09      	cmp	r3, #9
 8003672:	d94b      	bls.n	800370c <_svfiprintf_r+0x17c>
 8003674:	b1b0      	cbz	r0, 80036a4 <_svfiprintf_r+0x114>
 8003676:	9207      	str	r2, [sp, #28]
 8003678:	e014      	b.n	80036a4 <_svfiprintf_r+0x114>
 800367a:	eba0 0308 	sub.w	r3, r0, r8
 800367e:	fa09 f303 	lsl.w	r3, r9, r3
 8003682:	4313      	orrs	r3, r2
 8003684:	9304      	str	r3, [sp, #16]
 8003686:	46a2      	mov	sl, r4
 8003688:	e7d2      	b.n	8003630 <_svfiprintf_r+0xa0>
 800368a:	9b03      	ldr	r3, [sp, #12]
 800368c:	1d19      	adds	r1, r3, #4
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	9103      	str	r1, [sp, #12]
 8003692:	2b00      	cmp	r3, #0
 8003694:	bfbb      	ittet	lt
 8003696:	425b      	neglt	r3, r3
 8003698:	f042 0202 	orrlt.w	r2, r2, #2
 800369c:	9307      	strge	r3, [sp, #28]
 800369e:	9307      	strlt	r3, [sp, #28]
 80036a0:	bfb8      	it	lt
 80036a2:	9204      	strlt	r2, [sp, #16]
 80036a4:	7823      	ldrb	r3, [r4, #0]
 80036a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80036a8:	d10a      	bne.n	80036c0 <_svfiprintf_r+0x130>
 80036aa:	7863      	ldrb	r3, [r4, #1]
 80036ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80036ae:	d132      	bne.n	8003716 <_svfiprintf_r+0x186>
 80036b0:	9b03      	ldr	r3, [sp, #12]
 80036b2:	1d1a      	adds	r2, r3, #4
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	9203      	str	r2, [sp, #12]
 80036b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80036bc:	3402      	adds	r4, #2
 80036be:	9305      	str	r3, [sp, #20]
 80036c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003784 <_svfiprintf_r+0x1f4>
 80036c4:	7821      	ldrb	r1, [r4, #0]
 80036c6:	2203      	movs	r2, #3
 80036c8:	4650      	mov	r0, sl
 80036ca:	f7fc fd81 	bl	80001d0 <memchr>
 80036ce:	b138      	cbz	r0, 80036e0 <_svfiprintf_r+0x150>
 80036d0:	9b04      	ldr	r3, [sp, #16]
 80036d2:	eba0 000a 	sub.w	r0, r0, sl
 80036d6:	2240      	movs	r2, #64	@ 0x40
 80036d8:	4082      	lsls	r2, r0
 80036da:	4313      	orrs	r3, r2
 80036dc:	3401      	adds	r4, #1
 80036de:	9304      	str	r3, [sp, #16]
 80036e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036e4:	4824      	ldr	r0, [pc, #144]	@ (8003778 <_svfiprintf_r+0x1e8>)
 80036e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80036ea:	2206      	movs	r2, #6
 80036ec:	f7fc fd70 	bl	80001d0 <memchr>
 80036f0:	2800      	cmp	r0, #0
 80036f2:	d036      	beq.n	8003762 <_svfiprintf_r+0x1d2>
 80036f4:	4b21      	ldr	r3, [pc, #132]	@ (800377c <_svfiprintf_r+0x1ec>)
 80036f6:	bb1b      	cbnz	r3, 8003740 <_svfiprintf_r+0x1b0>
 80036f8:	9b03      	ldr	r3, [sp, #12]
 80036fa:	3307      	adds	r3, #7
 80036fc:	f023 0307 	bic.w	r3, r3, #7
 8003700:	3308      	adds	r3, #8
 8003702:	9303      	str	r3, [sp, #12]
 8003704:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003706:	4433      	add	r3, r6
 8003708:	9309      	str	r3, [sp, #36]	@ 0x24
 800370a:	e76a      	b.n	80035e2 <_svfiprintf_r+0x52>
 800370c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003710:	460c      	mov	r4, r1
 8003712:	2001      	movs	r0, #1
 8003714:	e7a8      	b.n	8003668 <_svfiprintf_r+0xd8>
 8003716:	2300      	movs	r3, #0
 8003718:	3401      	adds	r4, #1
 800371a:	9305      	str	r3, [sp, #20]
 800371c:	4619      	mov	r1, r3
 800371e:	f04f 0c0a 	mov.w	ip, #10
 8003722:	4620      	mov	r0, r4
 8003724:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003728:	3a30      	subs	r2, #48	@ 0x30
 800372a:	2a09      	cmp	r2, #9
 800372c:	d903      	bls.n	8003736 <_svfiprintf_r+0x1a6>
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0c6      	beq.n	80036c0 <_svfiprintf_r+0x130>
 8003732:	9105      	str	r1, [sp, #20]
 8003734:	e7c4      	b.n	80036c0 <_svfiprintf_r+0x130>
 8003736:	fb0c 2101 	mla	r1, ip, r1, r2
 800373a:	4604      	mov	r4, r0
 800373c:	2301      	movs	r3, #1
 800373e:	e7f0      	b.n	8003722 <_svfiprintf_r+0x192>
 8003740:	ab03      	add	r3, sp, #12
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	462a      	mov	r2, r5
 8003746:	4b0e      	ldr	r3, [pc, #56]	@ (8003780 <_svfiprintf_r+0x1f0>)
 8003748:	a904      	add	r1, sp, #16
 800374a:	4638      	mov	r0, r7
 800374c:	f3af 8000 	nop.w
 8003750:	1c42      	adds	r2, r0, #1
 8003752:	4606      	mov	r6, r0
 8003754:	d1d6      	bne.n	8003704 <_svfiprintf_r+0x174>
 8003756:	89ab      	ldrh	r3, [r5, #12]
 8003758:	065b      	lsls	r3, r3, #25
 800375a:	f53f af2d 	bmi.w	80035b8 <_svfiprintf_r+0x28>
 800375e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003760:	e72c      	b.n	80035bc <_svfiprintf_r+0x2c>
 8003762:	ab03      	add	r3, sp, #12
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	462a      	mov	r2, r5
 8003768:	4b05      	ldr	r3, [pc, #20]	@ (8003780 <_svfiprintf_r+0x1f0>)
 800376a:	a904      	add	r1, sp, #16
 800376c:	4638      	mov	r0, r7
 800376e:	f000 f879 	bl	8003864 <_printf_i>
 8003772:	e7ed      	b.n	8003750 <_svfiprintf_r+0x1c0>
 8003774:	08003bf8 	.word	0x08003bf8
 8003778:	08003c02 	.word	0x08003c02
 800377c:	00000000 	.word	0x00000000
 8003780:	080034d9 	.word	0x080034d9
 8003784:	08003bfe 	.word	0x08003bfe

08003788 <_printf_common>:
 8003788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800378c:	4616      	mov	r6, r2
 800378e:	4698      	mov	r8, r3
 8003790:	688a      	ldr	r2, [r1, #8]
 8003792:	690b      	ldr	r3, [r1, #16]
 8003794:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003798:	4293      	cmp	r3, r2
 800379a:	bfb8      	it	lt
 800379c:	4613      	movlt	r3, r2
 800379e:	6033      	str	r3, [r6, #0]
 80037a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80037a4:	4607      	mov	r7, r0
 80037a6:	460c      	mov	r4, r1
 80037a8:	b10a      	cbz	r2, 80037ae <_printf_common+0x26>
 80037aa:	3301      	adds	r3, #1
 80037ac:	6033      	str	r3, [r6, #0]
 80037ae:	6823      	ldr	r3, [r4, #0]
 80037b0:	0699      	lsls	r1, r3, #26
 80037b2:	bf42      	ittt	mi
 80037b4:	6833      	ldrmi	r3, [r6, #0]
 80037b6:	3302      	addmi	r3, #2
 80037b8:	6033      	strmi	r3, [r6, #0]
 80037ba:	6825      	ldr	r5, [r4, #0]
 80037bc:	f015 0506 	ands.w	r5, r5, #6
 80037c0:	d106      	bne.n	80037d0 <_printf_common+0x48>
 80037c2:	f104 0a19 	add.w	sl, r4, #25
 80037c6:	68e3      	ldr	r3, [r4, #12]
 80037c8:	6832      	ldr	r2, [r6, #0]
 80037ca:	1a9b      	subs	r3, r3, r2
 80037cc:	42ab      	cmp	r3, r5
 80037ce:	dc26      	bgt.n	800381e <_printf_common+0x96>
 80037d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80037d4:	6822      	ldr	r2, [r4, #0]
 80037d6:	3b00      	subs	r3, #0
 80037d8:	bf18      	it	ne
 80037da:	2301      	movne	r3, #1
 80037dc:	0692      	lsls	r2, r2, #26
 80037de:	d42b      	bmi.n	8003838 <_printf_common+0xb0>
 80037e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80037e4:	4641      	mov	r1, r8
 80037e6:	4638      	mov	r0, r7
 80037e8:	47c8      	blx	r9
 80037ea:	3001      	adds	r0, #1
 80037ec:	d01e      	beq.n	800382c <_printf_common+0xa4>
 80037ee:	6823      	ldr	r3, [r4, #0]
 80037f0:	6922      	ldr	r2, [r4, #16]
 80037f2:	f003 0306 	and.w	r3, r3, #6
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	bf02      	ittt	eq
 80037fa:	68e5      	ldreq	r5, [r4, #12]
 80037fc:	6833      	ldreq	r3, [r6, #0]
 80037fe:	1aed      	subeq	r5, r5, r3
 8003800:	68a3      	ldr	r3, [r4, #8]
 8003802:	bf0c      	ite	eq
 8003804:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003808:	2500      	movne	r5, #0
 800380a:	4293      	cmp	r3, r2
 800380c:	bfc4      	itt	gt
 800380e:	1a9b      	subgt	r3, r3, r2
 8003810:	18ed      	addgt	r5, r5, r3
 8003812:	2600      	movs	r6, #0
 8003814:	341a      	adds	r4, #26
 8003816:	42b5      	cmp	r5, r6
 8003818:	d11a      	bne.n	8003850 <_printf_common+0xc8>
 800381a:	2000      	movs	r0, #0
 800381c:	e008      	b.n	8003830 <_printf_common+0xa8>
 800381e:	2301      	movs	r3, #1
 8003820:	4652      	mov	r2, sl
 8003822:	4641      	mov	r1, r8
 8003824:	4638      	mov	r0, r7
 8003826:	47c8      	blx	r9
 8003828:	3001      	adds	r0, #1
 800382a:	d103      	bne.n	8003834 <_printf_common+0xac>
 800382c:	f04f 30ff 	mov.w	r0, #4294967295
 8003830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003834:	3501      	adds	r5, #1
 8003836:	e7c6      	b.n	80037c6 <_printf_common+0x3e>
 8003838:	18e1      	adds	r1, r4, r3
 800383a:	1c5a      	adds	r2, r3, #1
 800383c:	2030      	movs	r0, #48	@ 0x30
 800383e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003842:	4422      	add	r2, r4
 8003844:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003848:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800384c:	3302      	adds	r3, #2
 800384e:	e7c7      	b.n	80037e0 <_printf_common+0x58>
 8003850:	2301      	movs	r3, #1
 8003852:	4622      	mov	r2, r4
 8003854:	4641      	mov	r1, r8
 8003856:	4638      	mov	r0, r7
 8003858:	47c8      	blx	r9
 800385a:	3001      	adds	r0, #1
 800385c:	d0e6      	beq.n	800382c <_printf_common+0xa4>
 800385e:	3601      	adds	r6, #1
 8003860:	e7d9      	b.n	8003816 <_printf_common+0x8e>
	...

08003864 <_printf_i>:
 8003864:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003868:	7e0f      	ldrb	r7, [r1, #24]
 800386a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800386c:	2f78      	cmp	r7, #120	@ 0x78
 800386e:	4691      	mov	r9, r2
 8003870:	4680      	mov	r8, r0
 8003872:	460c      	mov	r4, r1
 8003874:	469a      	mov	sl, r3
 8003876:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800387a:	d807      	bhi.n	800388c <_printf_i+0x28>
 800387c:	2f62      	cmp	r7, #98	@ 0x62
 800387e:	d80a      	bhi.n	8003896 <_printf_i+0x32>
 8003880:	2f00      	cmp	r7, #0
 8003882:	f000 80d2 	beq.w	8003a2a <_printf_i+0x1c6>
 8003886:	2f58      	cmp	r7, #88	@ 0x58
 8003888:	f000 80b9 	beq.w	80039fe <_printf_i+0x19a>
 800388c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003890:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003894:	e03a      	b.n	800390c <_printf_i+0xa8>
 8003896:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800389a:	2b15      	cmp	r3, #21
 800389c:	d8f6      	bhi.n	800388c <_printf_i+0x28>
 800389e:	a101      	add	r1, pc, #4	@ (adr r1, 80038a4 <_printf_i+0x40>)
 80038a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038a4:	080038fd 	.word	0x080038fd
 80038a8:	08003911 	.word	0x08003911
 80038ac:	0800388d 	.word	0x0800388d
 80038b0:	0800388d 	.word	0x0800388d
 80038b4:	0800388d 	.word	0x0800388d
 80038b8:	0800388d 	.word	0x0800388d
 80038bc:	08003911 	.word	0x08003911
 80038c0:	0800388d 	.word	0x0800388d
 80038c4:	0800388d 	.word	0x0800388d
 80038c8:	0800388d 	.word	0x0800388d
 80038cc:	0800388d 	.word	0x0800388d
 80038d0:	08003a11 	.word	0x08003a11
 80038d4:	0800393b 	.word	0x0800393b
 80038d8:	080039cb 	.word	0x080039cb
 80038dc:	0800388d 	.word	0x0800388d
 80038e0:	0800388d 	.word	0x0800388d
 80038e4:	08003a33 	.word	0x08003a33
 80038e8:	0800388d 	.word	0x0800388d
 80038ec:	0800393b 	.word	0x0800393b
 80038f0:	0800388d 	.word	0x0800388d
 80038f4:	0800388d 	.word	0x0800388d
 80038f8:	080039d3 	.word	0x080039d3
 80038fc:	6833      	ldr	r3, [r6, #0]
 80038fe:	1d1a      	adds	r2, r3, #4
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6032      	str	r2, [r6, #0]
 8003904:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003908:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800390c:	2301      	movs	r3, #1
 800390e:	e09d      	b.n	8003a4c <_printf_i+0x1e8>
 8003910:	6833      	ldr	r3, [r6, #0]
 8003912:	6820      	ldr	r0, [r4, #0]
 8003914:	1d19      	adds	r1, r3, #4
 8003916:	6031      	str	r1, [r6, #0]
 8003918:	0606      	lsls	r6, r0, #24
 800391a:	d501      	bpl.n	8003920 <_printf_i+0xbc>
 800391c:	681d      	ldr	r5, [r3, #0]
 800391e:	e003      	b.n	8003928 <_printf_i+0xc4>
 8003920:	0645      	lsls	r5, r0, #25
 8003922:	d5fb      	bpl.n	800391c <_printf_i+0xb8>
 8003924:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003928:	2d00      	cmp	r5, #0
 800392a:	da03      	bge.n	8003934 <_printf_i+0xd0>
 800392c:	232d      	movs	r3, #45	@ 0x2d
 800392e:	426d      	negs	r5, r5
 8003930:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003934:	4859      	ldr	r0, [pc, #356]	@ (8003a9c <_printf_i+0x238>)
 8003936:	230a      	movs	r3, #10
 8003938:	e011      	b.n	800395e <_printf_i+0xfa>
 800393a:	6821      	ldr	r1, [r4, #0]
 800393c:	6833      	ldr	r3, [r6, #0]
 800393e:	0608      	lsls	r0, r1, #24
 8003940:	f853 5b04 	ldr.w	r5, [r3], #4
 8003944:	d402      	bmi.n	800394c <_printf_i+0xe8>
 8003946:	0649      	lsls	r1, r1, #25
 8003948:	bf48      	it	mi
 800394a:	b2ad      	uxthmi	r5, r5
 800394c:	2f6f      	cmp	r7, #111	@ 0x6f
 800394e:	4853      	ldr	r0, [pc, #332]	@ (8003a9c <_printf_i+0x238>)
 8003950:	6033      	str	r3, [r6, #0]
 8003952:	bf14      	ite	ne
 8003954:	230a      	movne	r3, #10
 8003956:	2308      	moveq	r3, #8
 8003958:	2100      	movs	r1, #0
 800395a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800395e:	6866      	ldr	r6, [r4, #4]
 8003960:	60a6      	str	r6, [r4, #8]
 8003962:	2e00      	cmp	r6, #0
 8003964:	bfa2      	ittt	ge
 8003966:	6821      	ldrge	r1, [r4, #0]
 8003968:	f021 0104 	bicge.w	r1, r1, #4
 800396c:	6021      	strge	r1, [r4, #0]
 800396e:	b90d      	cbnz	r5, 8003974 <_printf_i+0x110>
 8003970:	2e00      	cmp	r6, #0
 8003972:	d04b      	beq.n	8003a0c <_printf_i+0x1a8>
 8003974:	4616      	mov	r6, r2
 8003976:	fbb5 f1f3 	udiv	r1, r5, r3
 800397a:	fb03 5711 	mls	r7, r3, r1, r5
 800397e:	5dc7      	ldrb	r7, [r0, r7]
 8003980:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003984:	462f      	mov	r7, r5
 8003986:	42bb      	cmp	r3, r7
 8003988:	460d      	mov	r5, r1
 800398a:	d9f4      	bls.n	8003976 <_printf_i+0x112>
 800398c:	2b08      	cmp	r3, #8
 800398e:	d10b      	bne.n	80039a8 <_printf_i+0x144>
 8003990:	6823      	ldr	r3, [r4, #0]
 8003992:	07df      	lsls	r7, r3, #31
 8003994:	d508      	bpl.n	80039a8 <_printf_i+0x144>
 8003996:	6923      	ldr	r3, [r4, #16]
 8003998:	6861      	ldr	r1, [r4, #4]
 800399a:	4299      	cmp	r1, r3
 800399c:	bfde      	ittt	le
 800399e:	2330      	movle	r3, #48	@ 0x30
 80039a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80039a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80039a8:	1b92      	subs	r2, r2, r6
 80039aa:	6122      	str	r2, [r4, #16]
 80039ac:	f8cd a000 	str.w	sl, [sp]
 80039b0:	464b      	mov	r3, r9
 80039b2:	aa03      	add	r2, sp, #12
 80039b4:	4621      	mov	r1, r4
 80039b6:	4640      	mov	r0, r8
 80039b8:	f7ff fee6 	bl	8003788 <_printf_common>
 80039bc:	3001      	adds	r0, #1
 80039be:	d14a      	bne.n	8003a56 <_printf_i+0x1f2>
 80039c0:	f04f 30ff 	mov.w	r0, #4294967295
 80039c4:	b004      	add	sp, #16
 80039c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039ca:	6823      	ldr	r3, [r4, #0]
 80039cc:	f043 0320 	orr.w	r3, r3, #32
 80039d0:	6023      	str	r3, [r4, #0]
 80039d2:	4833      	ldr	r0, [pc, #204]	@ (8003aa0 <_printf_i+0x23c>)
 80039d4:	2778      	movs	r7, #120	@ 0x78
 80039d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80039da:	6823      	ldr	r3, [r4, #0]
 80039dc:	6831      	ldr	r1, [r6, #0]
 80039de:	061f      	lsls	r7, r3, #24
 80039e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80039e4:	d402      	bmi.n	80039ec <_printf_i+0x188>
 80039e6:	065f      	lsls	r7, r3, #25
 80039e8:	bf48      	it	mi
 80039ea:	b2ad      	uxthmi	r5, r5
 80039ec:	6031      	str	r1, [r6, #0]
 80039ee:	07d9      	lsls	r1, r3, #31
 80039f0:	bf44      	itt	mi
 80039f2:	f043 0320 	orrmi.w	r3, r3, #32
 80039f6:	6023      	strmi	r3, [r4, #0]
 80039f8:	b11d      	cbz	r5, 8003a02 <_printf_i+0x19e>
 80039fa:	2310      	movs	r3, #16
 80039fc:	e7ac      	b.n	8003958 <_printf_i+0xf4>
 80039fe:	4827      	ldr	r0, [pc, #156]	@ (8003a9c <_printf_i+0x238>)
 8003a00:	e7e9      	b.n	80039d6 <_printf_i+0x172>
 8003a02:	6823      	ldr	r3, [r4, #0]
 8003a04:	f023 0320 	bic.w	r3, r3, #32
 8003a08:	6023      	str	r3, [r4, #0]
 8003a0a:	e7f6      	b.n	80039fa <_printf_i+0x196>
 8003a0c:	4616      	mov	r6, r2
 8003a0e:	e7bd      	b.n	800398c <_printf_i+0x128>
 8003a10:	6833      	ldr	r3, [r6, #0]
 8003a12:	6825      	ldr	r5, [r4, #0]
 8003a14:	6961      	ldr	r1, [r4, #20]
 8003a16:	1d18      	adds	r0, r3, #4
 8003a18:	6030      	str	r0, [r6, #0]
 8003a1a:	062e      	lsls	r6, r5, #24
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	d501      	bpl.n	8003a24 <_printf_i+0x1c0>
 8003a20:	6019      	str	r1, [r3, #0]
 8003a22:	e002      	b.n	8003a2a <_printf_i+0x1c6>
 8003a24:	0668      	lsls	r0, r5, #25
 8003a26:	d5fb      	bpl.n	8003a20 <_printf_i+0x1bc>
 8003a28:	8019      	strh	r1, [r3, #0]
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	6123      	str	r3, [r4, #16]
 8003a2e:	4616      	mov	r6, r2
 8003a30:	e7bc      	b.n	80039ac <_printf_i+0x148>
 8003a32:	6833      	ldr	r3, [r6, #0]
 8003a34:	1d1a      	adds	r2, r3, #4
 8003a36:	6032      	str	r2, [r6, #0]
 8003a38:	681e      	ldr	r6, [r3, #0]
 8003a3a:	6862      	ldr	r2, [r4, #4]
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	4630      	mov	r0, r6
 8003a40:	f7fc fbc6 	bl	80001d0 <memchr>
 8003a44:	b108      	cbz	r0, 8003a4a <_printf_i+0x1e6>
 8003a46:	1b80      	subs	r0, r0, r6
 8003a48:	6060      	str	r0, [r4, #4]
 8003a4a:	6863      	ldr	r3, [r4, #4]
 8003a4c:	6123      	str	r3, [r4, #16]
 8003a4e:	2300      	movs	r3, #0
 8003a50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a54:	e7aa      	b.n	80039ac <_printf_i+0x148>
 8003a56:	6923      	ldr	r3, [r4, #16]
 8003a58:	4632      	mov	r2, r6
 8003a5a:	4649      	mov	r1, r9
 8003a5c:	4640      	mov	r0, r8
 8003a5e:	47d0      	blx	sl
 8003a60:	3001      	adds	r0, #1
 8003a62:	d0ad      	beq.n	80039c0 <_printf_i+0x15c>
 8003a64:	6823      	ldr	r3, [r4, #0]
 8003a66:	079b      	lsls	r3, r3, #30
 8003a68:	d413      	bmi.n	8003a92 <_printf_i+0x22e>
 8003a6a:	68e0      	ldr	r0, [r4, #12]
 8003a6c:	9b03      	ldr	r3, [sp, #12]
 8003a6e:	4298      	cmp	r0, r3
 8003a70:	bfb8      	it	lt
 8003a72:	4618      	movlt	r0, r3
 8003a74:	e7a6      	b.n	80039c4 <_printf_i+0x160>
 8003a76:	2301      	movs	r3, #1
 8003a78:	4632      	mov	r2, r6
 8003a7a:	4649      	mov	r1, r9
 8003a7c:	4640      	mov	r0, r8
 8003a7e:	47d0      	blx	sl
 8003a80:	3001      	adds	r0, #1
 8003a82:	d09d      	beq.n	80039c0 <_printf_i+0x15c>
 8003a84:	3501      	adds	r5, #1
 8003a86:	68e3      	ldr	r3, [r4, #12]
 8003a88:	9903      	ldr	r1, [sp, #12]
 8003a8a:	1a5b      	subs	r3, r3, r1
 8003a8c:	42ab      	cmp	r3, r5
 8003a8e:	dcf2      	bgt.n	8003a76 <_printf_i+0x212>
 8003a90:	e7eb      	b.n	8003a6a <_printf_i+0x206>
 8003a92:	2500      	movs	r5, #0
 8003a94:	f104 0619 	add.w	r6, r4, #25
 8003a98:	e7f5      	b.n	8003a86 <_printf_i+0x222>
 8003a9a:	bf00      	nop
 8003a9c:	08003c09 	.word	0x08003c09
 8003aa0:	08003c1a 	.word	0x08003c1a

08003aa4 <memmove>:
 8003aa4:	4288      	cmp	r0, r1
 8003aa6:	b510      	push	{r4, lr}
 8003aa8:	eb01 0402 	add.w	r4, r1, r2
 8003aac:	d902      	bls.n	8003ab4 <memmove+0x10>
 8003aae:	4284      	cmp	r4, r0
 8003ab0:	4623      	mov	r3, r4
 8003ab2:	d807      	bhi.n	8003ac4 <memmove+0x20>
 8003ab4:	1e43      	subs	r3, r0, #1
 8003ab6:	42a1      	cmp	r1, r4
 8003ab8:	d008      	beq.n	8003acc <memmove+0x28>
 8003aba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003abe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003ac2:	e7f8      	b.n	8003ab6 <memmove+0x12>
 8003ac4:	4402      	add	r2, r0
 8003ac6:	4601      	mov	r1, r0
 8003ac8:	428a      	cmp	r2, r1
 8003aca:	d100      	bne.n	8003ace <memmove+0x2a>
 8003acc:	bd10      	pop	{r4, pc}
 8003ace:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ad2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003ad6:	e7f7      	b.n	8003ac8 <memmove+0x24>

08003ad8 <_sbrk_r>:
 8003ad8:	b538      	push	{r3, r4, r5, lr}
 8003ada:	4d06      	ldr	r5, [pc, #24]	@ (8003af4 <_sbrk_r+0x1c>)
 8003adc:	2300      	movs	r3, #0
 8003ade:	4604      	mov	r4, r0
 8003ae0:	4608      	mov	r0, r1
 8003ae2:	602b      	str	r3, [r5, #0]
 8003ae4:	f7fc fefa 	bl	80008dc <_sbrk>
 8003ae8:	1c43      	adds	r3, r0, #1
 8003aea:	d102      	bne.n	8003af2 <_sbrk_r+0x1a>
 8003aec:	682b      	ldr	r3, [r5, #0]
 8003aee:	b103      	cbz	r3, 8003af2 <_sbrk_r+0x1a>
 8003af0:	6023      	str	r3, [r4, #0]
 8003af2:	bd38      	pop	{r3, r4, r5, pc}
 8003af4:	20000278 	.word	0x20000278

08003af8 <memcpy>:
 8003af8:	440a      	add	r2, r1
 8003afa:	4291      	cmp	r1, r2
 8003afc:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b00:	d100      	bne.n	8003b04 <memcpy+0xc>
 8003b02:	4770      	bx	lr
 8003b04:	b510      	push	{r4, lr}
 8003b06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b0e:	4291      	cmp	r1, r2
 8003b10:	d1f9      	bne.n	8003b06 <memcpy+0xe>
 8003b12:	bd10      	pop	{r4, pc}

08003b14 <_realloc_r>:
 8003b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b18:	4680      	mov	r8, r0
 8003b1a:	4615      	mov	r5, r2
 8003b1c:	460c      	mov	r4, r1
 8003b1e:	b921      	cbnz	r1, 8003b2a <_realloc_r+0x16>
 8003b20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b24:	4611      	mov	r1, r2
 8003b26:	f7ff bc4b 	b.w	80033c0 <_malloc_r>
 8003b2a:	b92a      	cbnz	r2, 8003b38 <_realloc_r+0x24>
 8003b2c:	f7ff fbdc 	bl	80032e8 <_free_r>
 8003b30:	2400      	movs	r4, #0
 8003b32:	4620      	mov	r0, r4
 8003b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b38:	f000 f81a 	bl	8003b70 <_malloc_usable_size_r>
 8003b3c:	4285      	cmp	r5, r0
 8003b3e:	4606      	mov	r6, r0
 8003b40:	d802      	bhi.n	8003b48 <_realloc_r+0x34>
 8003b42:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003b46:	d8f4      	bhi.n	8003b32 <_realloc_r+0x1e>
 8003b48:	4629      	mov	r1, r5
 8003b4a:	4640      	mov	r0, r8
 8003b4c:	f7ff fc38 	bl	80033c0 <_malloc_r>
 8003b50:	4607      	mov	r7, r0
 8003b52:	2800      	cmp	r0, #0
 8003b54:	d0ec      	beq.n	8003b30 <_realloc_r+0x1c>
 8003b56:	42b5      	cmp	r5, r6
 8003b58:	462a      	mov	r2, r5
 8003b5a:	4621      	mov	r1, r4
 8003b5c:	bf28      	it	cs
 8003b5e:	4632      	movcs	r2, r6
 8003b60:	f7ff ffca 	bl	8003af8 <memcpy>
 8003b64:	4621      	mov	r1, r4
 8003b66:	4640      	mov	r0, r8
 8003b68:	f7ff fbbe 	bl	80032e8 <_free_r>
 8003b6c:	463c      	mov	r4, r7
 8003b6e:	e7e0      	b.n	8003b32 <_realloc_r+0x1e>

08003b70 <_malloc_usable_size_r>:
 8003b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b74:	1f18      	subs	r0, r3, #4
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	bfbc      	itt	lt
 8003b7a:	580b      	ldrlt	r3, [r1, r0]
 8003b7c:	18c0      	addlt	r0, r0, r3
 8003b7e:	4770      	bx	lr

08003b80 <_init>:
 8003b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b82:	bf00      	nop
 8003b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b86:	bc08      	pop	{r3}
 8003b88:	469e      	mov	lr, r3
 8003b8a:	4770      	bx	lr

08003b8c <_fini>:
 8003b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b8e:	bf00      	nop
 8003b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b92:	bc08      	pop	{r3}
 8003b94:	469e      	mov	lr, r3
 8003b96:	4770      	bx	lr
