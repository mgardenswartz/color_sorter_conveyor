
test-11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048e0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004a80  08004a80  00005a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004af8  08004af8  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004af8  08004af8  00005af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b00  08004b00  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b00  08004b00  00005b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b04  08004b04  00005b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004b08  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  2000005c  08004b64  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  08004b64  000062ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e30f  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000220d  00000000  00000000  0001439b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  000165a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a3c  00000000  00000000  000172c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000549b  00000000  00000000  00017d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f363  00000000  00000000  0001d19f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090b33  00000000  00000000  0002c502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd035  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003df8  00000000  00000000  000bd078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  000c0e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004a68 	.word	0x08004a68

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08004a68 	.word	0x08004a68

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll>:
 *      Author: Max
 */

#include "RCChannel.h"

RCChannel::RCChannel(
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
 800057c:	603b      	str	r3, [r7, #0]
    CPU_clock_speed_MHz(CPU_clock_speed_MHz),
    full_reverse_us_width(full_reverse_us_width),
    neutral_us_width(neutral_us_width),
    full_forward_us_width(full_forward_us_width),
    rescale_forward_magnitude(rescale_forward_magnitude),
	rescale_reverse_magnitude(rescale_reverse_magnitude)
 800057e:	4a37      	ldr	r2, [pc, #220]	@ (800065c <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll+0xec>)
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	2200      	movs	r2, #0
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	2200      	movs	r2, #0
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	2200      	movs	r2, #0
 80005a0:	615a      	str	r2, [r3, #20]
    timer_handle(timer_handle),
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	68ba      	ldr	r2, [r7, #8]
 80005a6:	619a      	str	r2, [r3, #24]
    timer_channel(timer_channel),
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	61da      	str	r2, [r3, #28]
    RC_signal_period_us(RC_signal_period_us),
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	683a      	ldr	r2, [r7, #0]
 80005b2:	621a      	str	r2, [r3, #32]
    CPU_clock_speed_MHz(CPU_clock_speed_MHz),
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	6a3a      	ldr	r2, [r7, #32]
 80005b8:	625a      	str	r2, [r3, #36]	@ 0x24
    full_reverse_us_width(full_reverse_us_width),
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80005be:	629a      	str	r2, [r3, #40]	@ 0x28
    neutral_us_width(neutral_us_width),
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80005c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    full_forward_us_width(full_forward_us_width),
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80005ca:	631a      	str	r2, [r3, #48]	@ 0x30
    rescale_forward_magnitude(rescale_forward_magnitude),
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80005d0:	635a      	str	r2, [r3, #52]	@ 0x34
	rescale_reverse_magnitude(rescale_reverse_magnitude)
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80005d6:	639a      	str	r2, [r3, #56]	@ 0x38
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	2201      	movs	r2, #1
 80005dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
{
	// Critical. Starts the first interrupt.
	HAL_TIM_IC_Start_IT(timer_handle, timer_channel);
 80005e0:	6879      	ldr	r1, [r7, #4]
 80005e2:	68b8      	ldr	r0, [r7, #8]
 80005e4:	f001 fe4a 	bl	800227c <HAL_TIM_IC_Start_IT>

	// Set minuend depending on whether it's a 16-bit or 32-bit timer.
	// This is specific to the STM32F411CUE6!!
	if(( (timer_handle->Instance) == TIM2 ) or ( (timer_handle->Instance) == TIM5 ))
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80005f0:	d004      	beq.n	80005fc <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll+0x8c>
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a1a      	ldr	r2, [pc, #104]	@ (8000660 <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll+0xf0>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d104      	bne.n	8000606 <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll+0x96>
	{
		minuend = 0xffffffff;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	f04f 32ff 	mov.w	r2, #4294967295
 8000602:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000604:	e003      	b.n	800060e <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll+0x9e>
	}
	else
	{
		minuend = 0xffff;
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800060c:	63da      	str	r2, [r3, #60]	@ 0x3c
	}

	// For later scaling
	uint32_t prescalar = timer_handle->Instance->PSC + 1;
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000614:	3301      	adds	r3, #1
 8000616:	617b      	str	r3, [r7, #20]
	float refClock = CPU_clock_speed_MHz/prescalar;
 8000618:	6a3a      	ldr	r2, [r7, #32]
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000620:	ee07 3a90 	vmov	s15, r3
 8000624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000628:	edc7 7a04 	vstr	s15, [r7, #16]
	mFactor = 1000000/refClock;
 800062c:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8000664 <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll+0xf4>
 8000630:	ed97 7a04 	vldr	s14, [r7, #16]
 8000634:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

	// Needed later
	forward_range = full_forward_us_width - neutral_us_width;
 800063e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000642:	1ad2      	subs	r2, r2, r3
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	64da      	str	r2, [r3, #76]	@ 0x4c
	reverse_range = neutral_us_width - full_reverse_us_width;
 8000648:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800064a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800064c:	1ad2      	subs	r2, r2, r3
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	649a      	str	r2, [r3, #72]	@ 0x48

}
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	4618      	mov	r0, r3
 8000656:	3718      	adds	r7, #24
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	08004aa4 	.word	0x08004aa4
 8000660:	40000c00 	.word	0x40000c00
 8000664:	49742400 	.word	0x49742400

08000668 <_ZN9RCChannel22TIM_IC_CaptureCallbackEv>:


void RCChannel::TIM_IC_CaptureCallback(){
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	if(first_capture)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000676:	2b00      	cmp	r3, #0
 8000678:	d010      	beq.n	800069c <_ZN9RCChannel22TIM_IC_CaptureCallbackEv+0x34>
 	{
 		first_value = HAL_TIM_ReadCapturedValue(timer_handle, timer_channel);
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	699a      	ldr	r2, [r3, #24]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	69db      	ldr	r3, [r3, #28]
 8000682:	4619      	mov	r1, r3
 8000684:	4610      	mov	r0, r2
 8000686:	f002 f967 	bl	8002958 <HAL_TIM_ReadCapturedValue>
 800068a:	4603      	mov	r3, r0
 800068c:	461a      	mov	r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	605a      	str	r2, [r3, #4]
 		first_capture = false;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	2200      	movs	r2, #0
 8000696:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		}

 	// Finally
 	first_capture = true;
 	}
}
 800069a:	e06a      	b.n	8000772 <_ZN9RCChannel22TIM_IC_CaptureCallbackEv+0x10a>
 		second_value = HAL_TIM_ReadCapturedValue(timer_handle, timer_channel);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	699a      	ldr	r2, [r3, #24]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	69db      	ldr	r3, [r3, #28]
 80006a4:	4619      	mov	r1, r3
 80006a6:	4610      	mov	r0, r2
 80006a8:	f002 f956 	bl	8002958 <HAL_TIM_ReadCapturedValue>
 80006ac:	4603      	mov	r3, r0
 80006ae:	461a      	mov	r2, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 		if(first_value > second_value)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	685a      	ldr	r2, [r3, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	689b      	ldr	r3, [r3, #8]
 80006bc:	429a      	cmp	r2, r3
 80006be:	dd0c      	ble.n	80006da <_ZN9RCChannel22TIM_IC_CaptureCallbackEv+0x72>
 			difference = minuend - first_value + second_value + 1;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	6852      	ldr	r2, [r2, #4]
 80006c8:	1a9b      	subs	r3, r3, r2
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	6892      	ldr	r2, [r2, #8]
 80006ce:	4413      	add	r3, r2
 80006d0:	3301      	adds	r3, #1
 80006d2:	461a      	mov	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	e006      	b.n	80006e8 <_ZN9RCChannel22TIM_IC_CaptureCallbackEv+0x80>
 			difference = second_value - first_value;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	689a      	ldr	r2, [r3, #8]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	1ad2      	subs	r2, r2, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	60da      	str	r2, [r3, #12]
 		us_width = difference*mFactor;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	ee07 3a90 	vmov	s15, r3
 80006f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80006fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000702:	ee17 2a90 	vmov	r2, s15
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	611a      	str	r2, [r3, #16]
		if(us_width > RC_signal_period_us/2)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	691a      	ldr	r2, [r3, #16]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	6a1b      	ldr	r3, [r3, #32]
 8000712:	0fd9      	lsrs	r1, r3, #31
 8000714:	440b      	add	r3, r1
 8000716:	105b      	asrs	r3, r3, #1
 8000718:	429a      	cmp	r2, r3
 800071a:	dd06      	ble.n	800072a <_ZN9RCChannel22TIM_IC_CaptureCallbackEv+0xc2>
			us_width = RC_signal_period_us - us_width;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	6a1a      	ldr	r2, [r3, #32]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	691b      	ldr	r3, [r3, #16]
 8000724:	1ad2      	subs	r2, r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	611a      	str	r2, [r3, #16]
		int32_t centered_value = us_width - neutral_us_width;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	691a      	ldr	r2, [r3, #16]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000732:	1ad3      	subs	r3, r2, r3
 8000734:	60fb      	str	r3, [r7, #12]
 		if(centered_value >= 0)
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	2b00      	cmp	r3, #0
 800073a:	db0b      	blt.n	8000754 <_ZN9RCChannel22TIM_IC_CaptureCallbackEv+0xec>
 			value = centered_value*rescale_forward_magnitude/forward_range;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000740:	68fa      	ldr	r2, [r7, #12]
 8000742:	fb03 f202 	mul.w	r2, r3, r2
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074a:	fb92 f2f3 	sdiv	r2, r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	615a      	str	r2, [r3, #20]
 8000752:	e00a      	b.n	800076a <_ZN9RCChannel22TIM_IC_CaptureCallbackEv+0x102>
			value =  centered_value*rescale_reverse_magnitude/reverse_range;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000758:	68fa      	ldr	r2, [r7, #12]
 800075a:	fb03 f202 	mul.w	r2, r3, r2
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000762:	fb92 f2f3 	sdiv	r2, r2, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	615a      	str	r2, [r3, #20]
 	first_capture = true;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2201      	movs	r2, #1
 800076e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
}
 8000772:	bf00      	nop
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <_ZN9RCChannelD1Ev>:

RCChannel::~RCChannel() {
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	4a04      	ldr	r2, [pc, #16]	@ (8000798 <_ZN9RCChannelD1Ev+0x1c>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4618      	mov	r0, r3
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	08004aa4 	.word	0x08004aa4

0800079c <_ZN9RCChannelD0Ev>:
RCChannel::~RCChannel() {
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
}
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff ffe9 	bl	800077c <_ZN9RCChannelD1Ev>
 80007aa:	2150      	movs	r1, #80	@ 0x50
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f003 fc2d 	bl	800400c <_ZdlPvj>
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4618      	mov	r0, r3
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <HAL_TIM_IC_CaptureCallback>:
// ...the compiler won't throw a build error.
RCChannel* ThrottleChannel;
RCChannel* SteeringChannel;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	if((htim->Instance = TIM3))
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4a10      	ldr	r2, [pc, #64]	@ (8000808 <HAL_TIM_IC_CaptureCallback+0x4c>)
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	bf14      	ite	ne
 80007d2:	2301      	movne	r3, #1
 80007d4:	2300      	moveq	r3, #0
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d011      	beq.n	8000800 <HAL_TIM_IC_CaptureCallback+0x44>
	{
		    if ( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 )
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	7f1b      	ldrb	r3, [r3, #28]
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d104      	bne.n	80007ee <HAL_TIM_IC_CaptureCallback+0x32>
		    {
		        // Handle channel
		    	SteeringChannel->TIM_IC_CaptureCallback();
 80007e4:	4b09      	ldr	r3, [pc, #36]	@ (800080c <HAL_TIM_IC_CaptureCallback+0x50>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff ff3d 	bl	8000668 <_ZN9RCChannel22TIM_IC_CaptureCallbackEv>
		    }

			if ( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	7f1b      	ldrb	r3, [r3, #28]
 80007f2:	2b04      	cmp	r3, #4
 80007f4:	d104      	bne.n	8000800 <HAL_TIM_IC_CaptureCallback+0x44>
			{
		        // Handle channel
				ThrottleChannel->TIM_IC_CaptureCallback();
 80007f6:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <HAL_TIM_IC_CaptureCallback+0x54>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff ff34 	bl	8000668 <_ZN9RCChannel22TIM_IC_CaptureCallbackEv>
		    	//ThrottleChannel->TIM_IC_CaptureCallback();
			}
	}
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40000400 	.word	0x40000400
 800080c:	20000154 	.word	0x20000154
 8000810:	20000150 	.word	0x20000150

08000814 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000814:	b590      	push	{r4, r7, lr}
 8000816:	b095      	sub	sp, #84	@ 0x54
 8000818:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081a:	f000 fc57 	bl	80010cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081e:	f000 f871 	bl	8000904 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000822:	f000 f9d7 	bl	8000bd4 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000826:	f000 f9a7 	bl	8000b78 <_ZL19MX_USART2_UART_Initv>
  MX_TIM3_Init();
 800082a:	f000 f8dd 	bl	80009e8 <_ZL12MX_TIM3_Initv>
  MX_USART1_UART_Init();
 800082e:	f000 f975 	bl	8000b1c <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
  char my_message[MESSAGE_LENGTH] = "";
 8000832:	2300      	movs	r3, #0
 8000834:	603b      	str	r3, [r7, #0]
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	222e      	movs	r2, #46	@ 0x2e
 800083a:	2100      	movs	r1, #0
 800083c:	4618      	mov	r0, r3
 800083e:	f003 fcfd 	bl	800423c <memset>
		  		  1002,  // Calibrated full reverse
		  		  1505,  // Calibrated neutral
		  		  2023,  // Calibrated full speed
		  		  100,   // New max positive
				  100    // New max negative (magnitude)
		  	  	  );
 8000842:	2050      	movs	r0, #80	@ 0x50
 8000844:	f003 fbe4 	bl	8004010 <_Znwj>
 8000848:	4603      	mov	r3, r0
 800084a:	461c      	mov	r4, r3
 800084c:	2364      	movs	r3, #100	@ 0x64
 800084e:	9305      	str	r3, [sp, #20]
 8000850:	2364      	movs	r3, #100	@ 0x64
 8000852:	9304      	str	r3, [sp, #16]
 8000854:	f240 73e7 	movw	r3, #2023	@ 0x7e7
 8000858:	9303      	str	r3, [sp, #12]
 800085a:	f240 53e1 	movw	r3, #1505	@ 0x5e1
 800085e:	9302      	str	r3, [sp, #8]
 8000860:	f240 33ea 	movw	r3, #1002	@ 0x3ea
 8000864:	9301      	str	r3, [sp, #4]
 8000866:	4b21      	ldr	r3, [pc, #132]	@ (80008ec <main+0xd8>)
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	f244 435c 	movw	r3, #17500	@ 0x445c
 800086e:	2208      	movs	r2, #8
 8000870:	491f      	ldr	r1, [pc, #124]	@ (80008f0 <main+0xdc>)
 8000872:	4620      	mov	r0, r4
 8000874:	f7ff fe7c 	bl	8000570 <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll>
  ThrottleChannel = new RCChannel
 8000878:	4b1e      	ldr	r3, [pc, #120]	@ (80008f4 <main+0xe0>)
 800087a:	601c      	str	r4, [r3, #0]
  		  1018,       // Calibrated full left
  		  1528,      // Calibrated neutral
  		  2040,      // Calibrated full right
  		  100,       // New max positive
		  100        // New max negative (magnitude)
		  );
 800087c:	2050      	movs	r0, #80	@ 0x50
 800087e:	f003 fbc7 	bl	8004010 <_Znwj>
 8000882:	4603      	mov	r3, r0
 8000884:	461c      	mov	r4, r3
 8000886:	2364      	movs	r3, #100	@ 0x64
 8000888:	9305      	str	r3, [sp, #20]
 800088a:	2364      	movs	r3, #100	@ 0x64
 800088c:	9304      	str	r3, [sp, #16]
 800088e:	f44f 63ff 	mov.w	r3, #2040	@ 0x7f8
 8000892:	9303      	str	r3, [sp, #12]
 8000894:	f44f 63bf 	mov.w	r3, #1528	@ 0x5f8
 8000898:	9302      	str	r3, [sp, #8]
 800089a:	f240 33fa 	movw	r3, #1018	@ 0x3fa
 800089e:	9301      	str	r3, [sp, #4]
 80008a0:	4b12      	ldr	r3, [pc, #72]	@ (80008ec <main+0xd8>)
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	f244 435c 	movw	r3, #17500	@ 0x445c
 80008a8:	2200      	movs	r2, #0
 80008aa:	4911      	ldr	r1, [pc, #68]	@ (80008f0 <main+0xdc>)
 80008ac:	4620      	mov	r0, r4
 80008ae:	f7ff fe5f 	bl	8000570 <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll>
  SteeringChannel = new RCChannel
 80008b2:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <main+0xe4>)
 80008b4:	601c      	str	r4, [r3, #0]
    /* USER CODE BEGIN 3 */

//	  string_length = snprintf(my_message, MESSAGE_LENGTH, "CH1: %*li%%, CH2: %*li%%.\r\n",
//	                             VALUE_WIDTH, (long signed int)SteeringChannel->value,
//	                             VALUE_WIDTH, (long signed int)ThrottleChannel->value);
	  string_length = snprintf(my_message, MESSAGE_LENGTH, "CH1: %*li%%, CH2: %*li%%.\r\n",
 80008b6:	4b10      	ldr	r3, [pc, #64]	@ (80008f8 <main+0xe4>)
 80008b8:	681b      	ldr	r3, [r3, #0]
	  	                             VALUE_WIDTH, (long signed int)SteeringChannel->value,
 80008ba:	695b      	ldr	r3, [r3, #20]
	  string_length = snprintf(my_message, MESSAGE_LENGTH, "CH1: %*li%%, CH2: %*li%%.\r\n",
 80008bc:	4a0d      	ldr	r2, [pc, #52]	@ (80008f4 <main+0xe0>)
 80008be:	6812      	ldr	r2, [r2, #0]
	  	                             VALUE_WIDTH, (long signed int)ThrottleChannel->value);
 80008c0:	6952      	ldr	r2, [r2, #20]
	  string_length = snprintf(my_message, MESSAGE_LENGTH, "CH1: %*li%%, CH2: %*li%%.\r\n",
 80008c2:	4638      	mov	r0, r7
 80008c4:	9202      	str	r2, [sp, #8]
 80008c6:	2205      	movs	r2, #5
 80008c8:	9201      	str	r2, [sp, #4]
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	2305      	movs	r3, #5
 80008ce:	4a0b      	ldr	r2, [pc, #44]	@ (80008fc <main+0xe8>)
 80008d0:	2132      	movs	r1, #50	@ 0x32
 80008d2:	f003 fc7f 	bl	80041d4 <sniprintf>
 80008d6:	6378      	str	r0, [r7, #52]	@ 0x34
	  HAL_UART_Transmit(&huart2, (uint8_t*)my_message, string_length, HAL_MAX_DELAY);
 80008d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008da:	b29a      	uxth	r2, r3
 80008dc:	4639      	mov	r1, r7
 80008de:	f04f 33ff 	mov.w	r3, #4294967295
 80008e2:	4807      	ldr	r0, [pc, #28]	@ (8000900 <main+0xec>)
 80008e4:	f002 fbe0 	bl	80030a8 <HAL_UART_Transmit>
	  string_length = snprintf(my_message, MESSAGE_LENGTH, "CH1: %*li%%, CH2: %*li%%.\r\n",
 80008e8:	bf00      	nop
 80008ea:	e7e4      	b.n	80008b6 <main+0xa2>
 80008ec:	05b8d800 	.word	0x05b8d800
 80008f0:	20000078 	.word	0x20000078
 80008f4:	20000150 	.word	0x20000150
 80008f8:	20000154 	.word	0x20000154
 80008fc:	08004a80 	.word	0x08004a80
 8000900:	20000108 	.word	0x20000108

08000904 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b094      	sub	sp, #80	@ 0x50
 8000908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090a:	f107 0320 	add.w	r3, r7, #32
 800090e:	2230      	movs	r2, #48	@ 0x30
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f003 fc92 	bl	800423c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000918:	f107 030c 	add.w	r3, r7, #12
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000928:	2300      	movs	r3, #0
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	4b2c      	ldr	r3, [pc, #176]	@ (80009e0 <_Z18SystemClock_Configv+0xdc>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000930:	4a2b      	ldr	r2, [pc, #172]	@ (80009e0 <_Z18SystemClock_Configv+0xdc>)
 8000932:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000936:	6413      	str	r3, [r2, #64]	@ 0x40
 8000938:	4b29      	ldr	r3, [pc, #164]	@ (80009e0 <_Z18SystemClock_Configv+0xdc>)
 800093a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800093c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000944:	2300      	movs	r3, #0
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	4b26      	ldr	r3, [pc, #152]	@ (80009e4 <_Z18SystemClock_Configv+0xe0>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a25      	ldr	r2, [pc, #148]	@ (80009e4 <_Z18SystemClock_Configv+0xe0>)
 800094e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000952:	6013      	str	r3, [r2, #0]
 8000954:	4b23      	ldr	r3, [pc, #140]	@ (80009e4 <_Z18SystemClock_Configv+0xe0>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000960:	2301      	movs	r3, #1
 8000962:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000964:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000968:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800096a:	2302      	movs	r3, #2
 800096c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800096e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000972:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000974:	2319      	movs	r3, #25
 8000976:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000978:	23c0      	movs	r3, #192	@ 0xc0
 800097a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800097c:	2302      	movs	r3, #2
 800097e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000980:	2304      	movs	r3, #4
 8000982:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000984:	f107 0320 	add.w	r3, r7, #32
 8000988:	4618      	mov	r0, r3
 800098a:	f000 ff77 	bl	800187c <HAL_RCC_OscConfig>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	bf14      	ite	ne
 8000994:	2301      	movne	r3, #1
 8000996:	2300      	moveq	r3, #0
 8000998:	b2db      	uxtb	r3, r3
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800099e:	f000 f991 	bl	8000cc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a2:	230f      	movs	r3, #15
 80009a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a6:	2302      	movs	r3, #2
 80009a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009b8:	f107 030c 	add.w	r3, r7, #12
 80009bc:	2103      	movs	r1, #3
 80009be:	4618      	mov	r0, r3
 80009c0:	f001 f9d4 	bl	8001d6c <HAL_RCC_ClockConfig>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	bf14      	ite	ne
 80009ca:	2301      	movne	r3, #1
 80009cc:	2300      	moveq	r3, #0
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 80009d4:	f000 f976 	bl	8000cc4 <Error_Handler>
  }
}
 80009d8:	bf00      	nop
 80009da:	3750      	adds	r7, #80	@ 0x50
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40007000 	.word	0x40007000

080009e8 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	@ 0x28
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ee:	f107 0318 	add.w	r3, r7, #24
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fc:	f107 0310 	add.w	r3, r7, #16
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a06:	463b      	mov	r3, r7
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a12:	4b40      	ldr	r3, [pc, #256]	@ (8000b14 <_ZL12MX_TIM3_Initv+0x12c>)
 8000a14:	4a40      	ldr	r2, [pc, #256]	@ (8000b18 <_ZL12MX_TIM3_Initv+0x130>)
 8000a16:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 96-1;
 8000a18:	4b3e      	ldr	r3, [pc, #248]	@ (8000b14 <_ZL12MX_TIM3_Initv+0x12c>)
 8000a1a:	225f      	movs	r2, #95	@ 0x5f
 8000a1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1e:	4b3d      	ldr	r3, [pc, #244]	@ (8000b14 <_ZL12MX_TIM3_Initv+0x12c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65536-1;
 8000a24:	4b3b      	ldr	r3, [pc, #236]	@ (8000b14 <_ZL12MX_TIM3_Initv+0x12c>)
 8000a26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a2c:	4b39      	ldr	r3, [pc, #228]	@ (8000b14 <_ZL12MX_TIM3_Initv+0x12c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a32:	4b38      	ldr	r3, [pc, #224]	@ (8000b14 <_ZL12MX_TIM3_Initv+0x12c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a38:	4836      	ldr	r0, [pc, #216]	@ (8000b14 <_ZL12MX_TIM3_Initv+0x12c>)
 8000a3a:	f001 fb77 	bl	800212c <HAL_TIM_Base_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	bf14      	ite	ne
 8000a44:	2301      	movne	r3, #1
 8000a46:	2300      	moveq	r3, #0
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <_ZL12MX_TIM3_Initv+0x6a>
  {
    Error_Handler();
 8000a4e:	f000 f939 	bl	8000cc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a56:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a58:	f107 0318 	add.w	r3, r7, #24
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	482d      	ldr	r0, [pc, #180]	@ (8000b14 <_ZL12MX_TIM3_Initv+0x12c>)
 8000a60:	f001 feb2 	bl	80027c8 <HAL_TIM_ConfigClockSource>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	bf14      	ite	ne
 8000a6a:	2301      	movne	r3, #1
 8000a6c:	2300      	moveq	r3, #0
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <_ZL12MX_TIM3_Initv+0x90>
  {
    Error_Handler();
 8000a74:	f000 f926 	bl	8000cc4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000a78:	4826      	ldr	r0, [pc, #152]	@ (8000b14 <_ZL12MX_TIM3_Initv+0x12c>)
 8000a7a:	f001 fba6 	bl	80021ca <HAL_TIM_IC_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	bf14      	ite	ne
 8000a84:	2301      	movne	r3, #1
 8000a86:	2300      	moveq	r3, #0
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <_ZL12MX_TIM3_Initv+0xaa>
  {
    Error_Handler();
 8000a8e:	f000 f919 	bl	8000cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a92:	2300      	movs	r3, #0
 8000a94:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a9a:	f107 0310 	add.w	r3, r7, #16
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	481c      	ldr	r0, [pc, #112]	@ (8000b14 <_ZL12MX_TIM3_Initv+0x12c>)
 8000aa2:	f002 fa2f 	bl	8002f04 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	bf14      	ite	ne
 8000aac:	2301      	movne	r3, #1
 8000aae:	2300      	moveq	r3, #0
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <_ZL12MX_TIM3_Initv+0xd2>
  {
    Error_Handler();
 8000ab6:	f000 f905 	bl	8000cc4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000aba:	230a      	movs	r3, #10
 8000abc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000aca:	463b      	mov	r3, r7
 8000acc:	2200      	movs	r2, #0
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4810      	ldr	r0, [pc, #64]	@ (8000b14 <_ZL12MX_TIM3_Initv+0x12c>)
 8000ad2:	f001 fddd 	bl	8002690 <HAL_TIM_IC_ConfigChannel>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	bf14      	ite	ne
 8000adc:	2301      	movne	r3, #1
 8000ade:	2300      	moveq	r3, #0
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <_ZL12MX_TIM3_Initv+0x102>
  {
    Error_Handler();
 8000ae6:	f000 f8ed 	bl	8000cc4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000aea:	463b      	mov	r3, r7
 8000aec:	2208      	movs	r2, #8
 8000aee:	4619      	mov	r1, r3
 8000af0:	4808      	ldr	r0, [pc, #32]	@ (8000b14 <_ZL12MX_TIM3_Initv+0x12c>)
 8000af2:	f001 fdcd 	bl	8002690 <HAL_TIM_IC_ConfigChannel>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	bf14      	ite	ne
 8000afc:	2301      	movne	r3, #1
 8000afe:	2300      	moveq	r3, #0
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <_ZL12MX_TIM3_Initv+0x122>
  {
    Error_Handler();
 8000b06:	f000 f8dd 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	3728      	adds	r7, #40	@ 0x28
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000078 	.word	0x20000078
 8000b18:	40000400 	.word	0x40000400

08000b1c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b20:	4b13      	ldr	r3, [pc, #76]	@ (8000b70 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000b22:	4a14      	ldr	r2, [pc, #80]	@ (8000b74 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000b24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b26:	4b12      	ldr	r3, [pc, #72]	@ (8000b70 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000b28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2e:	4b10      	ldr	r3, [pc, #64]	@ (8000b70 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b34:	4b0e      	ldr	r3, [pc, #56]	@ (8000b70 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b70 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b40:	4b0b      	ldr	r3, [pc, #44]	@ (8000b70 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000b42:	220c      	movs	r2, #12
 8000b44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b46:	4b0a      	ldr	r3, [pc, #40]	@ (8000b70 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b4c:	4b08      	ldr	r3, [pc, #32]	@ (8000b70 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b52:	4807      	ldr	r0, [pc, #28]	@ (8000b70 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000b54:	f002 fa58 	bl	8003008 <HAL_UART_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	bf14      	ite	ne
 8000b5e:	2301      	movne	r3, #1
 8000b60:	2300      	moveq	r3, #0
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8000b68:	f000 f8ac 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	200000c0 	.word	0x200000c0
 8000b74:	40011000 	.word	0x40011000

08000b78 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b7c:	4b13      	ldr	r3, [pc, #76]	@ (8000bcc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b7e:	4a14      	ldr	r2, [pc, #80]	@ (8000bd0 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000b80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b82:	4b12      	ldr	r3, [pc, #72]	@ (8000bcc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8a:	4b10      	ldr	r3, [pc, #64]	@ (8000bcc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b90:	4b0e      	ldr	r3, [pc, #56]	@ (8000bcc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b96:	4b0d      	ldr	r3, [pc, #52]	@ (8000bcc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bcc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba8:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bae:	4807      	ldr	r0, [pc, #28]	@ (8000bcc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000bb0:	f002 fa2a 	bl	8003008 <HAL_UART_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	bf14      	ite	ne
 8000bba:	2301      	movne	r3, #1
 8000bbc:	2300      	moveq	r3, #0
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000bc4:	f000 f87e 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000108 	.word	0x20000108
 8000bd0:	40004400 	.word	0x40004400

08000bd4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	@ 0x28
 8000bd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
 8000be8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	4b32      	ldr	r3, [pc, #200]	@ (8000cb8 <_ZL12MX_GPIO_Initv+0xe4>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	4a31      	ldr	r2, [pc, #196]	@ (8000cb8 <_ZL12MX_GPIO_Initv+0xe4>)
 8000bf4:	f043 0304 	orr.w	r3, r3, #4
 8000bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfa:	4b2f      	ldr	r3, [pc, #188]	@ (8000cb8 <_ZL12MX_GPIO_Initv+0xe4>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	f003 0304 	and.w	r3, r3, #4
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	4b2b      	ldr	r3, [pc, #172]	@ (8000cb8 <_ZL12MX_GPIO_Initv+0xe4>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	4a2a      	ldr	r2, [pc, #168]	@ (8000cb8 <_ZL12MX_GPIO_Initv+0xe4>)
 8000c10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c16:	4b28      	ldr	r3, [pc, #160]	@ (8000cb8 <_ZL12MX_GPIO_Initv+0xe4>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	4b24      	ldr	r3, [pc, #144]	@ (8000cb8 <_ZL12MX_GPIO_Initv+0xe4>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	4a23      	ldr	r2, [pc, #140]	@ (8000cb8 <_ZL12MX_GPIO_Initv+0xe4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c32:	4b21      	ldr	r3, [pc, #132]	@ (8000cb8 <_ZL12MX_GPIO_Initv+0xe4>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb8 <_ZL12MX_GPIO_Initv+0xe4>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	4a1c      	ldr	r2, [pc, #112]	@ (8000cb8 <_ZL12MX_GPIO_Initv+0xe4>)
 8000c48:	f043 0302 	orr.w	r3, r3, #2
 8000c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb8 <_ZL12MX_GPIO_Initv+0xe4>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c52:	f003 0302 	and.w	r3, r3, #2
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c60:	4816      	ldr	r0, [pc, #88]	@ (8000cbc <_ZL12MX_GPIO_Initv+0xe8>)
 8000c62:	f000 fdcd 	bl	8001800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	480f      	ldr	r0, [pc, #60]	@ (8000cbc <_ZL12MX_GPIO_Initv+0xe8>)
 8000c80:	f000 fc3a 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c84:	2301      	movs	r3, #1
 8000c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c88:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	4809      	ldr	r0, [pc, #36]	@ (8000cc0 <_ZL12MX_GPIO_Initv+0xec>)
 8000c9a:	f000 fc2d 	bl	80014f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	2006      	movs	r0, #6
 8000ca4:	f000 fb5f 	bl	8001366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ca8:	2006      	movs	r0, #6
 8000caa:	f000 fb78 	bl	800139e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cae:	bf00      	nop
 8000cb0:	3728      	adds	r7, #40	@ 0x28
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020800 	.word	0x40020800
 8000cc0:	40020000 	.word	0x40020000

08000cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc8:	b672      	cpsid	i
}
 8000cca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <Error_Handler+0x8>

08000cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	4b10      	ldr	r3, [pc, #64]	@ (8000d1c <HAL_MspInit+0x4c>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cde:	4a0f      	ldr	r2, [pc, #60]	@ (8000d1c <HAL_MspInit+0x4c>)
 8000ce0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ce4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d1c <HAL_MspInit+0x4c>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	603b      	str	r3, [r7, #0]
 8000cf6:	4b09      	ldr	r3, [pc, #36]	@ (8000d1c <HAL_MspInit+0x4c>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfa:	4a08      	ldr	r2, [pc, #32]	@ (8000d1c <HAL_MspInit+0x4c>)
 8000cfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d02:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <HAL_MspInit+0x4c>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d0a:	603b      	str	r3, [r7, #0]
 8000d0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	40023800 	.word	0x40023800

08000d20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08a      	sub	sp, #40	@ 0x28
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a2c      	ldr	r2, [pc, #176]	@ (8000df0 <HAL_TIM_Base_MspInit+0xd0>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d151      	bne.n	8000de6 <HAL_TIM_Base_MspInit+0xc6>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	4b2b      	ldr	r3, [pc, #172]	@ (8000df4 <HAL_TIM_Base_MspInit+0xd4>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4a:	4a2a      	ldr	r2, [pc, #168]	@ (8000df4 <HAL_TIM_Base_MspInit+0xd4>)
 8000d4c:	f043 0302 	orr.w	r3, r3, #2
 8000d50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d52:	4b28      	ldr	r3, [pc, #160]	@ (8000df4 <HAL_TIM_Base_MspInit+0xd4>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	4b24      	ldr	r3, [pc, #144]	@ (8000df4 <HAL_TIM_Base_MspInit+0xd4>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	4a23      	ldr	r2, [pc, #140]	@ (8000df4 <HAL_TIM_Base_MspInit+0xd4>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6e:	4b21      	ldr	r3, [pc, #132]	@ (8000df4 <HAL_TIM_Base_MspInit+0xd4>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60bb      	str	r3, [r7, #8]
 8000d7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000df4 <HAL_TIM_Base_MspInit+0xd4>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	4a1c      	ldr	r2, [pc, #112]	@ (8000df4 <HAL_TIM_Base_MspInit+0xd4>)
 8000d84:	f043 0302 	orr.w	r3, r3, #2
 8000d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000df4 <HAL_TIM_Base_MspInit+0xd4>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d96:	2340      	movs	r3, #64	@ 0x40
 8000d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000da6:	2302      	movs	r3, #2
 8000da8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4619      	mov	r1, r3
 8000db0:	4811      	ldr	r0, [pc, #68]	@ (8000df8 <HAL_TIM_Base_MspInit+0xd8>)
 8000db2:	f000 fba1 	bl	80014f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000db6:	2301      	movs	r3, #1
 8000db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	4619      	mov	r1, r3
 8000dd0:	480a      	ldr	r0, [pc, #40]	@ (8000dfc <HAL_TIM_Base_MspInit+0xdc>)
 8000dd2:	f000 fb91 	bl	80014f8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2100      	movs	r1, #0
 8000dda:	201d      	movs	r0, #29
 8000ddc:	f000 fac3 	bl	8001366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000de0:	201d      	movs	r0, #29
 8000de2:	f000 fadc 	bl	800139e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000de6:	bf00      	nop
 8000de8:	3728      	adds	r7, #40	@ 0x28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40000400 	.word	0x40000400
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40020000 	.word	0x40020000
 8000dfc:	40020400 	.word	0x40020400

08000e00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08c      	sub	sp, #48	@ 0x30
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 031c 	add.w	r3, r7, #28
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a36      	ldr	r2, [pc, #216]	@ (8000ef8 <HAL_UART_MspInit+0xf8>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d12c      	bne.n	8000e7c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	61bb      	str	r3, [r7, #24]
 8000e26:	4b35      	ldr	r3, [pc, #212]	@ (8000efc <HAL_UART_MspInit+0xfc>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2a:	4a34      	ldr	r2, [pc, #208]	@ (8000efc <HAL_UART_MspInit+0xfc>)
 8000e2c:	f043 0310 	orr.w	r3, r3, #16
 8000e30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e32:	4b32      	ldr	r3, [pc, #200]	@ (8000efc <HAL_UART_MspInit+0xfc>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e36:	f003 0310 	and.w	r3, r3, #16
 8000e3a:	61bb      	str	r3, [r7, #24]
 8000e3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
 8000e42:	4b2e      	ldr	r3, [pc, #184]	@ (8000efc <HAL_UART_MspInit+0xfc>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	4a2d      	ldr	r2, [pc, #180]	@ (8000efc <HAL_UART_MspInit+0xfc>)
 8000e48:	f043 0302 	orr.w	r3, r3, #2
 8000e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4e:	4b2b      	ldr	r3, [pc, #172]	@ (8000efc <HAL_UART_MspInit+0xfc>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e5a:	23c0      	movs	r3, #192	@ 0xc0
 8000e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e66:	2303      	movs	r3, #3
 8000e68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e6a:	2307      	movs	r3, #7
 8000e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6e:	f107 031c 	add.w	r3, r7, #28
 8000e72:	4619      	mov	r1, r3
 8000e74:	4822      	ldr	r0, [pc, #136]	@ (8000f00 <HAL_UART_MspInit+0x100>)
 8000e76:	f000 fb3f 	bl	80014f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e7a:	e038      	b.n	8000eee <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART2)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a20      	ldr	r2, [pc, #128]	@ (8000f04 <HAL_UART_MspInit+0x104>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d133      	bne.n	8000eee <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000efc <HAL_UART_MspInit+0xfc>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8e:	4a1b      	ldr	r2, [pc, #108]	@ (8000efc <HAL_UART_MspInit+0xfc>)
 8000e90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e96:	4b19      	ldr	r3, [pc, #100]	@ (8000efc <HAL_UART_MspInit+0xfc>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4b15      	ldr	r3, [pc, #84]	@ (8000efc <HAL_UART_MspInit+0xfc>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	4a14      	ldr	r2, [pc, #80]	@ (8000efc <HAL_UART_MspInit+0xfc>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb2:	4b12      	ldr	r3, [pc, #72]	@ (8000efc <HAL_UART_MspInit+0xfc>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ebe:	230c      	movs	r3, #12
 8000ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ece:	2307      	movs	r3, #7
 8000ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed2:	f107 031c 	add.w	r3, r7, #28
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	480b      	ldr	r0, [pc, #44]	@ (8000f08 <HAL_UART_MspInit+0x108>)
 8000eda:	f000 fb0d 	bl	80014f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2026      	movs	r0, #38	@ 0x26
 8000ee4:	f000 fa3f 	bl	8001366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ee8:	2026      	movs	r0, #38	@ 0x26
 8000eea:	f000 fa58 	bl	800139e <HAL_NVIC_EnableIRQ>
}
 8000eee:	bf00      	nop
 8000ef0:	3730      	adds	r7, #48	@ 0x30
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40011000 	.word	0x40011000
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40020400 	.word	0x40020400
 8000f04:	40004400 	.word	0x40004400
 8000f08:	40020000 	.word	0x40020000

08000f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <NMI_Handler+0x4>

08000f14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <HardFault_Handler+0x4>

08000f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <MemManage_Handler+0x4>

08000f24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <BusFault_Handler+0x4>

08000f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <UsageFault_Handler+0x4>

08000f34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f62:	f000 f905 	bl	8001170 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000f6e:	2001      	movs	r0, #1
 8000f70:	f000 fc60 	bl	8001834 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f7c:	4802      	ldr	r0, [pc, #8]	@ (8000f88 <TIM3_IRQHandler+0x10>)
 8000f7e:	f001 fa97 	bl	80024b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000078 	.word	0x20000078

08000f8c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f90:	4802      	ldr	r0, [pc, #8]	@ (8000f9c <USART2_IRQHandler+0x10>)
 8000f92:	f002 f915 	bl	80031c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000108 	.word	0x20000108

08000fa0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return 1;
 8000fa4:	2301      	movs	r3, #1
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <_kill>:

int _kill(int pid, int sig)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000fba:	f003 f99b 	bl	80042f4 <__errno>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2216      	movs	r2, #22
 8000fc2:	601a      	str	r2, [r3, #0]
  return -1;
 8000fc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <_exit>:

void _exit (int status)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ffe7 	bl	8000fb0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000fe2:	bf00      	nop
 8000fe4:	e7fd      	b.n	8000fe2 <_exit+0x12>
	...

08000fe8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff0:	4a14      	ldr	r2, [pc, #80]	@ (8001044 <_sbrk+0x5c>)
 8000ff2:	4b15      	ldr	r3, [pc, #84]	@ (8001048 <_sbrk+0x60>)
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ffc:	4b13      	ldr	r3, [pc, #76]	@ (800104c <_sbrk+0x64>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d102      	bne.n	800100a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001004:	4b11      	ldr	r3, [pc, #68]	@ (800104c <_sbrk+0x64>)
 8001006:	4a12      	ldr	r2, [pc, #72]	@ (8001050 <_sbrk+0x68>)
 8001008:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800100a:	4b10      	ldr	r3, [pc, #64]	@ (800104c <_sbrk+0x64>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	429a      	cmp	r2, r3
 8001016:	d207      	bcs.n	8001028 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001018:	f003 f96c 	bl	80042f4 <__errno>
 800101c:	4603      	mov	r3, r0
 800101e:	220c      	movs	r2, #12
 8001020:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001022:	f04f 33ff 	mov.w	r3, #4294967295
 8001026:	e009      	b.n	800103c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001028:	4b08      	ldr	r3, [pc, #32]	@ (800104c <_sbrk+0x64>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102e:	4b07      	ldr	r3, [pc, #28]	@ (800104c <_sbrk+0x64>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	4a05      	ldr	r2, [pc, #20]	@ (800104c <_sbrk+0x64>)
 8001038:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800103a:	68fb      	ldr	r3, [r7, #12]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20020000 	.word	0x20020000
 8001048:	00000400 	.word	0x00000400
 800104c:	20000158 	.word	0x20000158
 8001050:	200002b0 	.word	0x200002b0

08001054 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001058:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <SystemInit+0x20>)
 800105a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800105e:	4a05      	ldr	r2, [pc, #20]	@ (8001074 <SystemInit+0x20>)
 8001060:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001064:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <Reset_Handler>:
 8001078:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010b0 <LoopFillZerobss+0xe>
 800107c:	f7ff ffea 	bl	8001054 <SystemInit>
 8001080:	480c      	ldr	r0, [pc, #48]	@ (80010b4 <LoopFillZerobss+0x12>)
 8001082:	490d      	ldr	r1, [pc, #52]	@ (80010b8 <LoopFillZerobss+0x16>)
 8001084:	4a0d      	ldr	r2, [pc, #52]	@ (80010bc <LoopFillZerobss+0x1a>)
 8001086:	2300      	movs	r3, #0
 8001088:	e002      	b.n	8001090 <LoopCopyDataInit>

0800108a <CopyDataInit>:
 800108a:	58d4      	ldr	r4, [r2, r3]
 800108c:	50c4      	str	r4, [r0, r3]
 800108e:	3304      	adds	r3, #4

08001090 <LoopCopyDataInit>:
 8001090:	18c4      	adds	r4, r0, r3
 8001092:	428c      	cmp	r4, r1
 8001094:	d3f9      	bcc.n	800108a <CopyDataInit>
 8001096:	4a0a      	ldr	r2, [pc, #40]	@ (80010c0 <LoopFillZerobss+0x1e>)
 8001098:	4c0a      	ldr	r4, [pc, #40]	@ (80010c4 <LoopFillZerobss+0x22>)
 800109a:	2300      	movs	r3, #0
 800109c:	e001      	b.n	80010a2 <LoopFillZerobss>

0800109e <FillZerobss>:
 800109e:	6013      	str	r3, [r2, #0]
 80010a0:	3204      	adds	r2, #4

080010a2 <LoopFillZerobss>:
 80010a2:	42a2      	cmp	r2, r4
 80010a4:	d3fb      	bcc.n	800109e <FillZerobss>
 80010a6:	f003 f92b 	bl	8004300 <__libc_init_array>
 80010aa:	f7ff fbb3 	bl	8000814 <main>
 80010ae:	4770      	bx	lr
 80010b0:	20020000 	.word	0x20020000
 80010b4:	20000000 	.word	0x20000000
 80010b8:	2000005c 	.word	0x2000005c
 80010bc:	08004b08 	.word	0x08004b08
 80010c0:	2000005c 	.word	0x2000005c
 80010c4:	200002ac 	.word	0x200002ac

080010c8 <ADC_IRQHandler>:
 80010c8:	e7fe      	b.n	80010c8 <ADC_IRQHandler>
	...

080010cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010d0:	4b0e      	ldr	r3, [pc, #56]	@ (800110c <HAL_Init+0x40>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a0d      	ldr	r2, [pc, #52]	@ (800110c <HAL_Init+0x40>)
 80010d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010dc:	4b0b      	ldr	r3, [pc, #44]	@ (800110c <HAL_Init+0x40>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a0a      	ldr	r2, [pc, #40]	@ (800110c <HAL_Init+0x40>)
 80010e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e8:	4b08      	ldr	r3, [pc, #32]	@ (800110c <HAL_Init+0x40>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a07      	ldr	r2, [pc, #28]	@ (800110c <HAL_Init+0x40>)
 80010ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f4:	2003      	movs	r0, #3
 80010f6:	f000 f92b 	bl	8001350 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010fa:	200f      	movs	r0, #15
 80010fc:	f000 f808 	bl	8001110 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001100:	f7ff fde6 	bl	8000cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40023c00 	.word	0x40023c00

08001110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001118:	4b12      	ldr	r3, [pc, #72]	@ (8001164 <HAL_InitTick+0x54>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b12      	ldr	r3, [pc, #72]	@ (8001168 <HAL_InitTick+0x58>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	4619      	mov	r1, r3
 8001122:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001126:	fbb3 f3f1 	udiv	r3, r3, r1
 800112a:	fbb2 f3f3 	udiv	r3, r2, r3
 800112e:	4618      	mov	r0, r3
 8001130:	f000 f943 	bl	80013ba <HAL_SYSTICK_Config>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e00e      	b.n	800115c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b0f      	cmp	r3, #15
 8001142:	d80a      	bhi.n	800115a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001144:	2200      	movs	r2, #0
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	f04f 30ff 	mov.w	r0, #4294967295
 800114c:	f000 f90b 	bl	8001366 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001150:	4a06      	ldr	r2, [pc, #24]	@ (800116c <HAL_InitTick+0x5c>)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001156:	2300      	movs	r3, #0
 8001158:	e000      	b.n	800115c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
}
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000000 	.word	0x20000000
 8001168:	20000008 	.word	0x20000008
 800116c:	20000004 	.word	0x20000004

08001170 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001174:	4b06      	ldr	r3, [pc, #24]	@ (8001190 <HAL_IncTick+0x20>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	461a      	mov	r2, r3
 800117a:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <HAL_IncTick+0x24>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4413      	add	r3, r2
 8001180:	4a04      	ldr	r2, [pc, #16]	@ (8001194 <HAL_IncTick+0x24>)
 8001182:	6013      	str	r3, [r2, #0]
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	20000008 	.word	0x20000008
 8001194:	2000015c 	.word	0x2000015c

08001198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return uwTick;
 800119c:	4b03      	ldr	r3, [pc, #12]	@ (80011ac <HAL_GetTick+0x14>)
 800119e:	681b      	ldr	r3, [r3, #0]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	2000015c 	.word	0x2000015c

080011b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c0:	4b0c      	ldr	r3, [pc, #48]	@ (80011f4 <__NVIC_SetPriorityGrouping+0x44>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011c6:	68ba      	ldr	r2, [r7, #8]
 80011c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011cc:	4013      	ands	r3, r2
 80011ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e2:	4a04      	ldr	r2, [pc, #16]	@ (80011f4 <__NVIC_SetPriorityGrouping+0x44>)
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	60d3      	str	r3, [r2, #12]
}
 80011e8:	bf00      	nop
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011fc:	4b04      	ldr	r3, [pc, #16]	@ (8001210 <__NVIC_GetPriorityGrouping+0x18>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	0a1b      	lsrs	r3, r3, #8
 8001202:	f003 0307 	and.w	r3, r3, #7
}
 8001206:	4618      	mov	r0, r3
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	2b00      	cmp	r3, #0
 8001224:	db0b      	blt.n	800123e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	f003 021f 	and.w	r2, r3, #31
 800122c:	4907      	ldr	r1, [pc, #28]	@ (800124c <__NVIC_EnableIRQ+0x38>)
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	095b      	lsrs	r3, r3, #5
 8001234:	2001      	movs	r0, #1
 8001236:	fa00 f202 	lsl.w	r2, r0, r2
 800123a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000e100 	.word	0xe000e100

08001250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	6039      	str	r1, [r7, #0]
 800125a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001260:	2b00      	cmp	r3, #0
 8001262:	db0a      	blt.n	800127a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	b2da      	uxtb	r2, r3
 8001268:	490c      	ldr	r1, [pc, #48]	@ (800129c <__NVIC_SetPriority+0x4c>)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	0112      	lsls	r2, r2, #4
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	440b      	add	r3, r1
 8001274:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001278:	e00a      	b.n	8001290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4908      	ldr	r1, [pc, #32]	@ (80012a0 <__NVIC_SetPriority+0x50>)
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	3b04      	subs	r3, #4
 8001288:	0112      	lsls	r2, r2, #4
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	440b      	add	r3, r1
 800128e:	761a      	strb	r2, [r3, #24]
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000e100 	.word	0xe000e100
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b089      	sub	sp, #36	@ 0x24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f1c3 0307 	rsb	r3, r3, #7
 80012be:	2b04      	cmp	r3, #4
 80012c0:	bf28      	it	cs
 80012c2:	2304      	movcs	r3, #4
 80012c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3304      	adds	r3, #4
 80012ca:	2b06      	cmp	r3, #6
 80012cc:	d902      	bls.n	80012d4 <NVIC_EncodePriority+0x30>
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3b03      	subs	r3, #3
 80012d2:	e000      	b.n	80012d6 <NVIC_EncodePriority+0x32>
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	f04f 32ff 	mov.w	r2, #4294967295
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43da      	mvns	r2, r3
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	401a      	ands	r2, r3
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ec:	f04f 31ff 	mov.w	r1, #4294967295
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	fa01 f303 	lsl.w	r3, r1, r3
 80012f6:	43d9      	mvns	r1, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	4313      	orrs	r3, r2
         );
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3724      	adds	r7, #36	@ 0x24
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
	...

0800130c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3b01      	subs	r3, #1
 8001318:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800131c:	d301      	bcc.n	8001322 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800131e:	2301      	movs	r3, #1
 8001320:	e00f      	b.n	8001342 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001322:	4a0a      	ldr	r2, [pc, #40]	@ (800134c <SysTick_Config+0x40>)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3b01      	subs	r3, #1
 8001328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800132a:	210f      	movs	r1, #15
 800132c:	f04f 30ff 	mov.w	r0, #4294967295
 8001330:	f7ff ff8e 	bl	8001250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001334:	4b05      	ldr	r3, [pc, #20]	@ (800134c <SysTick_Config+0x40>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800133a:	4b04      	ldr	r3, [pc, #16]	@ (800134c <SysTick_Config+0x40>)
 800133c:	2207      	movs	r2, #7
 800133e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	e000e010 	.word	0xe000e010

08001350 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ff29 	bl	80011b0 <__NVIC_SetPriorityGrouping>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001366:	b580      	push	{r7, lr}
 8001368:	b086      	sub	sp, #24
 800136a:	af00      	add	r7, sp, #0
 800136c:	4603      	mov	r3, r0
 800136e:	60b9      	str	r1, [r7, #8]
 8001370:	607a      	str	r2, [r7, #4]
 8001372:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001378:	f7ff ff3e 	bl	80011f8 <__NVIC_GetPriorityGrouping>
 800137c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	68b9      	ldr	r1, [r7, #8]
 8001382:	6978      	ldr	r0, [r7, #20]
 8001384:	f7ff ff8e 	bl	80012a4 <NVIC_EncodePriority>
 8001388:	4602      	mov	r2, r0
 800138a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138e:	4611      	mov	r1, r2
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff5d 	bl	8001250 <__NVIC_SetPriority>
}
 8001396:	bf00      	nop
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	4603      	mov	r3, r0
 80013a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff ff31 	bl	8001214 <__NVIC_EnableIRQ>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff ffa2 	bl	800130c <SysTick_Config>
 80013c8:	4603      	mov	r3, r0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b084      	sub	sp, #16
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013de:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013e0:	f7ff feda 	bl	8001198 <HAL_GetTick>
 80013e4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d008      	beq.n	8001404 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2280      	movs	r2, #128	@ 0x80
 80013f6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e052      	b.n	80014aa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 0216 	bic.w	r2, r2, #22
 8001412:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	695a      	ldr	r2, [r3, #20]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001422:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001428:	2b00      	cmp	r3, #0
 800142a:	d103      	bne.n	8001434 <HAL_DMA_Abort+0x62>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001430:	2b00      	cmp	r3, #0
 8001432:	d007      	beq.n	8001444 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f022 0208 	bic.w	r2, r2, #8
 8001442:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f022 0201 	bic.w	r2, r2, #1
 8001452:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001454:	e013      	b.n	800147e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001456:	f7ff fe9f 	bl	8001198 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b05      	cmp	r3, #5
 8001462:	d90c      	bls.n	800147e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2220      	movs	r2, #32
 8001468:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2203      	movs	r2, #3
 800146e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e015      	b.n	80014aa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1e4      	bne.n	8001456 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001490:	223f      	movs	r2, #63	@ 0x3f
 8001492:	409a      	lsls	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2201      	movs	r2, #1
 800149c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014b2:	b480      	push	{r7}
 80014b4:	b083      	sub	sp, #12
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d004      	beq.n	80014d0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2280      	movs	r2, #128	@ 0x80
 80014ca:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e00c      	b.n	80014ea <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2205      	movs	r2, #5
 80014d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f022 0201 	bic.w	r2, r2, #1
 80014e6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
	...

080014f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b089      	sub	sp, #36	@ 0x24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800150a:	2300      	movs	r3, #0
 800150c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
 8001512:	e159      	b.n	80017c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001514:	2201      	movs	r2, #1
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	4013      	ands	r3, r2
 8001526:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	429a      	cmp	r2, r3
 800152e:	f040 8148 	bne.w	80017c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f003 0303 	and.w	r3, r3, #3
 800153a:	2b01      	cmp	r3, #1
 800153c:	d005      	beq.n	800154a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001546:	2b02      	cmp	r3, #2
 8001548:	d130      	bne.n	80015ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	2203      	movs	r2, #3
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43db      	mvns	r3, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4013      	ands	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	68da      	ldr	r2, [r3, #12]
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4313      	orrs	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001580:	2201      	movs	r2, #1
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	091b      	lsrs	r3, r3, #4
 8001596:	f003 0201 	and.w	r2, r3, #1
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f003 0303 	and.w	r3, r3, #3
 80015b4:	2b03      	cmp	r3, #3
 80015b6:	d017      	beq.n	80015e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	2203      	movs	r2, #3
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4013      	ands	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4313      	orrs	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 0303 	and.w	r3, r3, #3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d123      	bne.n	800163c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	08da      	lsrs	r2, r3, #3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3208      	adds	r2, #8
 80015fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001600:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	f003 0307 	and.w	r3, r3, #7
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	220f      	movs	r2, #15
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	691a      	ldr	r2, [r3, #16]
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4313      	orrs	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	08da      	lsrs	r2, r3, #3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	3208      	adds	r2, #8
 8001636:	69b9      	ldr	r1, [r7, #24]
 8001638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	2203      	movs	r2, #3
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 0203 	and.w	r2, r3, #3
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4313      	orrs	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001678:	2b00      	cmp	r3, #0
 800167a:	f000 80a2 	beq.w	80017c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	4b57      	ldr	r3, [pc, #348]	@ (80017e0 <HAL_GPIO_Init+0x2e8>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001686:	4a56      	ldr	r2, [pc, #344]	@ (80017e0 <HAL_GPIO_Init+0x2e8>)
 8001688:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800168c:	6453      	str	r3, [r2, #68]	@ 0x44
 800168e:	4b54      	ldr	r3, [pc, #336]	@ (80017e0 <HAL_GPIO_Init+0x2e8>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001692:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800169a:	4a52      	ldr	r2, [pc, #328]	@ (80017e4 <HAL_GPIO_Init+0x2ec>)
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	089b      	lsrs	r3, r3, #2
 80016a0:	3302      	adds	r3, #2
 80016a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	220f      	movs	r2, #15
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43db      	mvns	r3, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4013      	ands	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a49      	ldr	r2, [pc, #292]	@ (80017e8 <HAL_GPIO_Init+0x2f0>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d019      	beq.n	80016fa <HAL_GPIO_Init+0x202>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a48      	ldr	r2, [pc, #288]	@ (80017ec <HAL_GPIO_Init+0x2f4>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d013      	beq.n	80016f6 <HAL_GPIO_Init+0x1fe>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a47      	ldr	r2, [pc, #284]	@ (80017f0 <HAL_GPIO_Init+0x2f8>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d00d      	beq.n	80016f2 <HAL_GPIO_Init+0x1fa>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a46      	ldr	r2, [pc, #280]	@ (80017f4 <HAL_GPIO_Init+0x2fc>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d007      	beq.n	80016ee <HAL_GPIO_Init+0x1f6>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a45      	ldr	r2, [pc, #276]	@ (80017f8 <HAL_GPIO_Init+0x300>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d101      	bne.n	80016ea <HAL_GPIO_Init+0x1f2>
 80016e6:	2304      	movs	r3, #4
 80016e8:	e008      	b.n	80016fc <HAL_GPIO_Init+0x204>
 80016ea:	2307      	movs	r3, #7
 80016ec:	e006      	b.n	80016fc <HAL_GPIO_Init+0x204>
 80016ee:	2303      	movs	r3, #3
 80016f0:	e004      	b.n	80016fc <HAL_GPIO_Init+0x204>
 80016f2:	2302      	movs	r3, #2
 80016f4:	e002      	b.n	80016fc <HAL_GPIO_Init+0x204>
 80016f6:	2301      	movs	r3, #1
 80016f8:	e000      	b.n	80016fc <HAL_GPIO_Init+0x204>
 80016fa:	2300      	movs	r3, #0
 80016fc:	69fa      	ldr	r2, [r7, #28]
 80016fe:	f002 0203 	and.w	r2, r2, #3
 8001702:	0092      	lsls	r2, r2, #2
 8001704:	4093      	lsls	r3, r2
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4313      	orrs	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800170c:	4935      	ldr	r1, [pc, #212]	@ (80017e4 <HAL_GPIO_Init+0x2ec>)
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	089b      	lsrs	r3, r3, #2
 8001712:	3302      	adds	r3, #2
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800171a:	4b38      	ldr	r3, [pc, #224]	@ (80017fc <HAL_GPIO_Init+0x304>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	43db      	mvns	r3, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4013      	ands	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800173e:	4a2f      	ldr	r2, [pc, #188]	@ (80017fc <HAL_GPIO_Init+0x304>)
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001744:	4b2d      	ldr	r3, [pc, #180]	@ (80017fc <HAL_GPIO_Init+0x304>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	43db      	mvns	r3, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	4313      	orrs	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001768:	4a24      	ldr	r2, [pc, #144]	@ (80017fc <HAL_GPIO_Init+0x304>)
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800176e:	4b23      	ldr	r3, [pc, #140]	@ (80017fc <HAL_GPIO_Init+0x304>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	43db      	mvns	r3, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4013      	ands	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001792:	4a1a      	ldr	r2, [pc, #104]	@ (80017fc <HAL_GPIO_Init+0x304>)
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001798:	4b18      	ldr	r3, [pc, #96]	@ (80017fc <HAL_GPIO_Init+0x304>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d003      	beq.n	80017bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017bc:	4a0f      	ldr	r2, [pc, #60]	@ (80017fc <HAL_GPIO_Init+0x304>)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3301      	adds	r3, #1
 80017c6:	61fb      	str	r3, [r7, #28]
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	2b0f      	cmp	r3, #15
 80017cc:	f67f aea2 	bls.w	8001514 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017d0:	bf00      	nop
 80017d2:	bf00      	nop
 80017d4:	3724      	adds	r7, #36	@ 0x24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40013800 	.word	0x40013800
 80017e8:	40020000 	.word	0x40020000
 80017ec:	40020400 	.word	0x40020400
 80017f0:	40020800 	.word	0x40020800
 80017f4:	40020c00 	.word	0x40020c00
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40013c00 	.word	0x40013c00

08001800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	460b      	mov	r3, r1
 800180a:	807b      	strh	r3, [r7, #2]
 800180c:	4613      	mov	r3, r2
 800180e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001810:	787b      	ldrb	r3, [r7, #1]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001816:	887a      	ldrh	r2, [r7, #2]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800181c:	e003      	b.n	8001826 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800181e:	887b      	ldrh	r3, [r7, #2]
 8001820:	041a      	lsls	r2, r3, #16
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	619a      	str	r2, [r3, #24]
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
	...

08001834 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800183e:	4b08      	ldr	r3, [pc, #32]	@ (8001860 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001840:	695a      	ldr	r2, [r3, #20]
 8001842:	88fb      	ldrh	r3, [r7, #6]
 8001844:	4013      	ands	r3, r2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d006      	beq.n	8001858 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800184a:	4a05      	ldr	r2, [pc, #20]	@ (8001860 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800184c:	88fb      	ldrh	r3, [r7, #6]
 800184e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001850:	88fb      	ldrh	r3, [r7, #6]
 8001852:	4618      	mov	r0, r3
 8001854:	f000 f806 	bl	8001864 <HAL_GPIO_EXTI_Callback>
  }
}
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40013c00 	.word	0x40013c00

08001864 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
	...

0800187c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e267      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	2b00      	cmp	r3, #0
 8001898:	d075      	beq.n	8001986 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800189a:	4b88      	ldr	r3, [pc, #544]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f003 030c 	and.w	r3, r3, #12
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	d00c      	beq.n	80018c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018a6:	4b85      	ldr	r3, [pc, #532]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018ae:	2b08      	cmp	r3, #8
 80018b0:	d112      	bne.n	80018d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018b2:	4b82      	ldr	r3, [pc, #520]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018be:	d10b      	bne.n	80018d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c0:	4b7e      	ldr	r3, [pc, #504]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d05b      	beq.n	8001984 <HAL_RCC_OscConfig+0x108>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d157      	bne.n	8001984 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e242      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018e0:	d106      	bne.n	80018f0 <HAL_RCC_OscConfig+0x74>
 80018e2:	4b76      	ldr	r3, [pc, #472]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a75      	ldr	r2, [pc, #468]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 80018e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	e01d      	b.n	800192c <HAL_RCC_OscConfig+0xb0>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018f8:	d10c      	bne.n	8001914 <HAL_RCC_OscConfig+0x98>
 80018fa:	4b70      	ldr	r3, [pc, #448]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a6f      	ldr	r2, [pc, #444]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 8001900:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	4b6d      	ldr	r3, [pc, #436]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a6c      	ldr	r2, [pc, #432]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 800190c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	e00b      	b.n	800192c <HAL_RCC_OscConfig+0xb0>
 8001914:	4b69      	ldr	r3, [pc, #420]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a68      	ldr	r2, [pc, #416]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 800191a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800191e:	6013      	str	r3, [r2, #0]
 8001920:	4b66      	ldr	r3, [pc, #408]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a65      	ldr	r2, [pc, #404]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 8001926:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800192a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d013      	beq.n	800195c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001934:	f7ff fc30 	bl	8001198 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800193c:	f7ff fc2c 	bl	8001198 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b64      	cmp	r3, #100	@ 0x64
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e207      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194e:	4b5b      	ldr	r3, [pc, #364]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0f0      	beq.n	800193c <HAL_RCC_OscConfig+0xc0>
 800195a:	e014      	b.n	8001986 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195c:	f7ff fc1c 	bl	8001198 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001964:	f7ff fc18 	bl	8001198 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b64      	cmp	r3, #100	@ 0x64
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e1f3      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001976:	4b51      	ldr	r3, [pc, #324]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f0      	bne.n	8001964 <HAL_RCC_OscConfig+0xe8>
 8001982:	e000      	b.n	8001986 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d063      	beq.n	8001a5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001992:	4b4a      	ldr	r3, [pc, #296]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 030c 	and.w	r3, r3, #12
 800199a:	2b00      	cmp	r3, #0
 800199c:	d00b      	beq.n	80019b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800199e:	4b47      	ldr	r3, [pc, #284]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019a6:	2b08      	cmp	r3, #8
 80019a8:	d11c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019aa:	4b44      	ldr	r3, [pc, #272]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d116      	bne.n	80019e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b6:	4b41      	ldr	r3, [pc, #260]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d005      	beq.n	80019ce <HAL_RCC_OscConfig+0x152>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d001      	beq.n	80019ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e1c7      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ce:	4b3b      	ldr	r3, [pc, #236]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	4937      	ldr	r1, [pc, #220]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019e2:	e03a      	b.n	8001a5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d020      	beq.n	8001a2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019ec:	4b34      	ldr	r3, [pc, #208]	@ (8001ac0 <HAL_RCC_OscConfig+0x244>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f2:	f7ff fbd1 	bl	8001198 <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019fa:	f7ff fbcd 	bl	8001198 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e1a8      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0c:	4b2b      	ldr	r3, [pc, #172]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0f0      	beq.n	80019fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a18:	4b28      	ldr	r3, [pc, #160]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	4925      	ldr	r1, [pc, #148]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	600b      	str	r3, [r1, #0]
 8001a2c:	e015      	b.n	8001a5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a2e:	4b24      	ldr	r3, [pc, #144]	@ (8001ac0 <HAL_RCC_OscConfig+0x244>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a34:	f7ff fbb0 	bl	8001198 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a3c:	f7ff fbac 	bl	8001198 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e187      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f0      	bne.n	8001a3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d036      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d016      	beq.n	8001a9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a6e:	4b15      	ldr	r3, [pc, #84]	@ (8001ac4 <HAL_RCC_OscConfig+0x248>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a74:	f7ff fb90 	bl	8001198 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a7c:	f7ff fb8c 	bl	8001198 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e167      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001abc <HAL_RCC_OscConfig+0x240>)
 8001a90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f0      	beq.n	8001a7c <HAL_RCC_OscConfig+0x200>
 8001a9a:	e01b      	b.n	8001ad4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a9c:	4b09      	ldr	r3, [pc, #36]	@ (8001ac4 <HAL_RCC_OscConfig+0x248>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa2:	f7ff fb79 	bl	8001198 <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aa8:	e00e      	b.n	8001ac8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aaa:	f7ff fb75 	bl	8001198 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d907      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e150      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	42470000 	.word	0x42470000
 8001ac4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac8:	4b88      	ldr	r3, [pc, #544]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001aca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1ea      	bne.n	8001aaa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 8097 	beq.w	8001c10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ae6:	4b81      	ldr	r3, [pc, #516]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d10f      	bne.n	8001b12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	4b7d      	ldr	r3, [pc, #500]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afa:	4a7c      	ldr	r2, [pc, #496]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001afc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b02:	4b7a      	ldr	r3, [pc, #488]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b12:	4b77      	ldr	r3, [pc, #476]	@ (8001cf0 <HAL_RCC_OscConfig+0x474>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d118      	bne.n	8001b50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b1e:	4b74      	ldr	r3, [pc, #464]	@ (8001cf0 <HAL_RCC_OscConfig+0x474>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a73      	ldr	r2, [pc, #460]	@ (8001cf0 <HAL_RCC_OscConfig+0x474>)
 8001b24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b2a:	f7ff fb35 	bl	8001198 <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b32:	f7ff fb31 	bl	8001198 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e10c      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b44:	4b6a      	ldr	r3, [pc, #424]	@ (8001cf0 <HAL_RCC_OscConfig+0x474>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0f0      	beq.n	8001b32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d106      	bne.n	8001b66 <HAL_RCC_OscConfig+0x2ea>
 8001b58:	4b64      	ldr	r3, [pc, #400]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b5c:	4a63      	ldr	r2, [pc, #396]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b64:	e01c      	b.n	8001ba0 <HAL_RCC_OscConfig+0x324>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	2b05      	cmp	r3, #5
 8001b6c:	d10c      	bne.n	8001b88 <HAL_RCC_OscConfig+0x30c>
 8001b6e:	4b5f      	ldr	r3, [pc, #380]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b72:	4a5e      	ldr	r2, [pc, #376]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001b74:	f043 0304 	orr.w	r3, r3, #4
 8001b78:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b7a:	4b5c      	ldr	r3, [pc, #368]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b7e:	4a5b      	ldr	r2, [pc, #364]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b86:	e00b      	b.n	8001ba0 <HAL_RCC_OscConfig+0x324>
 8001b88:	4b58      	ldr	r3, [pc, #352]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b8c:	4a57      	ldr	r2, [pc, #348]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001b8e:	f023 0301 	bic.w	r3, r3, #1
 8001b92:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b94:	4b55      	ldr	r3, [pc, #340]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b98:	4a54      	ldr	r2, [pc, #336]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001b9a:	f023 0304 	bic.w	r3, r3, #4
 8001b9e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d015      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba8:	f7ff faf6 	bl	8001198 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bae:	e00a      	b.n	8001bc6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bb0:	f7ff faf2 	bl	8001198 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e0cb      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc6:	4b49      	ldr	r3, [pc, #292]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0ee      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x334>
 8001bd2:	e014      	b.n	8001bfe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd4:	f7ff fae0 	bl	8001198 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bda:	e00a      	b.n	8001bf2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bdc:	f7ff fadc 	bl	8001198 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e0b5      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf2:	4b3e      	ldr	r3, [pc, #248]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1ee      	bne.n	8001bdc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bfe:	7dfb      	ldrb	r3, [r7, #23]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d105      	bne.n	8001c10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c04:	4b39      	ldr	r3, [pc, #228]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c08:	4a38      	ldr	r2, [pc, #224]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001c0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c0e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 80a1 	beq.w	8001d5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c1a:	4b34      	ldr	r3, [pc, #208]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 030c 	and.w	r3, r3, #12
 8001c22:	2b08      	cmp	r3, #8
 8001c24:	d05c      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d141      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c2e:	4b31      	ldr	r3, [pc, #196]	@ (8001cf4 <HAL_RCC_OscConfig+0x478>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c34:	f7ff fab0 	bl	8001198 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c3c:	f7ff faac 	bl	8001198 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e087      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c4e:	4b27      	ldr	r3, [pc, #156]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69da      	ldr	r2, [r3, #28]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	431a      	orrs	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c68:	019b      	lsls	r3, r3, #6
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c70:	085b      	lsrs	r3, r3, #1
 8001c72:	3b01      	subs	r3, #1
 8001c74:	041b      	lsls	r3, r3, #16
 8001c76:	431a      	orrs	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c7c:	061b      	lsls	r3, r3, #24
 8001c7e:	491b      	ldr	r1, [pc, #108]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c84:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf4 <HAL_RCC_OscConfig+0x478>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8a:	f7ff fa85 	bl	8001198 <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c92:	f7ff fa81 	bl	8001198 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e05c      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ca4:	4b11      	ldr	r3, [pc, #68]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0f0      	beq.n	8001c92 <HAL_RCC_OscConfig+0x416>
 8001cb0:	e054      	b.n	8001d5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb2:	4b10      	ldr	r3, [pc, #64]	@ (8001cf4 <HAL_RCC_OscConfig+0x478>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb8:	f7ff fa6e 	bl	8001198 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc0:	f7ff fa6a 	bl	8001198 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e045      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cd2:	4b06      	ldr	r3, [pc, #24]	@ (8001cec <HAL_RCC_OscConfig+0x470>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x444>
 8001cde:	e03d      	b.n	8001d5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d107      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e038      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40007000 	.word	0x40007000
 8001cf4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d68 <HAL_RCC_OscConfig+0x4ec>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d028      	beq.n	8001d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d121      	bne.n	8001d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d11a      	bne.n	8001d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001d28:	4013      	ands	r3, r2
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d111      	bne.n	8001d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d3e:	085b      	lsrs	r3, r3, #1
 8001d40:	3b01      	subs	r3, #1
 8001d42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d107      	bne.n	8001d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d001      	beq.n	8001d5c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e000      	b.n	8001d5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40023800 	.word	0x40023800

08001d6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d101      	bne.n	8001d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e0cc      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d80:	4b68      	ldr	r3, [pc, #416]	@ (8001f24 <HAL_RCC_ClockConfig+0x1b8>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d90c      	bls.n	8001da8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8e:	4b65      	ldr	r3, [pc, #404]	@ (8001f24 <HAL_RCC_ClockConfig+0x1b8>)
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d96:	4b63      	ldr	r3, [pc, #396]	@ (8001f24 <HAL_RCC_ClockConfig+0x1b8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d001      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e0b8      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d020      	beq.n	8001df6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d005      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dc0:	4b59      	ldr	r3, [pc, #356]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	4a58      	ldr	r2, [pc, #352]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001dca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0308 	and.w	r3, r3, #8
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d005      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dd8:	4b53      	ldr	r3, [pc, #332]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	4a52      	ldr	r2, [pc, #328]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001dde:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001de2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001de4:	4b50      	ldr	r3, [pc, #320]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	494d      	ldr	r1, [pc, #308]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d044      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d107      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0a:	4b47      	ldr	r3, [pc, #284]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d119      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e07f      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d003      	beq.n	8001e2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	d107      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e2a:	4b3f      	ldr	r3, [pc, #252]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d109      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e06f      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e3a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e067      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e4a:	4b37      	ldr	r3, [pc, #220]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f023 0203 	bic.w	r2, r3, #3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	4934      	ldr	r1, [pc, #208]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e5c:	f7ff f99c 	bl	8001198 <HAL_GetTick>
 8001e60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e62:	e00a      	b.n	8001e7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e64:	f7ff f998 	bl	8001198 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e04f      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e7a:	4b2b      	ldr	r3, [pc, #172]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 020c 	and.w	r2, r3, #12
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d1eb      	bne.n	8001e64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e8c:	4b25      	ldr	r3, [pc, #148]	@ (8001f24 <HAL_RCC_ClockConfig+0x1b8>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d20c      	bcs.n	8001eb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9a:	4b22      	ldr	r3, [pc, #136]	@ (8001f24 <HAL_RCC_ClockConfig+0x1b8>)
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea2:	4b20      	ldr	r3, [pc, #128]	@ (8001f24 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d001      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e032      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d008      	beq.n	8001ed2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ec0:	4b19      	ldr	r3, [pc, #100]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	4916      	ldr	r1, [pc, #88]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d009      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ede:	4b12      	ldr	r3, [pc, #72]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	490e      	ldr	r1, [pc, #56]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ef2:	f000 f821 	bl	8001f38 <HAL_RCC_GetSysClockFreq>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f28 <HAL_RCC_ClockConfig+0x1bc>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	091b      	lsrs	r3, r3, #4
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	490a      	ldr	r1, [pc, #40]	@ (8001f2c <HAL_RCC_ClockConfig+0x1c0>)
 8001f04:	5ccb      	ldrb	r3, [r1, r3]
 8001f06:	fa22 f303 	lsr.w	r3, r2, r3
 8001f0a:	4a09      	ldr	r2, [pc, #36]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f0e:	4b09      	ldr	r3, [pc, #36]	@ (8001f34 <HAL_RCC_ClockConfig+0x1c8>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff f8fc 	bl	8001110 <HAL_InitTick>

  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40023c00 	.word	0x40023c00
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	08004aac 	.word	0x08004aac
 8001f30:	20000000 	.word	0x20000000
 8001f34:	20000004 	.word	0x20000004

08001f38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f3c:	b090      	sub	sp, #64	@ 0x40
 8001f3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f44:	2300      	movs	r3, #0
 8001f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f48:	2300      	movs	r3, #0
 8001f4a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f50:	4b59      	ldr	r3, [pc, #356]	@ (80020b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 030c 	and.w	r3, r3, #12
 8001f58:	2b08      	cmp	r3, #8
 8001f5a:	d00d      	beq.n	8001f78 <HAL_RCC_GetSysClockFreq+0x40>
 8001f5c:	2b08      	cmp	r3, #8
 8001f5e:	f200 80a1 	bhi.w	80020a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d002      	beq.n	8001f6c <HAL_RCC_GetSysClockFreq+0x34>
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	d003      	beq.n	8001f72 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f6a:	e09b      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f6c:	4b53      	ldr	r3, [pc, #332]	@ (80020bc <HAL_RCC_GetSysClockFreq+0x184>)
 8001f6e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8001f70:	e09b      	b.n	80020aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f72:	4b53      	ldr	r3, [pc, #332]	@ (80020c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f74:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f76:	e098      	b.n	80020aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f78:	4b4f      	ldr	r3, [pc, #316]	@ (80020b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f80:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f82:	4b4d      	ldr	r3, [pc, #308]	@ (80020b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d028      	beq.n	8001fe0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f8e:	4b4a      	ldr	r3, [pc, #296]	@ (80020b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	099b      	lsrs	r3, r3, #6
 8001f94:	2200      	movs	r2, #0
 8001f96:	623b      	str	r3, [r7, #32]
 8001f98:	627a      	str	r2, [r7, #36]	@ 0x24
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
 8001f9c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	4b47      	ldr	r3, [pc, #284]	@ (80020c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001fa4:	fb03 f201 	mul.w	r2, r3, r1
 8001fa8:	2300      	movs	r3, #0
 8001faa:	fb00 f303 	mul.w	r3, r0, r3
 8001fae:	4413      	add	r3, r2
 8001fb0:	4a43      	ldr	r2, [pc, #268]	@ (80020c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001fb2:	fba0 1202 	umull	r1, r2, r0, r2
 8001fb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001fb8:	460a      	mov	r2, r1
 8001fba:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001fbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fbe:	4413      	add	r3, r2
 8001fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	61bb      	str	r3, [r7, #24]
 8001fc8:	61fa      	str	r2, [r7, #28]
 8001fca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001fd2:	f7fe f955 	bl	8000280 <__aeabi_uldivmod>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	4613      	mov	r3, r2
 8001fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001fde:	e053      	b.n	8002088 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fe0:	4b35      	ldr	r3, [pc, #212]	@ (80020b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	099b      	lsrs	r3, r3, #6
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	613b      	str	r3, [r7, #16]
 8001fea:	617a      	str	r2, [r7, #20]
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001ff2:	f04f 0b00 	mov.w	fp, #0
 8001ff6:	4652      	mov	r2, sl
 8001ff8:	465b      	mov	r3, fp
 8001ffa:	f04f 0000 	mov.w	r0, #0
 8001ffe:	f04f 0100 	mov.w	r1, #0
 8002002:	0159      	lsls	r1, r3, #5
 8002004:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002008:	0150      	lsls	r0, r2, #5
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	ebb2 080a 	subs.w	r8, r2, sl
 8002012:	eb63 090b 	sbc.w	r9, r3, fp
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	f04f 0300 	mov.w	r3, #0
 800201e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002022:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002026:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800202a:	ebb2 0408 	subs.w	r4, r2, r8
 800202e:	eb63 0509 	sbc.w	r5, r3, r9
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	f04f 0300 	mov.w	r3, #0
 800203a:	00eb      	lsls	r3, r5, #3
 800203c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002040:	00e2      	lsls	r2, r4, #3
 8002042:	4614      	mov	r4, r2
 8002044:	461d      	mov	r5, r3
 8002046:	eb14 030a 	adds.w	r3, r4, sl
 800204a:	603b      	str	r3, [r7, #0]
 800204c:	eb45 030b 	adc.w	r3, r5, fp
 8002050:	607b      	str	r3, [r7, #4]
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	f04f 0300 	mov.w	r3, #0
 800205a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800205e:	4629      	mov	r1, r5
 8002060:	028b      	lsls	r3, r1, #10
 8002062:	4621      	mov	r1, r4
 8002064:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002068:	4621      	mov	r1, r4
 800206a:	028a      	lsls	r2, r1, #10
 800206c:	4610      	mov	r0, r2
 800206e:	4619      	mov	r1, r3
 8002070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002072:	2200      	movs	r2, #0
 8002074:	60bb      	str	r3, [r7, #8]
 8002076:	60fa      	str	r2, [r7, #12]
 8002078:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800207c:	f7fe f900 	bl	8000280 <__aeabi_uldivmod>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	4613      	mov	r3, r2
 8002086:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002088:	4b0b      	ldr	r3, [pc, #44]	@ (80020b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	0c1b      	lsrs	r3, r3, #16
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	3301      	adds	r3, #1
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002098:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800209a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800209c:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80020a2:	e002      	b.n	80020aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020a4:	4b05      	ldr	r3, [pc, #20]	@ (80020bc <HAL_RCC_GetSysClockFreq+0x184>)
 80020a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80020a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3740      	adds	r7, #64	@ 0x40
 80020b0:	46bd      	mov	sp, r7
 80020b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020b6:	bf00      	nop
 80020b8:	40023800 	.word	0x40023800
 80020bc:	00f42400 	.word	0x00f42400
 80020c0:	017d7840 	.word	0x017d7840

080020c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020c8:	4b03      	ldr	r3, [pc, #12]	@ (80020d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80020ca:	681b      	ldr	r3, [r3, #0]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	20000000 	.word	0x20000000

080020dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020e0:	f7ff fff0 	bl	80020c4 <HAL_RCC_GetHCLKFreq>
 80020e4:	4602      	mov	r2, r0
 80020e6:	4b05      	ldr	r3, [pc, #20]	@ (80020fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	0a9b      	lsrs	r3, r3, #10
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	4903      	ldr	r1, [pc, #12]	@ (8002100 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020f2:	5ccb      	ldrb	r3, [r1, r3]
 80020f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40023800 	.word	0x40023800
 8002100:	08004abc 	.word	0x08004abc

08002104 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002108:	f7ff ffdc 	bl	80020c4 <HAL_RCC_GetHCLKFreq>
 800210c:	4602      	mov	r2, r0
 800210e:	4b05      	ldr	r3, [pc, #20]	@ (8002124 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	0b5b      	lsrs	r3, r3, #13
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	4903      	ldr	r1, [pc, #12]	@ (8002128 <HAL_RCC_GetPCLK2Freq+0x24>)
 800211a:	5ccb      	ldrb	r3, [r1, r3]
 800211c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002120:	4618      	mov	r0, r3
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40023800 	.word	0x40023800
 8002128:	08004abc 	.word	0x08004abc

0800212c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e041      	b.n	80021c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d106      	bne.n	8002158 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7fe fde4 	bl	8000d20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2202      	movs	r2, #2
 800215c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3304      	adds	r3, #4
 8002168:	4619      	mov	r1, r3
 800216a:	4610      	mov	r0, r2
 800216c:	f000 fc60 	bl	8002a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b082      	sub	sp, #8
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e041      	b.n	8002260 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d106      	bne.n	80021f6 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 f839 	bl	8002268 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2202      	movs	r2, #2
 80021fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	3304      	adds	r3, #4
 8002206:	4619      	mov	r1, r3
 8002208:	4610      	mov	r0, r2
 800220a:	f000 fc11 	bl	8002a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002286:	2300      	movs	r3, #0
 8002288:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d104      	bne.n	800229a <HAL_TIM_IC_Start_IT+0x1e>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002296:	b2db      	uxtb	r3, r3
 8002298:	e013      	b.n	80022c2 <HAL_TIM_IC_Start_IT+0x46>
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	2b04      	cmp	r3, #4
 800229e:	d104      	bne.n	80022aa <HAL_TIM_IC_Start_IT+0x2e>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	e00b      	b.n	80022c2 <HAL_TIM_IC_Start_IT+0x46>
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d104      	bne.n	80022ba <HAL_TIM_IC_Start_IT+0x3e>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	e003      	b.n	80022c2 <HAL_TIM_IC_Start_IT+0x46>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d104      	bne.n	80022d4 <HAL_TIM_IC_Start_IT+0x58>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	e013      	b.n	80022fc <HAL_TIM_IC_Start_IT+0x80>
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	d104      	bne.n	80022e4 <HAL_TIM_IC_Start_IT+0x68>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	e00b      	b.n	80022fc <HAL_TIM_IC_Start_IT+0x80>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	2b08      	cmp	r3, #8
 80022e8:	d104      	bne.n	80022f4 <HAL_TIM_IC_Start_IT+0x78>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	e003      	b.n	80022fc <HAL_TIM_IC_Start_IT+0x80>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80022fe:	7bbb      	ldrb	r3, [r7, #14]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d102      	bne.n	800230a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002304:	7b7b      	ldrb	r3, [r7, #13]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d001      	beq.n	800230e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e0c2      	b.n	8002494 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d104      	bne.n	800231e <HAL_TIM_IC_Start_IT+0xa2>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2202      	movs	r2, #2
 8002318:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800231c:	e013      	b.n	8002346 <HAL_TIM_IC_Start_IT+0xca>
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	2b04      	cmp	r3, #4
 8002322:	d104      	bne.n	800232e <HAL_TIM_IC_Start_IT+0xb2>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2202      	movs	r2, #2
 8002328:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800232c:	e00b      	b.n	8002346 <HAL_TIM_IC_Start_IT+0xca>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	2b08      	cmp	r3, #8
 8002332:	d104      	bne.n	800233e <HAL_TIM_IC_Start_IT+0xc2>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2202      	movs	r2, #2
 8002338:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800233c:	e003      	b.n	8002346 <HAL_TIM_IC_Start_IT+0xca>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2202      	movs	r2, #2
 8002342:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d104      	bne.n	8002356 <HAL_TIM_IC_Start_IT+0xda>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2202      	movs	r2, #2
 8002350:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002354:	e013      	b.n	800237e <HAL_TIM_IC_Start_IT+0x102>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	2b04      	cmp	r3, #4
 800235a:	d104      	bne.n	8002366 <HAL_TIM_IC_Start_IT+0xea>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2202      	movs	r2, #2
 8002360:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002364:	e00b      	b.n	800237e <HAL_TIM_IC_Start_IT+0x102>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	2b08      	cmp	r3, #8
 800236a:	d104      	bne.n	8002376 <HAL_TIM_IC_Start_IT+0xfa>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2202      	movs	r2, #2
 8002370:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002374:	e003      	b.n	800237e <HAL_TIM_IC_Start_IT+0x102>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2202      	movs	r2, #2
 800237a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	2b0c      	cmp	r3, #12
 8002382:	d841      	bhi.n	8002408 <HAL_TIM_IC_Start_IT+0x18c>
 8002384:	a201      	add	r2, pc, #4	@ (adr r2, 800238c <HAL_TIM_IC_Start_IT+0x110>)
 8002386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800238a:	bf00      	nop
 800238c:	080023c1 	.word	0x080023c1
 8002390:	08002409 	.word	0x08002409
 8002394:	08002409 	.word	0x08002409
 8002398:	08002409 	.word	0x08002409
 800239c:	080023d3 	.word	0x080023d3
 80023a0:	08002409 	.word	0x08002409
 80023a4:	08002409 	.word	0x08002409
 80023a8:	08002409 	.word	0x08002409
 80023ac:	080023e5 	.word	0x080023e5
 80023b0:	08002409 	.word	0x08002409
 80023b4:	08002409 	.word	0x08002409
 80023b8:	08002409 	.word	0x08002409
 80023bc:	080023f7 	.word	0x080023f7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68da      	ldr	r2, [r3, #12]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0202 	orr.w	r2, r2, #2
 80023ce:	60da      	str	r2, [r3, #12]
      break;
 80023d0:	e01d      	b.n	800240e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68da      	ldr	r2, [r3, #12]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f042 0204 	orr.w	r2, r2, #4
 80023e0:	60da      	str	r2, [r3, #12]
      break;
 80023e2:	e014      	b.n	800240e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 0208 	orr.w	r2, r2, #8
 80023f2:	60da      	str	r2, [r3, #12]
      break;
 80023f4:	e00b      	b.n	800240e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68da      	ldr	r2, [r3, #12]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f042 0210 	orr.w	r2, r2, #16
 8002404:	60da      	str	r2, [r3, #12]
      break;
 8002406:	e002      	b.n	800240e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	73fb      	strb	r3, [r7, #15]
      break;
 800240c:	bf00      	nop
  }

  if (status == HAL_OK)
 800240e:	7bfb      	ldrb	r3, [r7, #15]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d13e      	bne.n	8002492 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2201      	movs	r2, #1
 800241a:	6839      	ldr	r1, [r7, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f000 fd4b 	bl	8002eb8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a1d      	ldr	r2, [pc, #116]	@ (800249c <HAL_TIM_IC_Start_IT+0x220>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d018      	beq.n	800245e <HAL_TIM_IC_Start_IT+0x1e2>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002434:	d013      	beq.n	800245e <HAL_TIM_IC_Start_IT+0x1e2>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a19      	ldr	r2, [pc, #100]	@ (80024a0 <HAL_TIM_IC_Start_IT+0x224>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d00e      	beq.n	800245e <HAL_TIM_IC_Start_IT+0x1e2>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a17      	ldr	r2, [pc, #92]	@ (80024a4 <HAL_TIM_IC_Start_IT+0x228>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d009      	beq.n	800245e <HAL_TIM_IC_Start_IT+0x1e2>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a16      	ldr	r2, [pc, #88]	@ (80024a8 <HAL_TIM_IC_Start_IT+0x22c>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d004      	beq.n	800245e <HAL_TIM_IC_Start_IT+0x1e2>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a14      	ldr	r2, [pc, #80]	@ (80024ac <HAL_TIM_IC_Start_IT+0x230>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d111      	bne.n	8002482 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	2b06      	cmp	r3, #6
 800246e:	d010      	beq.n	8002492 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0201 	orr.w	r2, r2, #1
 800247e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002480:	e007      	b.n	8002492 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f042 0201 	orr.w	r2, r2, #1
 8002490:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002492:	7bfb      	ldrb	r3, [r7, #15]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40010000 	.word	0x40010000
 80024a0:	40000400 	.word	0x40000400
 80024a4:	40000800 	.word	0x40000800
 80024a8:	40000c00 	.word	0x40000c00
 80024ac:	40014000 	.word	0x40014000

080024b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d020      	beq.n	8002514 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d01b      	beq.n	8002514 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f06f 0202 	mvn.w	r2, #2
 80024e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2201      	movs	r2, #1
 80024ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7fe f95e 	bl	80007bc <HAL_TIM_IC_CaptureCallback>
 8002500:	e005      	b.n	800250e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 fa76 	bl	80029f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 fa7d 	bl	8002a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	f003 0304 	and.w	r3, r3, #4
 800251a:	2b00      	cmp	r3, #0
 800251c:	d020      	beq.n	8002560 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b00      	cmp	r3, #0
 8002526:	d01b      	beq.n	8002560 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f06f 0204 	mvn.w	r2, #4
 8002530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2202      	movs	r2, #2
 8002536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7fe f938 	bl	80007bc <HAL_TIM_IC_CaptureCallback>
 800254c:	e005      	b.n	800255a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 fa50 	bl	80029f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 fa57 	bl	8002a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b00      	cmp	r3, #0
 8002568:	d020      	beq.n	80025ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b00      	cmp	r3, #0
 8002572:	d01b      	beq.n	80025ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f06f 0208 	mvn.w	r2, #8
 800257c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2204      	movs	r2, #4
 8002582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7fe f912 	bl	80007bc <HAL_TIM_IC_CaptureCallback>
 8002598:	e005      	b.n	80025a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 fa2a 	bl	80029f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 fa31 	bl	8002a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	f003 0310 	and.w	r3, r3, #16
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d020      	beq.n	80025f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f003 0310 	and.w	r3, r3, #16
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d01b      	beq.n	80025f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f06f 0210 	mvn.w	r2, #16
 80025c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2208      	movs	r2, #8
 80025ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f7fe f8ec 	bl	80007bc <HAL_TIM_IC_CaptureCallback>
 80025e4:	e005      	b.n	80025f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 fa04 	bl	80029f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 fa0b 	bl	8002a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00c      	beq.n	800261c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	2b00      	cmp	r3, #0
 800260a:	d007      	beq.n	800261c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f06f 0201 	mvn.w	r2, #1
 8002614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f9e2 	bl	80029e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00c      	beq.n	8002640 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800262c:	2b00      	cmp	r3, #0
 800262e:	d007      	beq.n	8002640 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 fcda 	bl	8002ff4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00c      	beq.n	8002664 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002650:	2b00      	cmp	r3, #0
 8002652:	d007      	beq.n	8002664 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800265c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f9dc 	bl	8002a1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	f003 0320 	and.w	r3, r3, #32
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00c      	beq.n	8002688 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f003 0320 	and.w	r3, r3, #32
 8002674:	2b00      	cmp	r3, #0
 8002676:	d007      	beq.n	8002688 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f06f 0220 	mvn.w	r2, #32
 8002680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 fcac 	bl	8002fe0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002688:	bf00      	nop
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800269c:	2300      	movs	r3, #0
 800269e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d101      	bne.n	80026ae <HAL_TIM_IC_ConfigChannel+0x1e>
 80026aa:	2302      	movs	r3, #2
 80026ac:	e088      	b.n	80027c0 <HAL_TIM_IC_ConfigChannel+0x130>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d11b      	bne.n	80026f4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80026cc:	f000 fa3c 	bl	8002b48 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	699a      	ldr	r2, [r3, #24]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 020c 	bic.w	r2, r2, #12
 80026de:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6999      	ldr	r1, [r3, #24]
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	689a      	ldr	r2, [r3, #8]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	619a      	str	r2, [r3, #24]
 80026f2:	e060      	b.n	80027b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d11c      	bne.n	8002734 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800270a:	f000 fab4 	bl	8002c76 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	699a      	ldr	r2, [r3, #24]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800271c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6999      	ldr	r1, [r3, #24]
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	021a      	lsls	r2, r3, #8
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	619a      	str	r2, [r3, #24]
 8002732:	e040      	b.n	80027b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b08      	cmp	r3, #8
 8002738:	d11b      	bne.n	8002772 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800274a:	f000 fb01 	bl	8002d50 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	69da      	ldr	r2, [r3, #28]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 020c 	bic.w	r2, r2, #12
 800275c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	69d9      	ldr	r1, [r3, #28]
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	430a      	orrs	r2, r1
 800276e:	61da      	str	r2, [r3, #28]
 8002770:	e021      	b.n	80027b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b0c      	cmp	r3, #12
 8002776:	d11c      	bne.n	80027b2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002788:	f000 fb1e 	bl	8002dc8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	69da      	ldr	r2, [r3, #28]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800279a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	69d9      	ldr	r1, [r3, #28]
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	021a      	lsls	r2, r3, #8
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	61da      	str	r2, [r3, #28]
 80027b0:	e001      	b.n	80027b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80027be:	7dfb      	ldrb	r3, [r7, #23]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3718      	adds	r7, #24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027d2:	2300      	movs	r3, #0
 80027d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d101      	bne.n	80027e4 <HAL_TIM_ConfigClockSource+0x1c>
 80027e0:	2302      	movs	r3, #2
 80027e2:	e0b4      	b.n	800294e <HAL_TIM_ConfigClockSource+0x186>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2202      	movs	r2, #2
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002802:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800280a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800281c:	d03e      	beq.n	800289c <HAL_TIM_ConfigClockSource+0xd4>
 800281e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002822:	f200 8087 	bhi.w	8002934 <HAL_TIM_ConfigClockSource+0x16c>
 8002826:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800282a:	f000 8086 	beq.w	800293a <HAL_TIM_ConfigClockSource+0x172>
 800282e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002832:	d87f      	bhi.n	8002934 <HAL_TIM_ConfigClockSource+0x16c>
 8002834:	2b70      	cmp	r3, #112	@ 0x70
 8002836:	d01a      	beq.n	800286e <HAL_TIM_ConfigClockSource+0xa6>
 8002838:	2b70      	cmp	r3, #112	@ 0x70
 800283a:	d87b      	bhi.n	8002934 <HAL_TIM_ConfigClockSource+0x16c>
 800283c:	2b60      	cmp	r3, #96	@ 0x60
 800283e:	d050      	beq.n	80028e2 <HAL_TIM_ConfigClockSource+0x11a>
 8002840:	2b60      	cmp	r3, #96	@ 0x60
 8002842:	d877      	bhi.n	8002934 <HAL_TIM_ConfigClockSource+0x16c>
 8002844:	2b50      	cmp	r3, #80	@ 0x50
 8002846:	d03c      	beq.n	80028c2 <HAL_TIM_ConfigClockSource+0xfa>
 8002848:	2b50      	cmp	r3, #80	@ 0x50
 800284a:	d873      	bhi.n	8002934 <HAL_TIM_ConfigClockSource+0x16c>
 800284c:	2b40      	cmp	r3, #64	@ 0x40
 800284e:	d058      	beq.n	8002902 <HAL_TIM_ConfigClockSource+0x13a>
 8002850:	2b40      	cmp	r3, #64	@ 0x40
 8002852:	d86f      	bhi.n	8002934 <HAL_TIM_ConfigClockSource+0x16c>
 8002854:	2b30      	cmp	r3, #48	@ 0x30
 8002856:	d064      	beq.n	8002922 <HAL_TIM_ConfigClockSource+0x15a>
 8002858:	2b30      	cmp	r3, #48	@ 0x30
 800285a:	d86b      	bhi.n	8002934 <HAL_TIM_ConfigClockSource+0x16c>
 800285c:	2b20      	cmp	r3, #32
 800285e:	d060      	beq.n	8002922 <HAL_TIM_ConfigClockSource+0x15a>
 8002860:	2b20      	cmp	r3, #32
 8002862:	d867      	bhi.n	8002934 <HAL_TIM_ConfigClockSource+0x16c>
 8002864:	2b00      	cmp	r3, #0
 8002866:	d05c      	beq.n	8002922 <HAL_TIM_ConfigClockSource+0x15a>
 8002868:	2b10      	cmp	r3, #16
 800286a:	d05a      	beq.n	8002922 <HAL_TIM_ConfigClockSource+0x15a>
 800286c:	e062      	b.n	8002934 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800287e:	f000 fafb 	bl	8002e78 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002890:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	609a      	str	r2, [r3, #8]
      break;
 800289a:	e04f      	b.n	800293c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028ac:	f000 fae4 	bl	8002e78 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689a      	ldr	r2, [r3, #8]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80028be:	609a      	str	r2, [r3, #8]
      break;
 80028c0:	e03c      	b.n	800293c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ce:	461a      	mov	r2, r3
 80028d0:	f000 f9a2 	bl	8002c18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2150      	movs	r1, #80	@ 0x50
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 fab1 	bl	8002e42 <TIM_ITRx_SetConfig>
      break;
 80028e0:	e02c      	b.n	800293c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028ee:	461a      	mov	r2, r3
 80028f0:	f000 f9fe 	bl	8002cf0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2160      	movs	r1, #96	@ 0x60
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 faa1 	bl	8002e42 <TIM_ITRx_SetConfig>
      break;
 8002900:	e01c      	b.n	800293c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800290e:	461a      	mov	r2, r3
 8002910:	f000 f982 	bl	8002c18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2140      	movs	r1, #64	@ 0x40
 800291a:	4618      	mov	r0, r3
 800291c:	f000 fa91 	bl	8002e42 <TIM_ITRx_SetConfig>
      break;
 8002920:	e00c      	b.n	800293c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4619      	mov	r1, r3
 800292c:	4610      	mov	r0, r2
 800292e:	f000 fa88 	bl	8002e42 <TIM_ITRx_SetConfig>
      break;
 8002932:	e003      	b.n	800293c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	73fb      	strb	r3, [r7, #15]
      break;
 8002938:	e000      	b.n	800293c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800293a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800294c:	7bfb      	ldrb	r3, [r7, #15]
}
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	2b0c      	cmp	r3, #12
 800296a:	d831      	bhi.n	80029d0 <HAL_TIM_ReadCapturedValue+0x78>
 800296c:	a201      	add	r2, pc, #4	@ (adr r2, 8002974 <HAL_TIM_ReadCapturedValue+0x1c>)
 800296e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002972:	bf00      	nop
 8002974:	080029a9 	.word	0x080029a9
 8002978:	080029d1 	.word	0x080029d1
 800297c:	080029d1 	.word	0x080029d1
 8002980:	080029d1 	.word	0x080029d1
 8002984:	080029b3 	.word	0x080029b3
 8002988:	080029d1 	.word	0x080029d1
 800298c:	080029d1 	.word	0x080029d1
 8002990:	080029d1 	.word	0x080029d1
 8002994:	080029bd 	.word	0x080029bd
 8002998:	080029d1 	.word	0x080029d1
 800299c:	080029d1 	.word	0x080029d1
 80029a0:	080029d1 	.word	0x080029d1
 80029a4:	080029c7 	.word	0x080029c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029ae:	60fb      	str	r3, [r7, #12]

      break;
 80029b0:	e00f      	b.n	80029d2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029b8:	60fb      	str	r3, [r7, #12]

      break;
 80029ba:	e00a      	b.n	80029d2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029c2:	60fb      	str	r3, [r7, #12]

      break;
 80029c4:	e005      	b.n	80029d2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029cc:	60fb      	str	r3, [r7, #12]

      break;
 80029ce:	e000      	b.n	80029d2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80029d0:	bf00      	nop
  }

  return tmpreg;
 80029d2:	68fb      	ldr	r3, [r7, #12]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a3a      	ldr	r2, [pc, #232]	@ (8002b2c <TIM_Base_SetConfig+0xfc>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d00f      	beq.n	8002a68 <TIM_Base_SetConfig+0x38>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a4e:	d00b      	beq.n	8002a68 <TIM_Base_SetConfig+0x38>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a37      	ldr	r2, [pc, #220]	@ (8002b30 <TIM_Base_SetConfig+0x100>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d007      	beq.n	8002a68 <TIM_Base_SetConfig+0x38>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a36      	ldr	r2, [pc, #216]	@ (8002b34 <TIM_Base_SetConfig+0x104>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d003      	beq.n	8002a68 <TIM_Base_SetConfig+0x38>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a35      	ldr	r2, [pc, #212]	@ (8002b38 <TIM_Base_SetConfig+0x108>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d108      	bne.n	8002a7a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a2b      	ldr	r2, [pc, #172]	@ (8002b2c <TIM_Base_SetConfig+0xfc>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d01b      	beq.n	8002aba <TIM_Base_SetConfig+0x8a>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a88:	d017      	beq.n	8002aba <TIM_Base_SetConfig+0x8a>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a28      	ldr	r2, [pc, #160]	@ (8002b30 <TIM_Base_SetConfig+0x100>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d013      	beq.n	8002aba <TIM_Base_SetConfig+0x8a>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a27      	ldr	r2, [pc, #156]	@ (8002b34 <TIM_Base_SetConfig+0x104>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d00f      	beq.n	8002aba <TIM_Base_SetConfig+0x8a>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a26      	ldr	r2, [pc, #152]	@ (8002b38 <TIM_Base_SetConfig+0x108>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d00b      	beq.n	8002aba <TIM_Base_SetConfig+0x8a>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a25      	ldr	r2, [pc, #148]	@ (8002b3c <TIM_Base_SetConfig+0x10c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d007      	beq.n	8002aba <TIM_Base_SetConfig+0x8a>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a24      	ldr	r2, [pc, #144]	@ (8002b40 <TIM_Base_SetConfig+0x110>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d003      	beq.n	8002aba <TIM_Base_SetConfig+0x8a>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a23      	ldr	r2, [pc, #140]	@ (8002b44 <TIM_Base_SetConfig+0x114>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d108      	bne.n	8002acc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ac0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a0e      	ldr	r2, [pc, #56]	@ (8002b2c <TIM_Base_SetConfig+0xfc>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d103      	bne.n	8002b00 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	691a      	ldr	r2, [r3, #16]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d105      	bne.n	8002b1e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	f023 0201 	bic.w	r2, r3, #1
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	611a      	str	r2, [r3, #16]
  }
}
 8002b1e:	bf00      	nop
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	40010000 	.word	0x40010000
 8002b30:	40000400 	.word	0x40000400
 8002b34:	40000800 	.word	0x40000800
 8002b38:	40000c00 	.word	0x40000c00
 8002b3c:	40014000 	.word	0x40014000
 8002b40:	40014400 	.word	0x40014400
 8002b44:	40014800 	.word	0x40014800

08002b48 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b087      	sub	sp, #28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
 8002b54:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	f023 0201 	bic.w	r2, r3, #1
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	4a24      	ldr	r2, [pc, #144]	@ (8002c04 <TIM_TI1_SetConfig+0xbc>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d013      	beq.n	8002b9e <TIM_TI1_SetConfig+0x56>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b7c:	d00f      	beq.n	8002b9e <TIM_TI1_SetConfig+0x56>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4a21      	ldr	r2, [pc, #132]	@ (8002c08 <TIM_TI1_SetConfig+0xc0>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d00b      	beq.n	8002b9e <TIM_TI1_SetConfig+0x56>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4a20      	ldr	r2, [pc, #128]	@ (8002c0c <TIM_TI1_SetConfig+0xc4>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d007      	beq.n	8002b9e <TIM_TI1_SetConfig+0x56>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	4a1f      	ldr	r2, [pc, #124]	@ (8002c10 <TIM_TI1_SetConfig+0xc8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d003      	beq.n	8002b9e <TIM_TI1_SetConfig+0x56>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	4a1e      	ldr	r2, [pc, #120]	@ (8002c14 <TIM_TI1_SetConfig+0xcc>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d101      	bne.n	8002ba2 <TIM_TI1_SetConfig+0x5a>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <TIM_TI1_SetConfig+0x5c>
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d008      	beq.n	8002bba <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f023 0303 	bic.w	r3, r3, #3
 8002bae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	617b      	str	r3, [r7, #20]
 8002bb8:	e003      	b.n	8002bc2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002bc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	011b      	lsls	r3, r3, #4
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	f023 030a 	bic.w	r3, r3, #10
 8002bdc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	f003 030a 	and.w	r3, r3, #10
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	621a      	str	r2, [r3, #32]
}
 8002bf6:	bf00      	nop
 8002bf8:	371c      	adds	r7, #28
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	40010000 	.word	0x40010000
 8002c08:	40000400 	.word	0x40000400
 8002c0c:	40000800 	.word	0x40000800
 8002c10:	40000c00 	.word	0x40000c00
 8002c14:	40014000 	.word	0x40014000

08002c18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b087      	sub	sp, #28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	f023 0201 	bic.w	r2, r3, #1
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f023 030a 	bic.w	r3, r3, #10
 8002c54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	621a      	str	r2, [r3, #32]
}
 8002c6a:	bf00      	nop
 8002c6c:	371c      	adds	r7, #28
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b087      	sub	sp, #28
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	60f8      	str	r0, [r7, #12]
 8002c7e:	60b9      	str	r1, [r7, #8]
 8002c80:	607a      	str	r2, [r7, #4]
 8002c82:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	f023 0210 	bic.w	r2, r3, #16
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ca2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	021b      	lsls	r3, r3, #8
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002cb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	031b      	lsls	r3, r3, #12
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002cc8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	011b      	lsls	r3, r3, #4
 8002cce:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	621a      	str	r2, [r3, #32]
}
 8002ce4:	bf00      	nop
 8002ce6:	371c      	adds	r7, #28
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b087      	sub	sp, #28
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	f023 0210 	bic.w	r2, r3, #16
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	031b      	lsls	r3, r3, #12
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002d2c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	697a      	ldr	r2, [r7, #20]
 8002d42:	621a      	str	r2, [r3, #32]
}
 8002d44:	bf00      	nop
 8002d46:	371c      	adds	r7, #28
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
 8002d5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	f023 0303 	bic.w	r3, r3, #3
 8002d7c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d8c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8002da0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	021b      	lsls	r3, r3, #8
 8002da6:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	621a      	str	r2, [r3, #32]
}
 8002dbc:	bf00      	nop
 8002dbe:	371c      	adds	r7, #28
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b087      	sub	sp, #28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
 8002dd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	69db      	ldr	r3, [r3, #28]
 8002dec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002df4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	021b      	lsls	r3, r3, #8
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002e06:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	031b      	lsls	r3, r3, #12
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8002e1a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	031b      	lsls	r3, r3, #12
 8002e20:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	621a      	str	r2, [r3, #32]
}
 8002e36:	bf00      	nop
 8002e38:	371c      	adds	r7, #28
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b085      	sub	sp, #20
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
 8002e4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	f043 0307 	orr.w	r3, r3, #7
 8002e64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	609a      	str	r2, [r3, #8]
}
 8002e6c:	bf00      	nop
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b087      	sub	sp, #28
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
 8002e84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	021a      	lsls	r2, r3, #8
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	609a      	str	r2, [r3, #8]
}
 8002eac:	bf00      	nop
 8002eae:	371c      	adds	r7, #28
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b087      	sub	sp, #28
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	f003 031f 	and.w	r3, r3, #31
 8002eca:	2201      	movs	r2, #1
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a1a      	ldr	r2, [r3, #32]
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	401a      	ands	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6a1a      	ldr	r2, [r3, #32]
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	f003 031f 	and.w	r3, r3, #31
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	621a      	str	r2, [r3, #32]
}
 8002ef6:	bf00      	nop
 8002ef8:	371c      	adds	r7, #28
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
	...

08002f04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d101      	bne.n	8002f1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f18:	2302      	movs	r3, #2
 8002f1a:	e050      	b.n	8002fbe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2202      	movs	r2, #2
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a1c      	ldr	r2, [pc, #112]	@ (8002fcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d018      	beq.n	8002f92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f68:	d013      	beq.n	8002f92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a18      	ldr	r2, [pc, #96]	@ (8002fd0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d00e      	beq.n	8002f92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a16      	ldr	r2, [pc, #88]	@ (8002fd4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d009      	beq.n	8002f92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a15      	ldr	r2, [pc, #84]	@ (8002fd8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d004      	beq.n	8002f92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a13      	ldr	r2, [pc, #76]	@ (8002fdc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d10c      	bne.n	8002fac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	40010000 	.word	0x40010000
 8002fd0:	40000400 	.word	0x40000400
 8002fd4:	40000800 	.word	0x40000800
 8002fd8:	40000c00 	.word	0x40000c00
 8002fdc:	40014000 	.word	0x40014000

08002fe0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e042      	b.n	80030a0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d106      	bne.n	8003034 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7fd fee6 	bl	8000e00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2224      	movs	r2, #36	@ 0x24
 8003038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68da      	ldr	r2, [r3, #12]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800304a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 fd69 	bl	8003b24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	691a      	ldr	r2, [r3, #16]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003060:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	695a      	ldr	r2, [r3, #20]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003070:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68da      	ldr	r2, [r3, #12]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003080:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2220      	movs	r2, #32
 800308c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2220      	movs	r2, #32
 8003094:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b08a      	sub	sp, #40	@ 0x28
 80030ac:	af02      	add	r7, sp, #8
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	603b      	str	r3, [r7, #0]
 80030b4:	4613      	mov	r3, r2
 80030b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030b8:	2300      	movs	r3, #0
 80030ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b20      	cmp	r3, #32
 80030c6:	d175      	bne.n	80031b4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d002      	beq.n	80030d4 <HAL_UART_Transmit+0x2c>
 80030ce:	88fb      	ldrh	r3, [r7, #6]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e06e      	b.n	80031b6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2221      	movs	r2, #33	@ 0x21
 80030e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030e6:	f7fe f857 	bl	8001198 <HAL_GetTick>
 80030ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	88fa      	ldrh	r2, [r7, #6]
 80030f0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	88fa      	ldrh	r2, [r7, #6]
 80030f6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003100:	d108      	bne.n	8003114 <HAL_UART_Transmit+0x6c>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d104      	bne.n	8003114 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800310a:	2300      	movs	r3, #0
 800310c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	61bb      	str	r3, [r7, #24]
 8003112:	e003      	b.n	800311c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003118:	2300      	movs	r3, #0
 800311a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800311c:	e02e      	b.n	800317c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2200      	movs	r2, #0
 8003126:	2180      	movs	r1, #128	@ 0x80
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 fb05 	bl	8003738 <UART_WaitOnFlagUntilTimeout>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d005      	beq.n	8003140 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2220      	movs	r2, #32
 8003138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e03a      	b.n	80031b6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10b      	bne.n	800315e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	461a      	mov	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003154:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	3302      	adds	r3, #2
 800315a:	61bb      	str	r3, [r7, #24]
 800315c:	e007      	b.n	800316e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	781a      	ldrb	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	3301      	adds	r3, #1
 800316c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003180:	b29b      	uxth	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1cb      	bne.n	800311e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	2200      	movs	r2, #0
 800318e:	2140      	movs	r1, #64	@ 0x40
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 fad1 	bl	8003738 <UART_WaitOnFlagUntilTimeout>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d005      	beq.n	80031a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2220      	movs	r2, #32
 80031a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e006      	b.n	80031b6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2220      	movs	r2, #32
 80031ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80031b0:	2300      	movs	r3, #0
 80031b2:	e000      	b.n	80031b6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80031b4:	2302      	movs	r3, #2
  }
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3720      	adds	r7, #32
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
	...

080031c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b0ba      	sub	sp, #232	@ 0xe8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80031ec:	2300      	movs	r3, #0
 80031ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031f6:	f003 030f 	and.w	r3, r3, #15
 80031fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80031fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10f      	bne.n	8003226 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800320a:	f003 0320 	and.w	r3, r3, #32
 800320e:	2b00      	cmp	r3, #0
 8003210:	d009      	beq.n	8003226 <HAL_UART_IRQHandler+0x66>
 8003212:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003216:	f003 0320 	and.w	r3, r3, #32
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 fbc2 	bl	80039a8 <UART_Receive_IT>
      return;
 8003224:	e25b      	b.n	80036de <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003226:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 80de 	beq.w	80033ec <HAL_UART_IRQHandler+0x22c>
 8003230:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b00      	cmp	r3, #0
 800323a:	d106      	bne.n	800324a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800323c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003240:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 80d1 	beq.w	80033ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800324a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00b      	beq.n	800326e <HAL_UART_IRQHandler+0xae>
 8003256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800325a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800325e:	2b00      	cmp	r3, #0
 8003260:	d005      	beq.n	800326e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003266:	f043 0201 	orr.w	r2, r3, #1
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800326e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003272:	f003 0304 	and.w	r3, r3, #4
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00b      	beq.n	8003292 <HAL_UART_IRQHandler+0xd2>
 800327a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d005      	beq.n	8003292 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328a:	f043 0202 	orr.w	r2, r3, #2
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00b      	beq.n	80032b6 <HAL_UART_IRQHandler+0xf6>
 800329e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d005      	beq.n	80032b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ae:	f043 0204 	orr.w	r2, r3, #4
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80032b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d011      	beq.n	80032e6 <HAL_UART_IRQHandler+0x126>
 80032c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032c6:	f003 0320 	and.w	r3, r3, #32
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d105      	bne.n	80032da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80032ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d005      	beq.n	80032e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032de:	f043 0208 	orr.w	r2, r3, #8
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 81f2 	beq.w	80036d4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032f4:	f003 0320 	and.w	r3, r3, #32
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d008      	beq.n	800330e <HAL_UART_IRQHandler+0x14e>
 80032fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003300:	f003 0320 	and.w	r3, r3, #32
 8003304:	2b00      	cmp	r3, #0
 8003306:	d002      	beq.n	800330e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 fb4d 	bl	80039a8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003318:	2b40      	cmp	r3, #64	@ 0x40
 800331a:	bf0c      	ite	eq
 800331c:	2301      	moveq	r3, #1
 800331e:	2300      	movne	r3, #0
 8003320:	b2db      	uxtb	r3, r3
 8003322:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b00      	cmp	r3, #0
 8003330:	d103      	bne.n	800333a <HAL_UART_IRQHandler+0x17a>
 8003332:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003336:	2b00      	cmp	r3, #0
 8003338:	d04f      	beq.n	80033da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 fa55 	bl	80037ea <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800334a:	2b40      	cmp	r3, #64	@ 0x40
 800334c:	d141      	bne.n	80033d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	3314      	adds	r3, #20
 8003354:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003358:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800335c:	e853 3f00 	ldrex	r3, [r3]
 8003360:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003364:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003368:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800336c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	3314      	adds	r3, #20
 8003376:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800337a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800337e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003382:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003386:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800338a:	e841 2300 	strex	r3, r2, [r1]
 800338e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003392:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1d9      	bne.n	800334e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d013      	beq.n	80033ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033a6:	4a7e      	ldr	r2, [pc, #504]	@ (80035a0 <HAL_UART_IRQHandler+0x3e0>)
 80033a8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7fe f87f 	bl	80014b2 <HAL_DMA_Abort_IT>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d016      	beq.n	80033e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80033c4:	4610      	mov	r0, r2
 80033c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c8:	e00e      	b.n	80033e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f99e 	bl	800370c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d0:	e00a      	b.n	80033e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f99a 	bl	800370c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d8:	e006      	b.n	80033e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f996 	bl	800370c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80033e6:	e175      	b.n	80036d4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033e8:	bf00      	nop
    return;
 80033ea:	e173      	b.n	80036d4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	f040 814f 	bne.w	8003694 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80033f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033fa:	f003 0310 	and.w	r3, r3, #16
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f000 8148 	beq.w	8003694 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003408:	f003 0310 	and.w	r3, r3, #16
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 8141 	beq.w	8003694 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003412:	2300      	movs	r3, #0
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	60bb      	str	r3, [r7, #8]
 8003426:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003432:	2b40      	cmp	r3, #64	@ 0x40
 8003434:	f040 80b6 	bne.w	80035a4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003444:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 8145 	beq.w	80036d8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003452:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003456:	429a      	cmp	r2, r3
 8003458:	f080 813e 	bcs.w	80036d8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003462:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800346e:	f000 8088 	beq.w	8003582 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	330c      	adds	r3, #12
 8003478:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800347c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003480:	e853 3f00 	ldrex	r3, [r3]
 8003484:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003488:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800348c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003490:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	330c      	adds	r3, #12
 800349a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800349e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80034a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80034aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80034ae:	e841 2300 	strex	r3, r2, [r1]
 80034b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80034b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1d9      	bne.n	8003472 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	3314      	adds	r3, #20
 80034c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034c8:	e853 3f00 	ldrex	r3, [r3]
 80034cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80034ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80034d0:	f023 0301 	bic.w	r3, r3, #1
 80034d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	3314      	adds	r3, #20
 80034de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80034e2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80034e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80034ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80034ee:	e841 2300 	strex	r3, r2, [r1]
 80034f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80034f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1e1      	bne.n	80034be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	3314      	adds	r3, #20
 8003500:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003502:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003504:	e853 3f00 	ldrex	r3, [r3]
 8003508:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800350a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800350c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003510:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	3314      	adds	r3, #20
 800351a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800351e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003520:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003522:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003524:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003526:	e841 2300 	strex	r3, r2, [r1]
 800352a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800352c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1e3      	bne.n	80034fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2220      	movs	r2, #32
 8003536:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	330c      	adds	r3, #12
 8003546:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003548:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800354a:	e853 3f00 	ldrex	r3, [r3]
 800354e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003550:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003552:	f023 0310 	bic.w	r3, r3, #16
 8003556:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	330c      	adds	r3, #12
 8003560:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003564:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003566:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003568:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800356a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800356c:	e841 2300 	strex	r3, r2, [r1]
 8003570:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003572:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1e3      	bne.n	8003540 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800357c:	4618      	mov	r0, r3
 800357e:	f7fd ff28 	bl	80013d2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2202      	movs	r2, #2
 8003586:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003590:	b29b      	uxth	r3, r3
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	b29b      	uxth	r3, r3
 8003596:	4619      	mov	r1, r3
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 f8c1 	bl	8003720 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800359e:	e09b      	b.n	80036d8 <HAL_UART_IRQHandler+0x518>
 80035a0:	080038b1 	.word	0x080038b1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 808e 	beq.w	80036dc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80035c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 8089 	beq.w	80036dc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	330c      	adds	r3, #12
 80035d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035d4:	e853 3f00 	ldrex	r3, [r3]
 80035d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80035da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	330c      	adds	r3, #12
 80035ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80035ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80035f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80035f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035f6:	e841 2300 	strex	r3, r2, [r1]
 80035fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80035fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1e3      	bne.n	80035ca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	3314      	adds	r3, #20
 8003608:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360c:	e853 3f00 	ldrex	r3, [r3]
 8003610:	623b      	str	r3, [r7, #32]
   return(result);
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	f023 0301 	bic.w	r3, r3, #1
 8003618:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	3314      	adds	r3, #20
 8003622:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003626:	633a      	str	r2, [r7, #48]	@ 0x30
 8003628:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800362c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800362e:	e841 2300 	strex	r3, r2, [r1]
 8003632:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1e3      	bne.n	8003602 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2220      	movs	r2, #32
 800363e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	330c      	adds	r3, #12
 800364e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	e853 3f00 	ldrex	r3, [r3]
 8003656:	60fb      	str	r3, [r7, #12]
   return(result);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f023 0310 	bic.w	r3, r3, #16
 800365e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	330c      	adds	r3, #12
 8003668:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800366c:	61fa      	str	r2, [r7, #28]
 800366e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003670:	69b9      	ldr	r1, [r7, #24]
 8003672:	69fa      	ldr	r2, [r7, #28]
 8003674:	e841 2300 	strex	r3, r2, [r1]
 8003678:	617b      	str	r3, [r7, #20]
   return(result);
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1e3      	bne.n	8003648 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2202      	movs	r2, #2
 8003684:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003686:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800368a:	4619      	mov	r1, r3
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f847 	bl	8003720 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003692:	e023      	b.n	80036dc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003698:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800369c:	2b00      	cmp	r3, #0
 800369e:	d009      	beq.n	80036b4 <HAL_UART_IRQHandler+0x4f4>
 80036a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d003      	beq.n	80036b4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 f913 	bl	80038d8 <UART_Transmit_IT>
    return;
 80036b2:	e014      	b.n	80036de <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80036b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00e      	beq.n	80036de <HAL_UART_IRQHandler+0x51e>
 80036c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d008      	beq.n	80036de <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 f953 	bl	8003978 <UART_EndTransmit_IT>
    return;
 80036d2:	e004      	b.n	80036de <HAL_UART_IRQHandler+0x51e>
    return;
 80036d4:	bf00      	nop
 80036d6:	e002      	b.n	80036de <HAL_UART_IRQHandler+0x51e>
      return;
 80036d8:	bf00      	nop
 80036da:	e000      	b.n	80036de <HAL_UART_IRQHandler+0x51e>
      return;
 80036dc:	bf00      	nop
  }
}
 80036de:	37e8      	adds	r7, #232	@ 0xe8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	460b      	mov	r3, r1
 800372a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	603b      	str	r3, [r7, #0]
 8003744:	4613      	mov	r3, r2
 8003746:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003748:	e03b      	b.n	80037c2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800374a:	6a3b      	ldr	r3, [r7, #32]
 800374c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003750:	d037      	beq.n	80037c2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003752:	f7fd fd21 	bl	8001198 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	6a3a      	ldr	r2, [r7, #32]
 800375e:	429a      	cmp	r2, r3
 8003760:	d302      	bcc.n	8003768 <UART_WaitOnFlagUntilTimeout+0x30>
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e03a      	b.n	80037e2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	f003 0304 	and.w	r3, r3, #4
 8003776:	2b00      	cmp	r3, #0
 8003778:	d023      	beq.n	80037c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2b80      	cmp	r3, #128	@ 0x80
 800377e:	d020      	beq.n	80037c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	2b40      	cmp	r3, #64	@ 0x40
 8003784:	d01d      	beq.n	80037c2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0308 	and.w	r3, r3, #8
 8003790:	2b08      	cmp	r3, #8
 8003792:	d116      	bne.n	80037c2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003794:	2300      	movs	r3, #0
 8003796:	617b      	str	r3, [r7, #20]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	617b      	str	r3, [r7, #20]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	617b      	str	r3, [r7, #20]
 80037a8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 f81d 	bl	80037ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2208      	movs	r2, #8
 80037b4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e00f      	b.n	80037e2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	4013      	ands	r3, r2
 80037cc:	68ba      	ldr	r2, [r7, #8]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	bf0c      	ite	eq
 80037d2:	2301      	moveq	r3, #1
 80037d4:	2300      	movne	r3, #0
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	461a      	mov	r2, r3
 80037da:	79fb      	ldrb	r3, [r7, #7]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d0b4      	beq.n	800374a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3718      	adds	r7, #24
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b095      	sub	sp, #84	@ 0x54
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	330c      	adds	r3, #12
 80037f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037fc:	e853 3f00 	ldrex	r3, [r3]
 8003800:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003804:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003808:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	330c      	adds	r3, #12
 8003810:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003812:	643a      	str	r2, [r7, #64]	@ 0x40
 8003814:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003816:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003818:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800381a:	e841 2300 	strex	r3, r2, [r1]
 800381e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1e5      	bne.n	80037f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	3314      	adds	r3, #20
 800382c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382e:	6a3b      	ldr	r3, [r7, #32]
 8003830:	e853 3f00 	ldrex	r3, [r3]
 8003834:	61fb      	str	r3, [r7, #28]
   return(result);
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	f023 0301 	bic.w	r3, r3, #1
 800383c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	3314      	adds	r3, #20
 8003844:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003846:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003848:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800384c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800384e:	e841 2300 	strex	r3, r2, [r1]
 8003852:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1e5      	bne.n	8003826 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800385e:	2b01      	cmp	r3, #1
 8003860:	d119      	bne.n	8003896 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	330c      	adds	r3, #12
 8003868:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	e853 3f00 	ldrex	r3, [r3]
 8003870:	60bb      	str	r3, [r7, #8]
   return(result);
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	f023 0310 	bic.w	r3, r3, #16
 8003878:	647b      	str	r3, [r7, #68]	@ 0x44
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	330c      	adds	r3, #12
 8003880:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003882:	61ba      	str	r2, [r7, #24]
 8003884:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003886:	6979      	ldr	r1, [r7, #20]
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	e841 2300 	strex	r3, r2, [r1]
 800388e:	613b      	str	r3, [r7, #16]
   return(result);
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1e5      	bne.n	8003862 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2220      	movs	r2, #32
 800389a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80038a4:	bf00      	nop
 80038a6:	3754      	adds	r7, #84	@ 0x54
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f7ff ff1e 	bl	800370c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038d0:	bf00      	nop
 80038d2:	3710      	adds	r7, #16
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b21      	cmp	r3, #33	@ 0x21
 80038ea:	d13e      	bne.n	800396a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038f4:	d114      	bne.n	8003920 <UART_Transmit_IT+0x48>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d110      	bne.n	8003920 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	881b      	ldrh	r3, [r3, #0]
 8003908:	461a      	mov	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003912:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	1c9a      	adds	r2, r3, #2
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	621a      	str	r2, [r3, #32]
 800391e:	e008      	b.n	8003932 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	1c59      	adds	r1, r3, #1
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6211      	str	r1, [r2, #32]
 800392a:	781a      	ldrb	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003936:	b29b      	uxth	r3, r3
 8003938:	3b01      	subs	r3, #1
 800393a:	b29b      	uxth	r3, r3
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	4619      	mov	r1, r3
 8003940:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10f      	bne.n	8003966 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68da      	ldr	r2, [r3, #12]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003954:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68da      	ldr	r2, [r3, #12]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003964:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003966:	2300      	movs	r3, #0
 8003968:	e000      	b.n	800396c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800396a:	2302      	movs	r3, #2
  }
}
 800396c:	4618      	mov	r0, r3
 800396e:	3714      	adds	r7, #20
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68da      	ldr	r2, [r3, #12]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800398e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2220      	movs	r2, #32
 8003994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f7ff fea3 	bl	80036e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b08c      	sub	sp, #48	@ 0x30
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b22      	cmp	r3, #34	@ 0x22
 80039ba:	f040 80ae 	bne.w	8003b1a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039c6:	d117      	bne.n	80039f8 <UART_Receive_IT+0x50>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d113      	bne.n	80039f8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80039d0:	2300      	movs	r3, #0
 80039d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f0:	1c9a      	adds	r2, r3, #2
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80039f6:	e026      	b.n	8003a46 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80039fe:	2300      	movs	r3, #0
 8003a00:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a0a:	d007      	beq.n	8003a1c <UART_Receive_IT+0x74>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10a      	bne.n	8003a2a <UART_Receive_IT+0x82>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d106      	bne.n	8003a2a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	b2da      	uxtb	r2, r3
 8003a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a26:	701a      	strb	r2, [r3, #0]
 8003a28:	e008      	b.n	8003a3c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a36:	b2da      	uxtb	r2, r3
 8003a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a3a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a40:	1c5a      	adds	r2, r3, #1
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	4619      	mov	r1, r3
 8003a54:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d15d      	bne.n	8003b16 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68da      	ldr	r2, [r3, #12]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 0220 	bic.w	r2, r2, #32
 8003a68:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68da      	ldr	r2, [r3, #12]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a78:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695a      	ldr	r2, [r3, #20]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 0201 	bic.w	r2, r2, #1
 8003a88:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d135      	bne.n	8003b0c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	330c      	adds	r3, #12
 8003aac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	e853 3f00 	ldrex	r3, [r3]
 8003ab4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	f023 0310 	bic.w	r3, r3, #16
 8003abc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	330c      	adds	r3, #12
 8003ac4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ac6:	623a      	str	r2, [r7, #32]
 8003ac8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aca:	69f9      	ldr	r1, [r7, #28]
 8003acc:	6a3a      	ldr	r2, [r7, #32]
 8003ace:	e841 2300 	strex	r3, r2, [r1]
 8003ad2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1e5      	bne.n	8003aa6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0310 	and.w	r3, r3, #16
 8003ae4:	2b10      	cmp	r3, #16
 8003ae6:	d10a      	bne.n	8003afe <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ae8:	2300      	movs	r3, #0
 8003aea:	60fb      	str	r3, [r7, #12]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	60fb      	str	r3, [r7, #12]
 8003afc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003b02:	4619      	mov	r1, r3
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f7ff fe0b 	bl	8003720 <HAL_UARTEx_RxEventCallback>
 8003b0a:	e002      	b.n	8003b12 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f7ff fdf3 	bl	80036f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b12:	2300      	movs	r3, #0
 8003b14:	e002      	b.n	8003b1c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003b16:	2300      	movs	r3, #0
 8003b18:	e000      	b.n	8003b1c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003b1a:	2302      	movs	r3, #2
  }
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3730      	adds	r7, #48	@ 0x30
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b28:	b0c0      	sub	sp, #256	@ 0x100
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b40:	68d9      	ldr	r1, [r3, #12]
 8003b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	ea40 0301 	orr.w	r3, r0, r1
 8003b4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	431a      	orrs	r2, r3
 8003b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003b7c:	f021 010c 	bic.w	r1, r1, #12
 8003b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003b8a:	430b      	orrs	r3, r1
 8003b8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b9e:	6999      	ldr	r1, [r3, #24]
 8003ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	ea40 0301 	orr.w	r3, r0, r1
 8003baa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	4b8f      	ldr	r3, [pc, #572]	@ (8003df0 <UART_SetConfig+0x2cc>)
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d005      	beq.n	8003bc4 <UART_SetConfig+0xa0>
 8003bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	4b8d      	ldr	r3, [pc, #564]	@ (8003df4 <UART_SetConfig+0x2d0>)
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d104      	bne.n	8003bce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bc4:	f7fe fa9e 	bl	8002104 <HAL_RCC_GetPCLK2Freq>
 8003bc8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003bcc:	e003      	b.n	8003bd6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bce:	f7fe fa85 	bl	80020dc <HAL_RCC_GetPCLK1Freq>
 8003bd2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bda:	69db      	ldr	r3, [r3, #28]
 8003bdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003be0:	f040 810c 	bne.w	8003dfc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003be4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003be8:	2200      	movs	r2, #0
 8003bea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003bee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003bf2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003bf6:	4622      	mov	r2, r4
 8003bf8:	462b      	mov	r3, r5
 8003bfa:	1891      	adds	r1, r2, r2
 8003bfc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003bfe:	415b      	adcs	r3, r3
 8003c00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003c06:	4621      	mov	r1, r4
 8003c08:	eb12 0801 	adds.w	r8, r2, r1
 8003c0c:	4629      	mov	r1, r5
 8003c0e:	eb43 0901 	adc.w	r9, r3, r1
 8003c12:	f04f 0200 	mov.w	r2, #0
 8003c16:	f04f 0300 	mov.w	r3, #0
 8003c1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c26:	4690      	mov	r8, r2
 8003c28:	4699      	mov	r9, r3
 8003c2a:	4623      	mov	r3, r4
 8003c2c:	eb18 0303 	adds.w	r3, r8, r3
 8003c30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003c34:	462b      	mov	r3, r5
 8003c36:	eb49 0303 	adc.w	r3, r9, r3
 8003c3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c4a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003c4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c52:	460b      	mov	r3, r1
 8003c54:	18db      	adds	r3, r3, r3
 8003c56:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c58:	4613      	mov	r3, r2
 8003c5a:	eb42 0303 	adc.w	r3, r2, r3
 8003c5e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003c64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003c68:	f7fc fb0a 	bl	8000280 <__aeabi_uldivmod>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	460b      	mov	r3, r1
 8003c70:	4b61      	ldr	r3, [pc, #388]	@ (8003df8 <UART_SetConfig+0x2d4>)
 8003c72:	fba3 2302 	umull	r2, r3, r3, r2
 8003c76:	095b      	lsrs	r3, r3, #5
 8003c78:	011c      	lsls	r4, r3, #4
 8003c7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c84:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003c88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003c8c:	4642      	mov	r2, r8
 8003c8e:	464b      	mov	r3, r9
 8003c90:	1891      	adds	r1, r2, r2
 8003c92:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003c94:	415b      	adcs	r3, r3
 8003c96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003c9c:	4641      	mov	r1, r8
 8003c9e:	eb12 0a01 	adds.w	sl, r2, r1
 8003ca2:	4649      	mov	r1, r9
 8003ca4:	eb43 0b01 	adc.w	fp, r3, r1
 8003ca8:	f04f 0200 	mov.w	r2, #0
 8003cac:	f04f 0300 	mov.w	r3, #0
 8003cb0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003cb4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003cb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cbc:	4692      	mov	sl, r2
 8003cbe:	469b      	mov	fp, r3
 8003cc0:	4643      	mov	r3, r8
 8003cc2:	eb1a 0303 	adds.w	r3, sl, r3
 8003cc6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003cca:	464b      	mov	r3, r9
 8003ccc:	eb4b 0303 	adc.w	r3, fp, r3
 8003cd0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ce0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003ce4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ce8:	460b      	mov	r3, r1
 8003cea:	18db      	adds	r3, r3, r3
 8003cec:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cee:	4613      	mov	r3, r2
 8003cf0:	eb42 0303 	adc.w	r3, r2, r3
 8003cf4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cf6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003cfa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003cfe:	f7fc fabf 	bl	8000280 <__aeabi_uldivmod>
 8003d02:	4602      	mov	r2, r0
 8003d04:	460b      	mov	r3, r1
 8003d06:	4611      	mov	r1, r2
 8003d08:	4b3b      	ldr	r3, [pc, #236]	@ (8003df8 <UART_SetConfig+0x2d4>)
 8003d0a:	fba3 2301 	umull	r2, r3, r3, r1
 8003d0e:	095b      	lsrs	r3, r3, #5
 8003d10:	2264      	movs	r2, #100	@ 0x64
 8003d12:	fb02 f303 	mul.w	r3, r2, r3
 8003d16:	1acb      	subs	r3, r1, r3
 8003d18:	00db      	lsls	r3, r3, #3
 8003d1a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003d1e:	4b36      	ldr	r3, [pc, #216]	@ (8003df8 <UART_SetConfig+0x2d4>)
 8003d20:	fba3 2302 	umull	r2, r3, r3, r2
 8003d24:	095b      	lsrs	r3, r3, #5
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003d2c:	441c      	add	r4, r3
 8003d2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d32:	2200      	movs	r2, #0
 8003d34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d38:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003d3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003d40:	4642      	mov	r2, r8
 8003d42:	464b      	mov	r3, r9
 8003d44:	1891      	adds	r1, r2, r2
 8003d46:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003d48:	415b      	adcs	r3, r3
 8003d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003d50:	4641      	mov	r1, r8
 8003d52:	1851      	adds	r1, r2, r1
 8003d54:	6339      	str	r1, [r7, #48]	@ 0x30
 8003d56:	4649      	mov	r1, r9
 8003d58:	414b      	adcs	r3, r1
 8003d5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d5c:	f04f 0200 	mov.w	r2, #0
 8003d60:	f04f 0300 	mov.w	r3, #0
 8003d64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003d68:	4659      	mov	r1, fp
 8003d6a:	00cb      	lsls	r3, r1, #3
 8003d6c:	4651      	mov	r1, sl
 8003d6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d72:	4651      	mov	r1, sl
 8003d74:	00ca      	lsls	r2, r1, #3
 8003d76:	4610      	mov	r0, r2
 8003d78:	4619      	mov	r1, r3
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	4642      	mov	r2, r8
 8003d7e:	189b      	adds	r3, r3, r2
 8003d80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d84:	464b      	mov	r3, r9
 8003d86:	460a      	mov	r2, r1
 8003d88:	eb42 0303 	adc.w	r3, r2, r3
 8003d8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003d9c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003da0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003da4:	460b      	mov	r3, r1
 8003da6:	18db      	adds	r3, r3, r3
 8003da8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003daa:	4613      	mov	r3, r2
 8003dac:	eb42 0303 	adc.w	r3, r2, r3
 8003db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003db2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003db6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003dba:	f7fc fa61 	bl	8000280 <__aeabi_uldivmod>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8003df8 <UART_SetConfig+0x2d4>)
 8003dc4:	fba3 1302 	umull	r1, r3, r3, r2
 8003dc8:	095b      	lsrs	r3, r3, #5
 8003dca:	2164      	movs	r1, #100	@ 0x64
 8003dcc:	fb01 f303 	mul.w	r3, r1, r3
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	3332      	adds	r3, #50	@ 0x32
 8003dd6:	4a08      	ldr	r2, [pc, #32]	@ (8003df8 <UART_SetConfig+0x2d4>)
 8003dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ddc:	095b      	lsrs	r3, r3, #5
 8003dde:	f003 0207 	and.w	r2, r3, #7
 8003de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4422      	add	r2, r4
 8003dea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003dec:	e106      	b.n	8003ffc <UART_SetConfig+0x4d8>
 8003dee:	bf00      	nop
 8003df0:	40011000 	.word	0x40011000
 8003df4:	40011400 	.word	0x40011400
 8003df8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e00:	2200      	movs	r2, #0
 8003e02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003e06:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003e0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003e0e:	4642      	mov	r2, r8
 8003e10:	464b      	mov	r3, r9
 8003e12:	1891      	adds	r1, r2, r2
 8003e14:	6239      	str	r1, [r7, #32]
 8003e16:	415b      	adcs	r3, r3
 8003e18:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e1e:	4641      	mov	r1, r8
 8003e20:	1854      	adds	r4, r2, r1
 8003e22:	4649      	mov	r1, r9
 8003e24:	eb43 0501 	adc.w	r5, r3, r1
 8003e28:	f04f 0200 	mov.w	r2, #0
 8003e2c:	f04f 0300 	mov.w	r3, #0
 8003e30:	00eb      	lsls	r3, r5, #3
 8003e32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e36:	00e2      	lsls	r2, r4, #3
 8003e38:	4614      	mov	r4, r2
 8003e3a:	461d      	mov	r5, r3
 8003e3c:	4643      	mov	r3, r8
 8003e3e:	18e3      	adds	r3, r4, r3
 8003e40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e44:	464b      	mov	r3, r9
 8003e46:	eb45 0303 	adc.w	r3, r5, r3
 8003e4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e5a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e5e:	f04f 0200 	mov.w	r2, #0
 8003e62:	f04f 0300 	mov.w	r3, #0
 8003e66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003e6a:	4629      	mov	r1, r5
 8003e6c:	008b      	lsls	r3, r1, #2
 8003e6e:	4621      	mov	r1, r4
 8003e70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e74:	4621      	mov	r1, r4
 8003e76:	008a      	lsls	r2, r1, #2
 8003e78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003e7c:	f7fc fa00 	bl	8000280 <__aeabi_uldivmod>
 8003e80:	4602      	mov	r2, r0
 8003e82:	460b      	mov	r3, r1
 8003e84:	4b60      	ldr	r3, [pc, #384]	@ (8004008 <UART_SetConfig+0x4e4>)
 8003e86:	fba3 2302 	umull	r2, r3, r3, r2
 8003e8a:	095b      	lsrs	r3, r3, #5
 8003e8c:	011c      	lsls	r4, r3, #4
 8003e8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e92:	2200      	movs	r2, #0
 8003e94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e98:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003ea0:	4642      	mov	r2, r8
 8003ea2:	464b      	mov	r3, r9
 8003ea4:	1891      	adds	r1, r2, r2
 8003ea6:	61b9      	str	r1, [r7, #24]
 8003ea8:	415b      	adcs	r3, r3
 8003eaa:	61fb      	str	r3, [r7, #28]
 8003eac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003eb0:	4641      	mov	r1, r8
 8003eb2:	1851      	adds	r1, r2, r1
 8003eb4:	6139      	str	r1, [r7, #16]
 8003eb6:	4649      	mov	r1, r9
 8003eb8:	414b      	adcs	r3, r1
 8003eba:	617b      	str	r3, [r7, #20]
 8003ebc:	f04f 0200 	mov.w	r2, #0
 8003ec0:	f04f 0300 	mov.w	r3, #0
 8003ec4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ec8:	4659      	mov	r1, fp
 8003eca:	00cb      	lsls	r3, r1, #3
 8003ecc:	4651      	mov	r1, sl
 8003ece:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ed2:	4651      	mov	r1, sl
 8003ed4:	00ca      	lsls	r2, r1, #3
 8003ed6:	4610      	mov	r0, r2
 8003ed8:	4619      	mov	r1, r3
 8003eda:	4603      	mov	r3, r0
 8003edc:	4642      	mov	r2, r8
 8003ede:	189b      	adds	r3, r3, r2
 8003ee0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ee4:	464b      	mov	r3, r9
 8003ee6:	460a      	mov	r2, r1
 8003ee8:	eb42 0303 	adc.w	r3, r2, r3
 8003eec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003efa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003efc:	f04f 0200 	mov.w	r2, #0
 8003f00:	f04f 0300 	mov.w	r3, #0
 8003f04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003f08:	4649      	mov	r1, r9
 8003f0a:	008b      	lsls	r3, r1, #2
 8003f0c:	4641      	mov	r1, r8
 8003f0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f12:	4641      	mov	r1, r8
 8003f14:	008a      	lsls	r2, r1, #2
 8003f16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003f1a:	f7fc f9b1 	bl	8000280 <__aeabi_uldivmod>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	460b      	mov	r3, r1
 8003f22:	4611      	mov	r1, r2
 8003f24:	4b38      	ldr	r3, [pc, #224]	@ (8004008 <UART_SetConfig+0x4e4>)
 8003f26:	fba3 2301 	umull	r2, r3, r3, r1
 8003f2a:	095b      	lsrs	r3, r3, #5
 8003f2c:	2264      	movs	r2, #100	@ 0x64
 8003f2e:	fb02 f303 	mul.w	r3, r2, r3
 8003f32:	1acb      	subs	r3, r1, r3
 8003f34:	011b      	lsls	r3, r3, #4
 8003f36:	3332      	adds	r3, #50	@ 0x32
 8003f38:	4a33      	ldr	r2, [pc, #204]	@ (8004008 <UART_SetConfig+0x4e4>)
 8003f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3e:	095b      	lsrs	r3, r3, #5
 8003f40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f44:	441c      	add	r4, r3
 8003f46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f4e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f50:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003f54:	4642      	mov	r2, r8
 8003f56:	464b      	mov	r3, r9
 8003f58:	1891      	adds	r1, r2, r2
 8003f5a:	60b9      	str	r1, [r7, #8]
 8003f5c:	415b      	adcs	r3, r3
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f64:	4641      	mov	r1, r8
 8003f66:	1851      	adds	r1, r2, r1
 8003f68:	6039      	str	r1, [r7, #0]
 8003f6a:	4649      	mov	r1, r9
 8003f6c:	414b      	adcs	r3, r1
 8003f6e:	607b      	str	r3, [r7, #4]
 8003f70:	f04f 0200 	mov.w	r2, #0
 8003f74:	f04f 0300 	mov.w	r3, #0
 8003f78:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f7c:	4659      	mov	r1, fp
 8003f7e:	00cb      	lsls	r3, r1, #3
 8003f80:	4651      	mov	r1, sl
 8003f82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f86:	4651      	mov	r1, sl
 8003f88:	00ca      	lsls	r2, r1, #3
 8003f8a:	4610      	mov	r0, r2
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	4603      	mov	r3, r0
 8003f90:	4642      	mov	r2, r8
 8003f92:	189b      	adds	r3, r3, r2
 8003f94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f96:	464b      	mov	r3, r9
 8003f98:	460a      	mov	r2, r1
 8003f9a:	eb42 0303 	adc.w	r3, r2, r3
 8003f9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003faa:	667a      	str	r2, [r7, #100]	@ 0x64
 8003fac:	f04f 0200 	mov.w	r2, #0
 8003fb0:	f04f 0300 	mov.w	r3, #0
 8003fb4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003fb8:	4649      	mov	r1, r9
 8003fba:	008b      	lsls	r3, r1, #2
 8003fbc:	4641      	mov	r1, r8
 8003fbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fc2:	4641      	mov	r1, r8
 8003fc4:	008a      	lsls	r2, r1, #2
 8003fc6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003fca:	f7fc f959 	bl	8000280 <__aeabi_uldivmod>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8004008 <UART_SetConfig+0x4e4>)
 8003fd4:	fba3 1302 	umull	r1, r3, r3, r2
 8003fd8:	095b      	lsrs	r3, r3, #5
 8003fda:	2164      	movs	r1, #100	@ 0x64
 8003fdc:	fb01 f303 	mul.w	r3, r1, r3
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	011b      	lsls	r3, r3, #4
 8003fe4:	3332      	adds	r3, #50	@ 0x32
 8003fe6:	4a08      	ldr	r2, [pc, #32]	@ (8004008 <UART_SetConfig+0x4e4>)
 8003fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fec:	095b      	lsrs	r3, r3, #5
 8003fee:	f003 020f 	and.w	r2, r3, #15
 8003ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4422      	add	r2, r4
 8003ffa:	609a      	str	r2, [r3, #8]
}
 8003ffc:	bf00      	nop
 8003ffe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004002:	46bd      	mov	sp, r7
 8004004:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004008:	51eb851f 	.word	0x51eb851f

0800400c <_ZdlPvj>:
 800400c:	f000 b811 	b.w	8004032 <_ZdlPv>

08004010 <_Znwj>:
 8004010:	2801      	cmp	r0, #1
 8004012:	bf38      	it	cc
 8004014:	2001      	movcc	r0, #1
 8004016:	b510      	push	{r4, lr}
 8004018:	4604      	mov	r4, r0
 800401a:	4620      	mov	r0, r4
 800401c:	f000 f81c 	bl	8004058 <malloc>
 8004020:	b100      	cbz	r0, 8004024 <_Znwj+0x14>
 8004022:	bd10      	pop	{r4, pc}
 8004024:	f000 f808 	bl	8004038 <_ZSt15get_new_handlerv>
 8004028:	b908      	cbnz	r0, 800402e <_Znwj+0x1e>
 800402a:	f000 f80d 	bl	8004048 <abort>
 800402e:	4780      	blx	r0
 8004030:	e7f3      	b.n	800401a <_Znwj+0xa>

08004032 <_ZdlPv>:
 8004032:	f000 b819 	b.w	8004068 <free>
	...

08004038 <_ZSt15get_new_handlerv>:
 8004038:	4b02      	ldr	r3, [pc, #8]	@ (8004044 <_ZSt15get_new_handlerv+0xc>)
 800403a:	6818      	ldr	r0, [r3, #0]
 800403c:	f3bf 8f5b 	dmb	ish
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	20000160 	.word	0x20000160

08004048 <abort>:
 8004048:	b508      	push	{r3, lr}
 800404a:	2006      	movs	r0, #6
 800404c:	f000 f926 	bl	800429c <raise>
 8004050:	2001      	movs	r0, #1
 8004052:	f7fc ffbd 	bl	8000fd0 <_exit>
	...

08004058 <malloc>:
 8004058:	4b02      	ldr	r3, [pc, #8]	@ (8004064 <malloc+0xc>)
 800405a:	4601      	mov	r1, r0
 800405c:	6818      	ldr	r0, [r3, #0]
 800405e:	f000 b82d 	b.w	80040bc <_malloc_r>
 8004062:	bf00      	nop
 8004064:	2000000c 	.word	0x2000000c

08004068 <free>:
 8004068:	4b02      	ldr	r3, [pc, #8]	@ (8004074 <free+0xc>)
 800406a:	4601      	mov	r1, r0
 800406c:	6818      	ldr	r0, [r3, #0]
 800406e:	f000 b96d 	b.w	800434c <_free_r>
 8004072:	bf00      	nop
 8004074:	2000000c 	.word	0x2000000c

08004078 <sbrk_aligned>:
 8004078:	b570      	push	{r4, r5, r6, lr}
 800407a:	4e0f      	ldr	r6, [pc, #60]	@ (80040b8 <sbrk_aligned+0x40>)
 800407c:	460c      	mov	r4, r1
 800407e:	6831      	ldr	r1, [r6, #0]
 8004080:	4605      	mov	r5, r0
 8004082:	b911      	cbnz	r1, 800408a <sbrk_aligned+0x12>
 8004084:	f000 f926 	bl	80042d4 <_sbrk_r>
 8004088:	6030      	str	r0, [r6, #0]
 800408a:	4621      	mov	r1, r4
 800408c:	4628      	mov	r0, r5
 800408e:	f000 f921 	bl	80042d4 <_sbrk_r>
 8004092:	1c43      	adds	r3, r0, #1
 8004094:	d103      	bne.n	800409e <sbrk_aligned+0x26>
 8004096:	f04f 34ff 	mov.w	r4, #4294967295
 800409a:	4620      	mov	r0, r4
 800409c:	bd70      	pop	{r4, r5, r6, pc}
 800409e:	1cc4      	adds	r4, r0, #3
 80040a0:	f024 0403 	bic.w	r4, r4, #3
 80040a4:	42a0      	cmp	r0, r4
 80040a6:	d0f8      	beq.n	800409a <sbrk_aligned+0x22>
 80040a8:	1a21      	subs	r1, r4, r0
 80040aa:	4628      	mov	r0, r5
 80040ac:	f000 f912 	bl	80042d4 <_sbrk_r>
 80040b0:	3001      	adds	r0, #1
 80040b2:	d1f2      	bne.n	800409a <sbrk_aligned+0x22>
 80040b4:	e7ef      	b.n	8004096 <sbrk_aligned+0x1e>
 80040b6:	bf00      	nop
 80040b8:	20000164 	.word	0x20000164

080040bc <_malloc_r>:
 80040bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040c0:	1ccd      	adds	r5, r1, #3
 80040c2:	f025 0503 	bic.w	r5, r5, #3
 80040c6:	3508      	adds	r5, #8
 80040c8:	2d0c      	cmp	r5, #12
 80040ca:	bf38      	it	cc
 80040cc:	250c      	movcc	r5, #12
 80040ce:	2d00      	cmp	r5, #0
 80040d0:	4606      	mov	r6, r0
 80040d2:	db01      	blt.n	80040d8 <_malloc_r+0x1c>
 80040d4:	42a9      	cmp	r1, r5
 80040d6:	d904      	bls.n	80040e2 <_malloc_r+0x26>
 80040d8:	230c      	movs	r3, #12
 80040da:	6033      	str	r3, [r6, #0]
 80040dc:	2000      	movs	r0, #0
 80040de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80041b8 <_malloc_r+0xfc>
 80040e6:	f000 f869 	bl	80041bc <__malloc_lock>
 80040ea:	f8d8 3000 	ldr.w	r3, [r8]
 80040ee:	461c      	mov	r4, r3
 80040f0:	bb44      	cbnz	r4, 8004144 <_malloc_r+0x88>
 80040f2:	4629      	mov	r1, r5
 80040f4:	4630      	mov	r0, r6
 80040f6:	f7ff ffbf 	bl	8004078 <sbrk_aligned>
 80040fa:	1c43      	adds	r3, r0, #1
 80040fc:	4604      	mov	r4, r0
 80040fe:	d158      	bne.n	80041b2 <_malloc_r+0xf6>
 8004100:	f8d8 4000 	ldr.w	r4, [r8]
 8004104:	4627      	mov	r7, r4
 8004106:	2f00      	cmp	r7, #0
 8004108:	d143      	bne.n	8004192 <_malloc_r+0xd6>
 800410a:	2c00      	cmp	r4, #0
 800410c:	d04b      	beq.n	80041a6 <_malloc_r+0xea>
 800410e:	6823      	ldr	r3, [r4, #0]
 8004110:	4639      	mov	r1, r7
 8004112:	4630      	mov	r0, r6
 8004114:	eb04 0903 	add.w	r9, r4, r3
 8004118:	f000 f8dc 	bl	80042d4 <_sbrk_r>
 800411c:	4581      	cmp	r9, r0
 800411e:	d142      	bne.n	80041a6 <_malloc_r+0xea>
 8004120:	6821      	ldr	r1, [r4, #0]
 8004122:	1a6d      	subs	r5, r5, r1
 8004124:	4629      	mov	r1, r5
 8004126:	4630      	mov	r0, r6
 8004128:	f7ff ffa6 	bl	8004078 <sbrk_aligned>
 800412c:	3001      	adds	r0, #1
 800412e:	d03a      	beq.n	80041a6 <_malloc_r+0xea>
 8004130:	6823      	ldr	r3, [r4, #0]
 8004132:	442b      	add	r3, r5
 8004134:	6023      	str	r3, [r4, #0]
 8004136:	f8d8 3000 	ldr.w	r3, [r8]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	bb62      	cbnz	r2, 8004198 <_malloc_r+0xdc>
 800413e:	f8c8 7000 	str.w	r7, [r8]
 8004142:	e00f      	b.n	8004164 <_malloc_r+0xa8>
 8004144:	6822      	ldr	r2, [r4, #0]
 8004146:	1b52      	subs	r2, r2, r5
 8004148:	d420      	bmi.n	800418c <_malloc_r+0xd0>
 800414a:	2a0b      	cmp	r2, #11
 800414c:	d917      	bls.n	800417e <_malloc_r+0xc2>
 800414e:	1961      	adds	r1, r4, r5
 8004150:	42a3      	cmp	r3, r4
 8004152:	6025      	str	r5, [r4, #0]
 8004154:	bf18      	it	ne
 8004156:	6059      	strne	r1, [r3, #4]
 8004158:	6863      	ldr	r3, [r4, #4]
 800415a:	bf08      	it	eq
 800415c:	f8c8 1000 	streq.w	r1, [r8]
 8004160:	5162      	str	r2, [r4, r5]
 8004162:	604b      	str	r3, [r1, #4]
 8004164:	4630      	mov	r0, r6
 8004166:	f000 f82f 	bl	80041c8 <__malloc_unlock>
 800416a:	f104 000b 	add.w	r0, r4, #11
 800416e:	1d23      	adds	r3, r4, #4
 8004170:	f020 0007 	bic.w	r0, r0, #7
 8004174:	1ac2      	subs	r2, r0, r3
 8004176:	bf1c      	itt	ne
 8004178:	1a1b      	subne	r3, r3, r0
 800417a:	50a3      	strne	r3, [r4, r2]
 800417c:	e7af      	b.n	80040de <_malloc_r+0x22>
 800417e:	6862      	ldr	r2, [r4, #4]
 8004180:	42a3      	cmp	r3, r4
 8004182:	bf0c      	ite	eq
 8004184:	f8c8 2000 	streq.w	r2, [r8]
 8004188:	605a      	strne	r2, [r3, #4]
 800418a:	e7eb      	b.n	8004164 <_malloc_r+0xa8>
 800418c:	4623      	mov	r3, r4
 800418e:	6864      	ldr	r4, [r4, #4]
 8004190:	e7ae      	b.n	80040f0 <_malloc_r+0x34>
 8004192:	463c      	mov	r4, r7
 8004194:	687f      	ldr	r7, [r7, #4]
 8004196:	e7b6      	b.n	8004106 <_malloc_r+0x4a>
 8004198:	461a      	mov	r2, r3
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	42a3      	cmp	r3, r4
 800419e:	d1fb      	bne.n	8004198 <_malloc_r+0xdc>
 80041a0:	2300      	movs	r3, #0
 80041a2:	6053      	str	r3, [r2, #4]
 80041a4:	e7de      	b.n	8004164 <_malloc_r+0xa8>
 80041a6:	230c      	movs	r3, #12
 80041a8:	6033      	str	r3, [r6, #0]
 80041aa:	4630      	mov	r0, r6
 80041ac:	f000 f80c 	bl	80041c8 <__malloc_unlock>
 80041b0:	e794      	b.n	80040dc <_malloc_r+0x20>
 80041b2:	6005      	str	r5, [r0, #0]
 80041b4:	e7d6      	b.n	8004164 <_malloc_r+0xa8>
 80041b6:	bf00      	nop
 80041b8:	20000168 	.word	0x20000168

080041bc <__malloc_lock>:
 80041bc:	4801      	ldr	r0, [pc, #4]	@ (80041c4 <__malloc_lock+0x8>)
 80041be:	f000 b8c3 	b.w	8004348 <__retarget_lock_acquire_recursive>
 80041c2:	bf00      	nop
 80041c4:	200002a8 	.word	0x200002a8

080041c8 <__malloc_unlock>:
 80041c8:	4801      	ldr	r0, [pc, #4]	@ (80041d0 <__malloc_unlock+0x8>)
 80041ca:	f000 b8be 	b.w	800434a <__retarget_lock_release_recursive>
 80041ce:	bf00      	nop
 80041d0:	200002a8 	.word	0x200002a8

080041d4 <sniprintf>:
 80041d4:	b40c      	push	{r2, r3}
 80041d6:	b530      	push	{r4, r5, lr}
 80041d8:	4b17      	ldr	r3, [pc, #92]	@ (8004238 <sniprintf+0x64>)
 80041da:	1e0c      	subs	r4, r1, #0
 80041dc:	681d      	ldr	r5, [r3, #0]
 80041de:	b09d      	sub	sp, #116	@ 0x74
 80041e0:	da08      	bge.n	80041f4 <sniprintf+0x20>
 80041e2:	238b      	movs	r3, #139	@ 0x8b
 80041e4:	602b      	str	r3, [r5, #0]
 80041e6:	f04f 30ff 	mov.w	r0, #4294967295
 80041ea:	b01d      	add	sp, #116	@ 0x74
 80041ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80041f0:	b002      	add	sp, #8
 80041f2:	4770      	bx	lr
 80041f4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80041f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80041fc:	bf14      	ite	ne
 80041fe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004202:	4623      	moveq	r3, r4
 8004204:	9304      	str	r3, [sp, #16]
 8004206:	9307      	str	r3, [sp, #28]
 8004208:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800420c:	9002      	str	r0, [sp, #8]
 800420e:	9006      	str	r0, [sp, #24]
 8004210:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004214:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004216:	ab21      	add	r3, sp, #132	@ 0x84
 8004218:	a902      	add	r1, sp, #8
 800421a:	4628      	mov	r0, r5
 800421c:	9301      	str	r3, [sp, #4]
 800421e:	f000 f93b 	bl	8004498 <_svfiprintf_r>
 8004222:	1c43      	adds	r3, r0, #1
 8004224:	bfbc      	itt	lt
 8004226:	238b      	movlt	r3, #139	@ 0x8b
 8004228:	602b      	strlt	r3, [r5, #0]
 800422a:	2c00      	cmp	r4, #0
 800422c:	d0dd      	beq.n	80041ea <sniprintf+0x16>
 800422e:	9b02      	ldr	r3, [sp, #8]
 8004230:	2200      	movs	r2, #0
 8004232:	701a      	strb	r2, [r3, #0]
 8004234:	e7d9      	b.n	80041ea <sniprintf+0x16>
 8004236:	bf00      	nop
 8004238:	2000000c 	.word	0x2000000c

0800423c <memset>:
 800423c:	4402      	add	r2, r0
 800423e:	4603      	mov	r3, r0
 8004240:	4293      	cmp	r3, r2
 8004242:	d100      	bne.n	8004246 <memset+0xa>
 8004244:	4770      	bx	lr
 8004246:	f803 1b01 	strb.w	r1, [r3], #1
 800424a:	e7f9      	b.n	8004240 <memset+0x4>

0800424c <_raise_r>:
 800424c:	291f      	cmp	r1, #31
 800424e:	b538      	push	{r3, r4, r5, lr}
 8004250:	4605      	mov	r5, r0
 8004252:	460c      	mov	r4, r1
 8004254:	d904      	bls.n	8004260 <_raise_r+0x14>
 8004256:	2316      	movs	r3, #22
 8004258:	6003      	str	r3, [r0, #0]
 800425a:	f04f 30ff 	mov.w	r0, #4294967295
 800425e:	bd38      	pop	{r3, r4, r5, pc}
 8004260:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004262:	b112      	cbz	r2, 800426a <_raise_r+0x1e>
 8004264:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004268:	b94b      	cbnz	r3, 800427e <_raise_r+0x32>
 800426a:	4628      	mov	r0, r5
 800426c:	f000 f830 	bl	80042d0 <_getpid_r>
 8004270:	4622      	mov	r2, r4
 8004272:	4601      	mov	r1, r0
 8004274:	4628      	mov	r0, r5
 8004276:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800427a:	f000 b817 	b.w	80042ac <_kill_r>
 800427e:	2b01      	cmp	r3, #1
 8004280:	d00a      	beq.n	8004298 <_raise_r+0x4c>
 8004282:	1c59      	adds	r1, r3, #1
 8004284:	d103      	bne.n	800428e <_raise_r+0x42>
 8004286:	2316      	movs	r3, #22
 8004288:	6003      	str	r3, [r0, #0]
 800428a:	2001      	movs	r0, #1
 800428c:	e7e7      	b.n	800425e <_raise_r+0x12>
 800428e:	2100      	movs	r1, #0
 8004290:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004294:	4620      	mov	r0, r4
 8004296:	4798      	blx	r3
 8004298:	2000      	movs	r0, #0
 800429a:	e7e0      	b.n	800425e <_raise_r+0x12>

0800429c <raise>:
 800429c:	4b02      	ldr	r3, [pc, #8]	@ (80042a8 <raise+0xc>)
 800429e:	4601      	mov	r1, r0
 80042a0:	6818      	ldr	r0, [r3, #0]
 80042a2:	f7ff bfd3 	b.w	800424c <_raise_r>
 80042a6:	bf00      	nop
 80042a8:	2000000c 	.word	0x2000000c

080042ac <_kill_r>:
 80042ac:	b538      	push	{r3, r4, r5, lr}
 80042ae:	4d07      	ldr	r5, [pc, #28]	@ (80042cc <_kill_r+0x20>)
 80042b0:	2300      	movs	r3, #0
 80042b2:	4604      	mov	r4, r0
 80042b4:	4608      	mov	r0, r1
 80042b6:	4611      	mov	r1, r2
 80042b8:	602b      	str	r3, [r5, #0]
 80042ba:	f7fc fe79 	bl	8000fb0 <_kill>
 80042be:	1c43      	adds	r3, r0, #1
 80042c0:	d102      	bne.n	80042c8 <_kill_r+0x1c>
 80042c2:	682b      	ldr	r3, [r5, #0]
 80042c4:	b103      	cbz	r3, 80042c8 <_kill_r+0x1c>
 80042c6:	6023      	str	r3, [r4, #0]
 80042c8:	bd38      	pop	{r3, r4, r5, pc}
 80042ca:	bf00      	nop
 80042cc:	200002a4 	.word	0x200002a4

080042d0 <_getpid_r>:
 80042d0:	f7fc be66 	b.w	8000fa0 <_getpid>

080042d4 <_sbrk_r>:
 80042d4:	b538      	push	{r3, r4, r5, lr}
 80042d6:	4d06      	ldr	r5, [pc, #24]	@ (80042f0 <_sbrk_r+0x1c>)
 80042d8:	2300      	movs	r3, #0
 80042da:	4604      	mov	r4, r0
 80042dc:	4608      	mov	r0, r1
 80042de:	602b      	str	r3, [r5, #0]
 80042e0:	f7fc fe82 	bl	8000fe8 <_sbrk>
 80042e4:	1c43      	adds	r3, r0, #1
 80042e6:	d102      	bne.n	80042ee <_sbrk_r+0x1a>
 80042e8:	682b      	ldr	r3, [r5, #0]
 80042ea:	b103      	cbz	r3, 80042ee <_sbrk_r+0x1a>
 80042ec:	6023      	str	r3, [r4, #0]
 80042ee:	bd38      	pop	{r3, r4, r5, pc}
 80042f0:	200002a4 	.word	0x200002a4

080042f4 <__errno>:
 80042f4:	4b01      	ldr	r3, [pc, #4]	@ (80042fc <__errno+0x8>)
 80042f6:	6818      	ldr	r0, [r3, #0]
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	2000000c 	.word	0x2000000c

08004300 <__libc_init_array>:
 8004300:	b570      	push	{r4, r5, r6, lr}
 8004302:	4d0d      	ldr	r5, [pc, #52]	@ (8004338 <__libc_init_array+0x38>)
 8004304:	4c0d      	ldr	r4, [pc, #52]	@ (800433c <__libc_init_array+0x3c>)
 8004306:	1b64      	subs	r4, r4, r5
 8004308:	10a4      	asrs	r4, r4, #2
 800430a:	2600      	movs	r6, #0
 800430c:	42a6      	cmp	r6, r4
 800430e:	d109      	bne.n	8004324 <__libc_init_array+0x24>
 8004310:	4d0b      	ldr	r5, [pc, #44]	@ (8004340 <__libc_init_array+0x40>)
 8004312:	4c0c      	ldr	r4, [pc, #48]	@ (8004344 <__libc_init_array+0x44>)
 8004314:	f000 fba8 	bl	8004a68 <_init>
 8004318:	1b64      	subs	r4, r4, r5
 800431a:	10a4      	asrs	r4, r4, #2
 800431c:	2600      	movs	r6, #0
 800431e:	42a6      	cmp	r6, r4
 8004320:	d105      	bne.n	800432e <__libc_init_array+0x2e>
 8004322:	bd70      	pop	{r4, r5, r6, pc}
 8004324:	f855 3b04 	ldr.w	r3, [r5], #4
 8004328:	4798      	blx	r3
 800432a:	3601      	adds	r6, #1
 800432c:	e7ee      	b.n	800430c <__libc_init_array+0xc>
 800432e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004332:	4798      	blx	r3
 8004334:	3601      	adds	r6, #1
 8004336:	e7f2      	b.n	800431e <__libc_init_array+0x1e>
 8004338:	08004b00 	.word	0x08004b00
 800433c:	08004b00 	.word	0x08004b00
 8004340:	08004b00 	.word	0x08004b00
 8004344:	08004b04 	.word	0x08004b04

08004348 <__retarget_lock_acquire_recursive>:
 8004348:	4770      	bx	lr

0800434a <__retarget_lock_release_recursive>:
 800434a:	4770      	bx	lr

0800434c <_free_r>:
 800434c:	b538      	push	{r3, r4, r5, lr}
 800434e:	4605      	mov	r5, r0
 8004350:	2900      	cmp	r1, #0
 8004352:	d041      	beq.n	80043d8 <_free_r+0x8c>
 8004354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004358:	1f0c      	subs	r4, r1, #4
 800435a:	2b00      	cmp	r3, #0
 800435c:	bfb8      	it	lt
 800435e:	18e4      	addlt	r4, r4, r3
 8004360:	f7ff ff2c 	bl	80041bc <__malloc_lock>
 8004364:	4a1d      	ldr	r2, [pc, #116]	@ (80043dc <_free_r+0x90>)
 8004366:	6813      	ldr	r3, [r2, #0]
 8004368:	b933      	cbnz	r3, 8004378 <_free_r+0x2c>
 800436a:	6063      	str	r3, [r4, #4]
 800436c:	6014      	str	r4, [r2, #0]
 800436e:	4628      	mov	r0, r5
 8004370:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004374:	f7ff bf28 	b.w	80041c8 <__malloc_unlock>
 8004378:	42a3      	cmp	r3, r4
 800437a:	d908      	bls.n	800438e <_free_r+0x42>
 800437c:	6820      	ldr	r0, [r4, #0]
 800437e:	1821      	adds	r1, r4, r0
 8004380:	428b      	cmp	r3, r1
 8004382:	bf01      	itttt	eq
 8004384:	6819      	ldreq	r1, [r3, #0]
 8004386:	685b      	ldreq	r3, [r3, #4]
 8004388:	1809      	addeq	r1, r1, r0
 800438a:	6021      	streq	r1, [r4, #0]
 800438c:	e7ed      	b.n	800436a <_free_r+0x1e>
 800438e:	461a      	mov	r2, r3
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	b10b      	cbz	r3, 8004398 <_free_r+0x4c>
 8004394:	42a3      	cmp	r3, r4
 8004396:	d9fa      	bls.n	800438e <_free_r+0x42>
 8004398:	6811      	ldr	r1, [r2, #0]
 800439a:	1850      	adds	r0, r2, r1
 800439c:	42a0      	cmp	r0, r4
 800439e:	d10b      	bne.n	80043b8 <_free_r+0x6c>
 80043a0:	6820      	ldr	r0, [r4, #0]
 80043a2:	4401      	add	r1, r0
 80043a4:	1850      	adds	r0, r2, r1
 80043a6:	4283      	cmp	r3, r0
 80043a8:	6011      	str	r1, [r2, #0]
 80043aa:	d1e0      	bne.n	800436e <_free_r+0x22>
 80043ac:	6818      	ldr	r0, [r3, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	6053      	str	r3, [r2, #4]
 80043b2:	4408      	add	r0, r1
 80043b4:	6010      	str	r0, [r2, #0]
 80043b6:	e7da      	b.n	800436e <_free_r+0x22>
 80043b8:	d902      	bls.n	80043c0 <_free_r+0x74>
 80043ba:	230c      	movs	r3, #12
 80043bc:	602b      	str	r3, [r5, #0]
 80043be:	e7d6      	b.n	800436e <_free_r+0x22>
 80043c0:	6820      	ldr	r0, [r4, #0]
 80043c2:	1821      	adds	r1, r4, r0
 80043c4:	428b      	cmp	r3, r1
 80043c6:	bf04      	itt	eq
 80043c8:	6819      	ldreq	r1, [r3, #0]
 80043ca:	685b      	ldreq	r3, [r3, #4]
 80043cc:	6063      	str	r3, [r4, #4]
 80043ce:	bf04      	itt	eq
 80043d0:	1809      	addeq	r1, r1, r0
 80043d2:	6021      	streq	r1, [r4, #0]
 80043d4:	6054      	str	r4, [r2, #4]
 80043d6:	e7ca      	b.n	800436e <_free_r+0x22>
 80043d8:	bd38      	pop	{r3, r4, r5, pc}
 80043da:	bf00      	nop
 80043dc:	20000168 	.word	0x20000168

080043e0 <__ssputs_r>:
 80043e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043e4:	688e      	ldr	r6, [r1, #8]
 80043e6:	461f      	mov	r7, r3
 80043e8:	42be      	cmp	r6, r7
 80043ea:	680b      	ldr	r3, [r1, #0]
 80043ec:	4682      	mov	sl, r0
 80043ee:	460c      	mov	r4, r1
 80043f0:	4690      	mov	r8, r2
 80043f2:	d82d      	bhi.n	8004450 <__ssputs_r+0x70>
 80043f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80043f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80043fc:	d026      	beq.n	800444c <__ssputs_r+0x6c>
 80043fe:	6965      	ldr	r5, [r4, #20]
 8004400:	6909      	ldr	r1, [r1, #16]
 8004402:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004406:	eba3 0901 	sub.w	r9, r3, r1
 800440a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800440e:	1c7b      	adds	r3, r7, #1
 8004410:	444b      	add	r3, r9
 8004412:	106d      	asrs	r5, r5, #1
 8004414:	429d      	cmp	r5, r3
 8004416:	bf38      	it	cc
 8004418:	461d      	movcc	r5, r3
 800441a:	0553      	lsls	r3, r2, #21
 800441c:	d527      	bpl.n	800446e <__ssputs_r+0x8e>
 800441e:	4629      	mov	r1, r5
 8004420:	f7ff fe4c 	bl	80040bc <_malloc_r>
 8004424:	4606      	mov	r6, r0
 8004426:	b360      	cbz	r0, 8004482 <__ssputs_r+0xa2>
 8004428:	6921      	ldr	r1, [r4, #16]
 800442a:	464a      	mov	r2, r9
 800442c:	f000 fad8 	bl	80049e0 <memcpy>
 8004430:	89a3      	ldrh	r3, [r4, #12]
 8004432:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004436:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800443a:	81a3      	strh	r3, [r4, #12]
 800443c:	6126      	str	r6, [r4, #16]
 800443e:	6165      	str	r5, [r4, #20]
 8004440:	444e      	add	r6, r9
 8004442:	eba5 0509 	sub.w	r5, r5, r9
 8004446:	6026      	str	r6, [r4, #0]
 8004448:	60a5      	str	r5, [r4, #8]
 800444a:	463e      	mov	r6, r7
 800444c:	42be      	cmp	r6, r7
 800444e:	d900      	bls.n	8004452 <__ssputs_r+0x72>
 8004450:	463e      	mov	r6, r7
 8004452:	6820      	ldr	r0, [r4, #0]
 8004454:	4632      	mov	r2, r6
 8004456:	4641      	mov	r1, r8
 8004458:	f000 faa8 	bl	80049ac <memmove>
 800445c:	68a3      	ldr	r3, [r4, #8]
 800445e:	1b9b      	subs	r3, r3, r6
 8004460:	60a3      	str	r3, [r4, #8]
 8004462:	6823      	ldr	r3, [r4, #0]
 8004464:	4433      	add	r3, r6
 8004466:	6023      	str	r3, [r4, #0]
 8004468:	2000      	movs	r0, #0
 800446a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800446e:	462a      	mov	r2, r5
 8004470:	f000 fac4 	bl	80049fc <_realloc_r>
 8004474:	4606      	mov	r6, r0
 8004476:	2800      	cmp	r0, #0
 8004478:	d1e0      	bne.n	800443c <__ssputs_r+0x5c>
 800447a:	6921      	ldr	r1, [r4, #16]
 800447c:	4650      	mov	r0, sl
 800447e:	f7ff ff65 	bl	800434c <_free_r>
 8004482:	230c      	movs	r3, #12
 8004484:	f8ca 3000 	str.w	r3, [sl]
 8004488:	89a3      	ldrh	r3, [r4, #12]
 800448a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800448e:	81a3      	strh	r3, [r4, #12]
 8004490:	f04f 30ff 	mov.w	r0, #4294967295
 8004494:	e7e9      	b.n	800446a <__ssputs_r+0x8a>
	...

08004498 <_svfiprintf_r>:
 8004498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800449c:	4698      	mov	r8, r3
 800449e:	898b      	ldrh	r3, [r1, #12]
 80044a0:	061b      	lsls	r3, r3, #24
 80044a2:	b09d      	sub	sp, #116	@ 0x74
 80044a4:	4607      	mov	r7, r0
 80044a6:	460d      	mov	r5, r1
 80044a8:	4614      	mov	r4, r2
 80044aa:	d510      	bpl.n	80044ce <_svfiprintf_r+0x36>
 80044ac:	690b      	ldr	r3, [r1, #16]
 80044ae:	b973      	cbnz	r3, 80044ce <_svfiprintf_r+0x36>
 80044b0:	2140      	movs	r1, #64	@ 0x40
 80044b2:	f7ff fe03 	bl	80040bc <_malloc_r>
 80044b6:	6028      	str	r0, [r5, #0]
 80044b8:	6128      	str	r0, [r5, #16]
 80044ba:	b930      	cbnz	r0, 80044ca <_svfiprintf_r+0x32>
 80044bc:	230c      	movs	r3, #12
 80044be:	603b      	str	r3, [r7, #0]
 80044c0:	f04f 30ff 	mov.w	r0, #4294967295
 80044c4:	b01d      	add	sp, #116	@ 0x74
 80044c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044ca:	2340      	movs	r3, #64	@ 0x40
 80044cc:	616b      	str	r3, [r5, #20]
 80044ce:	2300      	movs	r3, #0
 80044d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80044d2:	2320      	movs	r3, #32
 80044d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80044d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80044dc:	2330      	movs	r3, #48	@ 0x30
 80044de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800467c <_svfiprintf_r+0x1e4>
 80044e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80044e6:	f04f 0901 	mov.w	r9, #1
 80044ea:	4623      	mov	r3, r4
 80044ec:	469a      	mov	sl, r3
 80044ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044f2:	b10a      	cbz	r2, 80044f8 <_svfiprintf_r+0x60>
 80044f4:	2a25      	cmp	r2, #37	@ 0x25
 80044f6:	d1f9      	bne.n	80044ec <_svfiprintf_r+0x54>
 80044f8:	ebba 0b04 	subs.w	fp, sl, r4
 80044fc:	d00b      	beq.n	8004516 <_svfiprintf_r+0x7e>
 80044fe:	465b      	mov	r3, fp
 8004500:	4622      	mov	r2, r4
 8004502:	4629      	mov	r1, r5
 8004504:	4638      	mov	r0, r7
 8004506:	f7ff ff6b 	bl	80043e0 <__ssputs_r>
 800450a:	3001      	adds	r0, #1
 800450c:	f000 80a7 	beq.w	800465e <_svfiprintf_r+0x1c6>
 8004510:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004512:	445a      	add	r2, fp
 8004514:	9209      	str	r2, [sp, #36]	@ 0x24
 8004516:	f89a 3000 	ldrb.w	r3, [sl]
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 809f 	beq.w	800465e <_svfiprintf_r+0x1c6>
 8004520:	2300      	movs	r3, #0
 8004522:	f04f 32ff 	mov.w	r2, #4294967295
 8004526:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800452a:	f10a 0a01 	add.w	sl, sl, #1
 800452e:	9304      	str	r3, [sp, #16]
 8004530:	9307      	str	r3, [sp, #28]
 8004532:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004536:	931a      	str	r3, [sp, #104]	@ 0x68
 8004538:	4654      	mov	r4, sl
 800453a:	2205      	movs	r2, #5
 800453c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004540:	484e      	ldr	r0, [pc, #312]	@ (800467c <_svfiprintf_r+0x1e4>)
 8004542:	f7fb fe4d 	bl	80001e0 <memchr>
 8004546:	9a04      	ldr	r2, [sp, #16]
 8004548:	b9d8      	cbnz	r0, 8004582 <_svfiprintf_r+0xea>
 800454a:	06d0      	lsls	r0, r2, #27
 800454c:	bf44      	itt	mi
 800454e:	2320      	movmi	r3, #32
 8004550:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004554:	0711      	lsls	r1, r2, #28
 8004556:	bf44      	itt	mi
 8004558:	232b      	movmi	r3, #43	@ 0x2b
 800455a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800455e:	f89a 3000 	ldrb.w	r3, [sl]
 8004562:	2b2a      	cmp	r3, #42	@ 0x2a
 8004564:	d015      	beq.n	8004592 <_svfiprintf_r+0xfa>
 8004566:	9a07      	ldr	r2, [sp, #28]
 8004568:	4654      	mov	r4, sl
 800456a:	2000      	movs	r0, #0
 800456c:	f04f 0c0a 	mov.w	ip, #10
 8004570:	4621      	mov	r1, r4
 8004572:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004576:	3b30      	subs	r3, #48	@ 0x30
 8004578:	2b09      	cmp	r3, #9
 800457a:	d94b      	bls.n	8004614 <_svfiprintf_r+0x17c>
 800457c:	b1b0      	cbz	r0, 80045ac <_svfiprintf_r+0x114>
 800457e:	9207      	str	r2, [sp, #28]
 8004580:	e014      	b.n	80045ac <_svfiprintf_r+0x114>
 8004582:	eba0 0308 	sub.w	r3, r0, r8
 8004586:	fa09 f303 	lsl.w	r3, r9, r3
 800458a:	4313      	orrs	r3, r2
 800458c:	9304      	str	r3, [sp, #16]
 800458e:	46a2      	mov	sl, r4
 8004590:	e7d2      	b.n	8004538 <_svfiprintf_r+0xa0>
 8004592:	9b03      	ldr	r3, [sp, #12]
 8004594:	1d19      	adds	r1, r3, #4
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	9103      	str	r1, [sp, #12]
 800459a:	2b00      	cmp	r3, #0
 800459c:	bfbb      	ittet	lt
 800459e:	425b      	neglt	r3, r3
 80045a0:	f042 0202 	orrlt.w	r2, r2, #2
 80045a4:	9307      	strge	r3, [sp, #28]
 80045a6:	9307      	strlt	r3, [sp, #28]
 80045a8:	bfb8      	it	lt
 80045aa:	9204      	strlt	r2, [sp, #16]
 80045ac:	7823      	ldrb	r3, [r4, #0]
 80045ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80045b0:	d10a      	bne.n	80045c8 <_svfiprintf_r+0x130>
 80045b2:	7863      	ldrb	r3, [r4, #1]
 80045b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80045b6:	d132      	bne.n	800461e <_svfiprintf_r+0x186>
 80045b8:	9b03      	ldr	r3, [sp, #12]
 80045ba:	1d1a      	adds	r2, r3, #4
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	9203      	str	r2, [sp, #12]
 80045c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80045c4:	3402      	adds	r4, #2
 80045c6:	9305      	str	r3, [sp, #20]
 80045c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800468c <_svfiprintf_r+0x1f4>
 80045cc:	7821      	ldrb	r1, [r4, #0]
 80045ce:	2203      	movs	r2, #3
 80045d0:	4650      	mov	r0, sl
 80045d2:	f7fb fe05 	bl	80001e0 <memchr>
 80045d6:	b138      	cbz	r0, 80045e8 <_svfiprintf_r+0x150>
 80045d8:	9b04      	ldr	r3, [sp, #16]
 80045da:	eba0 000a 	sub.w	r0, r0, sl
 80045de:	2240      	movs	r2, #64	@ 0x40
 80045e0:	4082      	lsls	r2, r0
 80045e2:	4313      	orrs	r3, r2
 80045e4:	3401      	adds	r4, #1
 80045e6:	9304      	str	r3, [sp, #16]
 80045e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045ec:	4824      	ldr	r0, [pc, #144]	@ (8004680 <_svfiprintf_r+0x1e8>)
 80045ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80045f2:	2206      	movs	r2, #6
 80045f4:	f7fb fdf4 	bl	80001e0 <memchr>
 80045f8:	2800      	cmp	r0, #0
 80045fa:	d036      	beq.n	800466a <_svfiprintf_r+0x1d2>
 80045fc:	4b21      	ldr	r3, [pc, #132]	@ (8004684 <_svfiprintf_r+0x1ec>)
 80045fe:	bb1b      	cbnz	r3, 8004648 <_svfiprintf_r+0x1b0>
 8004600:	9b03      	ldr	r3, [sp, #12]
 8004602:	3307      	adds	r3, #7
 8004604:	f023 0307 	bic.w	r3, r3, #7
 8004608:	3308      	adds	r3, #8
 800460a:	9303      	str	r3, [sp, #12]
 800460c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800460e:	4433      	add	r3, r6
 8004610:	9309      	str	r3, [sp, #36]	@ 0x24
 8004612:	e76a      	b.n	80044ea <_svfiprintf_r+0x52>
 8004614:	fb0c 3202 	mla	r2, ip, r2, r3
 8004618:	460c      	mov	r4, r1
 800461a:	2001      	movs	r0, #1
 800461c:	e7a8      	b.n	8004570 <_svfiprintf_r+0xd8>
 800461e:	2300      	movs	r3, #0
 8004620:	3401      	adds	r4, #1
 8004622:	9305      	str	r3, [sp, #20]
 8004624:	4619      	mov	r1, r3
 8004626:	f04f 0c0a 	mov.w	ip, #10
 800462a:	4620      	mov	r0, r4
 800462c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004630:	3a30      	subs	r2, #48	@ 0x30
 8004632:	2a09      	cmp	r2, #9
 8004634:	d903      	bls.n	800463e <_svfiprintf_r+0x1a6>
 8004636:	2b00      	cmp	r3, #0
 8004638:	d0c6      	beq.n	80045c8 <_svfiprintf_r+0x130>
 800463a:	9105      	str	r1, [sp, #20]
 800463c:	e7c4      	b.n	80045c8 <_svfiprintf_r+0x130>
 800463e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004642:	4604      	mov	r4, r0
 8004644:	2301      	movs	r3, #1
 8004646:	e7f0      	b.n	800462a <_svfiprintf_r+0x192>
 8004648:	ab03      	add	r3, sp, #12
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	462a      	mov	r2, r5
 800464e:	4b0e      	ldr	r3, [pc, #56]	@ (8004688 <_svfiprintf_r+0x1f0>)
 8004650:	a904      	add	r1, sp, #16
 8004652:	4638      	mov	r0, r7
 8004654:	f3af 8000 	nop.w
 8004658:	1c42      	adds	r2, r0, #1
 800465a:	4606      	mov	r6, r0
 800465c:	d1d6      	bne.n	800460c <_svfiprintf_r+0x174>
 800465e:	89ab      	ldrh	r3, [r5, #12]
 8004660:	065b      	lsls	r3, r3, #25
 8004662:	f53f af2d 	bmi.w	80044c0 <_svfiprintf_r+0x28>
 8004666:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004668:	e72c      	b.n	80044c4 <_svfiprintf_r+0x2c>
 800466a:	ab03      	add	r3, sp, #12
 800466c:	9300      	str	r3, [sp, #0]
 800466e:	462a      	mov	r2, r5
 8004670:	4b05      	ldr	r3, [pc, #20]	@ (8004688 <_svfiprintf_r+0x1f0>)
 8004672:	a904      	add	r1, sp, #16
 8004674:	4638      	mov	r0, r7
 8004676:	f000 f879 	bl	800476c <_printf_i>
 800467a:	e7ed      	b.n	8004658 <_svfiprintf_r+0x1c0>
 800467c:	08004ac4 	.word	0x08004ac4
 8004680:	08004ace 	.word	0x08004ace
 8004684:	00000000 	.word	0x00000000
 8004688:	080043e1 	.word	0x080043e1
 800468c:	08004aca 	.word	0x08004aca

08004690 <_printf_common>:
 8004690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004694:	4616      	mov	r6, r2
 8004696:	4698      	mov	r8, r3
 8004698:	688a      	ldr	r2, [r1, #8]
 800469a:	690b      	ldr	r3, [r1, #16]
 800469c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80046a0:	4293      	cmp	r3, r2
 80046a2:	bfb8      	it	lt
 80046a4:	4613      	movlt	r3, r2
 80046a6:	6033      	str	r3, [r6, #0]
 80046a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80046ac:	4607      	mov	r7, r0
 80046ae:	460c      	mov	r4, r1
 80046b0:	b10a      	cbz	r2, 80046b6 <_printf_common+0x26>
 80046b2:	3301      	adds	r3, #1
 80046b4:	6033      	str	r3, [r6, #0]
 80046b6:	6823      	ldr	r3, [r4, #0]
 80046b8:	0699      	lsls	r1, r3, #26
 80046ba:	bf42      	ittt	mi
 80046bc:	6833      	ldrmi	r3, [r6, #0]
 80046be:	3302      	addmi	r3, #2
 80046c0:	6033      	strmi	r3, [r6, #0]
 80046c2:	6825      	ldr	r5, [r4, #0]
 80046c4:	f015 0506 	ands.w	r5, r5, #6
 80046c8:	d106      	bne.n	80046d8 <_printf_common+0x48>
 80046ca:	f104 0a19 	add.w	sl, r4, #25
 80046ce:	68e3      	ldr	r3, [r4, #12]
 80046d0:	6832      	ldr	r2, [r6, #0]
 80046d2:	1a9b      	subs	r3, r3, r2
 80046d4:	42ab      	cmp	r3, r5
 80046d6:	dc26      	bgt.n	8004726 <_printf_common+0x96>
 80046d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80046dc:	6822      	ldr	r2, [r4, #0]
 80046de:	3b00      	subs	r3, #0
 80046e0:	bf18      	it	ne
 80046e2:	2301      	movne	r3, #1
 80046e4:	0692      	lsls	r2, r2, #26
 80046e6:	d42b      	bmi.n	8004740 <_printf_common+0xb0>
 80046e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80046ec:	4641      	mov	r1, r8
 80046ee:	4638      	mov	r0, r7
 80046f0:	47c8      	blx	r9
 80046f2:	3001      	adds	r0, #1
 80046f4:	d01e      	beq.n	8004734 <_printf_common+0xa4>
 80046f6:	6823      	ldr	r3, [r4, #0]
 80046f8:	6922      	ldr	r2, [r4, #16]
 80046fa:	f003 0306 	and.w	r3, r3, #6
 80046fe:	2b04      	cmp	r3, #4
 8004700:	bf02      	ittt	eq
 8004702:	68e5      	ldreq	r5, [r4, #12]
 8004704:	6833      	ldreq	r3, [r6, #0]
 8004706:	1aed      	subeq	r5, r5, r3
 8004708:	68a3      	ldr	r3, [r4, #8]
 800470a:	bf0c      	ite	eq
 800470c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004710:	2500      	movne	r5, #0
 8004712:	4293      	cmp	r3, r2
 8004714:	bfc4      	itt	gt
 8004716:	1a9b      	subgt	r3, r3, r2
 8004718:	18ed      	addgt	r5, r5, r3
 800471a:	2600      	movs	r6, #0
 800471c:	341a      	adds	r4, #26
 800471e:	42b5      	cmp	r5, r6
 8004720:	d11a      	bne.n	8004758 <_printf_common+0xc8>
 8004722:	2000      	movs	r0, #0
 8004724:	e008      	b.n	8004738 <_printf_common+0xa8>
 8004726:	2301      	movs	r3, #1
 8004728:	4652      	mov	r2, sl
 800472a:	4641      	mov	r1, r8
 800472c:	4638      	mov	r0, r7
 800472e:	47c8      	blx	r9
 8004730:	3001      	adds	r0, #1
 8004732:	d103      	bne.n	800473c <_printf_common+0xac>
 8004734:	f04f 30ff 	mov.w	r0, #4294967295
 8004738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800473c:	3501      	adds	r5, #1
 800473e:	e7c6      	b.n	80046ce <_printf_common+0x3e>
 8004740:	18e1      	adds	r1, r4, r3
 8004742:	1c5a      	adds	r2, r3, #1
 8004744:	2030      	movs	r0, #48	@ 0x30
 8004746:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800474a:	4422      	add	r2, r4
 800474c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004750:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004754:	3302      	adds	r3, #2
 8004756:	e7c7      	b.n	80046e8 <_printf_common+0x58>
 8004758:	2301      	movs	r3, #1
 800475a:	4622      	mov	r2, r4
 800475c:	4641      	mov	r1, r8
 800475e:	4638      	mov	r0, r7
 8004760:	47c8      	blx	r9
 8004762:	3001      	adds	r0, #1
 8004764:	d0e6      	beq.n	8004734 <_printf_common+0xa4>
 8004766:	3601      	adds	r6, #1
 8004768:	e7d9      	b.n	800471e <_printf_common+0x8e>
	...

0800476c <_printf_i>:
 800476c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004770:	7e0f      	ldrb	r7, [r1, #24]
 8004772:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004774:	2f78      	cmp	r7, #120	@ 0x78
 8004776:	4691      	mov	r9, r2
 8004778:	4680      	mov	r8, r0
 800477a:	460c      	mov	r4, r1
 800477c:	469a      	mov	sl, r3
 800477e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004782:	d807      	bhi.n	8004794 <_printf_i+0x28>
 8004784:	2f62      	cmp	r7, #98	@ 0x62
 8004786:	d80a      	bhi.n	800479e <_printf_i+0x32>
 8004788:	2f00      	cmp	r7, #0
 800478a:	f000 80d2 	beq.w	8004932 <_printf_i+0x1c6>
 800478e:	2f58      	cmp	r7, #88	@ 0x58
 8004790:	f000 80b9 	beq.w	8004906 <_printf_i+0x19a>
 8004794:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004798:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800479c:	e03a      	b.n	8004814 <_printf_i+0xa8>
 800479e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80047a2:	2b15      	cmp	r3, #21
 80047a4:	d8f6      	bhi.n	8004794 <_printf_i+0x28>
 80047a6:	a101      	add	r1, pc, #4	@ (adr r1, 80047ac <_printf_i+0x40>)
 80047a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047ac:	08004805 	.word	0x08004805
 80047b0:	08004819 	.word	0x08004819
 80047b4:	08004795 	.word	0x08004795
 80047b8:	08004795 	.word	0x08004795
 80047bc:	08004795 	.word	0x08004795
 80047c0:	08004795 	.word	0x08004795
 80047c4:	08004819 	.word	0x08004819
 80047c8:	08004795 	.word	0x08004795
 80047cc:	08004795 	.word	0x08004795
 80047d0:	08004795 	.word	0x08004795
 80047d4:	08004795 	.word	0x08004795
 80047d8:	08004919 	.word	0x08004919
 80047dc:	08004843 	.word	0x08004843
 80047e0:	080048d3 	.word	0x080048d3
 80047e4:	08004795 	.word	0x08004795
 80047e8:	08004795 	.word	0x08004795
 80047ec:	0800493b 	.word	0x0800493b
 80047f0:	08004795 	.word	0x08004795
 80047f4:	08004843 	.word	0x08004843
 80047f8:	08004795 	.word	0x08004795
 80047fc:	08004795 	.word	0x08004795
 8004800:	080048db 	.word	0x080048db
 8004804:	6833      	ldr	r3, [r6, #0]
 8004806:	1d1a      	adds	r2, r3, #4
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6032      	str	r2, [r6, #0]
 800480c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004810:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004814:	2301      	movs	r3, #1
 8004816:	e09d      	b.n	8004954 <_printf_i+0x1e8>
 8004818:	6833      	ldr	r3, [r6, #0]
 800481a:	6820      	ldr	r0, [r4, #0]
 800481c:	1d19      	adds	r1, r3, #4
 800481e:	6031      	str	r1, [r6, #0]
 8004820:	0606      	lsls	r6, r0, #24
 8004822:	d501      	bpl.n	8004828 <_printf_i+0xbc>
 8004824:	681d      	ldr	r5, [r3, #0]
 8004826:	e003      	b.n	8004830 <_printf_i+0xc4>
 8004828:	0645      	lsls	r5, r0, #25
 800482a:	d5fb      	bpl.n	8004824 <_printf_i+0xb8>
 800482c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004830:	2d00      	cmp	r5, #0
 8004832:	da03      	bge.n	800483c <_printf_i+0xd0>
 8004834:	232d      	movs	r3, #45	@ 0x2d
 8004836:	426d      	negs	r5, r5
 8004838:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800483c:	4859      	ldr	r0, [pc, #356]	@ (80049a4 <_printf_i+0x238>)
 800483e:	230a      	movs	r3, #10
 8004840:	e011      	b.n	8004866 <_printf_i+0xfa>
 8004842:	6821      	ldr	r1, [r4, #0]
 8004844:	6833      	ldr	r3, [r6, #0]
 8004846:	0608      	lsls	r0, r1, #24
 8004848:	f853 5b04 	ldr.w	r5, [r3], #4
 800484c:	d402      	bmi.n	8004854 <_printf_i+0xe8>
 800484e:	0649      	lsls	r1, r1, #25
 8004850:	bf48      	it	mi
 8004852:	b2ad      	uxthmi	r5, r5
 8004854:	2f6f      	cmp	r7, #111	@ 0x6f
 8004856:	4853      	ldr	r0, [pc, #332]	@ (80049a4 <_printf_i+0x238>)
 8004858:	6033      	str	r3, [r6, #0]
 800485a:	bf14      	ite	ne
 800485c:	230a      	movne	r3, #10
 800485e:	2308      	moveq	r3, #8
 8004860:	2100      	movs	r1, #0
 8004862:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004866:	6866      	ldr	r6, [r4, #4]
 8004868:	60a6      	str	r6, [r4, #8]
 800486a:	2e00      	cmp	r6, #0
 800486c:	bfa2      	ittt	ge
 800486e:	6821      	ldrge	r1, [r4, #0]
 8004870:	f021 0104 	bicge.w	r1, r1, #4
 8004874:	6021      	strge	r1, [r4, #0]
 8004876:	b90d      	cbnz	r5, 800487c <_printf_i+0x110>
 8004878:	2e00      	cmp	r6, #0
 800487a:	d04b      	beq.n	8004914 <_printf_i+0x1a8>
 800487c:	4616      	mov	r6, r2
 800487e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004882:	fb03 5711 	mls	r7, r3, r1, r5
 8004886:	5dc7      	ldrb	r7, [r0, r7]
 8004888:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800488c:	462f      	mov	r7, r5
 800488e:	42bb      	cmp	r3, r7
 8004890:	460d      	mov	r5, r1
 8004892:	d9f4      	bls.n	800487e <_printf_i+0x112>
 8004894:	2b08      	cmp	r3, #8
 8004896:	d10b      	bne.n	80048b0 <_printf_i+0x144>
 8004898:	6823      	ldr	r3, [r4, #0]
 800489a:	07df      	lsls	r7, r3, #31
 800489c:	d508      	bpl.n	80048b0 <_printf_i+0x144>
 800489e:	6923      	ldr	r3, [r4, #16]
 80048a0:	6861      	ldr	r1, [r4, #4]
 80048a2:	4299      	cmp	r1, r3
 80048a4:	bfde      	ittt	le
 80048a6:	2330      	movle	r3, #48	@ 0x30
 80048a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80048ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80048b0:	1b92      	subs	r2, r2, r6
 80048b2:	6122      	str	r2, [r4, #16]
 80048b4:	f8cd a000 	str.w	sl, [sp]
 80048b8:	464b      	mov	r3, r9
 80048ba:	aa03      	add	r2, sp, #12
 80048bc:	4621      	mov	r1, r4
 80048be:	4640      	mov	r0, r8
 80048c0:	f7ff fee6 	bl	8004690 <_printf_common>
 80048c4:	3001      	adds	r0, #1
 80048c6:	d14a      	bne.n	800495e <_printf_i+0x1f2>
 80048c8:	f04f 30ff 	mov.w	r0, #4294967295
 80048cc:	b004      	add	sp, #16
 80048ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048d2:	6823      	ldr	r3, [r4, #0]
 80048d4:	f043 0320 	orr.w	r3, r3, #32
 80048d8:	6023      	str	r3, [r4, #0]
 80048da:	4833      	ldr	r0, [pc, #204]	@ (80049a8 <_printf_i+0x23c>)
 80048dc:	2778      	movs	r7, #120	@ 0x78
 80048de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80048e2:	6823      	ldr	r3, [r4, #0]
 80048e4:	6831      	ldr	r1, [r6, #0]
 80048e6:	061f      	lsls	r7, r3, #24
 80048e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80048ec:	d402      	bmi.n	80048f4 <_printf_i+0x188>
 80048ee:	065f      	lsls	r7, r3, #25
 80048f0:	bf48      	it	mi
 80048f2:	b2ad      	uxthmi	r5, r5
 80048f4:	6031      	str	r1, [r6, #0]
 80048f6:	07d9      	lsls	r1, r3, #31
 80048f8:	bf44      	itt	mi
 80048fa:	f043 0320 	orrmi.w	r3, r3, #32
 80048fe:	6023      	strmi	r3, [r4, #0]
 8004900:	b11d      	cbz	r5, 800490a <_printf_i+0x19e>
 8004902:	2310      	movs	r3, #16
 8004904:	e7ac      	b.n	8004860 <_printf_i+0xf4>
 8004906:	4827      	ldr	r0, [pc, #156]	@ (80049a4 <_printf_i+0x238>)
 8004908:	e7e9      	b.n	80048de <_printf_i+0x172>
 800490a:	6823      	ldr	r3, [r4, #0]
 800490c:	f023 0320 	bic.w	r3, r3, #32
 8004910:	6023      	str	r3, [r4, #0]
 8004912:	e7f6      	b.n	8004902 <_printf_i+0x196>
 8004914:	4616      	mov	r6, r2
 8004916:	e7bd      	b.n	8004894 <_printf_i+0x128>
 8004918:	6833      	ldr	r3, [r6, #0]
 800491a:	6825      	ldr	r5, [r4, #0]
 800491c:	6961      	ldr	r1, [r4, #20]
 800491e:	1d18      	adds	r0, r3, #4
 8004920:	6030      	str	r0, [r6, #0]
 8004922:	062e      	lsls	r6, r5, #24
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	d501      	bpl.n	800492c <_printf_i+0x1c0>
 8004928:	6019      	str	r1, [r3, #0]
 800492a:	e002      	b.n	8004932 <_printf_i+0x1c6>
 800492c:	0668      	lsls	r0, r5, #25
 800492e:	d5fb      	bpl.n	8004928 <_printf_i+0x1bc>
 8004930:	8019      	strh	r1, [r3, #0]
 8004932:	2300      	movs	r3, #0
 8004934:	6123      	str	r3, [r4, #16]
 8004936:	4616      	mov	r6, r2
 8004938:	e7bc      	b.n	80048b4 <_printf_i+0x148>
 800493a:	6833      	ldr	r3, [r6, #0]
 800493c:	1d1a      	adds	r2, r3, #4
 800493e:	6032      	str	r2, [r6, #0]
 8004940:	681e      	ldr	r6, [r3, #0]
 8004942:	6862      	ldr	r2, [r4, #4]
 8004944:	2100      	movs	r1, #0
 8004946:	4630      	mov	r0, r6
 8004948:	f7fb fc4a 	bl	80001e0 <memchr>
 800494c:	b108      	cbz	r0, 8004952 <_printf_i+0x1e6>
 800494e:	1b80      	subs	r0, r0, r6
 8004950:	6060      	str	r0, [r4, #4]
 8004952:	6863      	ldr	r3, [r4, #4]
 8004954:	6123      	str	r3, [r4, #16]
 8004956:	2300      	movs	r3, #0
 8004958:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800495c:	e7aa      	b.n	80048b4 <_printf_i+0x148>
 800495e:	6923      	ldr	r3, [r4, #16]
 8004960:	4632      	mov	r2, r6
 8004962:	4649      	mov	r1, r9
 8004964:	4640      	mov	r0, r8
 8004966:	47d0      	blx	sl
 8004968:	3001      	adds	r0, #1
 800496a:	d0ad      	beq.n	80048c8 <_printf_i+0x15c>
 800496c:	6823      	ldr	r3, [r4, #0]
 800496e:	079b      	lsls	r3, r3, #30
 8004970:	d413      	bmi.n	800499a <_printf_i+0x22e>
 8004972:	68e0      	ldr	r0, [r4, #12]
 8004974:	9b03      	ldr	r3, [sp, #12]
 8004976:	4298      	cmp	r0, r3
 8004978:	bfb8      	it	lt
 800497a:	4618      	movlt	r0, r3
 800497c:	e7a6      	b.n	80048cc <_printf_i+0x160>
 800497e:	2301      	movs	r3, #1
 8004980:	4632      	mov	r2, r6
 8004982:	4649      	mov	r1, r9
 8004984:	4640      	mov	r0, r8
 8004986:	47d0      	blx	sl
 8004988:	3001      	adds	r0, #1
 800498a:	d09d      	beq.n	80048c8 <_printf_i+0x15c>
 800498c:	3501      	adds	r5, #1
 800498e:	68e3      	ldr	r3, [r4, #12]
 8004990:	9903      	ldr	r1, [sp, #12]
 8004992:	1a5b      	subs	r3, r3, r1
 8004994:	42ab      	cmp	r3, r5
 8004996:	dcf2      	bgt.n	800497e <_printf_i+0x212>
 8004998:	e7eb      	b.n	8004972 <_printf_i+0x206>
 800499a:	2500      	movs	r5, #0
 800499c:	f104 0619 	add.w	r6, r4, #25
 80049a0:	e7f5      	b.n	800498e <_printf_i+0x222>
 80049a2:	bf00      	nop
 80049a4:	08004ad5 	.word	0x08004ad5
 80049a8:	08004ae6 	.word	0x08004ae6

080049ac <memmove>:
 80049ac:	4288      	cmp	r0, r1
 80049ae:	b510      	push	{r4, lr}
 80049b0:	eb01 0402 	add.w	r4, r1, r2
 80049b4:	d902      	bls.n	80049bc <memmove+0x10>
 80049b6:	4284      	cmp	r4, r0
 80049b8:	4623      	mov	r3, r4
 80049ba:	d807      	bhi.n	80049cc <memmove+0x20>
 80049bc:	1e43      	subs	r3, r0, #1
 80049be:	42a1      	cmp	r1, r4
 80049c0:	d008      	beq.n	80049d4 <memmove+0x28>
 80049c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80049ca:	e7f8      	b.n	80049be <memmove+0x12>
 80049cc:	4402      	add	r2, r0
 80049ce:	4601      	mov	r1, r0
 80049d0:	428a      	cmp	r2, r1
 80049d2:	d100      	bne.n	80049d6 <memmove+0x2a>
 80049d4:	bd10      	pop	{r4, pc}
 80049d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80049da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80049de:	e7f7      	b.n	80049d0 <memmove+0x24>

080049e0 <memcpy>:
 80049e0:	440a      	add	r2, r1
 80049e2:	4291      	cmp	r1, r2
 80049e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80049e8:	d100      	bne.n	80049ec <memcpy+0xc>
 80049ea:	4770      	bx	lr
 80049ec:	b510      	push	{r4, lr}
 80049ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049f6:	4291      	cmp	r1, r2
 80049f8:	d1f9      	bne.n	80049ee <memcpy+0xe>
 80049fa:	bd10      	pop	{r4, pc}

080049fc <_realloc_r>:
 80049fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a00:	4680      	mov	r8, r0
 8004a02:	4615      	mov	r5, r2
 8004a04:	460c      	mov	r4, r1
 8004a06:	b921      	cbnz	r1, 8004a12 <_realloc_r+0x16>
 8004a08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a0c:	4611      	mov	r1, r2
 8004a0e:	f7ff bb55 	b.w	80040bc <_malloc_r>
 8004a12:	b92a      	cbnz	r2, 8004a20 <_realloc_r+0x24>
 8004a14:	f7ff fc9a 	bl	800434c <_free_r>
 8004a18:	2400      	movs	r4, #0
 8004a1a:	4620      	mov	r0, r4
 8004a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a20:	f000 f81a 	bl	8004a58 <_malloc_usable_size_r>
 8004a24:	4285      	cmp	r5, r0
 8004a26:	4606      	mov	r6, r0
 8004a28:	d802      	bhi.n	8004a30 <_realloc_r+0x34>
 8004a2a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004a2e:	d8f4      	bhi.n	8004a1a <_realloc_r+0x1e>
 8004a30:	4629      	mov	r1, r5
 8004a32:	4640      	mov	r0, r8
 8004a34:	f7ff fb42 	bl	80040bc <_malloc_r>
 8004a38:	4607      	mov	r7, r0
 8004a3a:	2800      	cmp	r0, #0
 8004a3c:	d0ec      	beq.n	8004a18 <_realloc_r+0x1c>
 8004a3e:	42b5      	cmp	r5, r6
 8004a40:	462a      	mov	r2, r5
 8004a42:	4621      	mov	r1, r4
 8004a44:	bf28      	it	cs
 8004a46:	4632      	movcs	r2, r6
 8004a48:	f7ff ffca 	bl	80049e0 <memcpy>
 8004a4c:	4621      	mov	r1, r4
 8004a4e:	4640      	mov	r0, r8
 8004a50:	f7ff fc7c 	bl	800434c <_free_r>
 8004a54:	463c      	mov	r4, r7
 8004a56:	e7e0      	b.n	8004a1a <_realloc_r+0x1e>

08004a58 <_malloc_usable_size_r>:
 8004a58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a5c:	1f18      	subs	r0, r3, #4
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	bfbc      	itt	lt
 8004a62:	580b      	ldrlt	r3, [r1, r0]
 8004a64:	18c0      	addlt	r0, r0, r3
 8004a66:	4770      	bx	lr

08004a68 <_init>:
 8004a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a6a:	bf00      	nop
 8004a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a6e:	bc08      	pop	{r3}
 8004a70:	469e      	mov	lr, r3
 8004a72:	4770      	bx	lr

08004a74 <_fini>:
 8004a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a76:	bf00      	nop
 8004a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a7a:	bc08      	pop	{r3}
 8004a7c:	469e      	mov	lr, r3
 8004a7e:	4770      	bx	lr
