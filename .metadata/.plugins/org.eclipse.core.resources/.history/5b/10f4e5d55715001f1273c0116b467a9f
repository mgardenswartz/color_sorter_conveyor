/*
 * RCChannel.h
 *
 *  Created on: May 15, 2024
 *      Author: Max
 */

#ifndef SRC_RCCHANNEL_H_
#define SRC_RCCHANNEL_H_

#include "stm32f4xx_hal.h"

class RCChannel {
public:
    // Public variables
    int32_t rescale_reverse_magnitude;
    int32_t rescale_forward_magnitude;
    int32_t first_value = 0;
    int32_t second_value = 0;
    int32_t difference = 0;
    int32_t us_width = 0;
    int32_t value = 0;

    /**
     * @brief Constructor for RCChannel class.
     * @param timer_handle Pointer to the timer handle.
     * @param timer_channel Timer channel.
     * @param RC_signal_period_us RC signal period in microseconds.
     * @param CPU_clock_speed_MHz CPU clock speed in MHz.
     * @param full_reverse_us_width Full reverse width in microseconds.
     * @param neutral_us_width Neutral width in microseconds.
     * @param full_forward_us_width Full forward width in microseconds.
     * @param rescale_forward_magnitude Rescale forward magnitude (default: 100).
     * @param rescale_reverse_magnitude Rescale reverse magnitude (default: 100).
     */
    RCChannel(
        TIM_HandleTypeDef* timer_handle,
        uint32_t timer_channel,
        int32_t RC_signal_period_us,
        uint32_t CPU_clock_speed_MHz,
        int32_t full_reverse_us_width,
        int32_t neutral_us_width,
        int32_t full_forward_us_width,
        int32_t rescale_forward_magnitude = 100,
        int32_t rescale_reverse_magnitude = 100
    );

    /**
     * @brief Destructor for RCChannel class.
     */
    virtual ~RCChannel();

    /**
     * @brief Capture callback for the timer input capture.
     */
    void TIM_IC_CaptureCallback();

private:
    // Instantiation arguments
    TIM_HandleTypeDef* timer_handle;
    uint32_t timer_channel;
    int32_t RC_signal_period_us;
    uint32_t CPU_clock_speed_MHz;
    int32_t full_reverse_us_width;
    int32_t neutral_us_width;
    int32_t full_forward_us_width;

    // Needed between methods
    uint32_t minuend;
    float mFactor;
    bool first_capture = true;
    int32_t reverse_range;
    int32_t forward_range;
};

#endif /* SRC_RCCHANNEL_H_ */

#endif /* SRC_RCCHANNEL_H_ */
