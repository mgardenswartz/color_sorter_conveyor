
test-18.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005310  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080054b0  080054b0  000064b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005590  08005590  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005590  08005590  00006590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005598  08005598  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005598  08005598  00006598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800559c  0800559c  0000659c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080055a0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  2000005c  080055fc  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  080055fc  00007370  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed12  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002596  00000000  00000000  00015d9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  00018338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a5e  00000000  00000000  00019090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019886  00000000  00000000  00019aee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f650  00000000  00000000  00033374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090d58  00000000  00000000  000429c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d371c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ed0  00000000  00000000  000d3760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  000d7630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005498 	.word	0x08005498

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08005498 	.word	0x08005498

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb>:
 * @param neutral_us_width Width of the neutral signal in microseconds.
 * @param full_forward_us_width Width of the full forward signal in microseconds.
 * @param rescale_forward_magnitude Maximum value for rescaling the forward signal. Overridden if fed into RemoteControlControl.
 * @param rescale_reverse_magnitude Minimum value for rescaling the reverse signal. Overridden if fed into RemoteControlControl.
 */
RCChannel::RCChannel(
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	4613      	mov	r3, r2
 800057e:	80fb      	strh	r3, [r7, #6]
	full_reverse_us_width(full_reverse_us_width),
	neutral_us_width(neutral_us_width),
	full_forward_us_width(full_forward_us_width),
	rescale_forward_magnitude(rescale_forward_magnitude),
	rescale_reverse_magnitude(rescale_reverse_magnitude),
	saturate(saturate)
 8000580:	4a3c      	ldr	r2, [pc, #240]	@ (8000674 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0x104>)
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	2200      	movs	r2, #0
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	2200      	movs	r2, #0
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	2200      	movs	r2, #0
 800059c:	611a      	str	r2, [r3, #16]
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	2200      	movs	r2, #0
 80005a2:	615a      	str	r2, [r3, #20]
	pin_group(pin_group),
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	68ba      	ldr	r2, [r7, #8]
 80005a8:	619a      	str	r2, [r3, #24]
	pin(pin),
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	88fa      	ldrh	r2, [r7, #6]
 80005ae:	839a      	strh	r2, [r3, #28]
	timer_handle(timer_handle),
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	683a      	ldr	r2, [r7, #0]
 80005b4:	621a      	str	r2, [r3, #32]
	timer_channel(timer_channel),
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	6a3a      	ldr	r2, [r7, #32]
 80005ba:	625a      	str	r2, [r3, #36]	@ 0x24
	RC_signal_period_us(RC_signal_period_us),
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80005c0:	629a      	str	r2, [r3, #40]	@ 0x28
	CPU_clock_speed_MHz(CPU_clock_speed_MHz),
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80005c6:	62da      	str	r2, [r3, #44]	@ 0x2c
	full_reverse_us_width(full_reverse_us_width),
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80005cc:	631a      	str	r2, [r3, #48]	@ 0x30
	neutral_us_width(neutral_us_width),
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80005d2:	635a      	str	r2, [r3, #52]	@ 0x34
	full_forward_us_width(full_forward_us_width),
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80005d8:	639a      	str	r2, [r3, #56]	@ 0x38
	rescale_forward_magnitude(rescale_forward_magnitude),
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80005de:	63da      	str	r2, [r3, #60]	@ 0x3c
	rescale_reverse_magnitude(rescale_reverse_magnitude),
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80005e4:	641a      	str	r2, [r3, #64]	@ 0x40
	saturate(saturate)
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 80005ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	2201      	movs	r2, #1
 80005f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
{
	// Critical. Starts the first interrupt.
	HAL_TIM_IC_Start_IT(timer_handle, timer_channel);
 80005f8:	6a39      	ldr	r1, [r7, #32]
 80005fa:	6838      	ldr	r0, [r7, #0]
 80005fc:	f002 fb06 	bl	8002c0c <HAL_TIM_IC_Start_IT>

	// Set minuend depending on whether it's a 16-bit or 32-bit timer.
	// This is specific to the STM32F411CUE6!!
	if (((timer_handle->Instance) == TIM2) or ((timer_handle->Instance) == TIM5))
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000608:	d004      	beq.n	8000614 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0xa4>
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a1a      	ldr	r2, [pc, #104]	@ (8000678 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0x108>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d104      	bne.n	800061e <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0xae>
	{
		minuend = 0xffffffff;
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	f04f 32ff 	mov.w	r2, #4294967295
 800061a:	649a      	str	r2, [r3, #72]	@ 0x48
 800061c:	e003      	b.n	8000626 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0xb6>
	}
	else
	{
		minuend = 0xffff;
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000624:	649a      	str	r2, [r3, #72]	@ 0x48
	}

	// For later scaling
	uint32_t prescalar = timer_handle->Instance->PSC + 1;
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800062c:	3301      	adds	r3, #1
 800062e:	617b      	str	r3, [r7, #20]
	float refClock = CPU_clock_speed_MHz/prescalar;
 8000630:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	fbb2 f3f3 	udiv	r3, r2, r3
 8000638:	ee07 3a90 	vmov	s15, r3
 800063c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000640:	edc7 7a04 	vstr	s15, [r7, #16]
	mFactor = 1/refClock;
 8000644:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000648:	ed97 7a04 	vldr	s14, [r7, #16]
 800064c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

	// Needed later
	forward_range = full_forward_us_width - neutral_us_width;
 8000656:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800065a:	1ad2      	subs	r2, r2, r3
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	659a      	str	r2, [r3, #88]	@ 0x58
	reverse_range = neutral_us_width - full_reverse_us_width;
 8000660:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000664:	1ad2      	subs	r2, r2, r3
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	655a      	str	r2, [r3, #84]	@ 0x54
}
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	4618      	mov	r0, r3
 800066e:	3718      	adds	r7, #24
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	0800551c 	.word	0x0800551c
 8000678:	40000c00 	.word	0x40000c00

0800067c <_ZN9RCChannel8callbackEv>:
 * 
 * @note This function assumes that the timer handle and channel have been properly initialized.
 * Please set the associated timer channel to input capture mode, direct. 
 * Leave the auto-reload value as large as possible.
 */
void RCChannel::callback(){
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	// Was it a rising edge or a falling edge?
	GPIO_PinState pinState = HAL_GPIO_ReadPin(pin_group, pin);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	699a      	ldr	r2, [r3, #24]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	8b9b      	ldrh	r3, [r3, #28]
 800068c:	4619      	mov	r1, r3
 800068e:	4610      	mov	r0, r2
 8000690:	f001 fbea 	bl	8001e68 <HAL_GPIO_ReadPin>
 8000694:	4603      	mov	r3, r0
 8000696:	73fb      	strb	r3, [r7, #15]

	if(pinState == GPIO_PIN_SET) // Rising edge
 8000698:	7bfb      	ldrb	r3, [r7, #15]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d10c      	bne.n	80006b8 <_ZN9RCChannel8callbackEv+0x3c>
		{
			// Read
			first_value = HAL_TIM_ReadCapturedValue(timer_handle, timer_channel);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6a1a      	ldr	r2, [r3, #32]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006a6:	4619      	mov	r1, r3
 80006a8:	4610      	mov	r0, r2
 80006aa:	f003 f8c1 	bl	8003830 <HAL_TIM_ReadCapturedValue>
 80006ae:	4603      	mov	r3, r0
 80006b0:	461a      	mov	r2, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	605a      	str	r2, [r3, #4]
		}

 	// Finally
 	first_capture = true;
 	}
}
 80006b6:	e07a      	b.n	80007ae <_ZN9RCChannel8callbackEv+0x132>
 		second_value = HAL_TIM_ReadCapturedValue(timer_handle, timer_channel);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	6a1a      	ldr	r2, [r3, #32]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006c0:	4619      	mov	r1, r3
 80006c2:	4610      	mov	r0, r2
 80006c4:	f003 f8b4 	bl	8003830 <HAL_TIM_ReadCapturedValue>
 80006c8:	4603      	mov	r3, r0
 80006ca:	461a      	mov	r2, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 		if(first_value > second_value)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	685a      	ldr	r2, [r3, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	689b      	ldr	r3, [r3, #8]
 80006d8:	429a      	cmp	r2, r3
 80006da:	dd0c      	ble.n	80006f6 <_ZN9RCChannel8callbackEv+0x7a>
 			difference = minuend - first_value + second_value + 1;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	6852      	ldr	r2, [r2, #4]
 80006e4:	1a9b      	subs	r3, r3, r2
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	6892      	ldr	r2, [r2, #8]
 80006ea:	4413      	add	r3, r2
 80006ec:	3301      	adds	r3, #1
 80006ee:	461a      	mov	r2, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	e006      	b.n	8000704 <_ZN9RCChannel8callbackEv+0x88>
 			difference = second_value - first_value;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	689a      	ldr	r2, [r3, #8]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	685b      	ldr	r3, [r3, #4]
 80006fe:	1ad2      	subs	r2, r2, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	60da      	str	r2, [r3, #12]
 		us_width = difference;//*mFactor;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	68da      	ldr	r2, [r3, #12]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	611a      	str	r2, [r3, #16]
		int32_t centered_value = us_width - neutral_us_width;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	691a      	ldr	r2, [r3, #16]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000714:	1ad3      	subs	r3, r2, r3
 8000716:	60bb      	str	r3, [r7, #8]
 		if(centered_value >= 0)
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	2b00      	cmp	r3, #0
 800071c:	db23      	blt.n	8000766 <_ZN9RCChannel8callbackEv+0xea>
 			value = centered_value*rescale_forward_magnitude/forward_range;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000722:	68ba      	ldr	r2, [r7, #8]
 8000724:	fb03 f202 	mul.w	r2, r3, r2
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800072c:	fb92 f2f3 	sdiv	r2, r2, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	615a      	str	r2, [r3, #20]
			if(value>rescale_forward_magnitude && saturate)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	695a      	ldr	r2, [r3, #20]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800073c:	429a      	cmp	r2, r3
 800073e:	dd0d      	ble.n	800075c <_ZN9RCChannel8callbackEv+0xe0>
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000746:	2b00      	cmp	r3, #0
 8000748:	d008      	beq.n	800075c <_ZN9RCChannel8callbackEv+0xe0>
				value = rescale_forward_magnitude;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	615a      	str	r2, [r3, #20]
	 			saturate_flag = true;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2201      	movs	r2, #1
 8000756:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800075a:	e024      	b.n	80007a6 <_ZN9RCChannel8callbackEv+0x12a>
	 			saturate_flag = false;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2200      	movs	r2, #0
 8000760:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000764:	e01f      	b.n	80007a6 <_ZN9RCChannel8callbackEv+0x12a>
			value =  centered_value*rescale_reverse_magnitude/reverse_range;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	fb03 f202 	mul.w	r2, r3, r2
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000774:	fb92 f2f3 	sdiv	r2, r2, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	615a      	str	r2, [r3, #20]
	 		if(value<-rescale_reverse_magnitude)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	695a      	ldr	r2, [r3, #20]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000784:	425b      	negs	r3, r3
 8000786:	429a      	cmp	r2, r3
 8000788:	da09      	bge.n	800079e <_ZN9RCChannel8callbackEv+0x122>
	 			value = -rescale_reverse_magnitude;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800078e:	425a      	negs	r2, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	615a      	str	r2, [r3, #20]
	 			saturate_flag = true;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2201      	movs	r2, #1
 8000798:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800079c:	e003      	b.n	80007a6 <_ZN9RCChannel8callbackEv+0x12a>
	 			saturate_flag = false;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2200      	movs	r2, #0
 80007a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 	first_capture = true;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2201      	movs	r2, #1
 80007aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 80007ae:	bf00      	nop
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
	...

080007b8 <_ZN9RCChannelD1Ev>:
/**
 * @brief Destructor for the RCChannel class.
 * 
 * This destructor stops the interrupts for the RCChannel object.
 */
RCChannel::~RCChannel() {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	4a07      	ldr	r2, [pc, #28]	@ (80007e0 <_ZN9RCChannelD1Ev+0x28>)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	601a      	str	r2, [r3, #0]
	// Stop interrupts
	HAL_TIM_IC_Stop_IT(timer_handle, timer_channel);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	6a1a      	ldr	r2, [r3, #32]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007ce:	4619      	mov	r1, r3
 80007d0:	4610      	mov	r0, r2
 80007d2:	f002 fb35 	bl	8002e40 <HAL_TIM_IC_Stop_IT>
}
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4618      	mov	r0, r3
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	0800551c 	.word	0x0800551c

080007e4 <_ZN9RCChannelD0Ev>:
RCChannel::~RCChannel() {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
}
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f7ff ffe3 	bl	80007b8 <_ZN9RCChannelD1Ev>
 80007f2:	215c      	movs	r1, #92	@ 0x5c
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f004 f901 	bl	80049fc <_ZdlPvj>
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4618      	mov	r0, r3
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <_ZN20RemoteControlControlC1EP9RCChannelP15TB6612FNG_Motor>:
/**
 * @brief Constructs a RemoteControlControl object with the given remote control channel and motor driver.
 * @param rc_channel Pointer to the RCChannel object.
 * @param motor Pointer to a TB6612FNG_Motor object.
 */
RemoteControlControl::RemoteControlControl(RCChannel* rc_channel, TB6612FNG_Motor* motor)
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]
	: rc_channel(rc_channel), motor(motor)
 8000810:	4a10      	ldr	r2, [pc, #64]	@ (8000854 <_ZN20RemoteControlControlC1EP9RCChannelP15TB6612FNG_Motor+0x50>)
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	68ba      	ldr	r2, [r7, #8]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	2264      	movs	r2, #100	@ 0x64
 8000826:	819a      	strh	r2, [r3, #12]
{
	// Reassign the magnitudes for rescaling to prevent rounding error.
	new_maximum_value = motor->auto_reload_value; // Maybe pTimer->Instance.PSC
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	819a      	strh	r2, [r3, #12]
	rc_channel->rescale_forward_magnitude = new_maximum_value;
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	899b      	ldrh	r3, [r3, #12]
 8000834:	461a      	mov	r2, r3
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	63da      	str	r2, [r3, #60]	@ 0x3c
	rc_channel->rescale_reverse_magnitude = new_maximum_value;
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	899b      	ldrh	r3, [r3, #12]
 800083e:	461a      	mov	r2, r3
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	4618      	mov	r0, r3
 8000848:	3714      	adds	r7, #20
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	0800552c 	.word	0x0800552c

08000858 <_ZN20RemoteControlControl12update_motorEv>:
/**
 * @brief Updates a TB6612FNG_Motor object based on the remote control channel value.
 * Run this function in your HAL_TIM_IC_CaptureCallback() function to update the motor as often as your RC sends new values.
 */
void RemoteControlControl::update_motor()
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	// Read from the remote control channel
	int32_t value = rc_channel->value;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	695b      	ldr	r3, [r3, #20]
 8000866:	60fb      	str	r3, [r7, #12]

	// Update the motor
	motor->set_duty(value, new_maximum_value);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6898      	ldr	r0, [r3, #8]
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	b219      	sxth	r1, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	899b      	ldrh	r3, [r3, #12]
 8000874:	b21b      	sxth	r3, r3
 8000876:	461a      	mov	r2, r3
 8000878:	f000 f8ba 	bl	80009f0 <_ZN15TB6612FNG_Motor8set_dutyEss>
}
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <_ZN20RemoteControlControlD1Ev>:

/**
 * @brief Destructs the RemoteControlControl object and releases any dynamically allocated resources.
 */
RemoteControlControl::~RemoteControlControl()
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	4a13      	ldr	r2, [pc, #76]	@ (80008dc <_ZN20RemoteControlControlD1Ev+0x58>)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	601a      	str	r2, [r3, #0]
{
	// Deallocate memory for rc_channel if it was dynamically allocated
	if (rc_channel != nullptr)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d00b      	beq.n	80008b2 <_ZN20RemoteControlControlD1Ev+0x2e>
	{
		delete rc_channel;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d004      	beq.n	80008ac <_ZN20RemoteControlControlD1Ev+0x28>
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	3204      	adds	r2, #4
 80008a6:	6812      	ldr	r2, [r2, #0]
 80008a8:	4618      	mov	r0, r3
 80008aa:	4790      	blx	r2
		rc_channel = nullptr; // Optional: Set to nullptr to avoid dangling pointers
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2200      	movs	r2, #0
 80008b0:	605a      	str	r2, [r3, #4]
	}

	// Deallocate memory for motor if it was dynamically allocated
	if (motor != nullptr)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	689b      	ldr	r3, [r3, #8]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d00b      	beq.n	80008d2 <_ZN20RemoteControlControlD1Ev+0x4e>
	{
		delete motor;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	689b      	ldr	r3, [r3, #8]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d004      	beq.n	80008cc <_ZN20RemoteControlControlD1Ev+0x48>
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	3204      	adds	r2, #4
 80008c6:	6812      	ldr	r2, [r2, #0]
 80008c8:	4618      	mov	r0, r3
 80008ca:	4790      	blx	r2
		motor = nullptr; // Optional: Set to nullptr to avoid dangling pointers
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
	}
}
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4618      	mov	r0, r3
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	0800552c 	.word	0x0800552c

080008e0 <_ZN20RemoteControlControlD0Ev>:
RemoteControlControl::~RemoteControlControl()
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
}
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f7ff ffcb 	bl	8000884 <_ZN20RemoteControlControlD1Ev>
 80008ee:	2110      	movs	r1, #16
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f004 f883 	bl	80049fc <_ZdlPvj>
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4618      	mov	r0, r3
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm>:
 * @param timer_channel The channel number to be used with the timer (like TIM_CHANNEL_1).
 * @param CPU_clock_speed_MHz The CPU clock speed in MHz (like 96).
 * @param PWM_frequency_Hz The PWM frequency in Hz (20,000 to 100,000 allowed).
 */

TB6612FNG_Motor::TB6612FNG_Motor(
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	4613      	mov	r3, r2
 800090e:	80fb      	strh	r3, [r7, #6]

	: IN1_pin_group(IN1_pin_group), IN1_pin(IN1_pin),
	  IN2_pin_group(IN2_pin_group), IN2_pin(IN2_pin),
	  pTimer(pTimer), timer_channel(timer_channel),
	  CPU_clock_speed_MHz(CPU_clock_speed_MHz),
	  PWM_frequency_Hz(PWM_frequency_Hz)
 8000910:	4a23      	ldr	r2, [pc, #140]	@ (80009a0 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa0>)
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	601a      	str	r2, [r3, #0]
	: IN1_pin_group(IN1_pin_group), IN1_pin(IN1_pin),
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	68ba      	ldr	r2, [r7, #8]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	88fa      	ldrh	r2, [r7, #6]
 8000920:	811a      	strh	r2, [r3, #8]
	  IN2_pin_group(IN2_pin_group), IN2_pin(IN2_pin),
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	683a      	ldr	r2, [r7, #0]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	8b3a      	ldrh	r2, [r7, #24]
 800092c:	821a      	strh	r2, [r3, #16]
	  pTimer(pTimer), timer_channel(timer_channel),
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	69fa      	ldr	r2, [r7, #28]
 8000932:	615a      	str	r2, [r3, #20]
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	6a3a      	ldr	r2, [r7, #32]
 8000938:	619a      	str	r2, [r3, #24]
	  CPU_clock_speed_MHz(CPU_clock_speed_MHz),
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800093e:	61da      	str	r2, [r3, #28]
	  PWM_frequency_Hz(PWM_frequency_Hz)
 8000940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000942:	b29a      	uxth	r2, r3
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	841a      	strh	r2, [r3, #32]
{
	// Make sure the motor is off to start
	stop();
 8000948:	68f8      	ldr	r0, [r7, #12]
 800094a:	f000 f8d0 	bl	8000aee <_ZN15TB6612FNG_Motor4stopEv>

	// Make sure the PWM frequency is within bounds
	if(PWM_frequency_Hz < 20000)
 800094e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000950:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000954:	4293      	cmp	r3, r2
 8000956:	d803      	bhi.n	8000960 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0x60>
	{
		// Too low. Human can hear this.
		PWM_frequency_Hz = 20000;
 8000958:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800095c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800095e:	e005      	b.n	800096c <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0x6c>
	}
	else if(PWM_frequency_Hz > 100000)
 8000960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000962:	4a10      	ldr	r2, [pc, #64]	@ (80009a4 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa4>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d901      	bls.n	800096c <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0x6c>
	{
		// Very high. May interfere with other tasks.
		PWM_frequency_Hz = 100000;
 8000968:	4b0e      	ldr	r3, [pc, #56]	@ (80009a4 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa4>)
 800096a:	62bb      	str	r3, [r7, #40]	@ 0x28
	}

	// Set the auto-reload value based on the CPU clock speed and the desired PWM frequency
	auto_reload_value =( CPU_clock_speed_MHz * 1000000 / PWM_frequency_Hz ) - 1;
 800096c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800096e:	4a0e      	ldr	r2, [pc, #56]	@ (80009a8 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa8>)
 8000970:	fb03 f202 	mul.w	r2, r3, r2
 8000974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000976:	fbb2 f3f3 	udiv	r3, r2, r3
 800097a:	b29b      	uxth	r3, r3
 800097c:	3b01      	subs	r3, #1
 800097e:	b29a      	uxth	r2, r3
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	845a      	strh	r2, [r3, #34]	@ 0x22
	pTimer->Init.AutoReloadPreload = auto_reload_value;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000988:	461a      	mov	r2, r3
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	619a      	str	r2, [r3, #24]

	// Start the PWM generation
	start();
 800098e:	68f8      	ldr	r0, [r7, #12]
 8000990:	f000 f89d 	bl	8000ace <_ZN15TB6612FNG_Motor5startEv>
}
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	4618      	mov	r0, r3
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	0800553c 	.word	0x0800553c
 80009a4:	000186a0 	.word	0x000186a0
 80009a8:	000f4240 	.word	0x000f4240

080009ac <_ZN15TB6612FNG_MotorD1Ev>:

/**
 * @brief Destructor for the TB6612FNG_Motor class.
 */
TB6612FNG_Motor::~TB6612FNG_Motor()
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	4a05      	ldr	r2, [pc, #20]	@ (80009cc <_ZN15TB6612FNG_MotorD1Ev+0x20>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	601a      	str	r2, [r3, #0]
{
	stop();
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f000 f897 	bl	8000aee <_ZN15TB6612FNG_Motor4stopEv>
}
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4618      	mov	r0, r3
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	0800553c 	.word	0x0800553c

080009d0 <_ZN15TB6612FNG_MotorD0Ev>:
TB6612FNG_Motor::~TB6612FNG_Motor()
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
}
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f7ff ffe7 	bl	80009ac <_ZN15TB6612FNG_MotorD1Ev>
 80009de:	2124      	movs	r1, #36	@ 0x24
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f004 f80b 	bl	80049fc <_ZdlPvj>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4618      	mov	r0, r3
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <_ZN15TB6612FNG_Motor8set_dutyEss>:
/**
 * @brief Sets the duty cycle of the motor.
 * @param speed The duty cycle value, ranging from -100 to 100 by default.
 */
void TB6612FNG_Motor::set_duty(int16_t duty, int16_t maximum_value)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	460b      	mov	r3, r1
 80009fa:	807b      	strh	r3, [r7, #2]
 80009fc:	4613      	mov	r3, r2
 80009fe:	803b      	strh	r3, [r7, #0]
	// Raise the appropriate pins
	if(duty >= 0)
 8000a00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	db10      	blt.n	8000a2a <_ZN15TB6612FNG_Motor8set_dutyEss+0x3a>
	{
		HAL_GPIO_WritePin(IN1_pin_group, IN1_pin, GPIO_PIN_SET);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6858      	ldr	r0, [r3, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	891b      	ldrh	r3, [r3, #8]
 8000a10:	2201      	movs	r2, #1
 8000a12:	4619      	mov	r1, r3
 8000a14:	f001 fa40 	bl	8001e98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_pin_group, IN2_pin, GPIO_PIN_RESET);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	68d8      	ldr	r0, [r3, #12]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	8a1b      	ldrh	r3, [r3, #16]
 8000a20:	2200      	movs	r2, #0
 8000a22:	4619      	mov	r1, r3
 8000a24:	f001 fa38 	bl	8001e98 <HAL_GPIO_WritePin>
 8000a28:	e00f      	b.n	8000a4a <_ZN15TB6612FNG_Motor8set_dutyEss+0x5a>
	}
	else
	{
		HAL_GPIO_WritePin(IN1_pin_group, IN1_pin, GPIO_PIN_RESET);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6858      	ldr	r0, [r3, #4]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	891b      	ldrh	r3, [r3, #8]
 8000a32:	2200      	movs	r2, #0
 8000a34:	4619      	mov	r1, r3
 8000a36:	f001 fa2f 	bl	8001e98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_pin_group, IN2_pin, GPIO_PIN_SET);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	68d8      	ldr	r0, [r3, #12]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	8a1b      	ldrh	r3, [r3, #16]
 8000a42:	2201      	movs	r2, #1
 8000a44:	4619      	mov	r1, r3
 8000a46:	f001 fa27 	bl	8001e98 <HAL_GPIO_WritePin>
	}

	uint16_t duty_magnitude;
	if(duty<0)
 8000a4a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	da03      	bge.n	8000a5a <_ZN15TB6612FNG_Motor8set_dutyEss+0x6a>
	{
		duty_magnitude = duty*-1;
 8000a52:	887b      	ldrh	r3, [r7, #2]
 8000a54:	425b      	negs	r3, r3
 8000a56:	81fb      	strh	r3, [r7, #14]
 8000a58:	e001      	b.n	8000a5e <_ZN15TB6612FNG_Motor8set_dutyEss+0x6e>
	}
	else
	{
		duty_magnitude = duty;
 8000a5a:	887b      	ldrh	r3, [r7, #2]
 8000a5c:	81fb      	strh	r3, [r7, #14]
	}

	// Check if duty cycle is within bounds
	if(duty_magnitude > maximum_value)
 8000a5e:	89fa      	ldrh	r2, [r7, #14]
 8000a60:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	dd01      	ble.n	8000a6c <_ZN15TB6612FNG_Motor8set_dutyEss+0x7c>
	{
		duty = maximum_value;
 8000a68:	883b      	ldrh	r3, [r7, #0]
 8000a6a:	807b      	strh	r3, [r7, #2]
	}


	// Set the compare value
	uint16_t compare_value = duty_magnitude * auto_reload_value / maximum_value;
 8000a6c:	89fb      	ldrh	r3, [r7, #14]
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8000a72:	fb03 f202 	mul.w	r2, r3, r2
 8000a76:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000a7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a7e:	81bb      	strh	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(pTimer, timer_channel, compare_value);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d105      	bne.n	8000a94 <_ZN15TB6612FNG_Motor8set_dutyEss+0xa4>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	695b      	ldr	r3, [r3, #20]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	89ba      	ldrh	r2, [r7, #12]
 8000a90:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000a92:	e018      	b.n	8000ac6 <_ZN15TB6612FNG_Motor8set_dutyEss+0xd6>
	__HAL_TIM_SET_COMPARE(pTimer, timer_channel, compare_value);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	2b04      	cmp	r3, #4
 8000a9a:	d105      	bne.n	8000aa8 <_ZN15TB6612FNG_Motor8set_dutyEss+0xb8>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	695b      	ldr	r3, [r3, #20]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	89ba      	ldrh	r2, [r7, #12]
 8000aa4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000aa6:	e00e      	b.n	8000ac6 <_ZN15TB6612FNG_Motor8set_dutyEss+0xd6>
	__HAL_TIM_SET_COMPARE(pTimer, timer_channel, compare_value);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	2b08      	cmp	r3, #8
 8000aae:	d105      	bne.n	8000abc <_ZN15TB6612FNG_Motor8set_dutyEss+0xcc>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	695b      	ldr	r3, [r3, #20]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	89ba      	ldrh	r2, [r7, #12]
 8000ab8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000aba:	e004      	b.n	8000ac6 <_ZN15TB6612FNG_Motor8set_dutyEss+0xd6>
	__HAL_TIM_SET_COMPARE(pTimer, timer_channel, compare_value);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	695b      	ldr	r3, [r3, #20]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	89ba      	ldrh	r2, [r7, #12]
 8000ac4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000ac6:	bf00      	nop
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <_ZN15TB6612FNG_Motor5startEv>:

/**
 * @brief starts the motor by starting PWM generation.
 */
void TB6612FNG_Motor::start()
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b082      	sub	sp, #8
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(pTimer, timer_channel);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	695a      	ldr	r2, [r3, #20]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	699b      	ldr	r3, [r3, #24]
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4610      	mov	r0, r2
 8000ae2:	f001 ff25 	bl	8002930 <HAL_TIM_PWM_Start>
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <_ZN15TB6612FNG_Motor4stopEv>:

/**
 * @brief stops the motor by stopping PWM generation.
 */
void TB6612FNG_Motor::stop()
{	
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(IN1_pin_group, IN1_pin, GPIO_PIN_RESET);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6858      	ldr	r0, [r3, #4]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	891b      	ldrh	r3, [r3, #8]
 8000afe:	2200      	movs	r2, #0
 8000b00:	4619      	mov	r1, r3
 8000b02:	f001 f9c9 	bl	8001e98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_pin_group, IN2_pin, GPIO_PIN_RESET);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	68d8      	ldr	r0, [r3, #12]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	8a1b      	ldrh	r3, [r3, #16]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	4619      	mov	r1, r3
 8000b12:	f001 f9c1 	bl	8001e98 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(pTimer, timer_channel);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	695a      	ldr	r2, [r3, #20]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4610      	mov	r0, r2
 8000b22:	f001 ffb5 	bl	8002a90 <HAL_TIM_PWM_Stop>
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <HAL_GPIO_EXTI_Callback>:
RemoteControlControl* Steering;
int16_t encoder_delta;
uint16_t encoder_last_count;
int16_t encoder_position;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	80fb      	strh	r3, [r7, #6]
   // Your interrupt handling code here
	if(GPIO_PIN == GPIO_PIN_13)
 8000b3a:	88fb      	ldrh	r3, [r7, #6]
 8000b3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b40:	d10f      	bne.n	8000b62 <HAL_GPIO_EXTI_Callback+0x32>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8000b42:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b46:	4809      	ldr	r0, [pc, #36]	@ (8000b6c <HAL_GPIO_EXTI_Callback+0x3c>)
 8000b48:	f001 f9bf 	bl	8001eca <HAL_GPIO_TogglePin>
		sprintf(my_message, "Interrupt triggered.\r\n");
 8000b4c:	4908      	ldr	r1, [pc, #32]	@ (8000b70 <HAL_GPIO_EXTI_Callback+0x40>)
 8000b4e:	4809      	ldr	r0, [pc, #36]	@ (8000b74 <HAL_GPIO_EXTI_Callback+0x44>)
 8000b50:	f004 f86c 	bl	8004c2c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)my_message, MESSAGE_LENGTH, HAL_MAX_DELAY);
 8000b54:	f04f 33ff 	mov.w	r3, #4294967295
 8000b58:	2264      	movs	r2, #100	@ 0x64
 8000b5a:	4906      	ldr	r1, [pc, #24]	@ (8000b74 <HAL_GPIO_EXTI_Callback+0x44>)
 8000b5c:	4806      	ldr	r0, [pc, #24]	@ (8000b78 <HAL_GPIO_EXTI_Callback+0x48>)
 8000b5e:	f003 fb91 	bl	8004284 <HAL_UART_Transmit>
	}
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40020400 	.word	0x40020400
 8000b70:	080054b0 	.word	0x080054b0
 8000b74:	20000198 	.word	0x20000198
 8000b78:	20000150 	.word	0x20000150

08000b7c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
//	sprintf(my_message, "Timer input capture callback.\r\n");
//	HAL_UART_Transmit(&huart2, (uint8_t*)my_message, MESSAGE_LENGTH, HAL_MAX_DELAY);
	if (initialized) // Timers must be initalized before this code can run successfully.
 8000b84:	4b15      	ldr	r3, [pc, #84]	@ (8000bdc <HAL_TIM_IC_CaptureCallback+0x60>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d022      	beq.n	8000bd2 <HAL_TIM_IC_CaptureCallback+0x56>
		{
			if((htim->Instance = TIM1))
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4a14      	ldr	r2, [pc, #80]	@ (8000be0 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	bf14      	ite	ne
 8000b9a:	2301      	movne	r3, #1
 8000b9c:	2300      	moveq	r3, #0
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d016      	beq.n	8000bd2 <HAL_TIM_IC_CaptureCallback+0x56>
			{
				if ( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 )
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	7f1b      	ldrb	r3, [r3, #28]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d104      	bne.n	8000bb6 <HAL_TIM_IC_CaptureCallback+0x3a>
				{
					// Handle channel
					SteeringChannel->callback();
 8000bac:	4b0d      	ldr	r3, [pc, #52]	@ (8000be4 <HAL_TIM_IC_CaptureCallback+0x68>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fd63 	bl	800067c <_ZN9RCChannel8callbackEv>
//					SteeringChannel->value = -500;
//					SteeringChannel->us_width = 6969;
					//Steering->update_motor();
				}

				if ( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	7f1b      	ldrb	r3, [r3, #28]
 8000bba:	2b02      	cmp	r3, #2
 8000bbc:	d109      	bne.n	8000bd2 <HAL_TIM_IC_CaptureCallback+0x56>
				{
					// Handle channel
					ThrottleChannel->callback();
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000be8 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff fd5a 	bl	800067c <_ZN9RCChannel8callbackEv>
					Throttle->update_motor();
 8000bc8:	4b08      	ldr	r3, [pc, #32]	@ (8000bec <HAL_TIM_IC_CaptureCallback+0x70>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fe43 	bl	8000858 <_ZN20RemoteControlControl12update_motorEv>
				}
			}
		}
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000200 	.word	0x20000200
 8000be0:	40010000 	.word	0x40010000
 8000be4:	2000020c 	.word	0x2000020c
 8000be8:	20000208 	.word	0x20000208
 8000bec:	20000210 	.word	0x20000210

08000bf0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
	sprintf(my_message, "Timer interrupt triggered.\r\n");
 8000bf8:	4917      	ldr	r1, [pc, #92]	@ (8000c58 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000bfa:	4818      	ldr	r0, [pc, #96]	@ (8000c5c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000bfc:	f004 f816 	bl	8004c2c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)my_message, MESSAGE_LENGTH, HAL_MAX_DELAY);
 8000c00:	f04f 33ff 	mov.w	r3, #4294967295
 8000c04:	2264      	movs	r2, #100	@ 0x64
 8000c06:	4915      	ldr	r1, [pc, #84]	@ (8000c5c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000c08:	4815      	ldr	r0, [pc, #84]	@ (8000c60 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000c0a:	f003 fb3b 	bl	8004284 <HAL_UART_Transmit>
	if (htim->Instance == TIM5)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a14      	ldr	r2, [pc, #80]	@ (8000c64 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d11a      	bne.n	8000c4e <HAL_TIM_PeriodElapsedCallback+0x5e>
	{
		uint16_t encoder_count = TIM5->CNT;
 8000c18:	4b12      	ldr	r3, [pc, #72]	@ (8000c64 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c1c:	81fb      	strh	r3, [r7, #14]
		encoder_delta = (int16_t) (encoder_last_count-encoder_count);
 8000c1e:	4b12      	ldr	r3, [pc, #72]	@ (8000c68 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000c20:	881a      	ldrh	r2, [r3, #0]
 8000c22:	89fb      	ldrh	r3, [r7, #14]
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	b21a      	sxth	r2, r3
 8000c2a:	4b10      	ldr	r3, [pc, #64]	@ (8000c6c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000c2c:	801a      	strh	r2, [r3, #0]
		encoder_last_count = encoder_count;
 8000c2e:	4a0e      	ldr	r2, [pc, #56]	@ (8000c68 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000c30:	89fb      	ldrh	r3, [r7, #14]
 8000c32:	8013      	strh	r3, [r2, #0]
		encoder_position += encoder_delta;
 8000c34:	4b0e      	ldr	r3, [pc, #56]	@ (8000c70 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000c36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c3a:	b29a      	uxth	r2, r3
 8000c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c6c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000c3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	4413      	add	r3, r2
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	b21a      	sxth	r2, r3
 8000c4a:	4b09      	ldr	r3, [pc, #36]	@ (8000c70 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000c4c:	801a      	strh	r2, [r3, #0]

//		sprintf(my_message, "Encoder pos: %i.\r\n", position);
//		HAL_UART_Transmit(&huart2, (uint8_t*)my_message, MESSAGE_LENGTH, HAL_MAX_DELAY);
	}
}
 8000c4e:	bf00      	nop
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	080054c8 	.word	0x080054c8
 8000c5c:	20000198 	.word	0x20000198
 8000c60:	20000150 	.word	0x20000150
 8000c64:	40000c00 	.word	0x40000c00
 8000c68:	20000216 	.word	0x20000216
 8000c6c:	20000214 	.word	0x20000214
 8000c70:	20000218 	.word	0x20000218

08000c74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c74:	b590      	push	{r4, r7, lr}
 8000c76:	b08b      	sub	sp, #44	@ 0x2c
 8000c78:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c7a:	f000 fdc9 	bl	8001810 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c7e:	f000 f8cb 	bl	8000e18 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c82:	f000 faf1 	bl	8001268 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000c86:	f000 fac1 	bl	800120c <_ZL19MX_USART2_UART_Initv>
  MX_TIM2_Init();
 8000c8a:	f000 f9d3 	bl	8001034 <_ZL12MX_TIM2_Initv>
  MX_TIM5_Init();
 8000c8e:	f000 fa5f 	bl	8001150 <_ZL12MX_TIM5_Initv>
  MX_TIM1_Init();
 8000c92:	f000 f933 	bl	8000efc <_ZL12MX_TIM1_Initv>
  My_Motor = new TB6612FNG_Motor(
		  GPIOB, GPIO_PIN_14,
		  GPIOB, GPIO_PIN_15,
		  &htim2, TIM_CHANNEL_1,
		  CPU_CLOCK_MHZ,
		  MOTOR_PWM_HZ);
 8000c96:	2024      	movs	r0, #36	@ 0x24
 8000c98:	f003 feb2 	bl	8004a00 <_Znwj>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	461c      	mov	r4, r3
 8000ca0:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000ca4:	9304      	str	r3, [sp, #16]
 8000ca6:	2364      	movs	r3, #100	@ 0x64
 8000ca8:	9303      	str	r3, [sp, #12]
 8000caa:	2300      	movs	r3, #0
 8000cac:	9302      	str	r3, [sp, #8]
 8000cae:	4b4c      	ldr	r3, [pc, #304]	@ (8000de0 <main+0x16c>)
 8000cb0:	9301      	str	r3, [sp, #4]
 8000cb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000cb6:	9300      	str	r3, [sp, #0]
 8000cb8:	4b4a      	ldr	r3, [pc, #296]	@ (8000de4 <main+0x170>)
 8000cba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000cbe:	4949      	ldr	r1, [pc, #292]	@ (8000de4 <main+0x170>)
 8000cc0:	4620      	mov	r0, r4
 8000cc2:	f7ff fe1d 	bl	8000900 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm>
  My_Motor = new TB6612FNG_Motor(
 8000cc6:	4b48      	ldr	r3, [pc, #288]	@ (8000de8 <main+0x174>)
 8000cc8:	601c      	str	r4, [r3, #0]
  		  1520,      // Calibrated neutral
  		  2035,      // Calibrated full left
  		  100,       // New max positive
		  100,       // New max negative (magnitude)
		  true     // Saturate if signal is over full? True by default. False good for debugging.
		  );
 8000cca:	205c      	movs	r0, #92	@ 0x5c
 8000ccc:	f003 fe98 	bl	8004a00 <_Znwj>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	461c      	mov	r4, r3
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	9308      	str	r3, [sp, #32]
 8000cd8:	2364      	movs	r3, #100	@ 0x64
 8000cda:	9307      	str	r3, [sp, #28]
 8000cdc:	2364      	movs	r3, #100	@ 0x64
 8000cde:	9306      	str	r3, [sp, #24]
 8000ce0:	f240 73f3 	movw	r3, #2035	@ 0x7f3
 8000ce4:	9305      	str	r3, [sp, #20]
 8000ce6:	f44f 63be 	mov.w	r3, #1520	@ 0x5f0
 8000cea:	9304      	str	r3, [sp, #16]
 8000cec:	f240 33ea 	movw	r3, #1002	@ 0x3ea
 8000cf0:	9303      	str	r3, [sp, #12]
 8000cf2:	2364      	movs	r3, #100	@ 0x64
 8000cf4:	9302      	str	r3, [sp, #8]
 8000cf6:	f244 435c 	movw	r3, #17500	@ 0x445c
 8000cfa:	9301      	str	r3, [sp, #4]
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	9300      	str	r3, [sp, #0]
 8000d00:	4b3a      	ldr	r3, [pc, #232]	@ (8000dec <main+0x178>)
 8000d02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d06:	493a      	ldr	r1, [pc, #232]	@ (8000df0 <main+0x17c>)
 8000d08:	4620      	mov	r0, r4
 8000d0a:	f7ff fc31 	bl	8000570 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb>
  SteeringChannel = new RCChannel
 8000d0e:	4b39      	ldr	r3, [pc, #228]	@ (8000df4 <main+0x180>)
 8000d10:	601c      	str	r4, [r3, #0]
		  		  1533,  // Calibrated neutral
		  		  2017,  // Calibrated full speed
		  		  100,   // New max positive
				  100,    // New max negative (magnitude)
				  true  // Saturate if signal is over full? True by default. False good for debugging.
		  	  	  );
 8000d12:	205c      	movs	r0, #92	@ 0x5c
 8000d14:	f003 fe74 	bl	8004a00 <_Znwj>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	461c      	mov	r4, r3
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	9308      	str	r3, [sp, #32]
 8000d20:	2364      	movs	r3, #100	@ 0x64
 8000d22:	9307      	str	r3, [sp, #28]
 8000d24:	2364      	movs	r3, #100	@ 0x64
 8000d26:	9306      	str	r3, [sp, #24]
 8000d28:	f240 73e1 	movw	r3, #2017	@ 0x7e1
 8000d2c:	9305      	str	r3, [sp, #20]
 8000d2e:	f240 53fd 	movw	r3, #1533	@ 0x5fd
 8000d32:	9304      	str	r3, [sp, #16]
 8000d34:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8000d38:	9303      	str	r3, [sp, #12]
 8000d3a:	2364      	movs	r3, #100	@ 0x64
 8000d3c:	9302      	str	r3, [sp, #8]
 8000d3e:	f244 435c 	movw	r3, #17500	@ 0x445c
 8000d42:	9301      	str	r3, [sp, #4]
 8000d44:	2304      	movs	r3, #4
 8000d46:	9300      	str	r3, [sp, #0]
 8000d48:	4b28      	ldr	r3, [pc, #160]	@ (8000dec <main+0x178>)
 8000d4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d4e:	4928      	ldr	r1, [pc, #160]	@ (8000df0 <main+0x17c>)
 8000d50:	4620      	mov	r0, r4
 8000d52:	f7ff fc0d 	bl	8000570 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb>
  ThrottleChannel = new RCChannel
 8000d56:	4b28      	ldr	r3, [pc, #160]	@ (8000df8 <main+0x184>)
 8000d58:	601c      	str	r4, [r3, #0]

  Throttle = new RemoteControlControl
		  (
		  ThrottleChannel,
		  My_Motor
		  );
 8000d5a:	2010      	movs	r0, #16
 8000d5c:	f003 fe50 	bl	8004a00 <_Znwj>
 8000d60:	4603      	mov	r3, r0
 8000d62:	461c      	mov	r4, r3
 8000d64:	4b24      	ldr	r3, [pc, #144]	@ (8000df8 <main+0x184>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a1f      	ldr	r2, [pc, #124]	@ (8000de8 <main+0x174>)
 8000d6a:	6812      	ldr	r2, [r2, #0]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4620      	mov	r0, r4
 8000d70:	f7ff fd48 	bl	8000804 <_ZN20RemoteControlControlC1EP9RCChannelP15TB6612FNG_Motor>
  Throttle = new RemoteControlControl
 8000d74:	4b21      	ldr	r3, [pc, #132]	@ (8000dfc <main+0x188>)
 8000d76:	601c      	str	r4, [r3, #0]


  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8000d78:	213c      	movs	r1, #60	@ 0x3c
 8000d7a:	4821      	ldr	r0, [pc, #132]	@ (8000e00 <main+0x18c>)
 8000d7c:	f002 f9b4 	bl	80030e8 <HAL_TIM_Encoder_Start>
  initialized = true;
 8000d80:	4b20      	ldr	r3, [pc, #128]	@ (8000e04 <main+0x190>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_Delay(150);
 8000d86:	2096      	movs	r0, #150	@ 0x96
 8000d88:	f000 fdb4 	bl	80018f4 <HAL_Delay>
//	  string_length = snprintf(my_message, MESSAGE_LENGTH, "CH1: %*li%%, CH2: %*li%%.\r\n",
//	                             VALUE_WIDTH, (long signed int)SteeringChannel->us_width, //value,
//	                             VALUE_WIDTH, (long signed int)ThrottleChannel->us_width); //value);
	  string_length = snprintf(my_message, MESSAGE_LENGTH, "CH1: %*li%% (%*li), CH2: %*li%% (%*li).\r\n",
 8000d8c:	4b19      	ldr	r3, [pc, #100]	@ (8000df4 <main+0x180>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
							  	 VALUE_WIDTH, (long signed int)SteeringChannel->value,
 8000d90:	695b      	ldr	r3, [r3, #20]
	  string_length = snprintf(my_message, MESSAGE_LENGTH, "CH1: %*li%% (%*li), CH2: %*li%% (%*li).\r\n",
 8000d92:	4a18      	ldr	r2, [pc, #96]	@ (8000df4 <main+0x180>)
 8000d94:	6812      	ldr	r2, [r2, #0]
								 VALUE_WIDTH, (long signed int)SteeringChannel->us_width,
 8000d96:	6912      	ldr	r2, [r2, #16]
	  string_length = snprintf(my_message, MESSAGE_LENGTH, "CH1: %*li%% (%*li), CH2: %*li%% (%*li).\r\n",
 8000d98:	4917      	ldr	r1, [pc, #92]	@ (8000df8 <main+0x184>)
 8000d9a:	6809      	ldr	r1, [r1, #0]
	                             VALUE_WIDTH, (long signed int)ThrottleChannel->value,
 8000d9c:	6949      	ldr	r1, [r1, #20]
	  string_length = snprintf(my_message, MESSAGE_LENGTH, "CH1: %*li%% (%*li), CH2: %*li%% (%*li).\r\n",
 8000d9e:	4816      	ldr	r0, [pc, #88]	@ (8000df8 <main+0x184>)
 8000da0:	6800      	ldr	r0, [r0, #0]
								 VALUE_WIDTH, (long signed int)ThrottleChannel->us_width);
 8000da2:	6900      	ldr	r0, [r0, #16]
	  string_length = snprintf(my_message, MESSAGE_LENGTH, "CH1: %*li%% (%*li), CH2: %*li%% (%*li).\r\n",
 8000da4:	9006      	str	r0, [sp, #24]
 8000da6:	2005      	movs	r0, #5
 8000da8:	9005      	str	r0, [sp, #20]
 8000daa:	9104      	str	r1, [sp, #16]
 8000dac:	2105      	movs	r1, #5
 8000dae:	9103      	str	r1, [sp, #12]
 8000db0:	9202      	str	r2, [sp, #8]
 8000db2:	2205      	movs	r2, #5
 8000db4:	9201      	str	r2, [sp, #4]
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	2305      	movs	r3, #5
 8000dba:	4a13      	ldr	r2, [pc, #76]	@ (8000e08 <main+0x194>)
 8000dbc:	2164      	movs	r1, #100	@ 0x64
 8000dbe:	4813      	ldr	r0, [pc, #76]	@ (8000e0c <main+0x198>)
 8000dc0:	f003 ff00 	bl	8004bc4 <sniprintf>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	4a12      	ldr	r2, [pc, #72]	@ (8000e10 <main+0x19c>)
 8000dc8:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)my_message, string_length, HAL_MAX_DELAY);
 8000dca:	4b11      	ldr	r3, [pc, #68]	@ (8000e10 <main+0x19c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd4:	490d      	ldr	r1, [pc, #52]	@ (8000e0c <main+0x198>)
 8000dd6:	480f      	ldr	r0, [pc, #60]	@ (8000e14 <main+0x1a0>)
 8000dd8:	f003 fa54 	bl	8004284 <HAL_UART_Transmit>
	  HAL_Delay(150);
 8000ddc:	bf00      	nop
 8000dde:	e7d2      	b.n	8000d86 <main+0x112>
 8000de0:	200000c0 	.word	0x200000c0
 8000de4:	40020400 	.word	0x40020400
 8000de8:	20000204 	.word	0x20000204
 8000dec:	20000078 	.word	0x20000078
 8000df0:	40020000 	.word	0x40020000
 8000df4:	2000020c 	.word	0x2000020c
 8000df8:	20000208 	.word	0x20000208
 8000dfc:	20000210 	.word	0x20000210
 8000e00:	20000108 	.word	0x20000108
 8000e04:	20000200 	.word	0x20000200
 8000e08:	080054e8 	.word	0x080054e8
 8000e0c:	20000198 	.word	0x20000198
 8000e10:	200001fc 	.word	0x200001fc
 8000e14:	20000150 	.word	0x20000150

08000e18 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b094      	sub	sp, #80	@ 0x50
 8000e1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e1e:	f107 0320 	add.w	r3, r7, #32
 8000e22:	2230      	movs	r2, #48	@ 0x30
 8000e24:	2100      	movs	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f003 ff20 	bl	8004c6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e2c:	f107 030c 	add.w	r3, r7, #12
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	4b2c      	ldr	r3, [pc, #176]	@ (8000ef4 <_Z18SystemClock_Configv+0xdc>)
 8000e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e44:	4a2b      	ldr	r2, [pc, #172]	@ (8000ef4 <_Z18SystemClock_Configv+0xdc>)
 8000e46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e4c:	4b29      	ldr	r3, [pc, #164]	@ (8000ef4 <_Z18SystemClock_Configv+0xdc>)
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e58:	2300      	movs	r3, #0
 8000e5a:	607b      	str	r3, [r7, #4]
 8000e5c:	4b26      	ldr	r3, [pc, #152]	@ (8000ef8 <_Z18SystemClock_Configv+0xe0>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a25      	ldr	r2, [pc, #148]	@ (8000ef8 <_Z18SystemClock_Configv+0xe0>)
 8000e62:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e66:	6013      	str	r3, [r2, #0]
 8000e68:	4b23      	ldr	r3, [pc, #140]	@ (8000ef8 <_Z18SystemClock_Configv+0xe0>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e70:	607b      	str	r3, [r7, #4]
 8000e72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e74:	2302      	movs	r3, #2
 8000e76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e7c:	2310      	movs	r3, #16
 8000e7e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e80:	2302      	movs	r3, #2
 8000e82:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e84:	2300      	movs	r3, #0
 8000e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e88:	2308      	movs	r3, #8
 8000e8a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000e8c:	2364      	movs	r3, #100	@ 0x64
 8000e8e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e90:	2302      	movs	r3, #2
 8000e92:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e94:	2304      	movs	r3, #4
 8000e96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e98:	f107 0320 	add.w	r3, r7, #32
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f001 f847 	bl	8001f30 <HAL_RCC_OscConfig>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	bf14      	ite	ne
 8000ea8:	2301      	movne	r3, #1
 8000eaa:	2300      	moveq	r3, #0
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8000eb2:	f000 fa33 	bl	800131c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eb6:	230f      	movs	r3, #15
 8000eb8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ec2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ec6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	2103      	movs	r1, #3
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f001 faa4 	bl	8002420 <HAL_RCC_ClockConfig>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	bf14      	ite	ne
 8000ede:	2301      	movne	r3, #1
 8000ee0:	2300      	moveq	r3, #0
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8000ee8:	f000 fa18 	bl	800131c <Error_Handler>
  }
}
 8000eec:	bf00      	nop
 8000eee:	3750      	adds	r7, #80	@ 0x50
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40007000 	.word	0x40007000

08000efc <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	@ 0x28
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f02:	f107 0318 	add.w	r3, r7, #24
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f10:	f107 0310 	add.w	r3, r7, #16
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f26:	4b41      	ldr	r3, [pc, #260]	@ (800102c <_ZL12MX_TIM1_Initv+0x130>)
 8000f28:	4a41      	ldr	r2, [pc, #260]	@ (8001030 <_ZL12MX_TIM1_Initv+0x134>)
 8000f2a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = CPU_CLOCK_MHZ-1;
 8000f2c:	4b3f      	ldr	r3, [pc, #252]	@ (800102c <_ZL12MX_TIM1_Initv+0x130>)
 8000f2e:	2263      	movs	r2, #99	@ 0x63
 8000f30:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f32:	4b3e      	ldr	r3, [pc, #248]	@ (800102c <_ZL12MX_TIM1_Initv+0x130>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f38:	4b3c      	ldr	r3, [pc, #240]	@ (800102c <_ZL12MX_TIM1_Initv+0x130>)
 8000f3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f3e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f40:	4b3a      	ldr	r3, [pc, #232]	@ (800102c <_ZL12MX_TIM1_Initv+0x130>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f46:	4b39      	ldr	r3, [pc, #228]	@ (800102c <_ZL12MX_TIM1_Initv+0x130>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4c:	4b37      	ldr	r3, [pc, #220]	@ (800102c <_ZL12MX_TIM1_Initv+0x130>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f52:	4836      	ldr	r0, [pc, #216]	@ (800102c <_ZL12MX_TIM1_Initv+0x130>)
 8000f54:	f001 fc44 	bl	80027e0 <HAL_TIM_Base_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	bf14      	ite	ne
 8000f5e:	2301      	movne	r3, #1
 8000f60:	2300      	moveq	r3, #0
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <_ZL12MX_TIM1_Initv+0x70>
  {
    Error_Handler();
 8000f68:	f000 f9d8 	bl	800131c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f70:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f72:	f107 0318 	add.w	r3, r7, #24
 8000f76:	4619      	mov	r1, r3
 8000f78:	482c      	ldr	r0, [pc, #176]	@ (800102c <_ZL12MX_TIM1_Initv+0x130>)
 8000f7a:	f002 fb91 	bl	80036a0 <HAL_TIM_ConfigClockSource>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	bf14      	ite	ne
 8000f84:	2301      	movne	r3, #1
 8000f86:	2300      	moveq	r3, #0
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <_ZL12MX_TIM1_Initv+0x96>
  {
    Error_Handler();
 8000f8e:	f000 f9c5 	bl	800131c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000f92:	4826      	ldr	r0, [pc, #152]	@ (800102c <_ZL12MX_TIM1_Initv+0x130>)
 8000f94:	f001 fde0 	bl	8002b58 <HAL_TIM_IC_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	bf14      	ite	ne
 8000f9e:	2301      	movne	r3, #1
 8000fa0:	2300      	moveq	r3, #0
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <_ZL12MX_TIM1_Initv+0xb0>
  {
    Error_Handler();
 8000fa8:	f000 f9b8 	bl	800131c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fac:	2300      	movs	r3, #0
 8000fae:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fb4:	f107 0310 	add.w	r3, r7, #16
 8000fb8:	4619      	mov	r1, r3
 8000fba:	481c      	ldr	r0, [pc, #112]	@ (800102c <_ZL12MX_TIM1_Initv+0x130>)
 8000fbc:	f003 f890 	bl	80040e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	bf14      	ite	ne
 8000fc6:	2301      	movne	r3, #1
 8000fc8:	2300      	moveq	r3, #0
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <_ZL12MX_TIM1_Initv+0xd8>
  {
    Error_Handler();
 8000fd0:	f000 f9a4 	bl	800131c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000fd4:	230a      	movs	r3, #10
 8000fd6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4810      	ldr	r0, [pc, #64]	@ (800102c <_ZL12MX_TIM1_Initv+0x130>)
 8000fec:	f002 f9fa 	bl	80033e4 <HAL_TIM_IC_ConfigChannel>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	bf14      	ite	ne
 8000ff6:	2301      	movne	r3, #1
 8000ff8:	2300      	moveq	r3, #0
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <_ZL12MX_TIM1_Initv+0x108>
  {
    Error_Handler();
 8001000:	f000 f98c 	bl	800131c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001004:	463b      	mov	r3, r7
 8001006:	2204      	movs	r2, #4
 8001008:	4619      	mov	r1, r3
 800100a:	4808      	ldr	r0, [pc, #32]	@ (800102c <_ZL12MX_TIM1_Initv+0x130>)
 800100c:	f002 f9ea 	bl	80033e4 <HAL_TIM_IC_ConfigChannel>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	bf14      	ite	ne
 8001016:	2301      	movne	r3, #1
 8001018:	2300      	moveq	r3, #0
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <_ZL12MX_TIM1_Initv+0x128>
  {
    Error_Handler();
 8001020:	f000 f97c 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	3728      	adds	r7, #40	@ 0x28
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000078 	.word	0x20000078
 8001030:	40010000 	.word	0x40010000

08001034 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08e      	sub	sp, #56	@ 0x38
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800103a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001048:	f107 0320 	add.w	r3, r7, #32
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
 8001060:	615a      	str	r2, [r3, #20]
 8001062:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001064:	4b39      	ldr	r3, [pc, #228]	@ (800114c <_ZL12MX_TIM2_Initv+0x118>)
 8001066:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800106a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800106c:	4b37      	ldr	r3, [pc, #220]	@ (800114c <_ZL12MX_TIM2_Initv+0x118>)
 800106e:	2200      	movs	r2, #0
 8001070:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001072:	4b36      	ldr	r3, [pc, #216]	@ (800114c <_ZL12MX_TIM2_Initv+0x118>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 8001078:	4b34      	ldr	r3, [pc, #208]	@ (800114c <_ZL12MX_TIM2_Initv+0x118>)
 800107a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800107e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001080:	4b32      	ldr	r3, [pc, #200]	@ (800114c <_ZL12MX_TIM2_Initv+0x118>)
 8001082:	2200      	movs	r2, #0
 8001084:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001086:	4b31      	ldr	r3, [pc, #196]	@ (800114c <_ZL12MX_TIM2_Initv+0x118>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800108c:	482f      	ldr	r0, [pc, #188]	@ (800114c <_ZL12MX_TIM2_Initv+0x118>)
 800108e:	f001 fba7 	bl	80027e0 <HAL_TIM_Base_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	bf14      	ite	ne
 8001098:	2301      	movne	r3, #1
 800109a:	2300      	moveq	r3, #0
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 80010a2:	f000 f93b 	bl	800131c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010b0:	4619      	mov	r1, r3
 80010b2:	4826      	ldr	r0, [pc, #152]	@ (800114c <_ZL12MX_TIM2_Initv+0x118>)
 80010b4:	f002 faf4 	bl	80036a0 <HAL_TIM_ConfigClockSource>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	bf14      	ite	ne
 80010be:	2301      	movne	r3, #1
 80010c0:	2300      	moveq	r3, #0
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 80010c8:	f000 f928 	bl	800131c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010cc:	481f      	ldr	r0, [pc, #124]	@ (800114c <_ZL12MX_TIM2_Initv+0x118>)
 80010ce:	f001 fbd6 	bl	800287e <HAL_TIM_PWM_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	bf14      	ite	ne
 80010d8:	2301      	movne	r3, #1
 80010da:	2300      	moveq	r3, #0
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 80010e2:	f000 f91b 	bl	800131c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e6:	2300      	movs	r3, #0
 80010e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ea:	2300      	movs	r3, #0
 80010ec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010ee:	f107 0320 	add.w	r3, r7, #32
 80010f2:	4619      	mov	r1, r3
 80010f4:	4815      	ldr	r0, [pc, #84]	@ (800114c <_ZL12MX_TIM2_Initv+0x118>)
 80010f6:	f002 fff3 	bl	80040e0 <HAL_TIMEx_MasterConfigSynchronization>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	bf14      	ite	ne
 8001100:	2301      	movne	r3, #1
 8001102:	2300      	moveq	r3, #0
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 800110a:	f000 f907 	bl	800131c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800110e:	2360      	movs	r3, #96	@ 0x60
 8001110:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	2200      	movs	r2, #0
 8001122:	4619      	mov	r1, r3
 8001124:	4809      	ldr	r0, [pc, #36]	@ (800114c <_ZL12MX_TIM2_Initv+0x118>)
 8001126:	f002 f9f9 	bl	800351c <HAL_TIM_PWM_ConfigChannel>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	bf14      	ite	ne
 8001130:	2301      	movne	r3, #1
 8001132:	2300      	moveq	r3, #0
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <_ZL12MX_TIM2_Initv+0x10a>
  {
    Error_Handler();
 800113a:	f000 f8ef 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800113e:	4803      	ldr	r0, [pc, #12]	@ (800114c <_ZL12MX_TIM2_Initv+0x118>)
 8001140:	f000 f9e6 	bl	8001510 <HAL_TIM_MspPostInit>

}
 8001144:	bf00      	nop
 8001146:	3738      	adds	r7, #56	@ 0x38
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	200000c0 	.word	0x200000c0

08001150 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08c      	sub	sp, #48	@ 0x30
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001156:	f107 030c 	add.w	r3, r7, #12
 800115a:	2224      	movs	r2, #36	@ 0x24
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f003 fd84 	bl	8004c6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800116c:	4b25      	ldr	r3, [pc, #148]	@ (8001204 <_ZL12MX_TIM5_Initv+0xb4>)
 800116e:	4a26      	ldr	r2, [pc, #152]	@ (8001208 <_ZL12MX_TIM5_Initv+0xb8>)
 8001170:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001172:	4b24      	ldr	r3, [pc, #144]	@ (8001204 <_ZL12MX_TIM5_Initv+0xb4>)
 8001174:	2200      	movs	r2, #0
 8001176:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001178:	4b22      	ldr	r3, [pc, #136]	@ (8001204 <_ZL12MX_TIM5_Initv+0xb4>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800117e:	4b21      	ldr	r3, [pc, #132]	@ (8001204 <_ZL12MX_TIM5_Initv+0xb4>)
 8001180:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001184:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001186:	4b1f      	ldr	r3, [pc, #124]	@ (8001204 <_ZL12MX_TIM5_Initv+0xb4>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800118c:	4b1d      	ldr	r3, [pc, #116]	@ (8001204 <_ZL12MX_TIM5_Initv+0xb4>)
 800118e:	2200      	movs	r2, #0
 8001190:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001192:	2303      	movs	r3, #3
 8001194:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800119a:	2301      	movs	r3, #1
 800119c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800119e:	2300      	movs	r3, #0
 80011a0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011a6:	2300      	movs	r3, #0
 80011a8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011aa:	2301      	movs	r3, #1
 80011ac:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80011b6:	f107 030c 	add.w	r3, r7, #12
 80011ba:	4619      	mov	r1, r3
 80011bc:	4811      	ldr	r0, [pc, #68]	@ (8001204 <_ZL12MX_TIM5_Initv+0xb4>)
 80011be:	f001 feed 	bl	8002f9c <HAL_TIM_Encoder_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	bf14      	ite	ne
 80011c8:	2301      	movne	r3, #1
 80011ca:	2300      	moveq	r3, #0
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <_ZL12MX_TIM5_Initv+0x86>
  {
    Error_Handler();
 80011d2:	f000 f8a3 	bl	800131c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	4619      	mov	r1, r3
 80011e2:	4808      	ldr	r0, [pc, #32]	@ (8001204 <_ZL12MX_TIM5_Initv+0xb4>)
 80011e4:	f002 ff7c 	bl	80040e0 <HAL_TIMEx_MasterConfigSynchronization>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	bf14      	ite	ne
 80011ee:	2301      	movne	r3, #1
 80011f0:	2300      	moveq	r3, #0
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <_ZL12MX_TIM5_Initv+0xac>
  {
    Error_Handler();
 80011f8:	f000 f890 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80011fc:	bf00      	nop
 80011fe:	3730      	adds	r7, #48	@ 0x30
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000108 	.word	0x20000108
 8001208:	40000c00 	.word	0x40000c00

0800120c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001210:	4b13      	ldr	r3, [pc, #76]	@ (8001260 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001212:	4a14      	ldr	r2, [pc, #80]	@ (8001264 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001214:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001216:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001218:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800121c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800121e:	4b10      	ldr	r3, [pc, #64]	@ (8001260 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001224:	4b0e      	ldr	r3, [pc, #56]	@ (8001260 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800122a:	4b0d      	ldr	r3, [pc, #52]	@ (8001260 <_ZL19MX_USART2_UART_Initv+0x54>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001230:	4b0b      	ldr	r3, [pc, #44]	@ (8001260 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001232:	220c      	movs	r2, #12
 8001234:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001236:	4b0a      	ldr	r3, [pc, #40]	@ (8001260 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800123c:	4b08      	ldr	r3, [pc, #32]	@ (8001260 <_ZL19MX_USART2_UART_Initv+0x54>)
 800123e:	2200      	movs	r2, #0
 8001240:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001242:	4807      	ldr	r0, [pc, #28]	@ (8001260 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001244:	f002 ffce 	bl	80041e4 <HAL_UART_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	bf14      	ite	ne
 800124e:	2301      	movne	r3, #1
 8001250:	2300      	moveq	r3, #0
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001258:	f000 f860 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000150 	.word	0x20000150
 8001264:	40004400 	.word	0x40004400

08001268 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126e:	f107 030c 	add.w	r3, r7, #12
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
 800127c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	4b24      	ldr	r3, [pc, #144]	@ (8001314 <_ZL12MX_GPIO_Initv+0xac>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	4a23      	ldr	r2, [pc, #140]	@ (8001314 <_ZL12MX_GPIO_Initv+0xac>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6313      	str	r3, [r2, #48]	@ 0x30
 800128e:	4b21      	ldr	r3, [pc, #132]	@ (8001314 <_ZL12MX_GPIO_Initv+0xac>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	4b1d      	ldr	r3, [pc, #116]	@ (8001314 <_ZL12MX_GPIO_Initv+0xac>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001314 <_ZL12MX_GPIO_Initv+0xac>)
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001314 <_ZL12MX_GPIO_Initv+0xac>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80012b6:	2200      	movs	r2, #0
 80012b8:	f44f 4150 	mov.w	r1, #53248	@ 0xd000
 80012bc:	4816      	ldr	r0, [pc, #88]	@ (8001318 <_ZL12MX_GPIO_Initv+0xb0>)
 80012be:	f000 fdeb 	bl	8001e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 80012c2:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80012c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c8:	2301      	movs	r3, #1
 80012ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	4619      	mov	r1, r3
 80012da:	480f      	ldr	r0, [pc, #60]	@ (8001318 <_ZL12MX_GPIO_Initv+0xb0>)
 80012dc:	f000 fc40 	bl	8001b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012e6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f0:	f107 030c 	add.w	r3, r7, #12
 80012f4:	4619      	mov	r1, r3
 80012f6:	4808      	ldr	r0, [pc, #32]	@ (8001318 <_ZL12MX_GPIO_Initv+0xb0>)
 80012f8:	f000 fc32 	bl	8001b60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012fc:	2200      	movs	r2, #0
 80012fe:	2100      	movs	r1, #0
 8001300:	2028      	movs	r0, #40	@ 0x28
 8001302:	f000 fbf6 	bl	8001af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001306:	2028      	movs	r0, #40	@ 0x28
 8001308:	f000 fc0f 	bl	8001b2a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800130c:	bf00      	nop
 800130e:	3720      	adds	r7, #32
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40023800 	.word	0x40023800
 8001318:	40020400 	.word	0x40020400

0800131c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001320:	b672      	cpsid	i
}
 8001322:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001324:	bf00      	nop
 8001326:	e7fd      	b.n	8001324 <Error_Handler+0x8>

08001328 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	4b10      	ldr	r3, [pc, #64]	@ (8001374 <HAL_MspInit+0x4c>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001336:	4a0f      	ldr	r2, [pc, #60]	@ (8001374 <HAL_MspInit+0x4c>)
 8001338:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800133c:	6453      	str	r3, [r2, #68]	@ 0x44
 800133e:	4b0d      	ldr	r3, [pc, #52]	@ (8001374 <HAL_MspInit+0x4c>)
 8001340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001342:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	603b      	str	r3, [r7, #0]
 800134e:	4b09      	ldr	r3, [pc, #36]	@ (8001374 <HAL_MspInit+0x4c>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001352:	4a08      	ldr	r2, [pc, #32]	@ (8001374 <HAL_MspInit+0x4c>)
 8001354:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001358:	6413      	str	r3, [r2, #64]	@ 0x40
 800135a:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <HAL_MspInit+0x4c>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001362:	603b      	str	r3, [r7, #0]
 8001364:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800

08001378 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	@ 0x28
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a33      	ldr	r2, [pc, #204]	@ (8001464 <HAL_TIM_Base_MspInit+0xec>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d14d      	bne.n	8001436 <HAL_TIM_Base_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]
 800139e:	4b32      	ldr	r3, [pc, #200]	@ (8001468 <HAL_TIM_Base_MspInit+0xf0>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a2:	4a31      	ldr	r2, [pc, #196]	@ (8001468 <HAL_TIM_Base_MspInit+0xf0>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001468 <HAL_TIM_Base_MspInit+0xf0>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001468 <HAL_TIM_Base_MspInit+0xf0>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	4a2a      	ldr	r2, [pc, #168]	@ (8001468 <HAL_TIM_Base_MspInit+0xf0>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c6:	4b28      	ldr	r3, [pc, #160]	@ (8001468 <HAL_TIM_Base_MspInit+0xf0>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013d2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d8:	2302      	movs	r3, #2
 80013da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2300      	movs	r3, #0
 80013e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80013e4:	2301      	movs	r3, #1
 80013e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	4619      	mov	r1, r3
 80013ee:	481f      	ldr	r0, [pc, #124]	@ (800146c <HAL_TIM_Base_MspInit+0xf4>)
 80013f0:	f000 fbb6 	bl	8001b60 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80013f4:	2200      	movs	r2, #0
 80013f6:	2100      	movs	r1, #0
 80013f8:	2018      	movs	r0, #24
 80013fa:	f000 fb7a 	bl	8001af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80013fe:	2018      	movs	r0, #24
 8001400:	f000 fb93 	bl	8001b2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001404:	2200      	movs	r2, #0
 8001406:	2100      	movs	r1, #0
 8001408:	2019      	movs	r0, #25
 800140a:	f000 fb72 	bl	8001af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800140e:	2019      	movs	r0, #25
 8001410:	f000 fb8b 	bl	8001b2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001414:	2200      	movs	r2, #0
 8001416:	2100      	movs	r1, #0
 8001418:	201a      	movs	r0, #26
 800141a:	f000 fb6a 	bl	8001af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800141e:	201a      	movs	r0, #26
 8001420:	f000 fb83 	bl	8001b2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001424:	2200      	movs	r2, #0
 8001426:	2100      	movs	r1, #0
 8001428:	201b      	movs	r0, #27
 800142a:	f000 fb62 	bl	8001af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800142e:	201b      	movs	r0, #27
 8001430:	f000 fb7b 	bl	8001b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001434:	e012      	b.n	800145c <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800143e:	d10d      	bne.n	800145c <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001440:	2300      	movs	r3, #0
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	4b08      	ldr	r3, [pc, #32]	@ (8001468 <HAL_TIM_Base_MspInit+0xf0>)
 8001446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001448:	4a07      	ldr	r2, [pc, #28]	@ (8001468 <HAL_TIM_Base_MspInit+0xf0>)
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001450:	4b05      	ldr	r3, [pc, #20]	@ (8001468 <HAL_TIM_Base_MspInit+0xf0>)
 8001452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	68bb      	ldr	r3, [r7, #8]
}
 800145c:	bf00      	nop
 800145e:	3728      	adds	r7, #40	@ 0x28
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40010000 	.word	0x40010000
 8001468:	40023800 	.word	0x40023800
 800146c:	40020000 	.word	0x40020000

08001470 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	@ 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a1d      	ldr	r2, [pc, #116]	@ (8001504 <HAL_TIM_Encoder_MspInit+0x94>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d133      	bne.n	80014fa <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	4b1c      	ldr	r3, [pc, #112]	@ (8001508 <HAL_TIM_Encoder_MspInit+0x98>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149a:	4a1b      	ldr	r2, [pc, #108]	@ (8001508 <HAL_TIM_Encoder_MspInit+0x98>)
 800149c:	f043 0308 	orr.w	r3, r3, #8
 80014a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014a2:	4b19      	ldr	r3, [pc, #100]	@ (8001508 <HAL_TIM_Encoder_MspInit+0x98>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a6:	f003 0308 	and.w	r3, r3, #8
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	4b15      	ldr	r3, [pc, #84]	@ (8001508 <HAL_TIM_Encoder_MspInit+0x98>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	4a14      	ldr	r2, [pc, #80]	@ (8001508 <HAL_TIM_Encoder_MspInit+0x98>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014be:	4b12      	ldr	r3, [pc, #72]	@ (8001508 <HAL_TIM_Encoder_MspInit+0x98>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014ca:	2303      	movs	r3, #3
 80014cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ce:	2302      	movs	r3, #2
 80014d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	2300      	movs	r3, #0
 80014d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80014da:	2302      	movs	r3, #2
 80014dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	4619      	mov	r1, r3
 80014e4:	4809      	ldr	r0, [pc, #36]	@ (800150c <HAL_TIM_Encoder_MspInit+0x9c>)
 80014e6:	f000 fb3b 	bl	8001b60 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2100      	movs	r1, #0
 80014ee:	2032      	movs	r0, #50	@ 0x32
 80014f0:	f000 faff 	bl	8001af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80014f4:	2032      	movs	r0, #50	@ 0x32
 80014f6:	f000 fb18 	bl	8001b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80014fa:	bf00      	nop
 80014fc:	3728      	adds	r7, #40	@ 0x28
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40000c00 	.word	0x40000c00
 8001508:	40023800 	.word	0x40023800
 800150c:	40020000 	.word	0x40020000

08001510 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	f107 030c 	add.w	r3, r7, #12
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001530:	d11e      	bne.n	8001570 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	4b10      	ldr	r3, [pc, #64]	@ (8001578 <HAL_TIM_MspPostInit+0x68>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	4a0f      	ldr	r2, [pc, #60]	@ (8001578 <HAL_TIM_MspPostInit+0x68>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6313      	str	r3, [r2, #48]	@ 0x30
 8001542:	4b0d      	ldr	r3, [pc, #52]	@ (8001578 <HAL_TIM_MspPostInit+0x68>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800154e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001552:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001554:	2302      	movs	r3, #2
 8001556:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155c:	2300      	movs	r3, #0
 800155e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001560:	2301      	movs	r3, #1
 8001562:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001564:	f107 030c 	add.w	r3, r7, #12
 8001568:	4619      	mov	r1, r3
 800156a:	4804      	ldr	r0, [pc, #16]	@ (800157c <HAL_TIM_MspPostInit+0x6c>)
 800156c:	f000 faf8 	bl	8001b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001570:	bf00      	nop
 8001572:	3720      	adds	r7, #32
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40023800 	.word	0x40023800
 800157c:	40020000 	.word	0x40020000

08001580 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08a      	sub	sp, #40	@ 0x28
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a19      	ldr	r2, [pc, #100]	@ (8001604 <HAL_UART_MspInit+0x84>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d12b      	bne.n	80015fa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
 80015a6:	4b18      	ldr	r3, [pc, #96]	@ (8001608 <HAL_UART_MspInit+0x88>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015aa:	4a17      	ldr	r2, [pc, #92]	@ (8001608 <HAL_UART_MspInit+0x88>)
 80015ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80015b2:	4b15      	ldr	r3, [pc, #84]	@ (8001608 <HAL_UART_MspInit+0x88>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ba:	613b      	str	r3, [r7, #16]
 80015bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	4b11      	ldr	r3, [pc, #68]	@ (8001608 <HAL_UART_MspInit+0x88>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	4a10      	ldr	r2, [pc, #64]	@ (8001608 <HAL_UART_MspInit+0x88>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001608 <HAL_UART_MspInit+0x88>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015da:	230c      	movs	r3, #12
 80015dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015de:	2302      	movs	r3, #2
 80015e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e6:	2303      	movs	r3, #3
 80015e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015ea:	2307      	movs	r3, #7
 80015ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	4619      	mov	r1, r3
 80015f4:	4805      	ldr	r0, [pc, #20]	@ (800160c <HAL_UART_MspInit+0x8c>)
 80015f6:	f000 fab3 	bl	8001b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015fa:	bf00      	nop
 80015fc:	3728      	adds	r7, #40	@ 0x28
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40004400 	.word	0x40004400
 8001608:	40023800 	.word	0x40023800
 800160c:	40020000 	.word	0x40020000

08001610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001614:	bf00      	nop
 8001616:	e7fd      	b.n	8001614 <NMI_Handler+0x4>

08001618 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <HardFault_Handler+0x4>

08001620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001624:	bf00      	nop
 8001626:	e7fd      	b.n	8001624 <MemManage_Handler+0x4>

08001628 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <BusFault_Handler+0x4>

08001630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001634:	bf00      	nop
 8001636:	e7fd      	b.n	8001634 <UsageFault_Handler+0x4>

08001638 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001666:	f000 f925 	bl	80018b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001674:	4802      	ldr	r0, [pc, #8]	@ (8001680 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001676:	f001 fdc5 	bl	8003204 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000078 	.word	0x20000078

08001684 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001688:	4802      	ldr	r0, [pc, #8]	@ (8001694 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800168a:	f001 fdbb 	bl	8003204 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000078 	.word	0x20000078

08001698 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800169c:	4802      	ldr	r0, [pc, #8]	@ (80016a8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800169e:	f001 fdb1 	bl	8003204 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000078 	.word	0x20000078

080016ac <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016b0:	4802      	ldr	r0, [pc, #8]	@ (80016bc <TIM1_CC_IRQHandler+0x10>)
 80016b2:	f001 fda7 	bl	8003204 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000078 	.word	0x20000078

080016c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80016c4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80016c8:	f000 fc1a 	bl	8001f00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80016d4:	4802      	ldr	r0, [pc, #8]	@ (80016e0 <TIM5_IRQHandler+0x10>)
 80016d6:	f001 fd95 	bl	8003204 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000108 	.word	0x20000108

080016e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return 1;
 80016e8:	2301      	movs	r3, #1
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <_kill>:

int _kill(int pid, int sig)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016fe:	f003 fb11 	bl	8004d24 <__errno>
 8001702:	4603      	mov	r3, r0
 8001704:	2216      	movs	r2, #22
 8001706:	601a      	str	r2, [r3, #0]
  return -1;
 8001708:	f04f 33ff 	mov.w	r3, #4294967295
}
 800170c:	4618      	mov	r0, r3
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <_exit>:

void _exit (int status)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800171c:	f04f 31ff 	mov.w	r1, #4294967295
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff ffe7 	bl	80016f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001726:	bf00      	nop
 8001728:	e7fd      	b.n	8001726 <_exit+0x12>
	...

0800172c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001734:	4a14      	ldr	r2, [pc, #80]	@ (8001788 <_sbrk+0x5c>)
 8001736:	4b15      	ldr	r3, [pc, #84]	@ (800178c <_sbrk+0x60>)
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001740:	4b13      	ldr	r3, [pc, #76]	@ (8001790 <_sbrk+0x64>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d102      	bne.n	800174e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001748:	4b11      	ldr	r3, [pc, #68]	@ (8001790 <_sbrk+0x64>)
 800174a:	4a12      	ldr	r2, [pc, #72]	@ (8001794 <_sbrk+0x68>)
 800174c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800174e:	4b10      	ldr	r3, [pc, #64]	@ (8001790 <_sbrk+0x64>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	429a      	cmp	r2, r3
 800175a:	d207      	bcs.n	800176c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800175c:	f003 fae2 	bl	8004d24 <__errno>
 8001760:	4603      	mov	r3, r0
 8001762:	220c      	movs	r2, #12
 8001764:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001766:	f04f 33ff 	mov.w	r3, #4294967295
 800176a:	e009      	b.n	8001780 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800176c:	4b08      	ldr	r3, [pc, #32]	@ (8001790 <_sbrk+0x64>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001772:	4b07      	ldr	r3, [pc, #28]	@ (8001790 <_sbrk+0x64>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4413      	add	r3, r2
 800177a:	4a05      	ldr	r2, [pc, #20]	@ (8001790 <_sbrk+0x64>)
 800177c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800177e:	68fb      	ldr	r3, [r7, #12]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20020000 	.word	0x20020000
 800178c:	00000400 	.word	0x00000400
 8001790:	2000021c 	.word	0x2000021c
 8001794:	20000370 	.word	0x20000370

08001798 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800179c:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <SystemInit+0x20>)
 800179e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017a2:	4a05      	ldr	r2, [pc, #20]	@ (80017b8 <SystemInit+0x20>)
 80017a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017c0:	f7ff ffea 	bl	8001798 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017c4:	480c      	ldr	r0, [pc, #48]	@ (80017f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017c6:	490d      	ldr	r1, [pc, #52]	@ (80017fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001800 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017cc:	e002      	b.n	80017d4 <LoopCopyDataInit>

080017ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d2:	3304      	adds	r3, #4

080017d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d8:	d3f9      	bcc.n	80017ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017da:	4a0a      	ldr	r2, [pc, #40]	@ (8001804 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001808 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e0:	e001      	b.n	80017e6 <LoopFillZerobss>

080017e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e4:	3204      	adds	r2, #4

080017e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e8:	d3fb      	bcc.n	80017e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ea:	f003 faa1 	bl	8004d30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ee:	f7ff fa41 	bl	8000c74 <main>
  bx  lr    
 80017f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017fc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001800:	080055a0 	.word	0x080055a0
  ldr r2, =_sbss
 8001804:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001808:	20000370 	.word	0x20000370

0800180c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800180c:	e7fe      	b.n	800180c <ADC_IRQHandler>
	...

08001810 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001814:	4b0e      	ldr	r3, [pc, #56]	@ (8001850 <HAL_Init+0x40>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a0d      	ldr	r2, [pc, #52]	@ (8001850 <HAL_Init+0x40>)
 800181a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800181e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001820:	4b0b      	ldr	r3, [pc, #44]	@ (8001850 <HAL_Init+0x40>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a0a      	ldr	r2, [pc, #40]	@ (8001850 <HAL_Init+0x40>)
 8001826:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800182a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800182c:	4b08      	ldr	r3, [pc, #32]	@ (8001850 <HAL_Init+0x40>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a07      	ldr	r2, [pc, #28]	@ (8001850 <HAL_Init+0x40>)
 8001832:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001836:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001838:	2003      	movs	r0, #3
 800183a:	f000 f94f 	bl	8001adc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800183e:	200f      	movs	r0, #15
 8001840:	f000 f808 	bl	8001854 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001844:	f7ff fd70 	bl	8001328 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40023c00 	.word	0x40023c00

08001854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800185c:	4b12      	ldr	r3, [pc, #72]	@ (80018a8 <HAL_InitTick+0x54>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4b12      	ldr	r3, [pc, #72]	@ (80018ac <HAL_InitTick+0x58>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	4619      	mov	r1, r3
 8001866:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800186a:	fbb3 f3f1 	udiv	r3, r3, r1
 800186e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001872:	4618      	mov	r0, r3
 8001874:	f000 f967 	bl	8001b46 <HAL_SYSTICK_Config>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e00e      	b.n	80018a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b0f      	cmp	r3, #15
 8001886:	d80a      	bhi.n	800189e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001888:	2200      	movs	r2, #0
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	f04f 30ff 	mov.w	r0, #4294967295
 8001890:	f000 f92f 	bl	8001af2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001894:	4a06      	ldr	r2, [pc, #24]	@ (80018b0 <HAL_InitTick+0x5c>)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800189a:	2300      	movs	r3, #0
 800189c:	e000      	b.n	80018a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000000 	.word	0x20000000
 80018ac:	20000008 	.word	0x20000008
 80018b0:	20000004 	.word	0x20000004

080018b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018b8:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <HAL_IncTick+0x20>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	461a      	mov	r2, r3
 80018be:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <HAL_IncTick+0x24>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4413      	add	r3, r2
 80018c4:	4a04      	ldr	r2, [pc, #16]	@ (80018d8 <HAL_IncTick+0x24>)
 80018c6:	6013      	str	r3, [r2, #0]
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	20000008 	.word	0x20000008
 80018d8:	20000220 	.word	0x20000220

080018dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  return uwTick;
 80018e0:	4b03      	ldr	r3, [pc, #12]	@ (80018f0 <HAL_GetTick+0x14>)
 80018e2:	681b      	ldr	r3, [r3, #0]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	20000220 	.word	0x20000220

080018f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018fc:	f7ff ffee 	bl	80018dc <HAL_GetTick>
 8001900:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800190c:	d005      	beq.n	800191a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800190e:	4b0a      	ldr	r3, [pc, #40]	@ (8001938 <HAL_Delay+0x44>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	461a      	mov	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4413      	add	r3, r2
 8001918:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800191a:	bf00      	nop
 800191c:	f7ff ffde 	bl	80018dc <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	429a      	cmp	r2, r3
 800192a:	d8f7      	bhi.n	800191c <HAL_Delay+0x28>
  {
  }
}
 800192c:	bf00      	nop
 800192e:	bf00      	nop
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000008 	.word	0x20000008

0800193c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800194c:	4b0c      	ldr	r3, [pc, #48]	@ (8001980 <__NVIC_SetPriorityGrouping+0x44>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001958:	4013      	ands	r3, r2
 800195a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001964:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001968:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800196c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800196e:	4a04      	ldr	r2, [pc, #16]	@ (8001980 <__NVIC_SetPriorityGrouping+0x44>)
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	60d3      	str	r3, [r2, #12]
}
 8001974:	bf00      	nop
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001988:	4b04      	ldr	r3, [pc, #16]	@ (800199c <__NVIC_GetPriorityGrouping+0x18>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	0a1b      	lsrs	r3, r3, #8
 800198e:	f003 0307 	and.w	r3, r3, #7
}
 8001992:	4618      	mov	r0, r3
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	db0b      	blt.n	80019ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	f003 021f 	and.w	r2, r3, #31
 80019b8:	4907      	ldr	r1, [pc, #28]	@ (80019d8 <__NVIC_EnableIRQ+0x38>)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	095b      	lsrs	r3, r3, #5
 80019c0:	2001      	movs	r0, #1
 80019c2:	fa00 f202 	lsl.w	r2, r0, r2
 80019c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	e000e100 	.word	0xe000e100

080019dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	6039      	str	r1, [r7, #0]
 80019e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	db0a      	blt.n	8001a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	490c      	ldr	r1, [pc, #48]	@ (8001a28 <__NVIC_SetPriority+0x4c>)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	0112      	lsls	r2, r2, #4
 80019fc:	b2d2      	uxtb	r2, r2
 80019fe:	440b      	add	r3, r1
 8001a00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a04:	e00a      	b.n	8001a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	4908      	ldr	r1, [pc, #32]	@ (8001a2c <__NVIC_SetPriority+0x50>)
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	f003 030f 	and.w	r3, r3, #15
 8001a12:	3b04      	subs	r3, #4
 8001a14:	0112      	lsls	r2, r2, #4
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	440b      	add	r3, r1
 8001a1a:	761a      	strb	r2, [r3, #24]
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000e100 	.word	0xe000e100
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b089      	sub	sp, #36	@ 0x24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f1c3 0307 	rsb	r3, r3, #7
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	bf28      	it	cs
 8001a4e:	2304      	movcs	r3, #4
 8001a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	3304      	adds	r3, #4
 8001a56:	2b06      	cmp	r3, #6
 8001a58:	d902      	bls.n	8001a60 <NVIC_EncodePriority+0x30>
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3b03      	subs	r3, #3
 8001a5e:	e000      	b.n	8001a62 <NVIC_EncodePriority+0x32>
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a64:	f04f 32ff 	mov.w	r2, #4294967295
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43da      	mvns	r2, r3
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	401a      	ands	r2, r3
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a78:	f04f 31ff 	mov.w	r1, #4294967295
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a82:	43d9      	mvns	r1, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a88:	4313      	orrs	r3, r2
         );
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3724      	adds	r7, #36	@ 0x24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
	...

08001a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001aa8:	d301      	bcc.n	8001aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e00f      	b.n	8001ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aae:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad8 <SysTick_Config+0x40>)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ab6:	210f      	movs	r1, #15
 8001ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8001abc:	f7ff ff8e 	bl	80019dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac0:	4b05      	ldr	r3, [pc, #20]	@ (8001ad8 <SysTick_Config+0x40>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ac6:	4b04      	ldr	r3, [pc, #16]	@ (8001ad8 <SysTick_Config+0x40>)
 8001ac8:	2207      	movs	r2, #7
 8001aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	e000e010 	.word	0xe000e010

08001adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff ff29 	bl	800193c <__NVIC_SetPriorityGrouping>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	4603      	mov	r3, r0
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
 8001afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b04:	f7ff ff3e 	bl	8001984 <__NVIC_GetPriorityGrouping>
 8001b08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	68b9      	ldr	r1, [r7, #8]
 8001b0e:	6978      	ldr	r0, [r7, #20]
 8001b10:	f7ff ff8e 	bl	8001a30 <NVIC_EncodePriority>
 8001b14:	4602      	mov	r2, r0
 8001b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff ff5d 	bl	80019dc <__NVIC_SetPriority>
}
 8001b22:	bf00      	nop
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	4603      	mov	r3, r0
 8001b32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff ff31 	bl	80019a0 <__NVIC_EnableIRQ>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff ffa2 	bl	8001a98 <SysTick_Config>
 8001b54:	4603      	mov	r3, r0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
	...

08001b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b089      	sub	sp, #36	@ 0x24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
 8001b7a:	e159      	b.n	8001e30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	f040 8148 	bne.w	8001e2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d005      	beq.n	8001bb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d130      	bne.n	8001c14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	2203      	movs	r2, #3
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	68da      	ldr	r2, [r3, #12]
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001be8:	2201      	movs	r2, #1
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	091b      	lsrs	r3, r3, #4
 8001bfe:	f003 0201 	and.w	r2, r3, #1
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 0303 	and.w	r3, r3, #3
 8001c1c:	2b03      	cmp	r3, #3
 8001c1e:	d017      	beq.n	8001c50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	2203      	movs	r2, #3
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 0303 	and.w	r3, r3, #3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d123      	bne.n	8001ca4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	08da      	lsrs	r2, r3, #3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3208      	adds	r2, #8
 8001c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	220f      	movs	r2, #15
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	691a      	ldr	r2, [r3, #16]
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	08da      	lsrs	r2, r3, #3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3208      	adds	r2, #8
 8001c9e:	69b9      	ldr	r1, [r7, #24]
 8001ca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	2203      	movs	r2, #3
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 0203 	and.w	r2, r3, #3
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f000 80a2 	beq.w	8001e2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	4b57      	ldr	r3, [pc, #348]	@ (8001e48 <HAL_GPIO_Init+0x2e8>)
 8001cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cee:	4a56      	ldr	r2, [pc, #344]	@ (8001e48 <HAL_GPIO_Init+0x2e8>)
 8001cf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cf6:	4b54      	ldr	r3, [pc, #336]	@ (8001e48 <HAL_GPIO_Init+0x2e8>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d02:	4a52      	ldr	r2, [pc, #328]	@ (8001e4c <HAL_GPIO_Init+0x2ec>)
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	089b      	lsrs	r3, r3, #2
 8001d08:	3302      	adds	r3, #2
 8001d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	220f      	movs	r2, #15
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4013      	ands	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a49      	ldr	r2, [pc, #292]	@ (8001e50 <HAL_GPIO_Init+0x2f0>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d019      	beq.n	8001d62 <HAL_GPIO_Init+0x202>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a48      	ldr	r2, [pc, #288]	@ (8001e54 <HAL_GPIO_Init+0x2f4>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d013      	beq.n	8001d5e <HAL_GPIO_Init+0x1fe>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a47      	ldr	r2, [pc, #284]	@ (8001e58 <HAL_GPIO_Init+0x2f8>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d00d      	beq.n	8001d5a <HAL_GPIO_Init+0x1fa>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a46      	ldr	r2, [pc, #280]	@ (8001e5c <HAL_GPIO_Init+0x2fc>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d007      	beq.n	8001d56 <HAL_GPIO_Init+0x1f6>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a45      	ldr	r2, [pc, #276]	@ (8001e60 <HAL_GPIO_Init+0x300>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d101      	bne.n	8001d52 <HAL_GPIO_Init+0x1f2>
 8001d4e:	2304      	movs	r3, #4
 8001d50:	e008      	b.n	8001d64 <HAL_GPIO_Init+0x204>
 8001d52:	2307      	movs	r3, #7
 8001d54:	e006      	b.n	8001d64 <HAL_GPIO_Init+0x204>
 8001d56:	2303      	movs	r3, #3
 8001d58:	e004      	b.n	8001d64 <HAL_GPIO_Init+0x204>
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	e002      	b.n	8001d64 <HAL_GPIO_Init+0x204>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <HAL_GPIO_Init+0x204>
 8001d62:	2300      	movs	r3, #0
 8001d64:	69fa      	ldr	r2, [r7, #28]
 8001d66:	f002 0203 	and.w	r2, r2, #3
 8001d6a:	0092      	lsls	r2, r2, #2
 8001d6c:	4093      	lsls	r3, r2
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d74:	4935      	ldr	r1, [pc, #212]	@ (8001e4c <HAL_GPIO_Init+0x2ec>)
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	089b      	lsrs	r3, r3, #2
 8001d7a:	3302      	adds	r3, #2
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d82:	4b38      	ldr	r3, [pc, #224]	@ (8001e64 <HAL_GPIO_Init+0x304>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001da6:	4a2f      	ldr	r2, [pc, #188]	@ (8001e64 <HAL_GPIO_Init+0x304>)
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dac:	4b2d      	ldr	r3, [pc, #180]	@ (8001e64 <HAL_GPIO_Init+0x304>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	43db      	mvns	r3, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4013      	ands	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dd0:	4a24      	ldr	r2, [pc, #144]	@ (8001e64 <HAL_GPIO_Init+0x304>)
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dd6:	4b23      	ldr	r3, [pc, #140]	@ (8001e64 <HAL_GPIO_Init+0x304>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	43db      	mvns	r3, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4013      	ands	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dfa:	4a1a      	ldr	r2, [pc, #104]	@ (8001e64 <HAL_GPIO_Init+0x304>)
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e00:	4b18      	ldr	r3, [pc, #96]	@ (8001e64 <HAL_GPIO_Init+0x304>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e24:	4a0f      	ldr	r2, [pc, #60]	@ (8001e64 <HAL_GPIO_Init+0x304>)
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	61fb      	str	r3, [r7, #28]
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	2b0f      	cmp	r3, #15
 8001e34:	f67f aea2 	bls.w	8001b7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e38:	bf00      	nop
 8001e3a:	bf00      	nop
 8001e3c:	3724      	adds	r7, #36	@ 0x24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40013800 	.word	0x40013800
 8001e50:	40020000 	.word	0x40020000
 8001e54:	40020400 	.word	0x40020400
 8001e58:	40020800 	.word	0x40020800
 8001e5c:	40020c00 	.word	0x40020c00
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40013c00 	.word	0x40013c00

08001e68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691a      	ldr	r2, [r3, #16]
 8001e78:	887b      	ldrh	r3, [r7, #2]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d002      	beq.n	8001e86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e80:	2301      	movs	r3, #1
 8001e82:	73fb      	strb	r3, [r7, #15]
 8001e84:	e001      	b.n	8001e8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e86:	2300      	movs	r3, #0
 8001e88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	807b      	strh	r3, [r7, #2]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ea8:	787b      	ldrb	r3, [r7, #1]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eae:	887a      	ldrh	r2, [r7, #2]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001eb4:	e003      	b.n	8001ebe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eb6:	887b      	ldrh	r3, [r7, #2]
 8001eb8:	041a      	lsls	r2, r3, #16
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	619a      	str	r2, [r3, #24]
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b085      	sub	sp, #20
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001edc:	887a      	ldrh	r2, [r7, #2]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	041a      	lsls	r2, r3, #16
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	43d9      	mvns	r1, r3
 8001ee8:	887b      	ldrh	r3, [r7, #2]
 8001eea:	400b      	ands	r3, r1
 8001eec:	431a      	orrs	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	619a      	str	r2, [r3, #24]
}
 8001ef2:	bf00      	nop
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
	...

08001f00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f0a:	4b08      	ldr	r3, [pc, #32]	@ (8001f2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f0c:	695a      	ldr	r2, [r3, #20]
 8001f0e:	88fb      	ldrh	r3, [r7, #6]
 8001f10:	4013      	ands	r3, r2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d006      	beq.n	8001f24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f16:	4a05      	ldr	r2, [pc, #20]	@ (8001f2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f18:	88fb      	ldrh	r3, [r7, #6]
 8001f1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f1c:	88fb      	ldrh	r3, [r7, #6]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe fe06 	bl	8000b30 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f24:	bf00      	nop
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40013c00 	.word	0x40013c00

08001f30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e267      	b.n	8002412 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d075      	beq.n	800203a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f4e:	4b88      	ldr	r3, [pc, #544]	@ (8002170 <HAL_RCC_OscConfig+0x240>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 030c 	and.w	r3, r3, #12
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	d00c      	beq.n	8001f74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f5a:	4b85      	ldr	r3, [pc, #532]	@ (8002170 <HAL_RCC_OscConfig+0x240>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f62:	2b08      	cmp	r3, #8
 8001f64:	d112      	bne.n	8001f8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f66:	4b82      	ldr	r3, [pc, #520]	@ (8002170 <HAL_RCC_OscConfig+0x240>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f72:	d10b      	bne.n	8001f8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f74:	4b7e      	ldr	r3, [pc, #504]	@ (8002170 <HAL_RCC_OscConfig+0x240>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d05b      	beq.n	8002038 <HAL_RCC_OscConfig+0x108>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d157      	bne.n	8002038 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e242      	b.n	8002412 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f94:	d106      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x74>
 8001f96:	4b76      	ldr	r3, [pc, #472]	@ (8002170 <HAL_RCC_OscConfig+0x240>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a75      	ldr	r2, [pc, #468]	@ (8002170 <HAL_RCC_OscConfig+0x240>)
 8001f9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	e01d      	b.n	8001fe0 <HAL_RCC_OscConfig+0xb0>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fac:	d10c      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x98>
 8001fae:	4b70      	ldr	r3, [pc, #448]	@ (8002170 <HAL_RCC_OscConfig+0x240>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a6f      	ldr	r2, [pc, #444]	@ (8002170 <HAL_RCC_OscConfig+0x240>)
 8001fb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fb8:	6013      	str	r3, [r2, #0]
 8001fba:	4b6d      	ldr	r3, [pc, #436]	@ (8002170 <HAL_RCC_OscConfig+0x240>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a6c      	ldr	r2, [pc, #432]	@ (8002170 <HAL_RCC_OscConfig+0x240>)
 8001fc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	e00b      	b.n	8001fe0 <HAL_RCC_OscConfig+0xb0>
 8001fc8:	4b69      	ldr	r3, [pc, #420]	@ (8002170 <HAL_RCC_OscConfig+0x240>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a68      	ldr	r2, [pc, #416]	@ (8002170 <HAL_RCC_OscConfig+0x240>)
 8001fce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fd2:	6013      	str	r3, [r2, #0]
 8001fd4:	4b66      	ldr	r3, [pc, #408]	@ (8002170 <HAL_RCC_OscConfig+0x240>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a65      	ldr	r2, [pc, #404]	@ (8002170 <HAL_RCC_OscConfig+0x240>)
 8001fda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d013      	beq.n	8002010 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe8:	f7ff fc78 	bl	80018dc <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ff0:	f7ff fc74 	bl	80018dc <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b64      	cmp	r3, #100	@ 0x64
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e207      	b.n	8002412 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002002:	4b5b      	ldr	r3, [pc, #364]	@ (8002170 <HAL_RCC_OscConfig+0x240>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0f0      	beq.n	8001ff0 <HAL_RCC_OscConfig+0xc0>
 800200e:	e014      	b.n	800203a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002010:	f7ff fc64 	bl	80018dc <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002018:	f7ff fc60 	bl	80018dc <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b64      	cmp	r3, #100	@ 0x64
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e1f3      	b.n	8002412 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800202a:	4b51      	ldr	r3, [pc, #324]	@ (8002170 <HAL_RCC_OscConfig+0x240>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f0      	bne.n	8002018 <HAL_RCC_OscConfig+0xe8>
 8002036:	e000      	b.n	800203a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d063      	beq.n	800210e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002046:	4b4a      	ldr	r3, [pc, #296]	@ (8002170 <HAL_RCC_OscConfig+0x240>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 030c 	and.w	r3, r3, #12
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00b      	beq.n	800206a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002052:	4b47      	ldr	r3, [pc, #284]	@ (8002170 <HAL_RCC_OscConfig+0x240>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800205a:	2b08      	cmp	r3, #8
 800205c:	d11c      	bne.n	8002098 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800205e:	4b44      	ldr	r3, [pc, #272]	@ (8002170 <HAL_RCC_OscConfig+0x240>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d116      	bne.n	8002098 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800206a:	4b41      	ldr	r3, [pc, #260]	@ (8002170 <HAL_RCC_OscConfig+0x240>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d005      	beq.n	8002082 <HAL_RCC_OscConfig+0x152>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d001      	beq.n	8002082 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e1c7      	b.n	8002412 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002082:	4b3b      	ldr	r3, [pc, #236]	@ (8002170 <HAL_RCC_OscConfig+0x240>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	4937      	ldr	r1, [pc, #220]	@ (8002170 <HAL_RCC_OscConfig+0x240>)
 8002092:	4313      	orrs	r3, r2
 8002094:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002096:	e03a      	b.n	800210e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d020      	beq.n	80020e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020a0:	4b34      	ldr	r3, [pc, #208]	@ (8002174 <HAL_RCC_OscConfig+0x244>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a6:	f7ff fc19 	bl	80018dc <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ae:	f7ff fc15 	bl	80018dc <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e1a8      	b.n	8002412 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002170 <HAL_RCC_OscConfig+0x240>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0f0      	beq.n	80020ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020cc:	4b28      	ldr	r3, [pc, #160]	@ (8002170 <HAL_RCC_OscConfig+0x240>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	4925      	ldr	r1, [pc, #148]	@ (8002170 <HAL_RCC_OscConfig+0x240>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	600b      	str	r3, [r1, #0]
 80020e0:	e015      	b.n	800210e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020e2:	4b24      	ldr	r3, [pc, #144]	@ (8002174 <HAL_RCC_OscConfig+0x244>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e8:	f7ff fbf8 	bl	80018dc <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020f0:	f7ff fbf4 	bl	80018dc <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e187      	b.n	8002412 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002102:	4b1b      	ldr	r3, [pc, #108]	@ (8002170 <HAL_RCC_OscConfig+0x240>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1f0      	bne.n	80020f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0308 	and.w	r3, r3, #8
 8002116:	2b00      	cmp	r3, #0
 8002118:	d036      	beq.n	8002188 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d016      	beq.n	8002150 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002122:	4b15      	ldr	r3, [pc, #84]	@ (8002178 <HAL_RCC_OscConfig+0x248>)
 8002124:	2201      	movs	r2, #1
 8002126:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002128:	f7ff fbd8 	bl	80018dc <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002130:	f7ff fbd4 	bl	80018dc <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e167      	b.n	8002412 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002142:	4b0b      	ldr	r3, [pc, #44]	@ (8002170 <HAL_RCC_OscConfig+0x240>)
 8002144:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d0f0      	beq.n	8002130 <HAL_RCC_OscConfig+0x200>
 800214e:	e01b      	b.n	8002188 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002150:	4b09      	ldr	r3, [pc, #36]	@ (8002178 <HAL_RCC_OscConfig+0x248>)
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002156:	f7ff fbc1 	bl	80018dc <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800215c:	e00e      	b.n	800217c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800215e:	f7ff fbbd 	bl	80018dc <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d907      	bls.n	800217c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e150      	b.n	8002412 <HAL_RCC_OscConfig+0x4e2>
 8002170:	40023800 	.word	0x40023800
 8002174:	42470000 	.word	0x42470000
 8002178:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800217c:	4b88      	ldr	r3, [pc, #544]	@ (80023a0 <HAL_RCC_OscConfig+0x470>)
 800217e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1ea      	bne.n	800215e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0304 	and.w	r3, r3, #4
 8002190:	2b00      	cmp	r3, #0
 8002192:	f000 8097 	beq.w	80022c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002196:	2300      	movs	r3, #0
 8002198:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800219a:	4b81      	ldr	r3, [pc, #516]	@ (80023a0 <HAL_RCC_OscConfig+0x470>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10f      	bne.n	80021c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	4b7d      	ldr	r3, [pc, #500]	@ (80023a0 <HAL_RCC_OscConfig+0x470>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ae:	4a7c      	ldr	r2, [pc, #496]	@ (80023a0 <HAL_RCC_OscConfig+0x470>)
 80021b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80021b6:	4b7a      	ldr	r3, [pc, #488]	@ (80023a0 <HAL_RCC_OscConfig+0x470>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021be:	60bb      	str	r3, [r7, #8]
 80021c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021c2:	2301      	movs	r3, #1
 80021c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c6:	4b77      	ldr	r3, [pc, #476]	@ (80023a4 <HAL_RCC_OscConfig+0x474>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d118      	bne.n	8002204 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021d2:	4b74      	ldr	r3, [pc, #464]	@ (80023a4 <HAL_RCC_OscConfig+0x474>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a73      	ldr	r2, [pc, #460]	@ (80023a4 <HAL_RCC_OscConfig+0x474>)
 80021d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021de:	f7ff fb7d 	bl	80018dc <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021e6:	f7ff fb79 	bl	80018dc <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e10c      	b.n	8002412 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f8:	4b6a      	ldr	r3, [pc, #424]	@ (80023a4 <HAL_RCC_OscConfig+0x474>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0f0      	beq.n	80021e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d106      	bne.n	800221a <HAL_RCC_OscConfig+0x2ea>
 800220c:	4b64      	ldr	r3, [pc, #400]	@ (80023a0 <HAL_RCC_OscConfig+0x470>)
 800220e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002210:	4a63      	ldr	r2, [pc, #396]	@ (80023a0 <HAL_RCC_OscConfig+0x470>)
 8002212:	f043 0301 	orr.w	r3, r3, #1
 8002216:	6713      	str	r3, [r2, #112]	@ 0x70
 8002218:	e01c      	b.n	8002254 <HAL_RCC_OscConfig+0x324>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	2b05      	cmp	r3, #5
 8002220:	d10c      	bne.n	800223c <HAL_RCC_OscConfig+0x30c>
 8002222:	4b5f      	ldr	r3, [pc, #380]	@ (80023a0 <HAL_RCC_OscConfig+0x470>)
 8002224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002226:	4a5e      	ldr	r2, [pc, #376]	@ (80023a0 <HAL_RCC_OscConfig+0x470>)
 8002228:	f043 0304 	orr.w	r3, r3, #4
 800222c:	6713      	str	r3, [r2, #112]	@ 0x70
 800222e:	4b5c      	ldr	r3, [pc, #368]	@ (80023a0 <HAL_RCC_OscConfig+0x470>)
 8002230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002232:	4a5b      	ldr	r2, [pc, #364]	@ (80023a0 <HAL_RCC_OscConfig+0x470>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6713      	str	r3, [r2, #112]	@ 0x70
 800223a:	e00b      	b.n	8002254 <HAL_RCC_OscConfig+0x324>
 800223c:	4b58      	ldr	r3, [pc, #352]	@ (80023a0 <HAL_RCC_OscConfig+0x470>)
 800223e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002240:	4a57      	ldr	r2, [pc, #348]	@ (80023a0 <HAL_RCC_OscConfig+0x470>)
 8002242:	f023 0301 	bic.w	r3, r3, #1
 8002246:	6713      	str	r3, [r2, #112]	@ 0x70
 8002248:	4b55      	ldr	r3, [pc, #340]	@ (80023a0 <HAL_RCC_OscConfig+0x470>)
 800224a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800224c:	4a54      	ldr	r2, [pc, #336]	@ (80023a0 <HAL_RCC_OscConfig+0x470>)
 800224e:	f023 0304 	bic.w	r3, r3, #4
 8002252:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d015      	beq.n	8002288 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800225c:	f7ff fb3e 	bl	80018dc <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002262:	e00a      	b.n	800227a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002264:	f7ff fb3a 	bl	80018dc <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002272:	4293      	cmp	r3, r2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e0cb      	b.n	8002412 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800227a:	4b49      	ldr	r3, [pc, #292]	@ (80023a0 <HAL_RCC_OscConfig+0x470>)
 800227c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d0ee      	beq.n	8002264 <HAL_RCC_OscConfig+0x334>
 8002286:	e014      	b.n	80022b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002288:	f7ff fb28 	bl	80018dc <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800228e:	e00a      	b.n	80022a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002290:	f7ff fb24 	bl	80018dc <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800229e:	4293      	cmp	r3, r2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e0b5      	b.n	8002412 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a6:	4b3e      	ldr	r3, [pc, #248]	@ (80023a0 <HAL_RCC_OscConfig+0x470>)
 80022a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1ee      	bne.n	8002290 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022b2:	7dfb      	ldrb	r3, [r7, #23]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d105      	bne.n	80022c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022b8:	4b39      	ldr	r3, [pc, #228]	@ (80023a0 <HAL_RCC_OscConfig+0x470>)
 80022ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022bc:	4a38      	ldr	r2, [pc, #224]	@ (80023a0 <HAL_RCC_OscConfig+0x470>)
 80022be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 80a1 	beq.w	8002410 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022ce:	4b34      	ldr	r3, [pc, #208]	@ (80023a0 <HAL_RCC_OscConfig+0x470>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 030c 	and.w	r3, r3, #12
 80022d6:	2b08      	cmp	r3, #8
 80022d8:	d05c      	beq.n	8002394 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d141      	bne.n	8002366 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e2:	4b31      	ldr	r3, [pc, #196]	@ (80023a8 <HAL_RCC_OscConfig+0x478>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e8:	f7ff faf8 	bl	80018dc <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f0:	f7ff faf4 	bl	80018dc <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e087      	b.n	8002412 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002302:	4b27      	ldr	r3, [pc, #156]	@ (80023a0 <HAL_RCC_OscConfig+0x470>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69da      	ldr	r2, [r3, #28]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	431a      	orrs	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231c:	019b      	lsls	r3, r3, #6
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002324:	085b      	lsrs	r3, r3, #1
 8002326:	3b01      	subs	r3, #1
 8002328:	041b      	lsls	r3, r3, #16
 800232a:	431a      	orrs	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002330:	061b      	lsls	r3, r3, #24
 8002332:	491b      	ldr	r1, [pc, #108]	@ (80023a0 <HAL_RCC_OscConfig+0x470>)
 8002334:	4313      	orrs	r3, r2
 8002336:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002338:	4b1b      	ldr	r3, [pc, #108]	@ (80023a8 <HAL_RCC_OscConfig+0x478>)
 800233a:	2201      	movs	r2, #1
 800233c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233e:	f7ff facd 	bl	80018dc <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002344:	e008      	b.n	8002358 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002346:	f7ff fac9 	bl	80018dc <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e05c      	b.n	8002412 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002358:	4b11      	ldr	r3, [pc, #68]	@ (80023a0 <HAL_RCC_OscConfig+0x470>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0f0      	beq.n	8002346 <HAL_RCC_OscConfig+0x416>
 8002364:	e054      	b.n	8002410 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002366:	4b10      	ldr	r3, [pc, #64]	@ (80023a8 <HAL_RCC_OscConfig+0x478>)
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236c:	f7ff fab6 	bl	80018dc <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002374:	f7ff fab2 	bl	80018dc <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e045      	b.n	8002412 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002386:	4b06      	ldr	r3, [pc, #24]	@ (80023a0 <HAL_RCC_OscConfig+0x470>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1f0      	bne.n	8002374 <HAL_RCC_OscConfig+0x444>
 8002392:	e03d      	b.n	8002410 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d107      	bne.n	80023ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e038      	b.n	8002412 <HAL_RCC_OscConfig+0x4e2>
 80023a0:	40023800 	.word	0x40023800
 80023a4:	40007000 	.word	0x40007000
 80023a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023ac:	4b1b      	ldr	r3, [pc, #108]	@ (800241c <HAL_RCC_OscConfig+0x4ec>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d028      	beq.n	800240c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d121      	bne.n	800240c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d11a      	bne.n	800240c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80023dc:	4013      	ands	r3, r2
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80023e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d111      	bne.n	800240c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f2:	085b      	lsrs	r3, r3, #1
 80023f4:	3b01      	subs	r3, #1
 80023f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d107      	bne.n	800240c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002406:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002408:	429a      	cmp	r2, r3
 800240a:	d001      	beq.n	8002410 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e000      	b.n	8002412 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3718      	adds	r7, #24
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40023800 	.word	0x40023800

08002420 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e0cc      	b.n	80025ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002434:	4b68      	ldr	r3, [pc, #416]	@ (80025d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	429a      	cmp	r2, r3
 8002440:	d90c      	bls.n	800245c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002442:	4b65      	ldr	r3, [pc, #404]	@ (80025d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800244a:	4b63      	ldr	r3, [pc, #396]	@ (80025d8 <HAL_RCC_ClockConfig+0x1b8>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	429a      	cmp	r2, r3
 8002456:	d001      	beq.n	800245c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e0b8      	b.n	80025ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d020      	beq.n	80024aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b00      	cmp	r3, #0
 8002472:	d005      	beq.n	8002480 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002474:	4b59      	ldr	r3, [pc, #356]	@ (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	4a58      	ldr	r2, [pc, #352]	@ (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 800247a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800247e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0308 	and.w	r3, r3, #8
 8002488:	2b00      	cmp	r3, #0
 800248a:	d005      	beq.n	8002498 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800248c:	4b53      	ldr	r3, [pc, #332]	@ (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	4a52      	ldr	r2, [pc, #328]	@ (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 8002492:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002496:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002498:	4b50      	ldr	r3, [pc, #320]	@ (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	494d      	ldr	r1, [pc, #308]	@ (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d044      	beq.n	8002540 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d107      	bne.n	80024ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024be:	4b47      	ldr	r3, [pc, #284]	@ (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d119      	bne.n	80024fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e07f      	b.n	80025ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d003      	beq.n	80024de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024da:	2b03      	cmp	r3, #3
 80024dc:	d107      	bne.n	80024ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024de:	4b3f      	ldr	r3, [pc, #252]	@ (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d109      	bne.n	80024fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e06f      	b.n	80025ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ee:	4b3b      	ldr	r3, [pc, #236]	@ (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e067      	b.n	80025ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024fe:	4b37      	ldr	r3, [pc, #220]	@ (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f023 0203 	bic.w	r2, r3, #3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	4934      	ldr	r1, [pc, #208]	@ (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 800250c:	4313      	orrs	r3, r2
 800250e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002510:	f7ff f9e4 	bl	80018dc <HAL_GetTick>
 8002514:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002516:	e00a      	b.n	800252e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002518:	f7ff f9e0 	bl	80018dc <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002526:	4293      	cmp	r3, r2
 8002528:	d901      	bls.n	800252e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e04f      	b.n	80025ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800252e:	4b2b      	ldr	r3, [pc, #172]	@ (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 020c 	and.w	r2, r3, #12
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	429a      	cmp	r2, r3
 800253e:	d1eb      	bne.n	8002518 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002540:	4b25      	ldr	r3, [pc, #148]	@ (80025d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d20c      	bcs.n	8002568 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254e:	4b22      	ldr	r3, [pc, #136]	@ (80025d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002556:	4b20      	ldr	r3, [pc, #128]	@ (80025d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	429a      	cmp	r2, r3
 8002562:	d001      	beq.n	8002568 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e032      	b.n	80025ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b00      	cmp	r3, #0
 8002572:	d008      	beq.n	8002586 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002574:	4b19      	ldr	r3, [pc, #100]	@ (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	4916      	ldr	r1, [pc, #88]	@ (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 8002582:	4313      	orrs	r3, r2
 8002584:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	2b00      	cmp	r3, #0
 8002590:	d009      	beq.n	80025a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002592:	4b12      	ldr	r3, [pc, #72]	@ (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	490e      	ldr	r1, [pc, #56]	@ (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025a6:	f000 f821 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 80025aa:	4602      	mov	r2, r0
 80025ac:	4b0b      	ldr	r3, [pc, #44]	@ (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	091b      	lsrs	r3, r3, #4
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	490a      	ldr	r1, [pc, #40]	@ (80025e0 <HAL_RCC_ClockConfig+0x1c0>)
 80025b8:	5ccb      	ldrb	r3, [r1, r3]
 80025ba:	fa22 f303 	lsr.w	r3, r2, r3
 80025be:	4a09      	ldr	r2, [pc, #36]	@ (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 80025c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025c2:	4b09      	ldr	r3, [pc, #36]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff f944 	bl	8001854 <HAL_InitTick>

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40023c00 	.word	0x40023c00
 80025dc:	40023800 	.word	0x40023800
 80025e0:	08005544 	.word	0x08005544
 80025e4:	20000000 	.word	0x20000000
 80025e8:	20000004 	.word	0x20000004

080025ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025f0:	b090      	sub	sp, #64	@ 0x40
 80025f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80025f8:	2300      	movs	r3, #0
 80025fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025fc:	2300      	movs	r3, #0
 80025fe:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002604:	4b59      	ldr	r3, [pc, #356]	@ (800276c <HAL_RCC_GetSysClockFreq+0x180>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 030c 	and.w	r3, r3, #12
 800260c:	2b08      	cmp	r3, #8
 800260e:	d00d      	beq.n	800262c <HAL_RCC_GetSysClockFreq+0x40>
 8002610:	2b08      	cmp	r3, #8
 8002612:	f200 80a1 	bhi.w	8002758 <HAL_RCC_GetSysClockFreq+0x16c>
 8002616:	2b00      	cmp	r3, #0
 8002618:	d002      	beq.n	8002620 <HAL_RCC_GetSysClockFreq+0x34>
 800261a:	2b04      	cmp	r3, #4
 800261c:	d003      	beq.n	8002626 <HAL_RCC_GetSysClockFreq+0x3a>
 800261e:	e09b      	b.n	8002758 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002620:	4b53      	ldr	r3, [pc, #332]	@ (8002770 <HAL_RCC_GetSysClockFreq+0x184>)
 8002622:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002624:	e09b      	b.n	800275e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002626:	4b53      	ldr	r3, [pc, #332]	@ (8002774 <HAL_RCC_GetSysClockFreq+0x188>)
 8002628:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800262a:	e098      	b.n	800275e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800262c:	4b4f      	ldr	r3, [pc, #316]	@ (800276c <HAL_RCC_GetSysClockFreq+0x180>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002634:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002636:	4b4d      	ldr	r3, [pc, #308]	@ (800276c <HAL_RCC_GetSysClockFreq+0x180>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d028      	beq.n	8002694 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002642:	4b4a      	ldr	r3, [pc, #296]	@ (800276c <HAL_RCC_GetSysClockFreq+0x180>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	099b      	lsrs	r3, r3, #6
 8002648:	2200      	movs	r2, #0
 800264a:	623b      	str	r3, [r7, #32]
 800264c:	627a      	str	r2, [r7, #36]	@ 0x24
 800264e:	6a3b      	ldr	r3, [r7, #32]
 8002650:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002654:	2100      	movs	r1, #0
 8002656:	4b47      	ldr	r3, [pc, #284]	@ (8002774 <HAL_RCC_GetSysClockFreq+0x188>)
 8002658:	fb03 f201 	mul.w	r2, r3, r1
 800265c:	2300      	movs	r3, #0
 800265e:	fb00 f303 	mul.w	r3, r0, r3
 8002662:	4413      	add	r3, r2
 8002664:	4a43      	ldr	r2, [pc, #268]	@ (8002774 <HAL_RCC_GetSysClockFreq+0x188>)
 8002666:	fba0 1202 	umull	r1, r2, r0, r2
 800266a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800266c:	460a      	mov	r2, r1
 800266e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002670:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002672:	4413      	add	r3, r2
 8002674:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002678:	2200      	movs	r2, #0
 800267a:	61bb      	str	r3, [r7, #24]
 800267c:	61fa      	str	r2, [r7, #28]
 800267e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002682:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002686:	f7fd fdfb 	bl	8000280 <__aeabi_uldivmod>
 800268a:	4602      	mov	r2, r0
 800268c:	460b      	mov	r3, r1
 800268e:	4613      	mov	r3, r2
 8002690:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002692:	e053      	b.n	800273c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002694:	4b35      	ldr	r3, [pc, #212]	@ (800276c <HAL_RCC_GetSysClockFreq+0x180>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	099b      	lsrs	r3, r3, #6
 800269a:	2200      	movs	r2, #0
 800269c:	613b      	str	r3, [r7, #16]
 800269e:	617a      	str	r2, [r7, #20]
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80026a6:	f04f 0b00 	mov.w	fp, #0
 80026aa:	4652      	mov	r2, sl
 80026ac:	465b      	mov	r3, fp
 80026ae:	f04f 0000 	mov.w	r0, #0
 80026b2:	f04f 0100 	mov.w	r1, #0
 80026b6:	0159      	lsls	r1, r3, #5
 80026b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026bc:	0150      	lsls	r0, r2, #5
 80026be:	4602      	mov	r2, r0
 80026c0:	460b      	mov	r3, r1
 80026c2:	ebb2 080a 	subs.w	r8, r2, sl
 80026c6:	eb63 090b 	sbc.w	r9, r3, fp
 80026ca:	f04f 0200 	mov.w	r2, #0
 80026ce:	f04f 0300 	mov.w	r3, #0
 80026d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80026d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80026da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80026de:	ebb2 0408 	subs.w	r4, r2, r8
 80026e2:	eb63 0509 	sbc.w	r5, r3, r9
 80026e6:	f04f 0200 	mov.w	r2, #0
 80026ea:	f04f 0300 	mov.w	r3, #0
 80026ee:	00eb      	lsls	r3, r5, #3
 80026f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026f4:	00e2      	lsls	r2, r4, #3
 80026f6:	4614      	mov	r4, r2
 80026f8:	461d      	mov	r5, r3
 80026fa:	eb14 030a 	adds.w	r3, r4, sl
 80026fe:	603b      	str	r3, [r7, #0]
 8002700:	eb45 030b 	adc.w	r3, r5, fp
 8002704:	607b      	str	r3, [r7, #4]
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	f04f 0300 	mov.w	r3, #0
 800270e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002712:	4629      	mov	r1, r5
 8002714:	028b      	lsls	r3, r1, #10
 8002716:	4621      	mov	r1, r4
 8002718:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800271c:	4621      	mov	r1, r4
 800271e:	028a      	lsls	r2, r1, #10
 8002720:	4610      	mov	r0, r2
 8002722:	4619      	mov	r1, r3
 8002724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002726:	2200      	movs	r2, #0
 8002728:	60bb      	str	r3, [r7, #8]
 800272a:	60fa      	str	r2, [r7, #12]
 800272c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002730:	f7fd fda6 	bl	8000280 <__aeabi_uldivmod>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4613      	mov	r3, r2
 800273a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800273c:	4b0b      	ldr	r3, [pc, #44]	@ (800276c <HAL_RCC_GetSysClockFreq+0x180>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	0c1b      	lsrs	r3, r3, #16
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	3301      	adds	r3, #1
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800274c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800274e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002750:	fbb2 f3f3 	udiv	r3, r2, r3
 8002754:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002756:	e002      	b.n	800275e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002758:	4b05      	ldr	r3, [pc, #20]	@ (8002770 <HAL_RCC_GetSysClockFreq+0x184>)
 800275a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800275c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800275e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002760:	4618      	mov	r0, r3
 8002762:	3740      	adds	r7, #64	@ 0x40
 8002764:	46bd      	mov	sp, r7
 8002766:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800276a:	bf00      	nop
 800276c:	40023800 	.word	0x40023800
 8002770:	00f42400 	.word	0x00f42400
 8002774:	017d7840 	.word	0x017d7840

08002778 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800277c:	4b03      	ldr	r3, [pc, #12]	@ (800278c <HAL_RCC_GetHCLKFreq+0x14>)
 800277e:	681b      	ldr	r3, [r3, #0]
}
 8002780:	4618      	mov	r0, r3
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	20000000 	.word	0x20000000

08002790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002794:	f7ff fff0 	bl	8002778 <HAL_RCC_GetHCLKFreq>
 8002798:	4602      	mov	r2, r0
 800279a:	4b05      	ldr	r3, [pc, #20]	@ (80027b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	0a9b      	lsrs	r3, r3, #10
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	4903      	ldr	r1, [pc, #12]	@ (80027b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027a6:	5ccb      	ldrb	r3, [r1, r3]
 80027a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40023800 	.word	0x40023800
 80027b4:	08005554 	.word	0x08005554

080027b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027bc:	f7ff ffdc 	bl	8002778 <HAL_RCC_GetHCLKFreq>
 80027c0:	4602      	mov	r2, r0
 80027c2:	4b05      	ldr	r3, [pc, #20]	@ (80027d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	0b5b      	lsrs	r3, r3, #13
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	4903      	ldr	r1, [pc, #12]	@ (80027dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ce:	5ccb      	ldrb	r3, [r1, r3]
 80027d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40023800 	.word	0x40023800
 80027dc:	08005554 	.word	0x08005554

080027e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e041      	b.n	8002876 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d106      	bne.n	800280c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7fe fdb6 	bl	8001378 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2202      	movs	r2, #2
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3304      	adds	r3, #4
 800281c:	4619      	mov	r1, r3
 800281e:	4610      	mov	r0, r2
 8002820:	f001 f868 	bl	80038f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b082      	sub	sp, #8
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e041      	b.n	8002914 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	d106      	bne.n	80028aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 f839 	bl	800291c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2202      	movs	r2, #2
 80028ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3304      	adds	r3, #4
 80028ba:	4619      	mov	r1, r3
 80028bc:	4610      	mov	r0, r2
 80028be:	f001 f819 	bl	80038f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d109      	bne.n	8002954 <HAL_TIM_PWM_Start+0x24>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b01      	cmp	r3, #1
 800294a:	bf14      	ite	ne
 800294c:	2301      	movne	r3, #1
 800294e:	2300      	moveq	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	e022      	b.n	800299a <HAL_TIM_PWM_Start+0x6a>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	2b04      	cmp	r3, #4
 8002958:	d109      	bne.n	800296e <HAL_TIM_PWM_Start+0x3e>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b01      	cmp	r3, #1
 8002964:	bf14      	ite	ne
 8002966:	2301      	movne	r3, #1
 8002968:	2300      	moveq	r3, #0
 800296a:	b2db      	uxtb	r3, r3
 800296c:	e015      	b.n	800299a <HAL_TIM_PWM_Start+0x6a>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	2b08      	cmp	r3, #8
 8002972:	d109      	bne.n	8002988 <HAL_TIM_PWM_Start+0x58>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b01      	cmp	r3, #1
 800297e:	bf14      	ite	ne
 8002980:	2301      	movne	r3, #1
 8002982:	2300      	moveq	r3, #0
 8002984:	b2db      	uxtb	r3, r3
 8002986:	e008      	b.n	800299a <HAL_TIM_PWM_Start+0x6a>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b01      	cmp	r3, #1
 8002992:	bf14      	ite	ne
 8002994:	2301      	movne	r3, #1
 8002996:	2300      	moveq	r3, #0
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e068      	b.n	8002a74 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d104      	bne.n	80029b2 <HAL_TIM_PWM_Start+0x82>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2202      	movs	r2, #2
 80029ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029b0:	e013      	b.n	80029da <HAL_TIM_PWM_Start+0xaa>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	2b04      	cmp	r3, #4
 80029b6:	d104      	bne.n	80029c2 <HAL_TIM_PWM_Start+0x92>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2202      	movs	r2, #2
 80029bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029c0:	e00b      	b.n	80029da <HAL_TIM_PWM_Start+0xaa>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	2b08      	cmp	r3, #8
 80029c6:	d104      	bne.n	80029d2 <HAL_TIM_PWM_Start+0xa2>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2202      	movs	r2, #2
 80029cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029d0:	e003      	b.n	80029da <HAL_TIM_PWM_Start+0xaa>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2202      	movs	r2, #2
 80029d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2201      	movs	r2, #1
 80029e0:	6839      	ldr	r1, [r7, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f001 fb56 	bl	8004094 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a23      	ldr	r2, [pc, #140]	@ (8002a7c <HAL_TIM_PWM_Start+0x14c>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d107      	bne.n	8002a02 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a00:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a1d      	ldr	r2, [pc, #116]	@ (8002a7c <HAL_TIM_PWM_Start+0x14c>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d018      	beq.n	8002a3e <HAL_TIM_PWM_Start+0x10e>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a14:	d013      	beq.n	8002a3e <HAL_TIM_PWM_Start+0x10e>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a19      	ldr	r2, [pc, #100]	@ (8002a80 <HAL_TIM_PWM_Start+0x150>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d00e      	beq.n	8002a3e <HAL_TIM_PWM_Start+0x10e>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a17      	ldr	r2, [pc, #92]	@ (8002a84 <HAL_TIM_PWM_Start+0x154>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d009      	beq.n	8002a3e <HAL_TIM_PWM_Start+0x10e>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a16      	ldr	r2, [pc, #88]	@ (8002a88 <HAL_TIM_PWM_Start+0x158>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d004      	beq.n	8002a3e <HAL_TIM_PWM_Start+0x10e>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a14      	ldr	r2, [pc, #80]	@ (8002a8c <HAL_TIM_PWM_Start+0x15c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d111      	bne.n	8002a62 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f003 0307 	and.w	r3, r3, #7
 8002a48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2b06      	cmp	r3, #6
 8002a4e:	d010      	beq.n	8002a72 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 0201 	orr.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a60:	e007      	b.n	8002a72 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f042 0201 	orr.w	r2, r2, #1
 8002a70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40010000 	.word	0x40010000
 8002a80:	40000400 	.word	0x40000400
 8002a84:	40000800 	.word	0x40000800
 8002a88:	40000c00 	.word	0x40000c00
 8002a8c:	40014000 	.word	0x40014000

08002a90 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	6839      	ldr	r1, [r7, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f001 faf6 	bl	8004094 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a29      	ldr	r2, [pc, #164]	@ (8002b54 <HAL_TIM_PWM_Stop+0xc4>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d117      	bne.n	8002ae2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6a1a      	ldr	r2, [r3, #32]
 8002ab8:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002abc:	4013      	ands	r3, r2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10f      	bne.n	8002ae2 <HAL_TIM_PWM_Stop+0x52>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6a1a      	ldr	r2, [r3, #32]
 8002ac8:	f240 4344 	movw	r3, #1092	@ 0x444
 8002acc:	4013      	ands	r3, r2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d107      	bne.n	8002ae2 <HAL_TIM_PWM_Stop+0x52>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ae0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6a1a      	ldr	r2, [r3, #32]
 8002ae8:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002aec:	4013      	ands	r3, r2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10f      	bne.n	8002b12 <HAL_TIM_PWM_Stop+0x82>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6a1a      	ldr	r2, [r3, #32]
 8002af8:	f240 4344 	movw	r3, #1092	@ 0x444
 8002afc:	4013      	ands	r3, r2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d107      	bne.n	8002b12 <HAL_TIM_PWM_Stop+0x82>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0201 	bic.w	r2, r2, #1
 8002b10:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d104      	bne.n	8002b22 <HAL_TIM_PWM_Stop+0x92>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b20:	e013      	b.n	8002b4a <HAL_TIM_PWM_Stop+0xba>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	2b04      	cmp	r3, #4
 8002b26:	d104      	bne.n	8002b32 <HAL_TIM_PWM_Stop+0xa2>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b30:	e00b      	b.n	8002b4a <HAL_TIM_PWM_Stop+0xba>
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	2b08      	cmp	r3, #8
 8002b36:	d104      	bne.n	8002b42 <HAL_TIM_PWM_Stop+0xb2>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b40:	e003      	b.n	8002b4a <HAL_TIM_PWM_Stop+0xba>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40010000 	.word	0x40010000

08002b58 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e041      	b.n	8002bee <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d106      	bne.n	8002b84 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f839 	bl	8002bf6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2202      	movs	r2, #2
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3304      	adds	r3, #4
 8002b94:	4619      	mov	r1, r3
 8002b96:	4610      	mov	r0, r2
 8002b98:	f000 feac 	bl	80038f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
	...

08002c0c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c16:	2300      	movs	r3, #0
 8002c18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d104      	bne.n	8002c2a <HAL_TIM_IC_Start_IT+0x1e>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	e013      	b.n	8002c52 <HAL_TIM_IC_Start_IT+0x46>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	2b04      	cmp	r3, #4
 8002c2e:	d104      	bne.n	8002c3a <HAL_TIM_IC_Start_IT+0x2e>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	e00b      	b.n	8002c52 <HAL_TIM_IC_Start_IT+0x46>
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d104      	bne.n	8002c4a <HAL_TIM_IC_Start_IT+0x3e>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	e003      	b.n	8002c52 <HAL_TIM_IC_Start_IT+0x46>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d104      	bne.n	8002c64 <HAL_TIM_IC_Start_IT+0x58>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	e013      	b.n	8002c8c <HAL_TIM_IC_Start_IT+0x80>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	2b04      	cmp	r3, #4
 8002c68:	d104      	bne.n	8002c74 <HAL_TIM_IC_Start_IT+0x68>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	e00b      	b.n	8002c8c <HAL_TIM_IC_Start_IT+0x80>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	2b08      	cmp	r3, #8
 8002c78:	d104      	bne.n	8002c84 <HAL_TIM_IC_Start_IT+0x78>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	e003      	b.n	8002c8c <HAL_TIM_IC_Start_IT+0x80>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c8e:	7bbb      	ldrb	r3, [r7, #14]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d102      	bne.n	8002c9a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002c94:	7b7b      	ldrb	r3, [r7, #13]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d001      	beq.n	8002c9e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e0c2      	b.n	8002e24 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d104      	bne.n	8002cae <HAL_TIM_IC_Start_IT+0xa2>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cac:	e013      	b.n	8002cd6 <HAL_TIM_IC_Start_IT+0xca>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d104      	bne.n	8002cbe <HAL_TIM_IC_Start_IT+0xb2>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cbc:	e00b      	b.n	8002cd6 <HAL_TIM_IC_Start_IT+0xca>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d104      	bne.n	8002cce <HAL_TIM_IC_Start_IT+0xc2>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ccc:	e003      	b.n	8002cd6 <HAL_TIM_IC_Start_IT+0xca>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d104      	bne.n	8002ce6 <HAL_TIM_IC_Start_IT+0xda>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2202      	movs	r2, #2
 8002ce0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ce4:	e013      	b.n	8002d0e <HAL_TIM_IC_Start_IT+0x102>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	2b04      	cmp	r3, #4
 8002cea:	d104      	bne.n	8002cf6 <HAL_TIM_IC_Start_IT+0xea>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2202      	movs	r2, #2
 8002cf0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002cf4:	e00b      	b.n	8002d0e <HAL_TIM_IC_Start_IT+0x102>
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d104      	bne.n	8002d06 <HAL_TIM_IC_Start_IT+0xfa>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d04:	e003      	b.n	8002d0e <HAL_TIM_IC_Start_IT+0x102>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2202      	movs	r2, #2
 8002d0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	2b0c      	cmp	r3, #12
 8002d12:	d841      	bhi.n	8002d98 <HAL_TIM_IC_Start_IT+0x18c>
 8002d14:	a201      	add	r2, pc, #4	@ (adr r2, 8002d1c <HAL_TIM_IC_Start_IT+0x110>)
 8002d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1a:	bf00      	nop
 8002d1c:	08002d51 	.word	0x08002d51
 8002d20:	08002d99 	.word	0x08002d99
 8002d24:	08002d99 	.word	0x08002d99
 8002d28:	08002d99 	.word	0x08002d99
 8002d2c:	08002d63 	.word	0x08002d63
 8002d30:	08002d99 	.word	0x08002d99
 8002d34:	08002d99 	.word	0x08002d99
 8002d38:	08002d99 	.word	0x08002d99
 8002d3c:	08002d75 	.word	0x08002d75
 8002d40:	08002d99 	.word	0x08002d99
 8002d44:	08002d99 	.word	0x08002d99
 8002d48:	08002d99 	.word	0x08002d99
 8002d4c:	08002d87 	.word	0x08002d87
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68da      	ldr	r2, [r3, #12]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 0202 	orr.w	r2, r2, #2
 8002d5e:	60da      	str	r2, [r3, #12]
      break;
 8002d60:	e01d      	b.n	8002d9e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68da      	ldr	r2, [r3, #12]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f042 0204 	orr.w	r2, r2, #4
 8002d70:	60da      	str	r2, [r3, #12]
      break;
 8002d72:	e014      	b.n	8002d9e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68da      	ldr	r2, [r3, #12]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0208 	orr.w	r2, r2, #8
 8002d82:	60da      	str	r2, [r3, #12]
      break;
 8002d84:	e00b      	b.n	8002d9e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68da      	ldr	r2, [r3, #12]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f042 0210 	orr.w	r2, r2, #16
 8002d94:	60da      	str	r2, [r3, #12]
      break;
 8002d96:	e002      	b.n	8002d9e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d9c:	bf00      	nop
  }

  if (status == HAL_OK)
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d13e      	bne.n	8002e22 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2201      	movs	r2, #1
 8002daa:	6839      	ldr	r1, [r7, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f001 f971 	bl	8004094 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a1d      	ldr	r2, [pc, #116]	@ (8002e2c <HAL_TIM_IC_Start_IT+0x220>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d018      	beq.n	8002dee <HAL_TIM_IC_Start_IT+0x1e2>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dc4:	d013      	beq.n	8002dee <HAL_TIM_IC_Start_IT+0x1e2>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a19      	ldr	r2, [pc, #100]	@ (8002e30 <HAL_TIM_IC_Start_IT+0x224>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d00e      	beq.n	8002dee <HAL_TIM_IC_Start_IT+0x1e2>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a17      	ldr	r2, [pc, #92]	@ (8002e34 <HAL_TIM_IC_Start_IT+0x228>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d009      	beq.n	8002dee <HAL_TIM_IC_Start_IT+0x1e2>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a16      	ldr	r2, [pc, #88]	@ (8002e38 <HAL_TIM_IC_Start_IT+0x22c>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d004      	beq.n	8002dee <HAL_TIM_IC_Start_IT+0x1e2>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a14      	ldr	r2, [pc, #80]	@ (8002e3c <HAL_TIM_IC_Start_IT+0x230>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d111      	bne.n	8002e12 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	2b06      	cmp	r3, #6
 8002dfe:	d010      	beq.n	8002e22 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 0201 	orr.w	r2, r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e10:	e007      	b.n	8002e22 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f042 0201 	orr.w	r2, r2, #1
 8002e20:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40010000 	.word	0x40010000
 8002e30:	40000400 	.word	0x40000400
 8002e34:	40000800 	.word	0x40000800
 8002e38:	40000c00 	.word	0x40000c00
 8002e3c:	40014000 	.word	0x40014000

08002e40 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	2b0c      	cmp	r3, #12
 8002e52:	d841      	bhi.n	8002ed8 <HAL_TIM_IC_Stop_IT+0x98>
 8002e54:	a201      	add	r2, pc, #4	@ (adr r2, 8002e5c <HAL_TIM_IC_Stop_IT+0x1c>)
 8002e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e5a:	bf00      	nop
 8002e5c:	08002e91 	.word	0x08002e91
 8002e60:	08002ed9 	.word	0x08002ed9
 8002e64:	08002ed9 	.word	0x08002ed9
 8002e68:	08002ed9 	.word	0x08002ed9
 8002e6c:	08002ea3 	.word	0x08002ea3
 8002e70:	08002ed9 	.word	0x08002ed9
 8002e74:	08002ed9 	.word	0x08002ed9
 8002e78:	08002ed9 	.word	0x08002ed9
 8002e7c:	08002eb5 	.word	0x08002eb5
 8002e80:	08002ed9 	.word	0x08002ed9
 8002e84:	08002ed9 	.word	0x08002ed9
 8002e88:	08002ed9 	.word	0x08002ed9
 8002e8c:	08002ec7 	.word	0x08002ec7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68da      	ldr	r2, [r3, #12]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0202 	bic.w	r2, r2, #2
 8002e9e:	60da      	str	r2, [r3, #12]
      break;
 8002ea0:	e01d      	b.n	8002ede <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68da      	ldr	r2, [r3, #12]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 0204 	bic.w	r2, r2, #4
 8002eb0:	60da      	str	r2, [r3, #12]
      break;
 8002eb2:	e014      	b.n	8002ede <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68da      	ldr	r2, [r3, #12]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 0208 	bic.w	r2, r2, #8
 8002ec2:	60da      	str	r2, [r3, #12]
      break;
 8002ec4:	e00b      	b.n	8002ede <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68da      	ldr	r2, [r3, #12]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0210 	bic.w	r2, r2, #16
 8002ed4:	60da      	str	r2, [r3, #12]
      break;
 8002ed6:	e002      	b.n	8002ede <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	73fb      	strb	r3, [r7, #15]
      break;
 8002edc:	bf00      	nop
  }

  if (status == HAL_OK)
 8002ede:	7bfb      	ldrb	r3, [r7, #15]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d156      	bne.n	8002f92 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	6839      	ldr	r1, [r7, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f001 f8d1 	bl	8004094 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6a1a      	ldr	r2, [r3, #32]
 8002ef8:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002efc:	4013      	ands	r3, r2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10f      	bne.n	8002f22 <HAL_TIM_IC_Stop_IT+0xe2>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6a1a      	ldr	r2, [r3, #32]
 8002f08:	f240 4344 	movw	r3, #1092	@ 0x444
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d107      	bne.n	8002f22 <HAL_TIM_IC_Stop_IT+0xe2>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 0201 	bic.w	r2, r2, #1
 8002f20:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d104      	bne.n	8002f32 <HAL_TIM_IC_Stop_IT+0xf2>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f30:	e013      	b.n	8002f5a <HAL_TIM_IC_Stop_IT+0x11a>
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	2b04      	cmp	r3, #4
 8002f36:	d104      	bne.n	8002f42 <HAL_TIM_IC_Stop_IT+0x102>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f40:	e00b      	b.n	8002f5a <HAL_TIM_IC_Stop_IT+0x11a>
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d104      	bne.n	8002f52 <HAL_TIM_IC_Stop_IT+0x112>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f50:	e003      	b.n	8002f5a <HAL_TIM_IC_Stop_IT+0x11a>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d104      	bne.n	8002f6a <HAL_TIM_IC_Stop_IT+0x12a>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f68:	e013      	b.n	8002f92 <HAL_TIM_IC_Stop_IT+0x152>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	2b04      	cmp	r3, #4
 8002f6e:	d104      	bne.n	8002f7a <HAL_TIM_IC_Stop_IT+0x13a>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f78:	e00b      	b.n	8002f92 <HAL_TIM_IC_Stop_IT+0x152>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	2b08      	cmp	r3, #8
 8002f7e:	d104      	bne.n	8002f8a <HAL_TIM_IC_Stop_IT+0x14a>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f88:	e003      	b.n	8002f92 <HAL_TIM_IC_Stop_IT+0x152>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 8002f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e097      	b.n	80030e0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d106      	bne.n	8002fca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7fe fa53 	bl	8001470 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2202      	movs	r2, #2
 8002fce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	6812      	ldr	r2, [r2, #0]
 8002fdc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002fe0:	f023 0307 	bic.w	r3, r3, #7
 8002fe4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	3304      	adds	r3, #4
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4610      	mov	r0, r2
 8002ff2:	f000 fc7f 	bl	80038f4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	4313      	orrs	r3, r2
 8003016:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800301e:	f023 0303 	bic.w	r3, r3, #3
 8003022:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	021b      	lsls	r3, r3, #8
 800302e:	4313      	orrs	r3, r2
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	4313      	orrs	r3, r2
 8003034:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800303c:	f023 030c 	bic.w	r3, r3, #12
 8003040:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003048:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800304c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	68da      	ldr	r2, [r3, #12]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	021b      	lsls	r3, r3, #8
 8003058:	4313      	orrs	r3, r2
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	4313      	orrs	r3, r2
 800305e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	011a      	lsls	r2, r3, #4
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	031b      	lsls	r3, r3, #12
 800306c:	4313      	orrs	r3, r2
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	4313      	orrs	r3, r2
 8003072:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800307a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003082:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	011b      	lsls	r3, r3, #4
 800308e:	4313      	orrs	r3, r2
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	4313      	orrs	r3, r2
 8003094:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3718      	adds	r7, #24
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030f8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003100:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003108:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003110:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d110      	bne.n	800313a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003118:	7bfb      	ldrb	r3, [r7, #15]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d102      	bne.n	8003124 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800311e:	7b7b      	ldrb	r3, [r7, #13]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d001      	beq.n	8003128 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e069      	b.n	80031fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2202      	movs	r2, #2
 800312c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2202      	movs	r2, #2
 8003134:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003138:	e031      	b.n	800319e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2b04      	cmp	r3, #4
 800313e:	d110      	bne.n	8003162 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003140:	7bbb      	ldrb	r3, [r7, #14]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d102      	bne.n	800314c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003146:	7b3b      	ldrb	r3, [r7, #12]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d001      	beq.n	8003150 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e055      	b.n	80031fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2202      	movs	r2, #2
 8003154:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2202      	movs	r2, #2
 800315c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003160:	e01d      	b.n	800319e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003162:	7bfb      	ldrb	r3, [r7, #15]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d108      	bne.n	800317a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003168:	7bbb      	ldrb	r3, [r7, #14]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d105      	bne.n	800317a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800316e:	7b7b      	ldrb	r3, [r7, #13]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d102      	bne.n	800317a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003174:	7b3b      	ldrb	r3, [r7, #12]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d001      	beq.n	800317e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e03e      	b.n	80031fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2202      	movs	r2, #2
 8003182:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2202      	movs	r2, #2
 800318a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2202      	movs	r2, #2
 8003192:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2202      	movs	r2, #2
 800319a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <HAL_TIM_Encoder_Start+0xc4>
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	d008      	beq.n	80031bc <HAL_TIM_Encoder_Start+0xd4>
 80031aa:	e00f      	b.n	80031cc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2201      	movs	r2, #1
 80031b2:	2100      	movs	r1, #0
 80031b4:	4618      	mov	r0, r3
 80031b6:	f000 ff6d 	bl	8004094 <TIM_CCxChannelCmd>
      break;
 80031ba:	e016      	b.n	80031ea <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2201      	movs	r2, #1
 80031c2:	2104      	movs	r1, #4
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 ff65 	bl	8004094 <TIM_CCxChannelCmd>
      break;
 80031ca:	e00e      	b.n	80031ea <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2201      	movs	r2, #1
 80031d2:	2100      	movs	r1, #0
 80031d4:	4618      	mov	r0, r3
 80031d6:	f000 ff5d 	bl	8004094 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2201      	movs	r2, #1
 80031e0:	2104      	movs	r1, #4
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 ff56 	bl	8004094 <TIM_CCxChannelCmd>
      break;
 80031e8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f042 0201 	orr.w	r2, r2, #1
 80031f8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d020      	beq.n	8003268 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d01b      	beq.n	8003268 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f06f 0202 	mvn.w	r2, #2
 8003238:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	f003 0303 	and.w	r3, r3, #3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7fd fc94 	bl	8000b7c <HAL_TIM_IC_CaptureCallback>
 8003254:	e005      	b.n	8003262 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 fb2e 	bl	80038b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 fb35 	bl	80038cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f003 0304 	and.w	r3, r3, #4
 800326e:	2b00      	cmp	r3, #0
 8003270:	d020      	beq.n	80032b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b00      	cmp	r3, #0
 800327a:	d01b      	beq.n	80032b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f06f 0204 	mvn.w	r2, #4
 8003284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2202      	movs	r2, #2
 800328a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7fd fc6e 	bl	8000b7c <HAL_TIM_IC_CaptureCallback>
 80032a0:	e005      	b.n	80032ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 fb08 	bl	80038b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 fb0f 	bl	80038cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	f003 0308 	and.w	r3, r3, #8
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d020      	beq.n	8003300 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f003 0308 	and.w	r3, r3, #8
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d01b      	beq.n	8003300 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f06f 0208 	mvn.w	r2, #8
 80032d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2204      	movs	r2, #4
 80032d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	f003 0303 	and.w	r3, r3, #3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7fd fc48 	bl	8000b7c <HAL_TIM_IC_CaptureCallback>
 80032ec:	e005      	b.n	80032fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 fae2 	bl	80038b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 fae9 	bl	80038cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	f003 0310 	and.w	r3, r3, #16
 8003306:	2b00      	cmp	r3, #0
 8003308:	d020      	beq.n	800334c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f003 0310 	and.w	r3, r3, #16
 8003310:	2b00      	cmp	r3, #0
 8003312:	d01b      	beq.n	800334c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f06f 0210 	mvn.w	r2, #16
 800331c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2208      	movs	r2, #8
 8003322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7fd fc22 	bl	8000b7c <HAL_TIM_IC_CaptureCallback>
 8003338:	e005      	b.n	8003346 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 fabc 	bl	80038b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 fac3 	bl	80038cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00c      	beq.n	8003370 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b00      	cmp	r3, #0
 800335e:	d007      	beq.n	8003370 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f06f 0201 	mvn.w	r2, #1
 8003368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7fd fc40 	bl	8000bf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00c      	beq.n	8003394 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003380:	2b00      	cmp	r3, #0
 8003382:	d007      	beq.n	8003394 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800338c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 ff1e 	bl	80041d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00c      	beq.n	80033b8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d007      	beq.n	80033b8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80033b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 fa94 	bl	80038e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	f003 0320 	and.w	r3, r3, #32
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00c      	beq.n	80033dc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f003 0320 	and.w	r3, r3, #32
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d007      	beq.n	80033dc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f06f 0220 	mvn.w	r2, #32
 80033d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 fef0 	bl	80041bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033dc:	bf00      	nop
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033f0:	2300      	movs	r3, #0
 80033f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d101      	bne.n	8003402 <HAL_TIM_IC_ConfigChannel+0x1e>
 80033fe:	2302      	movs	r3, #2
 8003400:	e088      	b.n	8003514 <HAL_TIM_IC_ConfigChannel+0x130>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d11b      	bne.n	8003448 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003420:	f000 fc80 	bl	8003d24 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	699a      	ldr	r2, [r3, #24]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 020c 	bic.w	r2, r2, #12
 8003432:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6999      	ldr	r1, [r3, #24]
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	689a      	ldr	r2, [r3, #8]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	619a      	str	r2, [r3, #24]
 8003446:	e060      	b.n	800350a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b04      	cmp	r3, #4
 800344c:	d11c      	bne.n	8003488 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800345e:	f000 fcf8 	bl	8003e52 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	699a      	ldr	r2, [r3, #24]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003470:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6999      	ldr	r1, [r3, #24]
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	021a      	lsls	r2, r3, #8
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	619a      	str	r2, [r3, #24]
 8003486:	e040      	b.n	800350a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b08      	cmp	r3, #8
 800348c:	d11b      	bne.n	80034c6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800349e:	f000 fd45 	bl	8003f2c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	69da      	ldr	r2, [r3, #28]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 020c 	bic.w	r2, r2, #12
 80034b0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	69d9      	ldr	r1, [r3, #28]
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	61da      	str	r2, [r3, #28]
 80034c4:	e021      	b.n	800350a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b0c      	cmp	r3, #12
 80034ca:	d11c      	bne.n	8003506 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80034dc:	f000 fd62 	bl	8003fa4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	69da      	ldr	r2, [r3, #28]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80034ee:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	69d9      	ldr	r1, [r3, #28]
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	021a      	lsls	r2, r3, #8
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	430a      	orrs	r2, r1
 8003502:	61da      	str	r2, [r3, #28]
 8003504:	e001      	b.n	800350a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003512:	7dfb      	ldrb	r3, [r7, #23]
}
 8003514:	4618      	mov	r0, r3
 8003516:	3718      	adds	r7, #24
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003528:	2300      	movs	r3, #0
 800352a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003532:	2b01      	cmp	r3, #1
 8003534:	d101      	bne.n	800353a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003536:	2302      	movs	r3, #2
 8003538:	e0ae      	b.n	8003698 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b0c      	cmp	r3, #12
 8003546:	f200 809f 	bhi.w	8003688 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800354a:	a201      	add	r2, pc, #4	@ (adr r2, 8003550 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800354c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003550:	08003585 	.word	0x08003585
 8003554:	08003689 	.word	0x08003689
 8003558:	08003689 	.word	0x08003689
 800355c:	08003689 	.word	0x08003689
 8003560:	080035c5 	.word	0x080035c5
 8003564:	08003689 	.word	0x08003689
 8003568:	08003689 	.word	0x08003689
 800356c:	08003689 	.word	0x08003689
 8003570:	08003607 	.word	0x08003607
 8003574:	08003689 	.word	0x08003689
 8003578:	08003689 	.word	0x08003689
 800357c:	08003689 	.word	0x08003689
 8003580:	08003647 	.word	0x08003647
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68b9      	ldr	r1, [r7, #8]
 800358a:	4618      	mov	r0, r3
 800358c:	f000 fa3e 	bl	8003a0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	699a      	ldr	r2, [r3, #24]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0208 	orr.w	r2, r2, #8
 800359e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	699a      	ldr	r2, [r3, #24]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 0204 	bic.w	r2, r2, #4
 80035ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6999      	ldr	r1, [r3, #24]
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	691a      	ldr	r2, [r3, #16]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	619a      	str	r2, [r3, #24]
      break;
 80035c2:	e064      	b.n	800368e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68b9      	ldr	r1, [r7, #8]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 fa84 	bl	8003ad8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699a      	ldr	r2, [r3, #24]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	699a      	ldr	r2, [r3, #24]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6999      	ldr	r1, [r3, #24]
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	021a      	lsls	r2, r3, #8
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	430a      	orrs	r2, r1
 8003602:	619a      	str	r2, [r3, #24]
      break;
 8003604:	e043      	b.n	800368e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68b9      	ldr	r1, [r7, #8]
 800360c:	4618      	mov	r0, r3
 800360e:	f000 facf 	bl	8003bb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	69da      	ldr	r2, [r3, #28]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f042 0208 	orr.w	r2, r2, #8
 8003620:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	69da      	ldr	r2, [r3, #28]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0204 	bic.w	r2, r2, #4
 8003630:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	69d9      	ldr	r1, [r3, #28]
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	691a      	ldr	r2, [r3, #16]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	61da      	str	r2, [r3, #28]
      break;
 8003644:	e023      	b.n	800368e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68b9      	ldr	r1, [r7, #8]
 800364c:	4618      	mov	r0, r3
 800364e:	f000 fb19 	bl	8003c84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	69da      	ldr	r2, [r3, #28]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003660:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	69da      	ldr	r2, [r3, #28]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003670:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	69d9      	ldr	r1, [r3, #28]
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	021a      	lsls	r2, r3, #8
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	61da      	str	r2, [r3, #28]
      break;
 8003686:	e002      	b.n	800368e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	75fb      	strb	r3, [r7, #23]
      break;
 800368c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003696:	7dfb      	ldrb	r3, [r7, #23]
}
 8003698:	4618      	mov	r0, r3
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036aa:	2300      	movs	r3, #0
 80036ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d101      	bne.n	80036bc <HAL_TIM_ConfigClockSource+0x1c>
 80036b8:	2302      	movs	r3, #2
 80036ba:	e0b4      	b.n	8003826 <HAL_TIM_ConfigClockSource+0x186>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80036da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036f4:	d03e      	beq.n	8003774 <HAL_TIM_ConfigClockSource+0xd4>
 80036f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036fa:	f200 8087 	bhi.w	800380c <HAL_TIM_ConfigClockSource+0x16c>
 80036fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003702:	f000 8086 	beq.w	8003812 <HAL_TIM_ConfigClockSource+0x172>
 8003706:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800370a:	d87f      	bhi.n	800380c <HAL_TIM_ConfigClockSource+0x16c>
 800370c:	2b70      	cmp	r3, #112	@ 0x70
 800370e:	d01a      	beq.n	8003746 <HAL_TIM_ConfigClockSource+0xa6>
 8003710:	2b70      	cmp	r3, #112	@ 0x70
 8003712:	d87b      	bhi.n	800380c <HAL_TIM_ConfigClockSource+0x16c>
 8003714:	2b60      	cmp	r3, #96	@ 0x60
 8003716:	d050      	beq.n	80037ba <HAL_TIM_ConfigClockSource+0x11a>
 8003718:	2b60      	cmp	r3, #96	@ 0x60
 800371a:	d877      	bhi.n	800380c <HAL_TIM_ConfigClockSource+0x16c>
 800371c:	2b50      	cmp	r3, #80	@ 0x50
 800371e:	d03c      	beq.n	800379a <HAL_TIM_ConfigClockSource+0xfa>
 8003720:	2b50      	cmp	r3, #80	@ 0x50
 8003722:	d873      	bhi.n	800380c <HAL_TIM_ConfigClockSource+0x16c>
 8003724:	2b40      	cmp	r3, #64	@ 0x40
 8003726:	d058      	beq.n	80037da <HAL_TIM_ConfigClockSource+0x13a>
 8003728:	2b40      	cmp	r3, #64	@ 0x40
 800372a:	d86f      	bhi.n	800380c <HAL_TIM_ConfigClockSource+0x16c>
 800372c:	2b30      	cmp	r3, #48	@ 0x30
 800372e:	d064      	beq.n	80037fa <HAL_TIM_ConfigClockSource+0x15a>
 8003730:	2b30      	cmp	r3, #48	@ 0x30
 8003732:	d86b      	bhi.n	800380c <HAL_TIM_ConfigClockSource+0x16c>
 8003734:	2b20      	cmp	r3, #32
 8003736:	d060      	beq.n	80037fa <HAL_TIM_ConfigClockSource+0x15a>
 8003738:	2b20      	cmp	r3, #32
 800373a:	d867      	bhi.n	800380c <HAL_TIM_ConfigClockSource+0x16c>
 800373c:	2b00      	cmp	r3, #0
 800373e:	d05c      	beq.n	80037fa <HAL_TIM_ConfigClockSource+0x15a>
 8003740:	2b10      	cmp	r3, #16
 8003742:	d05a      	beq.n	80037fa <HAL_TIM_ConfigClockSource+0x15a>
 8003744:	e062      	b.n	800380c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003756:	f000 fc7d 	bl	8004054 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003768:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	609a      	str	r2, [r3, #8]
      break;
 8003772:	e04f      	b.n	8003814 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003784:	f000 fc66 	bl	8004054 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689a      	ldr	r2, [r3, #8]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003796:	609a      	str	r2, [r3, #8]
      break;
 8003798:	e03c      	b.n	8003814 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037a6:	461a      	mov	r2, r3
 80037a8:	f000 fb24 	bl	8003df4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2150      	movs	r1, #80	@ 0x50
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 fc33 	bl	800401e <TIM_ITRx_SetConfig>
      break;
 80037b8:	e02c      	b.n	8003814 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037c6:	461a      	mov	r2, r3
 80037c8:	f000 fb80 	bl	8003ecc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2160      	movs	r1, #96	@ 0x60
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 fc23 	bl	800401e <TIM_ITRx_SetConfig>
      break;
 80037d8:	e01c      	b.n	8003814 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037e6:	461a      	mov	r2, r3
 80037e8:	f000 fb04 	bl	8003df4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2140      	movs	r1, #64	@ 0x40
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 fc13 	bl	800401e <TIM_ITRx_SetConfig>
      break;
 80037f8:	e00c      	b.n	8003814 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4619      	mov	r1, r3
 8003804:	4610      	mov	r0, r2
 8003806:	f000 fc0a 	bl	800401e <TIM_ITRx_SetConfig>
      break;
 800380a:	e003      	b.n	8003814 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	73fb      	strb	r3, [r7, #15]
      break;
 8003810:	e000      	b.n	8003814 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003812:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003824:	7bfb      	ldrb	r3, [r7, #15]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
	...

08003830 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800383a:	2300      	movs	r3, #0
 800383c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	2b0c      	cmp	r3, #12
 8003842:	d831      	bhi.n	80038a8 <HAL_TIM_ReadCapturedValue+0x78>
 8003844:	a201      	add	r2, pc, #4	@ (adr r2, 800384c <HAL_TIM_ReadCapturedValue+0x1c>)
 8003846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800384a:	bf00      	nop
 800384c:	08003881 	.word	0x08003881
 8003850:	080038a9 	.word	0x080038a9
 8003854:	080038a9 	.word	0x080038a9
 8003858:	080038a9 	.word	0x080038a9
 800385c:	0800388b 	.word	0x0800388b
 8003860:	080038a9 	.word	0x080038a9
 8003864:	080038a9 	.word	0x080038a9
 8003868:	080038a9 	.word	0x080038a9
 800386c:	08003895 	.word	0x08003895
 8003870:	080038a9 	.word	0x080038a9
 8003874:	080038a9 	.word	0x080038a9
 8003878:	080038a9 	.word	0x080038a9
 800387c:	0800389f 	.word	0x0800389f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003886:	60fb      	str	r3, [r7, #12]

      break;
 8003888:	e00f      	b.n	80038aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003890:	60fb      	str	r3, [r7, #12]

      break;
 8003892:	e00a      	b.n	80038aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800389a:	60fb      	str	r3, [r7, #12]

      break;
 800389c:	e005      	b.n	80038aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a4:	60fb      	str	r3, [r7, #12]

      break;
 80038a6:	e000      	b.n	80038aa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80038a8:	bf00      	nop
  }

  return tmpreg;
 80038aa:	68fb      	ldr	r3, [r7, #12]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3714      	adds	r7, #20
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a3a      	ldr	r2, [pc, #232]	@ (80039f0 <TIM_Base_SetConfig+0xfc>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d00f      	beq.n	800392c <TIM_Base_SetConfig+0x38>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003912:	d00b      	beq.n	800392c <TIM_Base_SetConfig+0x38>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a37      	ldr	r2, [pc, #220]	@ (80039f4 <TIM_Base_SetConfig+0x100>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d007      	beq.n	800392c <TIM_Base_SetConfig+0x38>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a36      	ldr	r2, [pc, #216]	@ (80039f8 <TIM_Base_SetConfig+0x104>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d003      	beq.n	800392c <TIM_Base_SetConfig+0x38>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a35      	ldr	r2, [pc, #212]	@ (80039fc <TIM_Base_SetConfig+0x108>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d108      	bne.n	800393e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003932:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	4313      	orrs	r3, r2
 800393c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a2b      	ldr	r2, [pc, #172]	@ (80039f0 <TIM_Base_SetConfig+0xfc>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d01b      	beq.n	800397e <TIM_Base_SetConfig+0x8a>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800394c:	d017      	beq.n	800397e <TIM_Base_SetConfig+0x8a>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a28      	ldr	r2, [pc, #160]	@ (80039f4 <TIM_Base_SetConfig+0x100>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d013      	beq.n	800397e <TIM_Base_SetConfig+0x8a>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a27      	ldr	r2, [pc, #156]	@ (80039f8 <TIM_Base_SetConfig+0x104>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d00f      	beq.n	800397e <TIM_Base_SetConfig+0x8a>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a26      	ldr	r2, [pc, #152]	@ (80039fc <TIM_Base_SetConfig+0x108>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d00b      	beq.n	800397e <TIM_Base_SetConfig+0x8a>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a25      	ldr	r2, [pc, #148]	@ (8003a00 <TIM_Base_SetConfig+0x10c>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d007      	beq.n	800397e <TIM_Base_SetConfig+0x8a>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a24      	ldr	r2, [pc, #144]	@ (8003a04 <TIM_Base_SetConfig+0x110>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d003      	beq.n	800397e <TIM_Base_SetConfig+0x8a>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a23      	ldr	r2, [pc, #140]	@ (8003a08 <TIM_Base_SetConfig+0x114>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d108      	bne.n	8003990 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003984:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	4313      	orrs	r3, r2
 800398e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	4313      	orrs	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a0e      	ldr	r2, [pc, #56]	@ (80039f0 <TIM_Base_SetConfig+0xfc>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d103      	bne.n	80039c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	691a      	ldr	r2, [r3, #16]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d105      	bne.n	80039e2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	f023 0201 	bic.w	r2, r3, #1
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	611a      	str	r2, [r3, #16]
  }
}
 80039e2:	bf00      	nop
 80039e4:	3714      	adds	r7, #20
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	40010000 	.word	0x40010000
 80039f4:	40000400 	.word	0x40000400
 80039f8:	40000800 	.word	0x40000800
 80039fc:	40000c00 	.word	0x40000c00
 8003a00:	40014000 	.word	0x40014000
 8003a04:	40014400 	.word	0x40014400
 8003a08:	40014800 	.word	0x40014800

08003a0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b087      	sub	sp, #28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	f023 0201 	bic.w	r2, r3, #1
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f023 0303 	bic.w	r3, r3, #3
 8003a42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	f023 0302 	bic.w	r3, r3, #2
 8003a54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a1c      	ldr	r2, [pc, #112]	@ (8003ad4 <TIM_OC1_SetConfig+0xc8>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d10c      	bne.n	8003a82 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	f023 0308 	bic.w	r3, r3, #8
 8003a6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f023 0304 	bic.w	r3, r3, #4
 8003a80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a13      	ldr	r2, [pc, #76]	@ (8003ad4 <TIM_OC1_SetConfig+0xc8>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d111      	bne.n	8003aae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	621a      	str	r2, [r3, #32]
}
 8003ac8:	bf00      	nop
 8003aca:	371c      	adds	r7, #28
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	40010000 	.word	0x40010000

08003ad8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b087      	sub	sp, #28
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	f023 0210 	bic.w	r2, r3, #16
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	021b      	lsls	r3, r3, #8
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	f023 0320 	bic.w	r3, r3, #32
 8003b22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	011b      	lsls	r3, r3, #4
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a1e      	ldr	r2, [pc, #120]	@ (8003bac <TIM_OC2_SetConfig+0xd4>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d10d      	bne.n	8003b54 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	011b      	lsls	r3, r3, #4
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a15      	ldr	r2, [pc, #84]	@ (8003bac <TIM_OC2_SetConfig+0xd4>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d113      	bne.n	8003b84 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685a      	ldr	r2, [r3, #4]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	621a      	str	r2, [r3, #32]
}
 8003b9e:	bf00      	nop
 8003ba0:	371c      	adds	r7, #28
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	40010000 	.word	0x40010000

08003bb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b087      	sub	sp, #28
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	69db      	ldr	r3, [r3, #28]
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f023 0303 	bic.w	r3, r3, #3
 8003be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003bf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	021b      	lsls	r3, r3, #8
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a1d      	ldr	r2, [pc, #116]	@ (8003c80 <TIM_OC3_SetConfig+0xd0>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d10d      	bne.n	8003c2a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	021b      	lsls	r3, r3, #8
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a14      	ldr	r2, [pc, #80]	@ (8003c80 <TIM_OC3_SetConfig+0xd0>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d113      	bne.n	8003c5a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	621a      	str	r2, [r3, #32]
}
 8003c74:	bf00      	nop
 8003c76:	371c      	adds	r7, #28
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	40010000 	.word	0x40010000

08003c84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	021b      	lsls	r3, r3, #8
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003cce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	031b      	lsls	r3, r3, #12
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a10      	ldr	r2, [pc, #64]	@ (8003d20 <TIM_OC4_SetConfig+0x9c>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d109      	bne.n	8003cf8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003cea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	019b      	lsls	r3, r3, #6
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	621a      	str	r2, [r3, #32]
}
 8003d12:	bf00      	nop
 8003d14:	371c      	adds	r7, #28
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	40010000 	.word	0x40010000

08003d24 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
 8003d30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	f023 0201 	bic.w	r2, r3, #1
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	4a24      	ldr	r2, [pc, #144]	@ (8003de0 <TIM_TI1_SetConfig+0xbc>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d013      	beq.n	8003d7a <TIM_TI1_SetConfig+0x56>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d58:	d00f      	beq.n	8003d7a <TIM_TI1_SetConfig+0x56>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	4a21      	ldr	r2, [pc, #132]	@ (8003de4 <TIM_TI1_SetConfig+0xc0>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d00b      	beq.n	8003d7a <TIM_TI1_SetConfig+0x56>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	4a20      	ldr	r2, [pc, #128]	@ (8003de8 <TIM_TI1_SetConfig+0xc4>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d007      	beq.n	8003d7a <TIM_TI1_SetConfig+0x56>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	4a1f      	ldr	r2, [pc, #124]	@ (8003dec <TIM_TI1_SetConfig+0xc8>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d003      	beq.n	8003d7a <TIM_TI1_SetConfig+0x56>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	4a1e      	ldr	r2, [pc, #120]	@ (8003df0 <TIM_TI1_SetConfig+0xcc>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d101      	bne.n	8003d7e <TIM_TI1_SetConfig+0x5a>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e000      	b.n	8003d80 <TIM_TI1_SetConfig+0x5c>
 8003d7e:	2300      	movs	r3, #0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d008      	beq.n	8003d96 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f023 0303 	bic.w	r3, r3, #3
 8003d8a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	617b      	str	r3, [r7, #20]
 8003d94:	e003      	b.n	8003d9e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f043 0301 	orr.w	r3, r3, #1
 8003d9c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003da4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	011b      	lsls	r3, r3, #4
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	f023 030a 	bic.w	r3, r3, #10
 8003db8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	f003 030a 	and.w	r3, r3, #10
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	621a      	str	r2, [r3, #32]
}
 8003dd2:	bf00      	nop
 8003dd4:	371c      	adds	r7, #28
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	40010000 	.word	0x40010000
 8003de4:	40000400 	.word	0x40000400
 8003de8:	40000800 	.word	0x40000800
 8003dec:	40000c00 	.word	0x40000c00
 8003df0:	40014000 	.word	0x40014000

08003df4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	f023 0201 	bic.w	r2, r3, #1
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f023 030a 	bic.w	r3, r3, #10
 8003e30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	621a      	str	r2, [r3, #32]
}
 8003e46:	bf00      	nop
 8003e48:	371c      	adds	r7, #28
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr

08003e52 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b087      	sub	sp, #28
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	60f8      	str	r0, [r7, #12]
 8003e5a:	60b9      	str	r1, [r7, #8]
 8003e5c:	607a      	str	r2, [r7, #4]
 8003e5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	f023 0210 	bic.w	r2, r3, #16
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	021b      	lsls	r3, r3, #8
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	031b      	lsls	r3, r3, #12
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003ea4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	011b      	lsls	r3, r3, #4
 8003eaa:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	621a      	str	r2, [r3, #32]
}
 8003ec0:	bf00      	nop
 8003ec2:	371c      	adds	r7, #28
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b087      	sub	sp, #28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	f023 0210 	bic.w	r2, r3, #16
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ef6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	031b      	lsls	r3, r3, #12
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003f08:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	011b      	lsls	r3, r3, #4
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	621a      	str	r2, [r3, #32]
}
 8003f20:	bf00      	nop
 8003f22:	371c      	adds	r7, #28
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b087      	sub	sp, #28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
 8003f38:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6a1b      	ldr	r3, [r3, #32]
 8003f44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	f023 0303 	bic.w	r3, r3, #3
 8003f58:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f68:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	011b      	lsls	r3, r3, #4
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003f7c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	021b      	lsls	r3, r3, #8
 8003f82:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	621a      	str	r2, [r3, #32]
}
 8003f98:	bf00      	nop
 8003f9a:	371c      	adds	r7, #28
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b087      	sub	sp, #28
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
 8003fb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	69db      	ldr	r3, [r3, #28]
 8003fc8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fd0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	021b      	lsls	r3, r3, #8
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003fe2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	031b      	lsls	r3, r3, #12
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003ff6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	031b      	lsls	r3, r3, #12
 8003ffc:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	4313      	orrs	r3, r2
 8004004:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	621a      	str	r2, [r3, #32]
}
 8004012:	bf00      	nop
 8004014:	371c      	adds	r7, #28
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800401e:	b480      	push	{r7}
 8004020:	b085      	sub	sp, #20
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
 8004026:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004034:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4313      	orrs	r3, r2
 800403c:	f043 0307 	orr.w	r3, r3, #7
 8004040:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	609a      	str	r2, [r3, #8]
}
 8004048:	bf00      	nop
 800404a:	3714      	adds	r7, #20
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004054:	b480      	push	{r7}
 8004056:	b087      	sub	sp, #28
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
 8004060:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800406e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	021a      	lsls	r2, r3, #8
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	431a      	orrs	r2, r3
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	4313      	orrs	r3, r2
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	4313      	orrs	r3, r2
 8004080:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	609a      	str	r2, [r3, #8]
}
 8004088:	bf00      	nop
 800408a:	371c      	adds	r7, #28
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004094:	b480      	push	{r7}
 8004096:	b087      	sub	sp, #28
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	f003 031f 	and.w	r3, r3, #31
 80040a6:	2201      	movs	r2, #1
 80040a8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6a1a      	ldr	r2, [r3, #32]
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	43db      	mvns	r3, r3
 80040b6:	401a      	ands	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6a1a      	ldr	r2, [r3, #32]
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	f003 031f 	and.w	r3, r3, #31
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	fa01 f303 	lsl.w	r3, r1, r3
 80040cc:	431a      	orrs	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	621a      	str	r2, [r3, #32]
}
 80040d2:	bf00      	nop
 80040d4:	371c      	adds	r7, #28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
	...

080040e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d101      	bne.n	80040f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040f4:	2302      	movs	r3, #2
 80040f6:	e050      	b.n	800419a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2202      	movs	r2, #2
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800411e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	4313      	orrs	r3, r2
 8004128:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a1c      	ldr	r2, [pc, #112]	@ (80041a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d018      	beq.n	800416e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004144:	d013      	beq.n	800416e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a18      	ldr	r2, [pc, #96]	@ (80041ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d00e      	beq.n	800416e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a16      	ldr	r2, [pc, #88]	@ (80041b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d009      	beq.n	800416e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a15      	ldr	r2, [pc, #84]	@ (80041b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d004      	beq.n	800416e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a13      	ldr	r2, [pc, #76]	@ (80041b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d10c      	bne.n	8004188 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004174:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	4313      	orrs	r3, r2
 800417e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3714      	adds	r7, #20
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	40010000 	.word	0x40010000
 80041ac:	40000400 	.word	0x40000400
 80041b0:	40000800 	.word	0x40000800
 80041b4:	40000c00 	.word	0x40000c00
 80041b8:	40014000 	.word	0x40014000

080041bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e042      	b.n	800427c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d106      	bne.n	8004210 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7fd f9b8 	bl	8001580 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2224      	movs	r2, #36	@ 0x24
 8004214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004226:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 f973 	bl	8004514 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	691a      	ldr	r2, [r3, #16]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800423c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	695a      	ldr	r2, [r3, #20]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800424c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68da      	ldr	r2, [r3, #12]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800425c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2220      	movs	r2, #32
 8004268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2220      	movs	r2, #32
 8004270:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b08a      	sub	sp, #40	@ 0x28
 8004288:	af02      	add	r7, sp, #8
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	603b      	str	r3, [r7, #0]
 8004290:	4613      	mov	r3, r2
 8004292:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004294:	2300      	movs	r3, #0
 8004296:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	2b20      	cmp	r3, #32
 80042a2:	d175      	bne.n	8004390 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d002      	beq.n	80042b0 <HAL_UART_Transmit+0x2c>
 80042aa:	88fb      	ldrh	r3, [r7, #6]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e06e      	b.n	8004392 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2221      	movs	r2, #33	@ 0x21
 80042be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042c2:	f7fd fb0b 	bl	80018dc <HAL_GetTick>
 80042c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	88fa      	ldrh	r2, [r7, #6]
 80042cc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	88fa      	ldrh	r2, [r7, #6]
 80042d2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042dc:	d108      	bne.n	80042f0 <HAL_UART_Transmit+0x6c>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d104      	bne.n	80042f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80042e6:	2300      	movs	r3, #0
 80042e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	61bb      	str	r3, [r7, #24]
 80042ee:	e003      	b.n	80042f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042f4:	2300      	movs	r3, #0
 80042f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042f8:	e02e      	b.n	8004358 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	9300      	str	r3, [sp, #0]
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	2200      	movs	r2, #0
 8004302:	2180      	movs	r1, #128	@ 0x80
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f000 f848 	bl	800439a <UART_WaitOnFlagUntilTimeout>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d005      	beq.n	800431c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2220      	movs	r2, #32
 8004314:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e03a      	b.n	8004392 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10b      	bne.n	800433a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	461a      	mov	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004330:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	3302      	adds	r3, #2
 8004336:	61bb      	str	r3, [r7, #24]
 8004338:	e007      	b.n	800434a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	781a      	ldrb	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	3301      	adds	r3, #1
 8004348:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800434e:	b29b      	uxth	r3, r3
 8004350:	3b01      	subs	r3, #1
 8004352:	b29a      	uxth	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800435c:	b29b      	uxth	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1cb      	bne.n	80042fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2200      	movs	r2, #0
 800436a:	2140      	movs	r1, #64	@ 0x40
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 f814 	bl	800439a <UART_WaitOnFlagUntilTimeout>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d005      	beq.n	8004384 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2220      	movs	r2, #32
 800437c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e006      	b.n	8004392 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2220      	movs	r2, #32
 8004388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800438c:	2300      	movs	r3, #0
 800438e:	e000      	b.n	8004392 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004390:	2302      	movs	r3, #2
  }
}
 8004392:	4618      	mov	r0, r3
 8004394:	3720      	adds	r7, #32
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b086      	sub	sp, #24
 800439e:	af00      	add	r7, sp, #0
 80043a0:	60f8      	str	r0, [r7, #12]
 80043a2:	60b9      	str	r1, [r7, #8]
 80043a4:	603b      	str	r3, [r7, #0]
 80043a6:	4613      	mov	r3, r2
 80043a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043aa:	e03b      	b.n	8004424 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ac:	6a3b      	ldr	r3, [r7, #32]
 80043ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b2:	d037      	beq.n	8004424 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b4:	f7fd fa92 	bl	80018dc <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	6a3a      	ldr	r2, [r7, #32]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d302      	bcc.n	80043ca <UART_WaitOnFlagUntilTimeout+0x30>
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e03a      	b.n	8004444 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	f003 0304 	and.w	r3, r3, #4
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d023      	beq.n	8004424 <UART_WaitOnFlagUntilTimeout+0x8a>
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	2b80      	cmp	r3, #128	@ 0x80
 80043e0:	d020      	beq.n	8004424 <UART_WaitOnFlagUntilTimeout+0x8a>
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	2b40      	cmp	r3, #64	@ 0x40
 80043e6:	d01d      	beq.n	8004424 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0308 	and.w	r3, r3, #8
 80043f2:	2b08      	cmp	r3, #8
 80043f4:	d116      	bne.n	8004424 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80043f6:	2300      	movs	r3, #0
 80043f8:	617b      	str	r3, [r7, #20]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	617b      	str	r3, [r7, #20]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	617b      	str	r3, [r7, #20]
 800440a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f000 f81d 	bl	800444c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2208      	movs	r2, #8
 8004416:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e00f      	b.n	8004444 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	4013      	ands	r3, r2
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	429a      	cmp	r2, r3
 8004432:	bf0c      	ite	eq
 8004434:	2301      	moveq	r3, #1
 8004436:	2300      	movne	r3, #0
 8004438:	b2db      	uxtb	r3, r3
 800443a:	461a      	mov	r2, r3
 800443c:	79fb      	ldrb	r3, [r7, #7]
 800443e:	429a      	cmp	r2, r3
 8004440:	d0b4      	beq.n	80043ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3718      	adds	r7, #24
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800444c:	b480      	push	{r7}
 800444e:	b095      	sub	sp, #84	@ 0x54
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	330c      	adds	r3, #12
 800445a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800445e:	e853 3f00 	ldrex	r3, [r3]
 8004462:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004466:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800446a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	330c      	adds	r3, #12
 8004472:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004474:	643a      	str	r2, [r7, #64]	@ 0x40
 8004476:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004478:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800447a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800447c:	e841 2300 	strex	r3, r2, [r1]
 8004480:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1e5      	bne.n	8004454 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	3314      	adds	r3, #20
 800448e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004490:	6a3b      	ldr	r3, [r7, #32]
 8004492:	e853 3f00 	ldrex	r3, [r3]
 8004496:	61fb      	str	r3, [r7, #28]
   return(result);
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	f023 0301 	bic.w	r3, r3, #1
 800449e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	3314      	adds	r3, #20
 80044a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044b0:	e841 2300 	strex	r3, r2, [r1]
 80044b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1e5      	bne.n	8004488 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d119      	bne.n	80044f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	330c      	adds	r3, #12
 80044ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	e853 3f00 	ldrex	r3, [r3]
 80044d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	f023 0310 	bic.w	r3, r3, #16
 80044da:	647b      	str	r3, [r7, #68]	@ 0x44
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	330c      	adds	r3, #12
 80044e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044e4:	61ba      	str	r2, [r7, #24]
 80044e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e8:	6979      	ldr	r1, [r7, #20]
 80044ea:	69ba      	ldr	r2, [r7, #24]
 80044ec:	e841 2300 	strex	r3, r2, [r1]
 80044f0:	613b      	str	r3, [r7, #16]
   return(result);
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1e5      	bne.n	80044c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2220      	movs	r2, #32
 80044fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004506:	bf00      	nop
 8004508:	3754      	adds	r7, #84	@ 0x54
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
	...

08004514 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004518:	b0c0      	sub	sp, #256	@ 0x100
 800451a:	af00      	add	r7, sp, #0
 800451c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800452c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004530:	68d9      	ldr	r1, [r3, #12]
 8004532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	ea40 0301 	orr.w	r3, r0, r1
 800453c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800453e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	431a      	orrs	r2, r3
 800454c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	431a      	orrs	r2, r3
 8004554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	4313      	orrs	r3, r2
 800455c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800456c:	f021 010c 	bic.w	r1, r1, #12
 8004570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800457a:	430b      	orrs	r3, r1
 800457c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800457e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800458a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800458e:	6999      	ldr	r1, [r3, #24]
 8004590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	ea40 0301 	orr.w	r3, r0, r1
 800459a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800459c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	4b8f      	ldr	r3, [pc, #572]	@ (80047e0 <UART_SetConfig+0x2cc>)
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d005      	beq.n	80045b4 <UART_SetConfig+0xa0>
 80045a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	4b8d      	ldr	r3, [pc, #564]	@ (80047e4 <UART_SetConfig+0x2d0>)
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d104      	bne.n	80045be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045b4:	f7fe f900 	bl	80027b8 <HAL_RCC_GetPCLK2Freq>
 80045b8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80045bc:	e003      	b.n	80045c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045be:	f7fe f8e7 	bl	8002790 <HAL_RCC_GetPCLK1Freq>
 80045c2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ca:	69db      	ldr	r3, [r3, #28]
 80045cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045d0:	f040 810c 	bne.w	80047ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045d8:	2200      	movs	r2, #0
 80045da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80045de:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80045e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80045e6:	4622      	mov	r2, r4
 80045e8:	462b      	mov	r3, r5
 80045ea:	1891      	adds	r1, r2, r2
 80045ec:	65b9      	str	r1, [r7, #88]	@ 0x58
 80045ee:	415b      	adcs	r3, r3
 80045f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80045f6:	4621      	mov	r1, r4
 80045f8:	eb12 0801 	adds.w	r8, r2, r1
 80045fc:	4629      	mov	r1, r5
 80045fe:	eb43 0901 	adc.w	r9, r3, r1
 8004602:	f04f 0200 	mov.w	r2, #0
 8004606:	f04f 0300 	mov.w	r3, #0
 800460a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800460e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004612:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004616:	4690      	mov	r8, r2
 8004618:	4699      	mov	r9, r3
 800461a:	4623      	mov	r3, r4
 800461c:	eb18 0303 	adds.w	r3, r8, r3
 8004620:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004624:	462b      	mov	r3, r5
 8004626:	eb49 0303 	adc.w	r3, r9, r3
 800462a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800462e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800463a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800463e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004642:	460b      	mov	r3, r1
 8004644:	18db      	adds	r3, r3, r3
 8004646:	653b      	str	r3, [r7, #80]	@ 0x50
 8004648:	4613      	mov	r3, r2
 800464a:	eb42 0303 	adc.w	r3, r2, r3
 800464e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004650:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004654:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004658:	f7fb fe12 	bl	8000280 <__aeabi_uldivmod>
 800465c:	4602      	mov	r2, r0
 800465e:	460b      	mov	r3, r1
 8004660:	4b61      	ldr	r3, [pc, #388]	@ (80047e8 <UART_SetConfig+0x2d4>)
 8004662:	fba3 2302 	umull	r2, r3, r3, r2
 8004666:	095b      	lsrs	r3, r3, #5
 8004668:	011c      	lsls	r4, r3, #4
 800466a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800466e:	2200      	movs	r2, #0
 8004670:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004674:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004678:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800467c:	4642      	mov	r2, r8
 800467e:	464b      	mov	r3, r9
 8004680:	1891      	adds	r1, r2, r2
 8004682:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004684:	415b      	adcs	r3, r3
 8004686:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004688:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800468c:	4641      	mov	r1, r8
 800468e:	eb12 0a01 	adds.w	sl, r2, r1
 8004692:	4649      	mov	r1, r9
 8004694:	eb43 0b01 	adc.w	fp, r3, r1
 8004698:	f04f 0200 	mov.w	r2, #0
 800469c:	f04f 0300 	mov.w	r3, #0
 80046a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046ac:	4692      	mov	sl, r2
 80046ae:	469b      	mov	fp, r3
 80046b0:	4643      	mov	r3, r8
 80046b2:	eb1a 0303 	adds.w	r3, sl, r3
 80046b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80046ba:	464b      	mov	r3, r9
 80046bc:	eb4b 0303 	adc.w	r3, fp, r3
 80046c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80046c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80046d0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80046d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80046d8:	460b      	mov	r3, r1
 80046da:	18db      	adds	r3, r3, r3
 80046dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80046de:	4613      	mov	r3, r2
 80046e0:	eb42 0303 	adc.w	r3, r2, r3
 80046e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80046e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80046ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80046ee:	f7fb fdc7 	bl	8000280 <__aeabi_uldivmod>
 80046f2:	4602      	mov	r2, r0
 80046f4:	460b      	mov	r3, r1
 80046f6:	4611      	mov	r1, r2
 80046f8:	4b3b      	ldr	r3, [pc, #236]	@ (80047e8 <UART_SetConfig+0x2d4>)
 80046fa:	fba3 2301 	umull	r2, r3, r3, r1
 80046fe:	095b      	lsrs	r3, r3, #5
 8004700:	2264      	movs	r2, #100	@ 0x64
 8004702:	fb02 f303 	mul.w	r3, r2, r3
 8004706:	1acb      	subs	r3, r1, r3
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800470e:	4b36      	ldr	r3, [pc, #216]	@ (80047e8 <UART_SetConfig+0x2d4>)
 8004710:	fba3 2302 	umull	r2, r3, r3, r2
 8004714:	095b      	lsrs	r3, r3, #5
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800471c:	441c      	add	r4, r3
 800471e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004722:	2200      	movs	r2, #0
 8004724:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004728:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800472c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004730:	4642      	mov	r2, r8
 8004732:	464b      	mov	r3, r9
 8004734:	1891      	adds	r1, r2, r2
 8004736:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004738:	415b      	adcs	r3, r3
 800473a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800473c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004740:	4641      	mov	r1, r8
 8004742:	1851      	adds	r1, r2, r1
 8004744:	6339      	str	r1, [r7, #48]	@ 0x30
 8004746:	4649      	mov	r1, r9
 8004748:	414b      	adcs	r3, r1
 800474a:	637b      	str	r3, [r7, #52]	@ 0x34
 800474c:	f04f 0200 	mov.w	r2, #0
 8004750:	f04f 0300 	mov.w	r3, #0
 8004754:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004758:	4659      	mov	r1, fp
 800475a:	00cb      	lsls	r3, r1, #3
 800475c:	4651      	mov	r1, sl
 800475e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004762:	4651      	mov	r1, sl
 8004764:	00ca      	lsls	r2, r1, #3
 8004766:	4610      	mov	r0, r2
 8004768:	4619      	mov	r1, r3
 800476a:	4603      	mov	r3, r0
 800476c:	4642      	mov	r2, r8
 800476e:	189b      	adds	r3, r3, r2
 8004770:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004774:	464b      	mov	r3, r9
 8004776:	460a      	mov	r2, r1
 8004778:	eb42 0303 	adc.w	r3, r2, r3
 800477c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800478c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004790:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004794:	460b      	mov	r3, r1
 8004796:	18db      	adds	r3, r3, r3
 8004798:	62bb      	str	r3, [r7, #40]	@ 0x28
 800479a:	4613      	mov	r3, r2
 800479c:	eb42 0303 	adc.w	r3, r2, r3
 80047a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80047a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80047aa:	f7fb fd69 	bl	8000280 <__aeabi_uldivmod>
 80047ae:	4602      	mov	r2, r0
 80047b0:	460b      	mov	r3, r1
 80047b2:	4b0d      	ldr	r3, [pc, #52]	@ (80047e8 <UART_SetConfig+0x2d4>)
 80047b4:	fba3 1302 	umull	r1, r3, r3, r2
 80047b8:	095b      	lsrs	r3, r3, #5
 80047ba:	2164      	movs	r1, #100	@ 0x64
 80047bc:	fb01 f303 	mul.w	r3, r1, r3
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	3332      	adds	r3, #50	@ 0x32
 80047c6:	4a08      	ldr	r2, [pc, #32]	@ (80047e8 <UART_SetConfig+0x2d4>)
 80047c8:	fba2 2303 	umull	r2, r3, r2, r3
 80047cc:	095b      	lsrs	r3, r3, #5
 80047ce:	f003 0207 	and.w	r2, r3, #7
 80047d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4422      	add	r2, r4
 80047da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047dc:	e106      	b.n	80049ec <UART_SetConfig+0x4d8>
 80047de:	bf00      	nop
 80047e0:	40011000 	.word	0x40011000
 80047e4:	40011400 	.word	0x40011400
 80047e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047f0:	2200      	movs	r2, #0
 80047f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80047f6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80047fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80047fe:	4642      	mov	r2, r8
 8004800:	464b      	mov	r3, r9
 8004802:	1891      	adds	r1, r2, r2
 8004804:	6239      	str	r1, [r7, #32]
 8004806:	415b      	adcs	r3, r3
 8004808:	627b      	str	r3, [r7, #36]	@ 0x24
 800480a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800480e:	4641      	mov	r1, r8
 8004810:	1854      	adds	r4, r2, r1
 8004812:	4649      	mov	r1, r9
 8004814:	eb43 0501 	adc.w	r5, r3, r1
 8004818:	f04f 0200 	mov.w	r2, #0
 800481c:	f04f 0300 	mov.w	r3, #0
 8004820:	00eb      	lsls	r3, r5, #3
 8004822:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004826:	00e2      	lsls	r2, r4, #3
 8004828:	4614      	mov	r4, r2
 800482a:	461d      	mov	r5, r3
 800482c:	4643      	mov	r3, r8
 800482e:	18e3      	adds	r3, r4, r3
 8004830:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004834:	464b      	mov	r3, r9
 8004836:	eb45 0303 	adc.w	r3, r5, r3
 800483a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800483e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800484a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800484e:	f04f 0200 	mov.w	r2, #0
 8004852:	f04f 0300 	mov.w	r3, #0
 8004856:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800485a:	4629      	mov	r1, r5
 800485c:	008b      	lsls	r3, r1, #2
 800485e:	4621      	mov	r1, r4
 8004860:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004864:	4621      	mov	r1, r4
 8004866:	008a      	lsls	r2, r1, #2
 8004868:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800486c:	f7fb fd08 	bl	8000280 <__aeabi_uldivmod>
 8004870:	4602      	mov	r2, r0
 8004872:	460b      	mov	r3, r1
 8004874:	4b60      	ldr	r3, [pc, #384]	@ (80049f8 <UART_SetConfig+0x4e4>)
 8004876:	fba3 2302 	umull	r2, r3, r3, r2
 800487a:	095b      	lsrs	r3, r3, #5
 800487c:	011c      	lsls	r4, r3, #4
 800487e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004882:	2200      	movs	r2, #0
 8004884:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004888:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800488c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004890:	4642      	mov	r2, r8
 8004892:	464b      	mov	r3, r9
 8004894:	1891      	adds	r1, r2, r2
 8004896:	61b9      	str	r1, [r7, #24]
 8004898:	415b      	adcs	r3, r3
 800489a:	61fb      	str	r3, [r7, #28]
 800489c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048a0:	4641      	mov	r1, r8
 80048a2:	1851      	adds	r1, r2, r1
 80048a4:	6139      	str	r1, [r7, #16]
 80048a6:	4649      	mov	r1, r9
 80048a8:	414b      	adcs	r3, r1
 80048aa:	617b      	str	r3, [r7, #20]
 80048ac:	f04f 0200 	mov.w	r2, #0
 80048b0:	f04f 0300 	mov.w	r3, #0
 80048b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048b8:	4659      	mov	r1, fp
 80048ba:	00cb      	lsls	r3, r1, #3
 80048bc:	4651      	mov	r1, sl
 80048be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048c2:	4651      	mov	r1, sl
 80048c4:	00ca      	lsls	r2, r1, #3
 80048c6:	4610      	mov	r0, r2
 80048c8:	4619      	mov	r1, r3
 80048ca:	4603      	mov	r3, r0
 80048cc:	4642      	mov	r2, r8
 80048ce:	189b      	adds	r3, r3, r2
 80048d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80048d4:	464b      	mov	r3, r9
 80048d6:	460a      	mov	r2, r1
 80048d8:	eb42 0303 	adc.w	r3, r2, r3
 80048dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80048e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80048ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80048ec:	f04f 0200 	mov.w	r2, #0
 80048f0:	f04f 0300 	mov.w	r3, #0
 80048f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80048f8:	4649      	mov	r1, r9
 80048fa:	008b      	lsls	r3, r1, #2
 80048fc:	4641      	mov	r1, r8
 80048fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004902:	4641      	mov	r1, r8
 8004904:	008a      	lsls	r2, r1, #2
 8004906:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800490a:	f7fb fcb9 	bl	8000280 <__aeabi_uldivmod>
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	4611      	mov	r1, r2
 8004914:	4b38      	ldr	r3, [pc, #224]	@ (80049f8 <UART_SetConfig+0x4e4>)
 8004916:	fba3 2301 	umull	r2, r3, r3, r1
 800491a:	095b      	lsrs	r3, r3, #5
 800491c:	2264      	movs	r2, #100	@ 0x64
 800491e:	fb02 f303 	mul.w	r3, r2, r3
 8004922:	1acb      	subs	r3, r1, r3
 8004924:	011b      	lsls	r3, r3, #4
 8004926:	3332      	adds	r3, #50	@ 0x32
 8004928:	4a33      	ldr	r2, [pc, #204]	@ (80049f8 <UART_SetConfig+0x4e4>)
 800492a:	fba2 2303 	umull	r2, r3, r2, r3
 800492e:	095b      	lsrs	r3, r3, #5
 8004930:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004934:	441c      	add	r4, r3
 8004936:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800493a:	2200      	movs	r2, #0
 800493c:	673b      	str	r3, [r7, #112]	@ 0x70
 800493e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004940:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004944:	4642      	mov	r2, r8
 8004946:	464b      	mov	r3, r9
 8004948:	1891      	adds	r1, r2, r2
 800494a:	60b9      	str	r1, [r7, #8]
 800494c:	415b      	adcs	r3, r3
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004954:	4641      	mov	r1, r8
 8004956:	1851      	adds	r1, r2, r1
 8004958:	6039      	str	r1, [r7, #0]
 800495a:	4649      	mov	r1, r9
 800495c:	414b      	adcs	r3, r1
 800495e:	607b      	str	r3, [r7, #4]
 8004960:	f04f 0200 	mov.w	r2, #0
 8004964:	f04f 0300 	mov.w	r3, #0
 8004968:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800496c:	4659      	mov	r1, fp
 800496e:	00cb      	lsls	r3, r1, #3
 8004970:	4651      	mov	r1, sl
 8004972:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004976:	4651      	mov	r1, sl
 8004978:	00ca      	lsls	r2, r1, #3
 800497a:	4610      	mov	r0, r2
 800497c:	4619      	mov	r1, r3
 800497e:	4603      	mov	r3, r0
 8004980:	4642      	mov	r2, r8
 8004982:	189b      	adds	r3, r3, r2
 8004984:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004986:	464b      	mov	r3, r9
 8004988:	460a      	mov	r2, r1
 800498a:	eb42 0303 	adc.w	r3, r2, r3
 800498e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	663b      	str	r3, [r7, #96]	@ 0x60
 800499a:	667a      	str	r2, [r7, #100]	@ 0x64
 800499c:	f04f 0200 	mov.w	r2, #0
 80049a0:	f04f 0300 	mov.w	r3, #0
 80049a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80049a8:	4649      	mov	r1, r9
 80049aa:	008b      	lsls	r3, r1, #2
 80049ac:	4641      	mov	r1, r8
 80049ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049b2:	4641      	mov	r1, r8
 80049b4:	008a      	lsls	r2, r1, #2
 80049b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80049ba:	f7fb fc61 	bl	8000280 <__aeabi_uldivmod>
 80049be:	4602      	mov	r2, r0
 80049c0:	460b      	mov	r3, r1
 80049c2:	4b0d      	ldr	r3, [pc, #52]	@ (80049f8 <UART_SetConfig+0x4e4>)
 80049c4:	fba3 1302 	umull	r1, r3, r3, r2
 80049c8:	095b      	lsrs	r3, r3, #5
 80049ca:	2164      	movs	r1, #100	@ 0x64
 80049cc:	fb01 f303 	mul.w	r3, r1, r3
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	011b      	lsls	r3, r3, #4
 80049d4:	3332      	adds	r3, #50	@ 0x32
 80049d6:	4a08      	ldr	r2, [pc, #32]	@ (80049f8 <UART_SetConfig+0x4e4>)
 80049d8:	fba2 2303 	umull	r2, r3, r2, r3
 80049dc:	095b      	lsrs	r3, r3, #5
 80049de:	f003 020f 	and.w	r2, r3, #15
 80049e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4422      	add	r2, r4
 80049ea:	609a      	str	r2, [r3, #8]
}
 80049ec:	bf00      	nop
 80049ee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80049f2:	46bd      	mov	sp, r7
 80049f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049f8:	51eb851f 	.word	0x51eb851f

080049fc <_ZdlPvj>:
 80049fc:	f000 b811 	b.w	8004a22 <_ZdlPv>

08004a00 <_Znwj>:
 8004a00:	2801      	cmp	r0, #1
 8004a02:	bf38      	it	cc
 8004a04:	2001      	movcc	r0, #1
 8004a06:	b510      	push	{r4, lr}
 8004a08:	4604      	mov	r4, r0
 8004a0a:	4620      	mov	r0, r4
 8004a0c:	f000 f81c 	bl	8004a48 <malloc>
 8004a10:	b100      	cbz	r0, 8004a14 <_Znwj+0x14>
 8004a12:	bd10      	pop	{r4, pc}
 8004a14:	f000 f808 	bl	8004a28 <_ZSt15get_new_handlerv>
 8004a18:	b908      	cbnz	r0, 8004a1e <_Znwj+0x1e>
 8004a1a:	f000 f80d 	bl	8004a38 <abort>
 8004a1e:	4780      	blx	r0
 8004a20:	e7f3      	b.n	8004a0a <_Znwj+0xa>

08004a22 <_ZdlPv>:
 8004a22:	f000 b819 	b.w	8004a58 <free>
	...

08004a28 <_ZSt15get_new_handlerv>:
 8004a28:	4b02      	ldr	r3, [pc, #8]	@ (8004a34 <_ZSt15get_new_handlerv+0xc>)
 8004a2a:	6818      	ldr	r0, [r3, #0]
 8004a2c:	f3bf 8f5b 	dmb	ish
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	20000224 	.word	0x20000224

08004a38 <abort>:
 8004a38:	b508      	push	{r3, lr}
 8004a3a:	2006      	movs	r0, #6
 8004a3c:	f000 f946 	bl	8004ccc <raise>
 8004a40:	2001      	movs	r0, #1
 8004a42:	f7fc fe67 	bl	8001714 <_exit>
	...

08004a48 <malloc>:
 8004a48:	4b02      	ldr	r3, [pc, #8]	@ (8004a54 <malloc+0xc>)
 8004a4a:	4601      	mov	r1, r0
 8004a4c:	6818      	ldr	r0, [r3, #0]
 8004a4e:	f000 b82d 	b.w	8004aac <_malloc_r>
 8004a52:	bf00      	nop
 8004a54:	2000000c 	.word	0x2000000c

08004a58 <free>:
 8004a58:	4b02      	ldr	r3, [pc, #8]	@ (8004a64 <free+0xc>)
 8004a5a:	4601      	mov	r1, r0
 8004a5c:	6818      	ldr	r0, [r3, #0]
 8004a5e:	f000 b98d 	b.w	8004d7c <_free_r>
 8004a62:	bf00      	nop
 8004a64:	2000000c 	.word	0x2000000c

08004a68 <sbrk_aligned>:
 8004a68:	b570      	push	{r4, r5, r6, lr}
 8004a6a:	4e0f      	ldr	r6, [pc, #60]	@ (8004aa8 <sbrk_aligned+0x40>)
 8004a6c:	460c      	mov	r4, r1
 8004a6e:	6831      	ldr	r1, [r6, #0]
 8004a70:	4605      	mov	r5, r0
 8004a72:	b911      	cbnz	r1, 8004a7a <sbrk_aligned+0x12>
 8004a74:	f000 f946 	bl	8004d04 <_sbrk_r>
 8004a78:	6030      	str	r0, [r6, #0]
 8004a7a:	4621      	mov	r1, r4
 8004a7c:	4628      	mov	r0, r5
 8004a7e:	f000 f941 	bl	8004d04 <_sbrk_r>
 8004a82:	1c43      	adds	r3, r0, #1
 8004a84:	d103      	bne.n	8004a8e <sbrk_aligned+0x26>
 8004a86:	f04f 34ff 	mov.w	r4, #4294967295
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	bd70      	pop	{r4, r5, r6, pc}
 8004a8e:	1cc4      	adds	r4, r0, #3
 8004a90:	f024 0403 	bic.w	r4, r4, #3
 8004a94:	42a0      	cmp	r0, r4
 8004a96:	d0f8      	beq.n	8004a8a <sbrk_aligned+0x22>
 8004a98:	1a21      	subs	r1, r4, r0
 8004a9a:	4628      	mov	r0, r5
 8004a9c:	f000 f932 	bl	8004d04 <_sbrk_r>
 8004aa0:	3001      	adds	r0, #1
 8004aa2:	d1f2      	bne.n	8004a8a <sbrk_aligned+0x22>
 8004aa4:	e7ef      	b.n	8004a86 <sbrk_aligned+0x1e>
 8004aa6:	bf00      	nop
 8004aa8:	20000228 	.word	0x20000228

08004aac <_malloc_r>:
 8004aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ab0:	1ccd      	adds	r5, r1, #3
 8004ab2:	f025 0503 	bic.w	r5, r5, #3
 8004ab6:	3508      	adds	r5, #8
 8004ab8:	2d0c      	cmp	r5, #12
 8004aba:	bf38      	it	cc
 8004abc:	250c      	movcc	r5, #12
 8004abe:	2d00      	cmp	r5, #0
 8004ac0:	4606      	mov	r6, r0
 8004ac2:	db01      	blt.n	8004ac8 <_malloc_r+0x1c>
 8004ac4:	42a9      	cmp	r1, r5
 8004ac6:	d904      	bls.n	8004ad2 <_malloc_r+0x26>
 8004ac8:	230c      	movs	r3, #12
 8004aca:	6033      	str	r3, [r6, #0]
 8004acc:	2000      	movs	r0, #0
 8004ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ad2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004ba8 <_malloc_r+0xfc>
 8004ad6:	f000 f869 	bl	8004bac <__malloc_lock>
 8004ada:	f8d8 3000 	ldr.w	r3, [r8]
 8004ade:	461c      	mov	r4, r3
 8004ae0:	bb44      	cbnz	r4, 8004b34 <_malloc_r+0x88>
 8004ae2:	4629      	mov	r1, r5
 8004ae4:	4630      	mov	r0, r6
 8004ae6:	f7ff ffbf 	bl	8004a68 <sbrk_aligned>
 8004aea:	1c43      	adds	r3, r0, #1
 8004aec:	4604      	mov	r4, r0
 8004aee:	d158      	bne.n	8004ba2 <_malloc_r+0xf6>
 8004af0:	f8d8 4000 	ldr.w	r4, [r8]
 8004af4:	4627      	mov	r7, r4
 8004af6:	2f00      	cmp	r7, #0
 8004af8:	d143      	bne.n	8004b82 <_malloc_r+0xd6>
 8004afa:	2c00      	cmp	r4, #0
 8004afc:	d04b      	beq.n	8004b96 <_malloc_r+0xea>
 8004afe:	6823      	ldr	r3, [r4, #0]
 8004b00:	4639      	mov	r1, r7
 8004b02:	4630      	mov	r0, r6
 8004b04:	eb04 0903 	add.w	r9, r4, r3
 8004b08:	f000 f8fc 	bl	8004d04 <_sbrk_r>
 8004b0c:	4581      	cmp	r9, r0
 8004b0e:	d142      	bne.n	8004b96 <_malloc_r+0xea>
 8004b10:	6821      	ldr	r1, [r4, #0]
 8004b12:	1a6d      	subs	r5, r5, r1
 8004b14:	4629      	mov	r1, r5
 8004b16:	4630      	mov	r0, r6
 8004b18:	f7ff ffa6 	bl	8004a68 <sbrk_aligned>
 8004b1c:	3001      	adds	r0, #1
 8004b1e:	d03a      	beq.n	8004b96 <_malloc_r+0xea>
 8004b20:	6823      	ldr	r3, [r4, #0]
 8004b22:	442b      	add	r3, r5
 8004b24:	6023      	str	r3, [r4, #0]
 8004b26:	f8d8 3000 	ldr.w	r3, [r8]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	bb62      	cbnz	r2, 8004b88 <_malloc_r+0xdc>
 8004b2e:	f8c8 7000 	str.w	r7, [r8]
 8004b32:	e00f      	b.n	8004b54 <_malloc_r+0xa8>
 8004b34:	6822      	ldr	r2, [r4, #0]
 8004b36:	1b52      	subs	r2, r2, r5
 8004b38:	d420      	bmi.n	8004b7c <_malloc_r+0xd0>
 8004b3a:	2a0b      	cmp	r2, #11
 8004b3c:	d917      	bls.n	8004b6e <_malloc_r+0xc2>
 8004b3e:	1961      	adds	r1, r4, r5
 8004b40:	42a3      	cmp	r3, r4
 8004b42:	6025      	str	r5, [r4, #0]
 8004b44:	bf18      	it	ne
 8004b46:	6059      	strne	r1, [r3, #4]
 8004b48:	6863      	ldr	r3, [r4, #4]
 8004b4a:	bf08      	it	eq
 8004b4c:	f8c8 1000 	streq.w	r1, [r8]
 8004b50:	5162      	str	r2, [r4, r5]
 8004b52:	604b      	str	r3, [r1, #4]
 8004b54:	4630      	mov	r0, r6
 8004b56:	f000 f82f 	bl	8004bb8 <__malloc_unlock>
 8004b5a:	f104 000b 	add.w	r0, r4, #11
 8004b5e:	1d23      	adds	r3, r4, #4
 8004b60:	f020 0007 	bic.w	r0, r0, #7
 8004b64:	1ac2      	subs	r2, r0, r3
 8004b66:	bf1c      	itt	ne
 8004b68:	1a1b      	subne	r3, r3, r0
 8004b6a:	50a3      	strne	r3, [r4, r2]
 8004b6c:	e7af      	b.n	8004ace <_malloc_r+0x22>
 8004b6e:	6862      	ldr	r2, [r4, #4]
 8004b70:	42a3      	cmp	r3, r4
 8004b72:	bf0c      	ite	eq
 8004b74:	f8c8 2000 	streq.w	r2, [r8]
 8004b78:	605a      	strne	r2, [r3, #4]
 8004b7a:	e7eb      	b.n	8004b54 <_malloc_r+0xa8>
 8004b7c:	4623      	mov	r3, r4
 8004b7e:	6864      	ldr	r4, [r4, #4]
 8004b80:	e7ae      	b.n	8004ae0 <_malloc_r+0x34>
 8004b82:	463c      	mov	r4, r7
 8004b84:	687f      	ldr	r7, [r7, #4]
 8004b86:	e7b6      	b.n	8004af6 <_malloc_r+0x4a>
 8004b88:	461a      	mov	r2, r3
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	42a3      	cmp	r3, r4
 8004b8e:	d1fb      	bne.n	8004b88 <_malloc_r+0xdc>
 8004b90:	2300      	movs	r3, #0
 8004b92:	6053      	str	r3, [r2, #4]
 8004b94:	e7de      	b.n	8004b54 <_malloc_r+0xa8>
 8004b96:	230c      	movs	r3, #12
 8004b98:	6033      	str	r3, [r6, #0]
 8004b9a:	4630      	mov	r0, r6
 8004b9c:	f000 f80c 	bl	8004bb8 <__malloc_unlock>
 8004ba0:	e794      	b.n	8004acc <_malloc_r+0x20>
 8004ba2:	6005      	str	r5, [r0, #0]
 8004ba4:	e7d6      	b.n	8004b54 <_malloc_r+0xa8>
 8004ba6:	bf00      	nop
 8004ba8:	2000022c 	.word	0x2000022c

08004bac <__malloc_lock>:
 8004bac:	4801      	ldr	r0, [pc, #4]	@ (8004bb4 <__malloc_lock+0x8>)
 8004bae:	f000 b8e3 	b.w	8004d78 <__retarget_lock_acquire_recursive>
 8004bb2:	bf00      	nop
 8004bb4:	2000036c 	.word	0x2000036c

08004bb8 <__malloc_unlock>:
 8004bb8:	4801      	ldr	r0, [pc, #4]	@ (8004bc0 <__malloc_unlock+0x8>)
 8004bba:	f000 b8de 	b.w	8004d7a <__retarget_lock_release_recursive>
 8004bbe:	bf00      	nop
 8004bc0:	2000036c 	.word	0x2000036c

08004bc4 <sniprintf>:
 8004bc4:	b40c      	push	{r2, r3}
 8004bc6:	b530      	push	{r4, r5, lr}
 8004bc8:	4b17      	ldr	r3, [pc, #92]	@ (8004c28 <sniprintf+0x64>)
 8004bca:	1e0c      	subs	r4, r1, #0
 8004bcc:	681d      	ldr	r5, [r3, #0]
 8004bce:	b09d      	sub	sp, #116	@ 0x74
 8004bd0:	da08      	bge.n	8004be4 <sniprintf+0x20>
 8004bd2:	238b      	movs	r3, #139	@ 0x8b
 8004bd4:	602b      	str	r3, [r5, #0]
 8004bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8004bda:	b01d      	add	sp, #116	@ 0x74
 8004bdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004be0:	b002      	add	sp, #8
 8004be2:	4770      	bx	lr
 8004be4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004be8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004bec:	bf14      	ite	ne
 8004bee:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004bf2:	4623      	moveq	r3, r4
 8004bf4:	9304      	str	r3, [sp, #16]
 8004bf6:	9307      	str	r3, [sp, #28]
 8004bf8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004bfc:	9002      	str	r0, [sp, #8]
 8004bfe:	9006      	str	r0, [sp, #24]
 8004c00:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004c04:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004c06:	ab21      	add	r3, sp, #132	@ 0x84
 8004c08:	a902      	add	r1, sp, #8
 8004c0a:	4628      	mov	r0, r5
 8004c0c:	9301      	str	r3, [sp, #4]
 8004c0e:	f000 f95b 	bl	8004ec8 <_svfiprintf_r>
 8004c12:	1c43      	adds	r3, r0, #1
 8004c14:	bfbc      	itt	lt
 8004c16:	238b      	movlt	r3, #139	@ 0x8b
 8004c18:	602b      	strlt	r3, [r5, #0]
 8004c1a:	2c00      	cmp	r4, #0
 8004c1c:	d0dd      	beq.n	8004bda <sniprintf+0x16>
 8004c1e:	9b02      	ldr	r3, [sp, #8]
 8004c20:	2200      	movs	r2, #0
 8004c22:	701a      	strb	r2, [r3, #0]
 8004c24:	e7d9      	b.n	8004bda <sniprintf+0x16>
 8004c26:	bf00      	nop
 8004c28:	2000000c 	.word	0x2000000c

08004c2c <siprintf>:
 8004c2c:	b40e      	push	{r1, r2, r3}
 8004c2e:	b500      	push	{lr}
 8004c30:	b09c      	sub	sp, #112	@ 0x70
 8004c32:	ab1d      	add	r3, sp, #116	@ 0x74
 8004c34:	9002      	str	r0, [sp, #8]
 8004c36:	9006      	str	r0, [sp, #24]
 8004c38:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004c3c:	4809      	ldr	r0, [pc, #36]	@ (8004c64 <siprintf+0x38>)
 8004c3e:	9107      	str	r1, [sp, #28]
 8004c40:	9104      	str	r1, [sp, #16]
 8004c42:	4909      	ldr	r1, [pc, #36]	@ (8004c68 <siprintf+0x3c>)
 8004c44:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c48:	9105      	str	r1, [sp, #20]
 8004c4a:	6800      	ldr	r0, [r0, #0]
 8004c4c:	9301      	str	r3, [sp, #4]
 8004c4e:	a902      	add	r1, sp, #8
 8004c50:	f000 f93a 	bl	8004ec8 <_svfiprintf_r>
 8004c54:	9b02      	ldr	r3, [sp, #8]
 8004c56:	2200      	movs	r2, #0
 8004c58:	701a      	strb	r2, [r3, #0]
 8004c5a:	b01c      	add	sp, #112	@ 0x70
 8004c5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c60:	b003      	add	sp, #12
 8004c62:	4770      	bx	lr
 8004c64:	2000000c 	.word	0x2000000c
 8004c68:	ffff0208 	.word	0xffff0208

08004c6c <memset>:
 8004c6c:	4402      	add	r2, r0
 8004c6e:	4603      	mov	r3, r0
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d100      	bne.n	8004c76 <memset+0xa>
 8004c74:	4770      	bx	lr
 8004c76:	f803 1b01 	strb.w	r1, [r3], #1
 8004c7a:	e7f9      	b.n	8004c70 <memset+0x4>

08004c7c <_raise_r>:
 8004c7c:	291f      	cmp	r1, #31
 8004c7e:	b538      	push	{r3, r4, r5, lr}
 8004c80:	4605      	mov	r5, r0
 8004c82:	460c      	mov	r4, r1
 8004c84:	d904      	bls.n	8004c90 <_raise_r+0x14>
 8004c86:	2316      	movs	r3, #22
 8004c88:	6003      	str	r3, [r0, #0]
 8004c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c8e:	bd38      	pop	{r3, r4, r5, pc}
 8004c90:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004c92:	b112      	cbz	r2, 8004c9a <_raise_r+0x1e>
 8004c94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004c98:	b94b      	cbnz	r3, 8004cae <_raise_r+0x32>
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	f000 f830 	bl	8004d00 <_getpid_r>
 8004ca0:	4622      	mov	r2, r4
 8004ca2:	4601      	mov	r1, r0
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004caa:	f000 b817 	b.w	8004cdc <_kill_r>
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d00a      	beq.n	8004cc8 <_raise_r+0x4c>
 8004cb2:	1c59      	adds	r1, r3, #1
 8004cb4:	d103      	bne.n	8004cbe <_raise_r+0x42>
 8004cb6:	2316      	movs	r3, #22
 8004cb8:	6003      	str	r3, [r0, #0]
 8004cba:	2001      	movs	r0, #1
 8004cbc:	e7e7      	b.n	8004c8e <_raise_r+0x12>
 8004cbe:	2100      	movs	r1, #0
 8004cc0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004cc4:	4620      	mov	r0, r4
 8004cc6:	4798      	blx	r3
 8004cc8:	2000      	movs	r0, #0
 8004cca:	e7e0      	b.n	8004c8e <_raise_r+0x12>

08004ccc <raise>:
 8004ccc:	4b02      	ldr	r3, [pc, #8]	@ (8004cd8 <raise+0xc>)
 8004cce:	4601      	mov	r1, r0
 8004cd0:	6818      	ldr	r0, [r3, #0]
 8004cd2:	f7ff bfd3 	b.w	8004c7c <_raise_r>
 8004cd6:	bf00      	nop
 8004cd8:	2000000c 	.word	0x2000000c

08004cdc <_kill_r>:
 8004cdc:	b538      	push	{r3, r4, r5, lr}
 8004cde:	4d07      	ldr	r5, [pc, #28]	@ (8004cfc <_kill_r+0x20>)
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	4604      	mov	r4, r0
 8004ce4:	4608      	mov	r0, r1
 8004ce6:	4611      	mov	r1, r2
 8004ce8:	602b      	str	r3, [r5, #0]
 8004cea:	f7fc fd03 	bl	80016f4 <_kill>
 8004cee:	1c43      	adds	r3, r0, #1
 8004cf0:	d102      	bne.n	8004cf8 <_kill_r+0x1c>
 8004cf2:	682b      	ldr	r3, [r5, #0]
 8004cf4:	b103      	cbz	r3, 8004cf8 <_kill_r+0x1c>
 8004cf6:	6023      	str	r3, [r4, #0]
 8004cf8:	bd38      	pop	{r3, r4, r5, pc}
 8004cfa:	bf00      	nop
 8004cfc:	20000368 	.word	0x20000368

08004d00 <_getpid_r>:
 8004d00:	f7fc bcf0 	b.w	80016e4 <_getpid>

08004d04 <_sbrk_r>:
 8004d04:	b538      	push	{r3, r4, r5, lr}
 8004d06:	4d06      	ldr	r5, [pc, #24]	@ (8004d20 <_sbrk_r+0x1c>)
 8004d08:	2300      	movs	r3, #0
 8004d0a:	4604      	mov	r4, r0
 8004d0c:	4608      	mov	r0, r1
 8004d0e:	602b      	str	r3, [r5, #0]
 8004d10:	f7fc fd0c 	bl	800172c <_sbrk>
 8004d14:	1c43      	adds	r3, r0, #1
 8004d16:	d102      	bne.n	8004d1e <_sbrk_r+0x1a>
 8004d18:	682b      	ldr	r3, [r5, #0]
 8004d1a:	b103      	cbz	r3, 8004d1e <_sbrk_r+0x1a>
 8004d1c:	6023      	str	r3, [r4, #0]
 8004d1e:	bd38      	pop	{r3, r4, r5, pc}
 8004d20:	20000368 	.word	0x20000368

08004d24 <__errno>:
 8004d24:	4b01      	ldr	r3, [pc, #4]	@ (8004d2c <__errno+0x8>)
 8004d26:	6818      	ldr	r0, [r3, #0]
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	2000000c 	.word	0x2000000c

08004d30 <__libc_init_array>:
 8004d30:	b570      	push	{r4, r5, r6, lr}
 8004d32:	4d0d      	ldr	r5, [pc, #52]	@ (8004d68 <__libc_init_array+0x38>)
 8004d34:	4c0d      	ldr	r4, [pc, #52]	@ (8004d6c <__libc_init_array+0x3c>)
 8004d36:	1b64      	subs	r4, r4, r5
 8004d38:	10a4      	asrs	r4, r4, #2
 8004d3a:	2600      	movs	r6, #0
 8004d3c:	42a6      	cmp	r6, r4
 8004d3e:	d109      	bne.n	8004d54 <__libc_init_array+0x24>
 8004d40:	4d0b      	ldr	r5, [pc, #44]	@ (8004d70 <__libc_init_array+0x40>)
 8004d42:	4c0c      	ldr	r4, [pc, #48]	@ (8004d74 <__libc_init_array+0x44>)
 8004d44:	f000 fba8 	bl	8005498 <_init>
 8004d48:	1b64      	subs	r4, r4, r5
 8004d4a:	10a4      	asrs	r4, r4, #2
 8004d4c:	2600      	movs	r6, #0
 8004d4e:	42a6      	cmp	r6, r4
 8004d50:	d105      	bne.n	8004d5e <__libc_init_array+0x2e>
 8004d52:	bd70      	pop	{r4, r5, r6, pc}
 8004d54:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d58:	4798      	blx	r3
 8004d5a:	3601      	adds	r6, #1
 8004d5c:	e7ee      	b.n	8004d3c <__libc_init_array+0xc>
 8004d5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d62:	4798      	blx	r3
 8004d64:	3601      	adds	r6, #1
 8004d66:	e7f2      	b.n	8004d4e <__libc_init_array+0x1e>
 8004d68:	08005598 	.word	0x08005598
 8004d6c:	08005598 	.word	0x08005598
 8004d70:	08005598 	.word	0x08005598
 8004d74:	0800559c 	.word	0x0800559c

08004d78 <__retarget_lock_acquire_recursive>:
 8004d78:	4770      	bx	lr

08004d7a <__retarget_lock_release_recursive>:
 8004d7a:	4770      	bx	lr

08004d7c <_free_r>:
 8004d7c:	b538      	push	{r3, r4, r5, lr}
 8004d7e:	4605      	mov	r5, r0
 8004d80:	2900      	cmp	r1, #0
 8004d82:	d041      	beq.n	8004e08 <_free_r+0x8c>
 8004d84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d88:	1f0c      	subs	r4, r1, #4
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	bfb8      	it	lt
 8004d8e:	18e4      	addlt	r4, r4, r3
 8004d90:	f7ff ff0c 	bl	8004bac <__malloc_lock>
 8004d94:	4a1d      	ldr	r2, [pc, #116]	@ (8004e0c <_free_r+0x90>)
 8004d96:	6813      	ldr	r3, [r2, #0]
 8004d98:	b933      	cbnz	r3, 8004da8 <_free_r+0x2c>
 8004d9a:	6063      	str	r3, [r4, #4]
 8004d9c:	6014      	str	r4, [r2, #0]
 8004d9e:	4628      	mov	r0, r5
 8004da0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004da4:	f7ff bf08 	b.w	8004bb8 <__malloc_unlock>
 8004da8:	42a3      	cmp	r3, r4
 8004daa:	d908      	bls.n	8004dbe <_free_r+0x42>
 8004dac:	6820      	ldr	r0, [r4, #0]
 8004dae:	1821      	adds	r1, r4, r0
 8004db0:	428b      	cmp	r3, r1
 8004db2:	bf01      	itttt	eq
 8004db4:	6819      	ldreq	r1, [r3, #0]
 8004db6:	685b      	ldreq	r3, [r3, #4]
 8004db8:	1809      	addeq	r1, r1, r0
 8004dba:	6021      	streq	r1, [r4, #0]
 8004dbc:	e7ed      	b.n	8004d9a <_free_r+0x1e>
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	b10b      	cbz	r3, 8004dc8 <_free_r+0x4c>
 8004dc4:	42a3      	cmp	r3, r4
 8004dc6:	d9fa      	bls.n	8004dbe <_free_r+0x42>
 8004dc8:	6811      	ldr	r1, [r2, #0]
 8004dca:	1850      	adds	r0, r2, r1
 8004dcc:	42a0      	cmp	r0, r4
 8004dce:	d10b      	bne.n	8004de8 <_free_r+0x6c>
 8004dd0:	6820      	ldr	r0, [r4, #0]
 8004dd2:	4401      	add	r1, r0
 8004dd4:	1850      	adds	r0, r2, r1
 8004dd6:	4283      	cmp	r3, r0
 8004dd8:	6011      	str	r1, [r2, #0]
 8004dda:	d1e0      	bne.n	8004d9e <_free_r+0x22>
 8004ddc:	6818      	ldr	r0, [r3, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	6053      	str	r3, [r2, #4]
 8004de2:	4408      	add	r0, r1
 8004de4:	6010      	str	r0, [r2, #0]
 8004de6:	e7da      	b.n	8004d9e <_free_r+0x22>
 8004de8:	d902      	bls.n	8004df0 <_free_r+0x74>
 8004dea:	230c      	movs	r3, #12
 8004dec:	602b      	str	r3, [r5, #0]
 8004dee:	e7d6      	b.n	8004d9e <_free_r+0x22>
 8004df0:	6820      	ldr	r0, [r4, #0]
 8004df2:	1821      	adds	r1, r4, r0
 8004df4:	428b      	cmp	r3, r1
 8004df6:	bf04      	itt	eq
 8004df8:	6819      	ldreq	r1, [r3, #0]
 8004dfa:	685b      	ldreq	r3, [r3, #4]
 8004dfc:	6063      	str	r3, [r4, #4]
 8004dfe:	bf04      	itt	eq
 8004e00:	1809      	addeq	r1, r1, r0
 8004e02:	6021      	streq	r1, [r4, #0]
 8004e04:	6054      	str	r4, [r2, #4]
 8004e06:	e7ca      	b.n	8004d9e <_free_r+0x22>
 8004e08:	bd38      	pop	{r3, r4, r5, pc}
 8004e0a:	bf00      	nop
 8004e0c:	2000022c 	.word	0x2000022c

08004e10 <__ssputs_r>:
 8004e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e14:	688e      	ldr	r6, [r1, #8]
 8004e16:	461f      	mov	r7, r3
 8004e18:	42be      	cmp	r6, r7
 8004e1a:	680b      	ldr	r3, [r1, #0]
 8004e1c:	4682      	mov	sl, r0
 8004e1e:	460c      	mov	r4, r1
 8004e20:	4690      	mov	r8, r2
 8004e22:	d82d      	bhi.n	8004e80 <__ssputs_r+0x70>
 8004e24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004e28:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004e2c:	d026      	beq.n	8004e7c <__ssputs_r+0x6c>
 8004e2e:	6965      	ldr	r5, [r4, #20]
 8004e30:	6909      	ldr	r1, [r1, #16]
 8004e32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e36:	eba3 0901 	sub.w	r9, r3, r1
 8004e3a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e3e:	1c7b      	adds	r3, r7, #1
 8004e40:	444b      	add	r3, r9
 8004e42:	106d      	asrs	r5, r5, #1
 8004e44:	429d      	cmp	r5, r3
 8004e46:	bf38      	it	cc
 8004e48:	461d      	movcc	r5, r3
 8004e4a:	0553      	lsls	r3, r2, #21
 8004e4c:	d527      	bpl.n	8004e9e <__ssputs_r+0x8e>
 8004e4e:	4629      	mov	r1, r5
 8004e50:	f7ff fe2c 	bl	8004aac <_malloc_r>
 8004e54:	4606      	mov	r6, r0
 8004e56:	b360      	cbz	r0, 8004eb2 <__ssputs_r+0xa2>
 8004e58:	6921      	ldr	r1, [r4, #16]
 8004e5a:	464a      	mov	r2, r9
 8004e5c:	f000 fad8 	bl	8005410 <memcpy>
 8004e60:	89a3      	ldrh	r3, [r4, #12]
 8004e62:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004e66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e6a:	81a3      	strh	r3, [r4, #12]
 8004e6c:	6126      	str	r6, [r4, #16]
 8004e6e:	6165      	str	r5, [r4, #20]
 8004e70:	444e      	add	r6, r9
 8004e72:	eba5 0509 	sub.w	r5, r5, r9
 8004e76:	6026      	str	r6, [r4, #0]
 8004e78:	60a5      	str	r5, [r4, #8]
 8004e7a:	463e      	mov	r6, r7
 8004e7c:	42be      	cmp	r6, r7
 8004e7e:	d900      	bls.n	8004e82 <__ssputs_r+0x72>
 8004e80:	463e      	mov	r6, r7
 8004e82:	6820      	ldr	r0, [r4, #0]
 8004e84:	4632      	mov	r2, r6
 8004e86:	4641      	mov	r1, r8
 8004e88:	f000 faa8 	bl	80053dc <memmove>
 8004e8c:	68a3      	ldr	r3, [r4, #8]
 8004e8e:	1b9b      	subs	r3, r3, r6
 8004e90:	60a3      	str	r3, [r4, #8]
 8004e92:	6823      	ldr	r3, [r4, #0]
 8004e94:	4433      	add	r3, r6
 8004e96:	6023      	str	r3, [r4, #0]
 8004e98:	2000      	movs	r0, #0
 8004e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e9e:	462a      	mov	r2, r5
 8004ea0:	f000 fac4 	bl	800542c <_realloc_r>
 8004ea4:	4606      	mov	r6, r0
 8004ea6:	2800      	cmp	r0, #0
 8004ea8:	d1e0      	bne.n	8004e6c <__ssputs_r+0x5c>
 8004eaa:	6921      	ldr	r1, [r4, #16]
 8004eac:	4650      	mov	r0, sl
 8004eae:	f7ff ff65 	bl	8004d7c <_free_r>
 8004eb2:	230c      	movs	r3, #12
 8004eb4:	f8ca 3000 	str.w	r3, [sl]
 8004eb8:	89a3      	ldrh	r3, [r4, #12]
 8004eba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ebe:	81a3      	strh	r3, [r4, #12]
 8004ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec4:	e7e9      	b.n	8004e9a <__ssputs_r+0x8a>
	...

08004ec8 <_svfiprintf_r>:
 8004ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ecc:	4698      	mov	r8, r3
 8004ece:	898b      	ldrh	r3, [r1, #12]
 8004ed0:	061b      	lsls	r3, r3, #24
 8004ed2:	b09d      	sub	sp, #116	@ 0x74
 8004ed4:	4607      	mov	r7, r0
 8004ed6:	460d      	mov	r5, r1
 8004ed8:	4614      	mov	r4, r2
 8004eda:	d510      	bpl.n	8004efe <_svfiprintf_r+0x36>
 8004edc:	690b      	ldr	r3, [r1, #16]
 8004ede:	b973      	cbnz	r3, 8004efe <_svfiprintf_r+0x36>
 8004ee0:	2140      	movs	r1, #64	@ 0x40
 8004ee2:	f7ff fde3 	bl	8004aac <_malloc_r>
 8004ee6:	6028      	str	r0, [r5, #0]
 8004ee8:	6128      	str	r0, [r5, #16]
 8004eea:	b930      	cbnz	r0, 8004efa <_svfiprintf_r+0x32>
 8004eec:	230c      	movs	r3, #12
 8004eee:	603b      	str	r3, [r7, #0]
 8004ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef4:	b01d      	add	sp, #116	@ 0x74
 8004ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004efa:	2340      	movs	r3, #64	@ 0x40
 8004efc:	616b      	str	r3, [r5, #20]
 8004efe:	2300      	movs	r3, #0
 8004f00:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f02:	2320      	movs	r3, #32
 8004f04:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004f08:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f0c:	2330      	movs	r3, #48	@ 0x30
 8004f0e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80050ac <_svfiprintf_r+0x1e4>
 8004f12:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004f16:	f04f 0901 	mov.w	r9, #1
 8004f1a:	4623      	mov	r3, r4
 8004f1c:	469a      	mov	sl, r3
 8004f1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f22:	b10a      	cbz	r2, 8004f28 <_svfiprintf_r+0x60>
 8004f24:	2a25      	cmp	r2, #37	@ 0x25
 8004f26:	d1f9      	bne.n	8004f1c <_svfiprintf_r+0x54>
 8004f28:	ebba 0b04 	subs.w	fp, sl, r4
 8004f2c:	d00b      	beq.n	8004f46 <_svfiprintf_r+0x7e>
 8004f2e:	465b      	mov	r3, fp
 8004f30:	4622      	mov	r2, r4
 8004f32:	4629      	mov	r1, r5
 8004f34:	4638      	mov	r0, r7
 8004f36:	f7ff ff6b 	bl	8004e10 <__ssputs_r>
 8004f3a:	3001      	adds	r0, #1
 8004f3c:	f000 80a7 	beq.w	800508e <_svfiprintf_r+0x1c6>
 8004f40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f42:	445a      	add	r2, fp
 8004f44:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f46:	f89a 3000 	ldrb.w	r3, [sl]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f000 809f 	beq.w	800508e <_svfiprintf_r+0x1c6>
 8004f50:	2300      	movs	r3, #0
 8004f52:	f04f 32ff 	mov.w	r2, #4294967295
 8004f56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f5a:	f10a 0a01 	add.w	sl, sl, #1
 8004f5e:	9304      	str	r3, [sp, #16]
 8004f60:	9307      	str	r3, [sp, #28]
 8004f62:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004f66:	931a      	str	r3, [sp, #104]	@ 0x68
 8004f68:	4654      	mov	r4, sl
 8004f6a:	2205      	movs	r2, #5
 8004f6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f70:	484e      	ldr	r0, [pc, #312]	@ (80050ac <_svfiprintf_r+0x1e4>)
 8004f72:	f7fb f935 	bl	80001e0 <memchr>
 8004f76:	9a04      	ldr	r2, [sp, #16]
 8004f78:	b9d8      	cbnz	r0, 8004fb2 <_svfiprintf_r+0xea>
 8004f7a:	06d0      	lsls	r0, r2, #27
 8004f7c:	bf44      	itt	mi
 8004f7e:	2320      	movmi	r3, #32
 8004f80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f84:	0711      	lsls	r1, r2, #28
 8004f86:	bf44      	itt	mi
 8004f88:	232b      	movmi	r3, #43	@ 0x2b
 8004f8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f8e:	f89a 3000 	ldrb.w	r3, [sl]
 8004f92:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f94:	d015      	beq.n	8004fc2 <_svfiprintf_r+0xfa>
 8004f96:	9a07      	ldr	r2, [sp, #28]
 8004f98:	4654      	mov	r4, sl
 8004f9a:	2000      	movs	r0, #0
 8004f9c:	f04f 0c0a 	mov.w	ip, #10
 8004fa0:	4621      	mov	r1, r4
 8004fa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fa6:	3b30      	subs	r3, #48	@ 0x30
 8004fa8:	2b09      	cmp	r3, #9
 8004faa:	d94b      	bls.n	8005044 <_svfiprintf_r+0x17c>
 8004fac:	b1b0      	cbz	r0, 8004fdc <_svfiprintf_r+0x114>
 8004fae:	9207      	str	r2, [sp, #28]
 8004fb0:	e014      	b.n	8004fdc <_svfiprintf_r+0x114>
 8004fb2:	eba0 0308 	sub.w	r3, r0, r8
 8004fb6:	fa09 f303 	lsl.w	r3, r9, r3
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	9304      	str	r3, [sp, #16]
 8004fbe:	46a2      	mov	sl, r4
 8004fc0:	e7d2      	b.n	8004f68 <_svfiprintf_r+0xa0>
 8004fc2:	9b03      	ldr	r3, [sp, #12]
 8004fc4:	1d19      	adds	r1, r3, #4
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	9103      	str	r1, [sp, #12]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	bfbb      	ittet	lt
 8004fce:	425b      	neglt	r3, r3
 8004fd0:	f042 0202 	orrlt.w	r2, r2, #2
 8004fd4:	9307      	strge	r3, [sp, #28]
 8004fd6:	9307      	strlt	r3, [sp, #28]
 8004fd8:	bfb8      	it	lt
 8004fda:	9204      	strlt	r2, [sp, #16]
 8004fdc:	7823      	ldrb	r3, [r4, #0]
 8004fde:	2b2e      	cmp	r3, #46	@ 0x2e
 8004fe0:	d10a      	bne.n	8004ff8 <_svfiprintf_r+0x130>
 8004fe2:	7863      	ldrb	r3, [r4, #1]
 8004fe4:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fe6:	d132      	bne.n	800504e <_svfiprintf_r+0x186>
 8004fe8:	9b03      	ldr	r3, [sp, #12]
 8004fea:	1d1a      	adds	r2, r3, #4
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	9203      	str	r2, [sp, #12]
 8004ff0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004ff4:	3402      	adds	r4, #2
 8004ff6:	9305      	str	r3, [sp, #20]
 8004ff8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80050bc <_svfiprintf_r+0x1f4>
 8004ffc:	7821      	ldrb	r1, [r4, #0]
 8004ffe:	2203      	movs	r2, #3
 8005000:	4650      	mov	r0, sl
 8005002:	f7fb f8ed 	bl	80001e0 <memchr>
 8005006:	b138      	cbz	r0, 8005018 <_svfiprintf_r+0x150>
 8005008:	9b04      	ldr	r3, [sp, #16]
 800500a:	eba0 000a 	sub.w	r0, r0, sl
 800500e:	2240      	movs	r2, #64	@ 0x40
 8005010:	4082      	lsls	r2, r0
 8005012:	4313      	orrs	r3, r2
 8005014:	3401      	adds	r4, #1
 8005016:	9304      	str	r3, [sp, #16]
 8005018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800501c:	4824      	ldr	r0, [pc, #144]	@ (80050b0 <_svfiprintf_r+0x1e8>)
 800501e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005022:	2206      	movs	r2, #6
 8005024:	f7fb f8dc 	bl	80001e0 <memchr>
 8005028:	2800      	cmp	r0, #0
 800502a:	d036      	beq.n	800509a <_svfiprintf_r+0x1d2>
 800502c:	4b21      	ldr	r3, [pc, #132]	@ (80050b4 <_svfiprintf_r+0x1ec>)
 800502e:	bb1b      	cbnz	r3, 8005078 <_svfiprintf_r+0x1b0>
 8005030:	9b03      	ldr	r3, [sp, #12]
 8005032:	3307      	adds	r3, #7
 8005034:	f023 0307 	bic.w	r3, r3, #7
 8005038:	3308      	adds	r3, #8
 800503a:	9303      	str	r3, [sp, #12]
 800503c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800503e:	4433      	add	r3, r6
 8005040:	9309      	str	r3, [sp, #36]	@ 0x24
 8005042:	e76a      	b.n	8004f1a <_svfiprintf_r+0x52>
 8005044:	fb0c 3202 	mla	r2, ip, r2, r3
 8005048:	460c      	mov	r4, r1
 800504a:	2001      	movs	r0, #1
 800504c:	e7a8      	b.n	8004fa0 <_svfiprintf_r+0xd8>
 800504e:	2300      	movs	r3, #0
 8005050:	3401      	adds	r4, #1
 8005052:	9305      	str	r3, [sp, #20]
 8005054:	4619      	mov	r1, r3
 8005056:	f04f 0c0a 	mov.w	ip, #10
 800505a:	4620      	mov	r0, r4
 800505c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005060:	3a30      	subs	r2, #48	@ 0x30
 8005062:	2a09      	cmp	r2, #9
 8005064:	d903      	bls.n	800506e <_svfiprintf_r+0x1a6>
 8005066:	2b00      	cmp	r3, #0
 8005068:	d0c6      	beq.n	8004ff8 <_svfiprintf_r+0x130>
 800506a:	9105      	str	r1, [sp, #20]
 800506c:	e7c4      	b.n	8004ff8 <_svfiprintf_r+0x130>
 800506e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005072:	4604      	mov	r4, r0
 8005074:	2301      	movs	r3, #1
 8005076:	e7f0      	b.n	800505a <_svfiprintf_r+0x192>
 8005078:	ab03      	add	r3, sp, #12
 800507a:	9300      	str	r3, [sp, #0]
 800507c:	462a      	mov	r2, r5
 800507e:	4b0e      	ldr	r3, [pc, #56]	@ (80050b8 <_svfiprintf_r+0x1f0>)
 8005080:	a904      	add	r1, sp, #16
 8005082:	4638      	mov	r0, r7
 8005084:	f3af 8000 	nop.w
 8005088:	1c42      	adds	r2, r0, #1
 800508a:	4606      	mov	r6, r0
 800508c:	d1d6      	bne.n	800503c <_svfiprintf_r+0x174>
 800508e:	89ab      	ldrh	r3, [r5, #12]
 8005090:	065b      	lsls	r3, r3, #25
 8005092:	f53f af2d 	bmi.w	8004ef0 <_svfiprintf_r+0x28>
 8005096:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005098:	e72c      	b.n	8004ef4 <_svfiprintf_r+0x2c>
 800509a:	ab03      	add	r3, sp, #12
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	462a      	mov	r2, r5
 80050a0:	4b05      	ldr	r3, [pc, #20]	@ (80050b8 <_svfiprintf_r+0x1f0>)
 80050a2:	a904      	add	r1, sp, #16
 80050a4:	4638      	mov	r0, r7
 80050a6:	f000 f879 	bl	800519c <_printf_i>
 80050aa:	e7ed      	b.n	8005088 <_svfiprintf_r+0x1c0>
 80050ac:	0800555c 	.word	0x0800555c
 80050b0:	08005566 	.word	0x08005566
 80050b4:	00000000 	.word	0x00000000
 80050b8:	08004e11 	.word	0x08004e11
 80050bc:	08005562 	.word	0x08005562

080050c0 <_printf_common>:
 80050c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050c4:	4616      	mov	r6, r2
 80050c6:	4698      	mov	r8, r3
 80050c8:	688a      	ldr	r2, [r1, #8]
 80050ca:	690b      	ldr	r3, [r1, #16]
 80050cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80050d0:	4293      	cmp	r3, r2
 80050d2:	bfb8      	it	lt
 80050d4:	4613      	movlt	r3, r2
 80050d6:	6033      	str	r3, [r6, #0]
 80050d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80050dc:	4607      	mov	r7, r0
 80050de:	460c      	mov	r4, r1
 80050e0:	b10a      	cbz	r2, 80050e6 <_printf_common+0x26>
 80050e2:	3301      	adds	r3, #1
 80050e4:	6033      	str	r3, [r6, #0]
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	0699      	lsls	r1, r3, #26
 80050ea:	bf42      	ittt	mi
 80050ec:	6833      	ldrmi	r3, [r6, #0]
 80050ee:	3302      	addmi	r3, #2
 80050f0:	6033      	strmi	r3, [r6, #0]
 80050f2:	6825      	ldr	r5, [r4, #0]
 80050f4:	f015 0506 	ands.w	r5, r5, #6
 80050f8:	d106      	bne.n	8005108 <_printf_common+0x48>
 80050fa:	f104 0a19 	add.w	sl, r4, #25
 80050fe:	68e3      	ldr	r3, [r4, #12]
 8005100:	6832      	ldr	r2, [r6, #0]
 8005102:	1a9b      	subs	r3, r3, r2
 8005104:	42ab      	cmp	r3, r5
 8005106:	dc26      	bgt.n	8005156 <_printf_common+0x96>
 8005108:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800510c:	6822      	ldr	r2, [r4, #0]
 800510e:	3b00      	subs	r3, #0
 8005110:	bf18      	it	ne
 8005112:	2301      	movne	r3, #1
 8005114:	0692      	lsls	r2, r2, #26
 8005116:	d42b      	bmi.n	8005170 <_printf_common+0xb0>
 8005118:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800511c:	4641      	mov	r1, r8
 800511e:	4638      	mov	r0, r7
 8005120:	47c8      	blx	r9
 8005122:	3001      	adds	r0, #1
 8005124:	d01e      	beq.n	8005164 <_printf_common+0xa4>
 8005126:	6823      	ldr	r3, [r4, #0]
 8005128:	6922      	ldr	r2, [r4, #16]
 800512a:	f003 0306 	and.w	r3, r3, #6
 800512e:	2b04      	cmp	r3, #4
 8005130:	bf02      	ittt	eq
 8005132:	68e5      	ldreq	r5, [r4, #12]
 8005134:	6833      	ldreq	r3, [r6, #0]
 8005136:	1aed      	subeq	r5, r5, r3
 8005138:	68a3      	ldr	r3, [r4, #8]
 800513a:	bf0c      	ite	eq
 800513c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005140:	2500      	movne	r5, #0
 8005142:	4293      	cmp	r3, r2
 8005144:	bfc4      	itt	gt
 8005146:	1a9b      	subgt	r3, r3, r2
 8005148:	18ed      	addgt	r5, r5, r3
 800514a:	2600      	movs	r6, #0
 800514c:	341a      	adds	r4, #26
 800514e:	42b5      	cmp	r5, r6
 8005150:	d11a      	bne.n	8005188 <_printf_common+0xc8>
 8005152:	2000      	movs	r0, #0
 8005154:	e008      	b.n	8005168 <_printf_common+0xa8>
 8005156:	2301      	movs	r3, #1
 8005158:	4652      	mov	r2, sl
 800515a:	4641      	mov	r1, r8
 800515c:	4638      	mov	r0, r7
 800515e:	47c8      	blx	r9
 8005160:	3001      	adds	r0, #1
 8005162:	d103      	bne.n	800516c <_printf_common+0xac>
 8005164:	f04f 30ff 	mov.w	r0, #4294967295
 8005168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800516c:	3501      	adds	r5, #1
 800516e:	e7c6      	b.n	80050fe <_printf_common+0x3e>
 8005170:	18e1      	adds	r1, r4, r3
 8005172:	1c5a      	adds	r2, r3, #1
 8005174:	2030      	movs	r0, #48	@ 0x30
 8005176:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800517a:	4422      	add	r2, r4
 800517c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005180:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005184:	3302      	adds	r3, #2
 8005186:	e7c7      	b.n	8005118 <_printf_common+0x58>
 8005188:	2301      	movs	r3, #1
 800518a:	4622      	mov	r2, r4
 800518c:	4641      	mov	r1, r8
 800518e:	4638      	mov	r0, r7
 8005190:	47c8      	blx	r9
 8005192:	3001      	adds	r0, #1
 8005194:	d0e6      	beq.n	8005164 <_printf_common+0xa4>
 8005196:	3601      	adds	r6, #1
 8005198:	e7d9      	b.n	800514e <_printf_common+0x8e>
	...

0800519c <_printf_i>:
 800519c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051a0:	7e0f      	ldrb	r7, [r1, #24]
 80051a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80051a4:	2f78      	cmp	r7, #120	@ 0x78
 80051a6:	4691      	mov	r9, r2
 80051a8:	4680      	mov	r8, r0
 80051aa:	460c      	mov	r4, r1
 80051ac:	469a      	mov	sl, r3
 80051ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80051b2:	d807      	bhi.n	80051c4 <_printf_i+0x28>
 80051b4:	2f62      	cmp	r7, #98	@ 0x62
 80051b6:	d80a      	bhi.n	80051ce <_printf_i+0x32>
 80051b8:	2f00      	cmp	r7, #0
 80051ba:	f000 80d2 	beq.w	8005362 <_printf_i+0x1c6>
 80051be:	2f58      	cmp	r7, #88	@ 0x58
 80051c0:	f000 80b9 	beq.w	8005336 <_printf_i+0x19a>
 80051c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80051cc:	e03a      	b.n	8005244 <_printf_i+0xa8>
 80051ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80051d2:	2b15      	cmp	r3, #21
 80051d4:	d8f6      	bhi.n	80051c4 <_printf_i+0x28>
 80051d6:	a101      	add	r1, pc, #4	@ (adr r1, 80051dc <_printf_i+0x40>)
 80051d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051dc:	08005235 	.word	0x08005235
 80051e0:	08005249 	.word	0x08005249
 80051e4:	080051c5 	.word	0x080051c5
 80051e8:	080051c5 	.word	0x080051c5
 80051ec:	080051c5 	.word	0x080051c5
 80051f0:	080051c5 	.word	0x080051c5
 80051f4:	08005249 	.word	0x08005249
 80051f8:	080051c5 	.word	0x080051c5
 80051fc:	080051c5 	.word	0x080051c5
 8005200:	080051c5 	.word	0x080051c5
 8005204:	080051c5 	.word	0x080051c5
 8005208:	08005349 	.word	0x08005349
 800520c:	08005273 	.word	0x08005273
 8005210:	08005303 	.word	0x08005303
 8005214:	080051c5 	.word	0x080051c5
 8005218:	080051c5 	.word	0x080051c5
 800521c:	0800536b 	.word	0x0800536b
 8005220:	080051c5 	.word	0x080051c5
 8005224:	08005273 	.word	0x08005273
 8005228:	080051c5 	.word	0x080051c5
 800522c:	080051c5 	.word	0x080051c5
 8005230:	0800530b 	.word	0x0800530b
 8005234:	6833      	ldr	r3, [r6, #0]
 8005236:	1d1a      	adds	r2, r3, #4
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	6032      	str	r2, [r6, #0]
 800523c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005240:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005244:	2301      	movs	r3, #1
 8005246:	e09d      	b.n	8005384 <_printf_i+0x1e8>
 8005248:	6833      	ldr	r3, [r6, #0]
 800524a:	6820      	ldr	r0, [r4, #0]
 800524c:	1d19      	adds	r1, r3, #4
 800524e:	6031      	str	r1, [r6, #0]
 8005250:	0606      	lsls	r6, r0, #24
 8005252:	d501      	bpl.n	8005258 <_printf_i+0xbc>
 8005254:	681d      	ldr	r5, [r3, #0]
 8005256:	e003      	b.n	8005260 <_printf_i+0xc4>
 8005258:	0645      	lsls	r5, r0, #25
 800525a:	d5fb      	bpl.n	8005254 <_printf_i+0xb8>
 800525c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005260:	2d00      	cmp	r5, #0
 8005262:	da03      	bge.n	800526c <_printf_i+0xd0>
 8005264:	232d      	movs	r3, #45	@ 0x2d
 8005266:	426d      	negs	r5, r5
 8005268:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800526c:	4859      	ldr	r0, [pc, #356]	@ (80053d4 <_printf_i+0x238>)
 800526e:	230a      	movs	r3, #10
 8005270:	e011      	b.n	8005296 <_printf_i+0xfa>
 8005272:	6821      	ldr	r1, [r4, #0]
 8005274:	6833      	ldr	r3, [r6, #0]
 8005276:	0608      	lsls	r0, r1, #24
 8005278:	f853 5b04 	ldr.w	r5, [r3], #4
 800527c:	d402      	bmi.n	8005284 <_printf_i+0xe8>
 800527e:	0649      	lsls	r1, r1, #25
 8005280:	bf48      	it	mi
 8005282:	b2ad      	uxthmi	r5, r5
 8005284:	2f6f      	cmp	r7, #111	@ 0x6f
 8005286:	4853      	ldr	r0, [pc, #332]	@ (80053d4 <_printf_i+0x238>)
 8005288:	6033      	str	r3, [r6, #0]
 800528a:	bf14      	ite	ne
 800528c:	230a      	movne	r3, #10
 800528e:	2308      	moveq	r3, #8
 8005290:	2100      	movs	r1, #0
 8005292:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005296:	6866      	ldr	r6, [r4, #4]
 8005298:	60a6      	str	r6, [r4, #8]
 800529a:	2e00      	cmp	r6, #0
 800529c:	bfa2      	ittt	ge
 800529e:	6821      	ldrge	r1, [r4, #0]
 80052a0:	f021 0104 	bicge.w	r1, r1, #4
 80052a4:	6021      	strge	r1, [r4, #0]
 80052a6:	b90d      	cbnz	r5, 80052ac <_printf_i+0x110>
 80052a8:	2e00      	cmp	r6, #0
 80052aa:	d04b      	beq.n	8005344 <_printf_i+0x1a8>
 80052ac:	4616      	mov	r6, r2
 80052ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80052b2:	fb03 5711 	mls	r7, r3, r1, r5
 80052b6:	5dc7      	ldrb	r7, [r0, r7]
 80052b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80052bc:	462f      	mov	r7, r5
 80052be:	42bb      	cmp	r3, r7
 80052c0:	460d      	mov	r5, r1
 80052c2:	d9f4      	bls.n	80052ae <_printf_i+0x112>
 80052c4:	2b08      	cmp	r3, #8
 80052c6:	d10b      	bne.n	80052e0 <_printf_i+0x144>
 80052c8:	6823      	ldr	r3, [r4, #0]
 80052ca:	07df      	lsls	r7, r3, #31
 80052cc:	d508      	bpl.n	80052e0 <_printf_i+0x144>
 80052ce:	6923      	ldr	r3, [r4, #16]
 80052d0:	6861      	ldr	r1, [r4, #4]
 80052d2:	4299      	cmp	r1, r3
 80052d4:	bfde      	ittt	le
 80052d6:	2330      	movle	r3, #48	@ 0x30
 80052d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80052dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80052e0:	1b92      	subs	r2, r2, r6
 80052e2:	6122      	str	r2, [r4, #16]
 80052e4:	f8cd a000 	str.w	sl, [sp]
 80052e8:	464b      	mov	r3, r9
 80052ea:	aa03      	add	r2, sp, #12
 80052ec:	4621      	mov	r1, r4
 80052ee:	4640      	mov	r0, r8
 80052f0:	f7ff fee6 	bl	80050c0 <_printf_common>
 80052f4:	3001      	adds	r0, #1
 80052f6:	d14a      	bne.n	800538e <_printf_i+0x1f2>
 80052f8:	f04f 30ff 	mov.w	r0, #4294967295
 80052fc:	b004      	add	sp, #16
 80052fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005302:	6823      	ldr	r3, [r4, #0]
 8005304:	f043 0320 	orr.w	r3, r3, #32
 8005308:	6023      	str	r3, [r4, #0]
 800530a:	4833      	ldr	r0, [pc, #204]	@ (80053d8 <_printf_i+0x23c>)
 800530c:	2778      	movs	r7, #120	@ 0x78
 800530e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005312:	6823      	ldr	r3, [r4, #0]
 8005314:	6831      	ldr	r1, [r6, #0]
 8005316:	061f      	lsls	r7, r3, #24
 8005318:	f851 5b04 	ldr.w	r5, [r1], #4
 800531c:	d402      	bmi.n	8005324 <_printf_i+0x188>
 800531e:	065f      	lsls	r7, r3, #25
 8005320:	bf48      	it	mi
 8005322:	b2ad      	uxthmi	r5, r5
 8005324:	6031      	str	r1, [r6, #0]
 8005326:	07d9      	lsls	r1, r3, #31
 8005328:	bf44      	itt	mi
 800532a:	f043 0320 	orrmi.w	r3, r3, #32
 800532e:	6023      	strmi	r3, [r4, #0]
 8005330:	b11d      	cbz	r5, 800533a <_printf_i+0x19e>
 8005332:	2310      	movs	r3, #16
 8005334:	e7ac      	b.n	8005290 <_printf_i+0xf4>
 8005336:	4827      	ldr	r0, [pc, #156]	@ (80053d4 <_printf_i+0x238>)
 8005338:	e7e9      	b.n	800530e <_printf_i+0x172>
 800533a:	6823      	ldr	r3, [r4, #0]
 800533c:	f023 0320 	bic.w	r3, r3, #32
 8005340:	6023      	str	r3, [r4, #0]
 8005342:	e7f6      	b.n	8005332 <_printf_i+0x196>
 8005344:	4616      	mov	r6, r2
 8005346:	e7bd      	b.n	80052c4 <_printf_i+0x128>
 8005348:	6833      	ldr	r3, [r6, #0]
 800534a:	6825      	ldr	r5, [r4, #0]
 800534c:	6961      	ldr	r1, [r4, #20]
 800534e:	1d18      	adds	r0, r3, #4
 8005350:	6030      	str	r0, [r6, #0]
 8005352:	062e      	lsls	r6, r5, #24
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	d501      	bpl.n	800535c <_printf_i+0x1c0>
 8005358:	6019      	str	r1, [r3, #0]
 800535a:	e002      	b.n	8005362 <_printf_i+0x1c6>
 800535c:	0668      	lsls	r0, r5, #25
 800535e:	d5fb      	bpl.n	8005358 <_printf_i+0x1bc>
 8005360:	8019      	strh	r1, [r3, #0]
 8005362:	2300      	movs	r3, #0
 8005364:	6123      	str	r3, [r4, #16]
 8005366:	4616      	mov	r6, r2
 8005368:	e7bc      	b.n	80052e4 <_printf_i+0x148>
 800536a:	6833      	ldr	r3, [r6, #0]
 800536c:	1d1a      	adds	r2, r3, #4
 800536e:	6032      	str	r2, [r6, #0]
 8005370:	681e      	ldr	r6, [r3, #0]
 8005372:	6862      	ldr	r2, [r4, #4]
 8005374:	2100      	movs	r1, #0
 8005376:	4630      	mov	r0, r6
 8005378:	f7fa ff32 	bl	80001e0 <memchr>
 800537c:	b108      	cbz	r0, 8005382 <_printf_i+0x1e6>
 800537e:	1b80      	subs	r0, r0, r6
 8005380:	6060      	str	r0, [r4, #4]
 8005382:	6863      	ldr	r3, [r4, #4]
 8005384:	6123      	str	r3, [r4, #16]
 8005386:	2300      	movs	r3, #0
 8005388:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800538c:	e7aa      	b.n	80052e4 <_printf_i+0x148>
 800538e:	6923      	ldr	r3, [r4, #16]
 8005390:	4632      	mov	r2, r6
 8005392:	4649      	mov	r1, r9
 8005394:	4640      	mov	r0, r8
 8005396:	47d0      	blx	sl
 8005398:	3001      	adds	r0, #1
 800539a:	d0ad      	beq.n	80052f8 <_printf_i+0x15c>
 800539c:	6823      	ldr	r3, [r4, #0]
 800539e:	079b      	lsls	r3, r3, #30
 80053a0:	d413      	bmi.n	80053ca <_printf_i+0x22e>
 80053a2:	68e0      	ldr	r0, [r4, #12]
 80053a4:	9b03      	ldr	r3, [sp, #12]
 80053a6:	4298      	cmp	r0, r3
 80053a8:	bfb8      	it	lt
 80053aa:	4618      	movlt	r0, r3
 80053ac:	e7a6      	b.n	80052fc <_printf_i+0x160>
 80053ae:	2301      	movs	r3, #1
 80053b0:	4632      	mov	r2, r6
 80053b2:	4649      	mov	r1, r9
 80053b4:	4640      	mov	r0, r8
 80053b6:	47d0      	blx	sl
 80053b8:	3001      	adds	r0, #1
 80053ba:	d09d      	beq.n	80052f8 <_printf_i+0x15c>
 80053bc:	3501      	adds	r5, #1
 80053be:	68e3      	ldr	r3, [r4, #12]
 80053c0:	9903      	ldr	r1, [sp, #12]
 80053c2:	1a5b      	subs	r3, r3, r1
 80053c4:	42ab      	cmp	r3, r5
 80053c6:	dcf2      	bgt.n	80053ae <_printf_i+0x212>
 80053c8:	e7eb      	b.n	80053a2 <_printf_i+0x206>
 80053ca:	2500      	movs	r5, #0
 80053cc:	f104 0619 	add.w	r6, r4, #25
 80053d0:	e7f5      	b.n	80053be <_printf_i+0x222>
 80053d2:	bf00      	nop
 80053d4:	0800556d 	.word	0x0800556d
 80053d8:	0800557e 	.word	0x0800557e

080053dc <memmove>:
 80053dc:	4288      	cmp	r0, r1
 80053de:	b510      	push	{r4, lr}
 80053e0:	eb01 0402 	add.w	r4, r1, r2
 80053e4:	d902      	bls.n	80053ec <memmove+0x10>
 80053e6:	4284      	cmp	r4, r0
 80053e8:	4623      	mov	r3, r4
 80053ea:	d807      	bhi.n	80053fc <memmove+0x20>
 80053ec:	1e43      	subs	r3, r0, #1
 80053ee:	42a1      	cmp	r1, r4
 80053f0:	d008      	beq.n	8005404 <memmove+0x28>
 80053f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80053fa:	e7f8      	b.n	80053ee <memmove+0x12>
 80053fc:	4402      	add	r2, r0
 80053fe:	4601      	mov	r1, r0
 8005400:	428a      	cmp	r2, r1
 8005402:	d100      	bne.n	8005406 <memmove+0x2a>
 8005404:	bd10      	pop	{r4, pc}
 8005406:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800540a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800540e:	e7f7      	b.n	8005400 <memmove+0x24>

08005410 <memcpy>:
 8005410:	440a      	add	r2, r1
 8005412:	4291      	cmp	r1, r2
 8005414:	f100 33ff 	add.w	r3, r0, #4294967295
 8005418:	d100      	bne.n	800541c <memcpy+0xc>
 800541a:	4770      	bx	lr
 800541c:	b510      	push	{r4, lr}
 800541e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005422:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005426:	4291      	cmp	r1, r2
 8005428:	d1f9      	bne.n	800541e <memcpy+0xe>
 800542a:	bd10      	pop	{r4, pc}

0800542c <_realloc_r>:
 800542c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005430:	4680      	mov	r8, r0
 8005432:	4615      	mov	r5, r2
 8005434:	460c      	mov	r4, r1
 8005436:	b921      	cbnz	r1, 8005442 <_realloc_r+0x16>
 8005438:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800543c:	4611      	mov	r1, r2
 800543e:	f7ff bb35 	b.w	8004aac <_malloc_r>
 8005442:	b92a      	cbnz	r2, 8005450 <_realloc_r+0x24>
 8005444:	f7ff fc9a 	bl	8004d7c <_free_r>
 8005448:	2400      	movs	r4, #0
 800544a:	4620      	mov	r0, r4
 800544c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005450:	f000 f81a 	bl	8005488 <_malloc_usable_size_r>
 8005454:	4285      	cmp	r5, r0
 8005456:	4606      	mov	r6, r0
 8005458:	d802      	bhi.n	8005460 <_realloc_r+0x34>
 800545a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800545e:	d8f4      	bhi.n	800544a <_realloc_r+0x1e>
 8005460:	4629      	mov	r1, r5
 8005462:	4640      	mov	r0, r8
 8005464:	f7ff fb22 	bl	8004aac <_malloc_r>
 8005468:	4607      	mov	r7, r0
 800546a:	2800      	cmp	r0, #0
 800546c:	d0ec      	beq.n	8005448 <_realloc_r+0x1c>
 800546e:	42b5      	cmp	r5, r6
 8005470:	462a      	mov	r2, r5
 8005472:	4621      	mov	r1, r4
 8005474:	bf28      	it	cs
 8005476:	4632      	movcs	r2, r6
 8005478:	f7ff ffca 	bl	8005410 <memcpy>
 800547c:	4621      	mov	r1, r4
 800547e:	4640      	mov	r0, r8
 8005480:	f7ff fc7c 	bl	8004d7c <_free_r>
 8005484:	463c      	mov	r4, r7
 8005486:	e7e0      	b.n	800544a <_realloc_r+0x1e>

08005488 <_malloc_usable_size_r>:
 8005488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800548c:	1f18      	subs	r0, r3, #4
 800548e:	2b00      	cmp	r3, #0
 8005490:	bfbc      	itt	lt
 8005492:	580b      	ldrlt	r3, [r1, r0]
 8005494:	18c0      	addlt	r0, r0, r3
 8005496:	4770      	bx	lr

08005498 <_init>:
 8005498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549a:	bf00      	nop
 800549c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800549e:	bc08      	pop	{r3}
 80054a0:	469e      	mov	lr, r3
 80054a2:	4770      	bx	lr

080054a4 <_fini>:
 80054a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054a6:	bf00      	nop
 80054a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054aa:	bc08      	pop	{r3}
 80054ac:	469e      	mov	lr, r3
 80054ae:	4770      	bx	lr
