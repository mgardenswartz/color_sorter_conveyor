
test-18.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052d4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08005474  08005474  00006474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005530  08005530  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005530  08005530  00006530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005538  08005538  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005538  08005538  00006538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800553c  0800553c  0000653c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005540  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  2000005c  0800559c  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  0800559c  00007370  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed1b  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025b3  00000000  00000000  00015da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  00018360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a5e  00000000  00000000  000190b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019886  00000000  00000000  00019b16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f614  00000000  00000000  0003339c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090d77  00000000  00000000  000429b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d3727  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e58  00000000  00000000  000d376c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  000d75c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800545c 	.word	0x0800545c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	0800545c 	.word	0x0800545c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb>:
 * @param neutral_us_width Width of the neutral signal in microseconds.
 * @param full_forward_us_width Width of the full forward signal in microseconds.
 * @param rescale_forward_magnitude Maximum value for rescaling the forward signal. Overridden if fed into RemoteControlControl.
 * @param rescale_reverse_magnitude Minimum value for rescaling the reverse signal. Overridden if fed into RemoteControlControl.
 */
RCChannel::RCChannel(
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	4613      	mov	r3, r2
 800057e:	80fb      	strh	r3, [r7, #6]
	full_reverse_us_width(full_reverse_us_width),
	neutral_us_width(neutral_us_width),
	full_forward_us_width(full_forward_us_width),
	rescale_forward_magnitude(rescale_forward_magnitude),
	rescale_reverse_magnitude(rescale_reverse_magnitude),
	saturate(saturate)
 8000580:	4a3c      	ldr	r2, [pc, #240]	@ (8000674 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0x104>)
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	2200      	movs	r2, #0
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	2200      	movs	r2, #0
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	2200      	movs	r2, #0
 800059c:	611a      	str	r2, [r3, #16]
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	2200      	movs	r2, #0
 80005a2:	615a      	str	r2, [r3, #20]
	pin_group(pin_group),
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	68ba      	ldr	r2, [r7, #8]
 80005a8:	619a      	str	r2, [r3, #24]
	pin(pin),
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	88fa      	ldrh	r2, [r7, #6]
 80005ae:	839a      	strh	r2, [r3, #28]
	timer_handle(timer_handle),
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	683a      	ldr	r2, [r7, #0]
 80005b4:	621a      	str	r2, [r3, #32]
	timer_channel(timer_channel),
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	6a3a      	ldr	r2, [r7, #32]
 80005ba:	625a      	str	r2, [r3, #36]	@ 0x24
	RC_signal_period_us(RC_signal_period_us),
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80005c0:	629a      	str	r2, [r3, #40]	@ 0x28
	CPU_clock_speed_MHz(CPU_clock_speed_MHz),
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80005c6:	62da      	str	r2, [r3, #44]	@ 0x2c
	full_reverse_us_width(full_reverse_us_width),
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80005cc:	631a      	str	r2, [r3, #48]	@ 0x30
	neutral_us_width(neutral_us_width),
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80005d2:	635a      	str	r2, [r3, #52]	@ 0x34
	full_forward_us_width(full_forward_us_width),
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80005d8:	639a      	str	r2, [r3, #56]	@ 0x38
	rescale_forward_magnitude(rescale_forward_magnitude),
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80005de:	63da      	str	r2, [r3, #60]	@ 0x3c
	rescale_reverse_magnitude(rescale_reverse_magnitude),
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80005e4:	641a      	str	r2, [r3, #64]	@ 0x40
	saturate(saturate)
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 80005ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	2201      	movs	r2, #1
 80005f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
{
	// Critical. Starts the first interrupt.
	HAL_TIM_IC_Start_IT(timer_handle, timer_channel);
 80005f8:	6a39      	ldr	r1, [r7, #32]
 80005fa:	6838      	ldr	r0, [r7, #0]
 80005fc:	f002 fb1c 	bl	8002c38 <HAL_TIM_IC_Start_IT>

	// Set minuend depending on whether it's a 16-bit or 32-bit timer.
	// This is specific to the STM32F411CUE6!!
	if (((timer_handle->Instance) == TIM2) or ((timer_handle->Instance) == TIM5))
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000608:	d004      	beq.n	8000614 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0xa4>
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a1a      	ldr	r2, [pc, #104]	@ (8000678 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0x108>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d104      	bne.n	800061e <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0xae>
	{
		minuend = 0xffffffff;
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	f04f 32ff 	mov.w	r2, #4294967295
 800061a:	649a      	str	r2, [r3, #72]	@ 0x48
 800061c:	e003      	b.n	8000626 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0xb6>
	}
	else
	{
		minuend = 0xffff;
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000624:	649a      	str	r2, [r3, #72]	@ 0x48
	}

	// For later scaling
	uint32_t prescalar = timer_handle->Instance->PSC + 1;
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800062c:	3301      	adds	r3, #1
 800062e:	617b      	str	r3, [r7, #20]
	float refClock = CPU_clock_speed_MHz/prescalar;
 8000630:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	fbb2 f3f3 	udiv	r3, r2, r3
 8000638:	ee07 3a90 	vmov	s15, r3
 800063c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000640:	edc7 7a04 	vstr	s15, [r7, #16]
	mFactor = 1/refClock;
 8000644:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000648:	ed97 7a04 	vldr	s14, [r7, #16]
 800064c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

	// Needed later
	forward_range = full_forward_us_width - neutral_us_width;
 8000656:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800065a:	1ad2      	subs	r2, r2, r3
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	659a      	str	r2, [r3, #88]	@ 0x58
	reverse_range = neutral_us_width - full_reverse_us_width;
 8000660:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000664:	1ad2      	subs	r2, r2, r3
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	655a      	str	r2, [r3, #84]	@ 0x54
}
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	4618      	mov	r0, r3
 800066e:	3718      	adds	r7, #24
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	080054bc 	.word	0x080054bc
 8000678:	40000c00 	.word	0x40000c00

0800067c <_ZN9RCChannel8callbackEv>:
 * 
 * @note This function assumes that the timer handle and channel have been properly initialized.
 * Please set the associated timer channel to input capture mode, direct. 
 * Leave the auto-reload value as large as possible.
 */
void RCChannel::callback(){
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	// Was it a rising edge or a falling edge?
	GPIO_PinState pinState = HAL_GPIO_ReadPin(pin_group, pin);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	699a      	ldr	r2, [r3, #24]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	8b9b      	ldrh	r3, [r3, #28]
 800068c:	4619      	mov	r1, r3
 800068e:	4610      	mov	r0, r2
 8000690:	f001 fc00 	bl	8001e94 <HAL_GPIO_ReadPin>
 8000694:	4603      	mov	r3, r0
 8000696:	73fb      	strb	r3, [r7, #15]

	if(pinState == GPIO_PIN_SET) // Rising edge
 8000698:	7bfb      	ldrb	r3, [r7, #15]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d10c      	bne.n	80006b8 <_ZN9RCChannel8callbackEv+0x3c>
		{
			// Read
			first_value = HAL_TIM_ReadCapturedValue(timer_handle, timer_channel);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6a1a      	ldr	r2, [r3, #32]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006a6:	4619      	mov	r1, r3
 80006a8:	4610      	mov	r0, r2
 80006aa:	f003 f8d7 	bl	800385c <HAL_TIM_ReadCapturedValue>
 80006ae:	4603      	mov	r3, r0
 80006b0:	461a      	mov	r2, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	605a      	str	r2, [r3, #4]
		}

 	// Finally
 	first_capture = true;
 	}
}
 80006b6:	e07a      	b.n	80007ae <_ZN9RCChannel8callbackEv+0x132>
 		second_value = HAL_TIM_ReadCapturedValue(timer_handle, timer_channel);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	6a1a      	ldr	r2, [r3, #32]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006c0:	4619      	mov	r1, r3
 80006c2:	4610      	mov	r0, r2
 80006c4:	f003 f8ca 	bl	800385c <HAL_TIM_ReadCapturedValue>
 80006c8:	4603      	mov	r3, r0
 80006ca:	461a      	mov	r2, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 		if(first_value > second_value)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	685a      	ldr	r2, [r3, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	689b      	ldr	r3, [r3, #8]
 80006d8:	429a      	cmp	r2, r3
 80006da:	dd0c      	ble.n	80006f6 <_ZN9RCChannel8callbackEv+0x7a>
 			difference = minuend - first_value + second_value + 1;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	6852      	ldr	r2, [r2, #4]
 80006e4:	1a9b      	subs	r3, r3, r2
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	6892      	ldr	r2, [r2, #8]
 80006ea:	4413      	add	r3, r2
 80006ec:	3301      	adds	r3, #1
 80006ee:	461a      	mov	r2, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	e006      	b.n	8000704 <_ZN9RCChannel8callbackEv+0x88>
 			difference = second_value - first_value;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	689a      	ldr	r2, [r3, #8]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	685b      	ldr	r3, [r3, #4]
 80006fe:	1ad2      	subs	r2, r2, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	60da      	str	r2, [r3, #12]
 		us_width = difference;//*mFactor;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	68da      	ldr	r2, [r3, #12]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	611a      	str	r2, [r3, #16]
		int32_t centered_value = us_width - neutral_us_width;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	691a      	ldr	r2, [r3, #16]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000714:	1ad3      	subs	r3, r2, r3
 8000716:	60bb      	str	r3, [r7, #8]
 		if(centered_value >= 0)
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	2b00      	cmp	r3, #0
 800071c:	db23      	blt.n	8000766 <_ZN9RCChannel8callbackEv+0xea>
 			value = centered_value*rescale_forward_magnitude/forward_range;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000722:	68ba      	ldr	r2, [r7, #8]
 8000724:	fb03 f202 	mul.w	r2, r3, r2
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800072c:	fb92 f2f3 	sdiv	r2, r2, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	615a      	str	r2, [r3, #20]
			if(value>rescale_forward_magnitude && saturate)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	695a      	ldr	r2, [r3, #20]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800073c:	429a      	cmp	r2, r3
 800073e:	dd0d      	ble.n	800075c <_ZN9RCChannel8callbackEv+0xe0>
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000746:	2b00      	cmp	r3, #0
 8000748:	d008      	beq.n	800075c <_ZN9RCChannel8callbackEv+0xe0>
				value = rescale_forward_magnitude;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	615a      	str	r2, [r3, #20]
	 			saturate_flag = true;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2201      	movs	r2, #1
 8000756:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800075a:	e024      	b.n	80007a6 <_ZN9RCChannel8callbackEv+0x12a>
	 			saturate_flag = false;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2200      	movs	r2, #0
 8000760:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000764:	e01f      	b.n	80007a6 <_ZN9RCChannel8callbackEv+0x12a>
			value =  centered_value*rescale_reverse_magnitude/reverse_range;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	fb03 f202 	mul.w	r2, r3, r2
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000774:	fb92 f2f3 	sdiv	r2, r2, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	615a      	str	r2, [r3, #20]
	 		if(value<-rescale_reverse_magnitude)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	695a      	ldr	r2, [r3, #20]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000784:	425b      	negs	r3, r3
 8000786:	429a      	cmp	r2, r3
 8000788:	da09      	bge.n	800079e <_ZN9RCChannel8callbackEv+0x122>
	 			value = -rescale_reverse_magnitude;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800078e:	425a      	negs	r2, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	615a      	str	r2, [r3, #20]
	 			saturate_flag = true;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2201      	movs	r2, #1
 8000798:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800079c:	e003      	b.n	80007a6 <_ZN9RCChannel8callbackEv+0x12a>
	 			saturate_flag = false;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2200      	movs	r2, #0
 80007a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 	first_capture = true;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2201      	movs	r2, #1
 80007aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 80007ae:	bf00      	nop
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
	...

080007b8 <_ZN9RCChannelD1Ev>:
/**
 * @brief Destructor for the RCChannel class.
 * 
 * This destructor stops the interrupts for the RCChannel object.
 */
RCChannel::~RCChannel() {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	4a07      	ldr	r2, [pc, #28]	@ (80007e0 <_ZN9RCChannelD1Ev+0x28>)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	601a      	str	r2, [r3, #0]
	// Stop interrupts
	HAL_TIM_IC_Stop_IT(timer_handle, timer_channel);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	6a1a      	ldr	r2, [r3, #32]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007ce:	4619      	mov	r1, r3
 80007d0:	4610      	mov	r0, r2
 80007d2:	f002 fb4b 	bl	8002e6c <HAL_TIM_IC_Stop_IT>
}
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4618      	mov	r0, r3
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	080054bc 	.word	0x080054bc

080007e4 <_ZN9RCChannelD0Ev>:
RCChannel::~RCChannel() {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
}
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f7ff ffe3 	bl	80007b8 <_ZN9RCChannelD1Ev>
 80007f2:	215c      	movs	r1, #92	@ 0x5c
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f004 f917 	bl	8004a28 <_ZdlPvj>
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4618      	mov	r0, r3
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <_ZN20RemoteControlControlC1EP9RCChannelP15TB6612FNG_Motor>:
/**
 * @brief Constructs a RemoteControlControl object with the given remote control channel and motor driver.
 * @param rc_channel Pointer to the RCChannel object.
 * @param motor Pointer to a TB6612FNG_Motor object.
 */
RemoteControlControl::RemoteControlControl(RCChannel* rc_channel, TB6612FNG_Motor* motor)
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]
	: rc_channel(rc_channel), motor(motor)
 8000810:	4a10      	ldr	r2, [pc, #64]	@ (8000854 <_ZN20RemoteControlControlC1EP9RCChannelP15TB6612FNG_Motor+0x50>)
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	68ba      	ldr	r2, [r7, #8]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	2264      	movs	r2, #100	@ 0x64
 8000826:	819a      	strh	r2, [r3, #12]
{
	// Reassign the magnitudes for rescaling to prevent rounding error.
	new_maximum_value = motor->auto_reload_value; // Maybe pTimer->Instance.PSC
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	819a      	strh	r2, [r3, #12]
	rc_channel->rescale_forward_magnitude = new_maximum_value;
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	899b      	ldrh	r3, [r3, #12]
 8000834:	461a      	mov	r2, r3
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	63da      	str	r2, [r3, #60]	@ 0x3c
	rc_channel->rescale_reverse_magnitude = new_maximum_value;
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	899b      	ldrh	r3, [r3, #12]
 800083e:	461a      	mov	r2, r3
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	4618      	mov	r0, r3
 8000848:	3714      	adds	r7, #20
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	080054cc 	.word	0x080054cc

08000858 <_ZN20RemoteControlControl12update_motorEv>:
/**
 * @brief Updates a TB6612FNG_Motor object based on the remote control channel value.
 * Run this function in your HAL_TIM_IC_CaptureCallback() function to update the motor as often as your RC sends new values.
 */
void RemoteControlControl::update_motor()
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	// Read from the remote control channel
	int32_t value = rc_channel->value;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	695b      	ldr	r3, [r3, #20]
 8000866:	60fb      	str	r3, [r7, #12]

	// Update the motor
	motor->set_duty(value, new_maximum_value);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6898      	ldr	r0, [r3, #8]
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	b219      	sxth	r1, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	899b      	ldrh	r3, [r3, #12]
 8000874:	b21b      	sxth	r3, r3
 8000876:	461a      	mov	r2, r3
 8000878:	f000 f8ba 	bl	80009f0 <_ZN15TB6612FNG_Motor8set_dutyEss>
}
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <_ZN20RemoteControlControlD1Ev>:

/**
 * @brief Destructs the RemoteControlControl object and releases any dynamically allocated resources.
 */
RemoteControlControl::~RemoteControlControl()
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	4a13      	ldr	r2, [pc, #76]	@ (80008dc <_ZN20RemoteControlControlD1Ev+0x58>)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	601a      	str	r2, [r3, #0]
{
	// Deallocate memory for rc_channel if it was dynamically allocated
	if (rc_channel != nullptr)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d00b      	beq.n	80008b2 <_ZN20RemoteControlControlD1Ev+0x2e>
	{
		delete rc_channel;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d004      	beq.n	80008ac <_ZN20RemoteControlControlD1Ev+0x28>
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	3204      	adds	r2, #4
 80008a6:	6812      	ldr	r2, [r2, #0]
 80008a8:	4618      	mov	r0, r3
 80008aa:	4790      	blx	r2
		rc_channel = nullptr; // Optional: Set to nullptr to avoid dangling pointers
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2200      	movs	r2, #0
 80008b0:	605a      	str	r2, [r3, #4]
	}

	// Deallocate memory for motor if it was dynamically allocated
	if (motor != nullptr)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	689b      	ldr	r3, [r3, #8]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d00b      	beq.n	80008d2 <_ZN20RemoteControlControlD1Ev+0x4e>
	{
		delete motor;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	689b      	ldr	r3, [r3, #8]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d004      	beq.n	80008cc <_ZN20RemoteControlControlD1Ev+0x48>
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	3204      	adds	r2, #4
 80008c6:	6812      	ldr	r2, [r2, #0]
 80008c8:	4618      	mov	r0, r3
 80008ca:	4790      	blx	r2
		motor = nullptr; // Optional: Set to nullptr to avoid dangling pointers
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
	}
}
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4618      	mov	r0, r3
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	080054cc 	.word	0x080054cc

080008e0 <_ZN20RemoteControlControlD0Ev>:
RemoteControlControl::~RemoteControlControl()
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
}
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f7ff ffcb 	bl	8000884 <_ZN20RemoteControlControlD1Ev>
 80008ee:	2110      	movs	r1, #16
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f004 f899 	bl	8004a28 <_ZdlPvj>
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4618      	mov	r0, r3
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm>:
 * @param timer_channel The channel number to be used with the timer (like TIM_CHANNEL_1).
 * @param CPU_clock_speed_MHz The CPU clock speed in MHz (like 96).
 * @param PWM_frequency_Hz The PWM frequency in Hz (20,000 to 100,000 allowed).
 */

TB6612FNG_Motor::TB6612FNG_Motor(
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	4613      	mov	r3, r2
 800090e:	80fb      	strh	r3, [r7, #6]

	: IN1_pin_group(IN1_pin_group), IN1_pin(IN1_pin),
	  IN2_pin_group(IN2_pin_group), IN2_pin(IN2_pin),
	  pTimer(pTimer), timer_channel(timer_channel),
	  CPU_clock_speed_MHz(CPU_clock_speed_MHz),
	  PWM_frequency_Hz(PWM_frequency_Hz)
 8000910:	4a23      	ldr	r2, [pc, #140]	@ (80009a0 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa0>)
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	601a      	str	r2, [r3, #0]
	: IN1_pin_group(IN1_pin_group), IN1_pin(IN1_pin),
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	68ba      	ldr	r2, [r7, #8]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	88fa      	ldrh	r2, [r7, #6]
 8000920:	811a      	strh	r2, [r3, #8]
	  IN2_pin_group(IN2_pin_group), IN2_pin(IN2_pin),
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	683a      	ldr	r2, [r7, #0]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	8b3a      	ldrh	r2, [r7, #24]
 800092c:	821a      	strh	r2, [r3, #16]
	  pTimer(pTimer), timer_channel(timer_channel),
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	69fa      	ldr	r2, [r7, #28]
 8000932:	615a      	str	r2, [r3, #20]
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	6a3a      	ldr	r2, [r7, #32]
 8000938:	619a      	str	r2, [r3, #24]
	  CPU_clock_speed_MHz(CPU_clock_speed_MHz),
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800093e:	61da      	str	r2, [r3, #28]
	  PWM_frequency_Hz(PWM_frequency_Hz)
 8000940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000942:	b29a      	uxth	r2, r3
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	841a      	strh	r2, [r3, #32]
{
	// Make sure the motor is off to start
	stop();
 8000948:	68f8      	ldr	r0, [r7, #12]
 800094a:	f000 f8d0 	bl	8000aee <_ZN15TB6612FNG_Motor4stopEv>

	// Make sure the PWM frequency is within bounds
	if(PWM_frequency_Hz < 20000)
 800094e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000950:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000954:	4293      	cmp	r3, r2
 8000956:	d803      	bhi.n	8000960 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0x60>
	{
		// Too low. Human can hear this.
		PWM_frequency_Hz = 20000;
 8000958:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800095c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800095e:	e005      	b.n	800096c <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0x6c>
	}
	else if(PWM_frequency_Hz > 100000)
 8000960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000962:	4a10      	ldr	r2, [pc, #64]	@ (80009a4 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa4>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d901      	bls.n	800096c <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0x6c>
	{
		// Very high. May interfere with other tasks.
		PWM_frequency_Hz = 100000;
 8000968:	4b0e      	ldr	r3, [pc, #56]	@ (80009a4 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa4>)
 800096a:	62bb      	str	r3, [r7, #40]	@ 0x28
	}

	// Set the auto-reload value based on the CPU clock speed and the desired PWM frequency
	auto_reload_value =( CPU_clock_speed_MHz * 1000000 / PWM_frequency_Hz ) - 1;
 800096c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800096e:	4a0e      	ldr	r2, [pc, #56]	@ (80009a8 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa8>)
 8000970:	fb03 f202 	mul.w	r2, r3, r2
 8000974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000976:	fbb2 f3f3 	udiv	r3, r2, r3
 800097a:	b29b      	uxth	r3, r3
 800097c:	3b01      	subs	r3, #1
 800097e:	b29a      	uxth	r2, r3
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	845a      	strh	r2, [r3, #34]	@ 0x22
	pTimer->Init.AutoReloadPreload = auto_reload_value;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000988:	461a      	mov	r2, r3
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	619a      	str	r2, [r3, #24]

	// Start the PWM generation
	start();
 800098e:	68f8      	ldr	r0, [r7, #12]
 8000990:	f000 f89d 	bl	8000ace <_ZN15TB6612FNG_Motor5startEv>
}
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	4618      	mov	r0, r3
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	080054dc 	.word	0x080054dc
 80009a4:	000186a0 	.word	0x000186a0
 80009a8:	000f4240 	.word	0x000f4240

080009ac <_ZN15TB6612FNG_MotorD1Ev>:

/**
 * @brief Destructor for the TB6612FNG_Motor class.
 */
TB6612FNG_Motor::~TB6612FNG_Motor()
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	4a05      	ldr	r2, [pc, #20]	@ (80009cc <_ZN15TB6612FNG_MotorD1Ev+0x20>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	601a      	str	r2, [r3, #0]
{
	stop();
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f000 f897 	bl	8000aee <_ZN15TB6612FNG_Motor4stopEv>
}
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4618      	mov	r0, r3
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	080054dc 	.word	0x080054dc

080009d0 <_ZN15TB6612FNG_MotorD0Ev>:
TB6612FNG_Motor::~TB6612FNG_Motor()
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
}
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f7ff ffe7 	bl	80009ac <_ZN15TB6612FNG_MotorD1Ev>
 80009de:	2124      	movs	r1, #36	@ 0x24
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f004 f821 	bl	8004a28 <_ZdlPvj>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4618      	mov	r0, r3
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <_ZN15TB6612FNG_Motor8set_dutyEss>:
/**
 * @brief Sets the duty cycle of the motor.
 * @param speed The duty cycle value, ranging from -100 to 100 by default.
 */
void TB6612FNG_Motor::set_duty(int16_t duty, int16_t maximum_value)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	460b      	mov	r3, r1
 80009fa:	807b      	strh	r3, [r7, #2]
 80009fc:	4613      	mov	r3, r2
 80009fe:	803b      	strh	r3, [r7, #0]
	// Raise the appropriate pins
	if(duty >= 0)
 8000a00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	db10      	blt.n	8000a2a <_ZN15TB6612FNG_Motor8set_dutyEss+0x3a>
	{
		HAL_GPIO_WritePin(IN1_pin_group, IN1_pin, GPIO_PIN_SET);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6858      	ldr	r0, [r3, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	891b      	ldrh	r3, [r3, #8]
 8000a10:	2201      	movs	r2, #1
 8000a12:	4619      	mov	r1, r3
 8000a14:	f001 fa56 	bl	8001ec4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_pin_group, IN2_pin, GPIO_PIN_RESET);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	68d8      	ldr	r0, [r3, #12]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	8a1b      	ldrh	r3, [r3, #16]
 8000a20:	2200      	movs	r2, #0
 8000a22:	4619      	mov	r1, r3
 8000a24:	f001 fa4e 	bl	8001ec4 <HAL_GPIO_WritePin>
 8000a28:	e00f      	b.n	8000a4a <_ZN15TB6612FNG_Motor8set_dutyEss+0x5a>
	}
	else
	{
		HAL_GPIO_WritePin(IN1_pin_group, IN1_pin, GPIO_PIN_RESET);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6858      	ldr	r0, [r3, #4]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	891b      	ldrh	r3, [r3, #8]
 8000a32:	2200      	movs	r2, #0
 8000a34:	4619      	mov	r1, r3
 8000a36:	f001 fa45 	bl	8001ec4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_pin_group, IN2_pin, GPIO_PIN_SET);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	68d8      	ldr	r0, [r3, #12]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	8a1b      	ldrh	r3, [r3, #16]
 8000a42:	2201      	movs	r2, #1
 8000a44:	4619      	mov	r1, r3
 8000a46:	f001 fa3d 	bl	8001ec4 <HAL_GPIO_WritePin>
	}

	uint16_t duty_magnitude;
	if(duty<0)
 8000a4a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	da03      	bge.n	8000a5a <_ZN15TB6612FNG_Motor8set_dutyEss+0x6a>
	{
		duty_magnitude = duty*-1;
 8000a52:	887b      	ldrh	r3, [r7, #2]
 8000a54:	425b      	negs	r3, r3
 8000a56:	81fb      	strh	r3, [r7, #14]
 8000a58:	e001      	b.n	8000a5e <_ZN15TB6612FNG_Motor8set_dutyEss+0x6e>
	}
	else
	{
		duty_magnitude = duty;
 8000a5a:	887b      	ldrh	r3, [r7, #2]
 8000a5c:	81fb      	strh	r3, [r7, #14]
	}

	// Check if duty cycle is within bounds
	if(duty_magnitude > maximum_value)
 8000a5e:	89fa      	ldrh	r2, [r7, #14]
 8000a60:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	dd01      	ble.n	8000a6c <_ZN15TB6612FNG_Motor8set_dutyEss+0x7c>
	{
		duty = maximum_value;
 8000a68:	883b      	ldrh	r3, [r7, #0]
 8000a6a:	807b      	strh	r3, [r7, #2]
	}


	// Set the compare value
	uint16_t compare_value = duty_magnitude * auto_reload_value / maximum_value;
 8000a6c:	89fb      	ldrh	r3, [r7, #14]
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8000a72:	fb03 f202 	mul.w	r2, r3, r2
 8000a76:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000a7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a7e:	81bb      	strh	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(pTimer, timer_channel, compare_value);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d105      	bne.n	8000a94 <_ZN15TB6612FNG_Motor8set_dutyEss+0xa4>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	695b      	ldr	r3, [r3, #20]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	89ba      	ldrh	r2, [r7, #12]
 8000a90:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000a92:	e018      	b.n	8000ac6 <_ZN15TB6612FNG_Motor8set_dutyEss+0xd6>
	__HAL_TIM_SET_COMPARE(pTimer, timer_channel, compare_value);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	2b04      	cmp	r3, #4
 8000a9a:	d105      	bne.n	8000aa8 <_ZN15TB6612FNG_Motor8set_dutyEss+0xb8>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	695b      	ldr	r3, [r3, #20]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	89ba      	ldrh	r2, [r7, #12]
 8000aa4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000aa6:	e00e      	b.n	8000ac6 <_ZN15TB6612FNG_Motor8set_dutyEss+0xd6>
	__HAL_TIM_SET_COMPARE(pTimer, timer_channel, compare_value);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	2b08      	cmp	r3, #8
 8000aae:	d105      	bne.n	8000abc <_ZN15TB6612FNG_Motor8set_dutyEss+0xcc>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	695b      	ldr	r3, [r3, #20]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	89ba      	ldrh	r2, [r7, #12]
 8000ab8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000aba:	e004      	b.n	8000ac6 <_ZN15TB6612FNG_Motor8set_dutyEss+0xd6>
	__HAL_TIM_SET_COMPARE(pTimer, timer_channel, compare_value);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	695b      	ldr	r3, [r3, #20]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	89ba      	ldrh	r2, [r7, #12]
 8000ac4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000ac6:	bf00      	nop
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <_ZN15TB6612FNG_Motor5startEv>:

/**
 * @brief starts the motor by starting PWM generation.
 */
void TB6612FNG_Motor::start()
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b082      	sub	sp, #8
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(pTimer, timer_channel);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	695a      	ldr	r2, [r3, #20]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	699b      	ldr	r3, [r3, #24]
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4610      	mov	r0, r2
 8000ae2:	f001 ff3b 	bl	800295c <HAL_TIM_PWM_Start>
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <_ZN15TB6612FNG_Motor4stopEv>:

/**
 * @brief stops the motor by stopping PWM generation.
 */
void TB6612FNG_Motor::stop()
{	
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(IN1_pin_group, IN1_pin, GPIO_PIN_RESET);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6858      	ldr	r0, [r3, #4]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	891b      	ldrh	r3, [r3, #8]
 8000afe:	2200      	movs	r2, #0
 8000b00:	4619      	mov	r1, r3
 8000b02:	f001 f9df 	bl	8001ec4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_pin_group, IN2_pin, GPIO_PIN_RESET);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	68d8      	ldr	r0, [r3, #12]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	8a1b      	ldrh	r3, [r3, #16]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	4619      	mov	r1, r3
 8000b12:	f001 f9d7 	bl	8001ec4 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(pTimer, timer_channel);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	695a      	ldr	r2, [r3, #20]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4610      	mov	r0, r2
 8000b22:	f001 ffcb 	bl	8002abc <HAL_TIM_PWM_Stop>
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <HAL_GPIO_EXTI_Callback>:
uint16_t encoder_last_count;
uint16_t encoder_count;
int16_t encoder_position;
int16_t debug_throttle_value = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	80fb      	strh	r3, [r7, #6]
   // Your interrupt handling code here
	if(GPIO_PIN == GPIO_PIN_13)
 8000b3a:	88fb      	ldrh	r3, [r7, #6]
 8000b3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b40:	d10f      	bne.n	8000b62 <HAL_GPIO_EXTI_Callback+0x32>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8000b42:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b46:	4809      	ldr	r0, [pc, #36]	@ (8000b6c <HAL_GPIO_EXTI_Callback+0x3c>)
 8000b48:	f001 f9d5 	bl	8001ef6 <HAL_GPIO_TogglePin>
		sprintf(my_message, "Interrupt triggered.\r\n");
 8000b4c:	4908      	ldr	r1, [pc, #32]	@ (8000b70 <HAL_GPIO_EXTI_Callback+0x40>)
 8000b4e:	4809      	ldr	r0, [pc, #36]	@ (8000b74 <HAL_GPIO_EXTI_Callback+0x44>)
 8000b50:	f004 f84e 	bl	8004bf0 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)my_message, MESSAGE_LENGTH, HAL_MAX_DELAY);
 8000b54:	f04f 33ff 	mov.w	r3, #4294967295
 8000b58:	2264      	movs	r2, #100	@ 0x64
 8000b5a:	4906      	ldr	r1, [pc, #24]	@ (8000b74 <HAL_GPIO_EXTI_Callback+0x44>)
 8000b5c:	4806      	ldr	r0, [pc, #24]	@ (8000b78 <HAL_GPIO_EXTI_Callback+0x48>)
 8000b5e:	f003 fba7 	bl	80042b0 <HAL_UART_Transmit>
	}
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40020400 	.word	0x40020400
 8000b70:	08005474 	.word	0x08005474
 8000b74:	20000198 	.word	0x20000198
 8000b78:	20000150 	.word	0x20000150

08000b7c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
//	sprintf(my_message, "Timer input capture callback.\r\n");
//	HAL_UART_Transmit(&huart2, (uint8_t*)my_message, MESSAGE_LENGTH, HAL_MAX_DELAY);
	if (initialized) // Timers must be initalized before this code can run successfully.
 8000b84:	4b18      	ldr	r3, [pc, #96]	@ (8000be8 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d028      	beq.n	8000bde <HAL_TIM_IC_CaptureCallback+0x62>
		{
			if((htim->Instance = TIM1))
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4a17      	ldr	r2, [pc, #92]	@ (8000bec <HAL_TIM_IC_CaptureCallback+0x70>)
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	bf14      	ite	ne
 8000b9a:	2301      	movne	r3, #1
 8000b9c:	2300      	moveq	r3, #0
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d01c      	beq.n	8000bde <HAL_TIM_IC_CaptureCallback+0x62>
			{
				if ( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 )
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	7f1b      	ldrb	r3, [r3, #28]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d104      	bne.n	8000bb6 <HAL_TIM_IC_CaptureCallback+0x3a>
				{
					// Handle channel
					SteeringChannel->callback();
 8000bac:	4b10      	ldr	r3, [pc, #64]	@ (8000bf0 <HAL_TIM_IC_CaptureCallback+0x74>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fd63 	bl	800067c <_ZN9RCChannel8callbackEv>
//					SteeringChannel->value = -500;
//					SteeringChannel->us_width = 6969;
					//Steering->update_motor();
				}

				if ( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	7f1b      	ldrb	r3, [r3, #28]
 8000bba:	2b02      	cmp	r3, #2
 8000bbc:	d10f      	bne.n	8000bde <HAL_TIM_IC_CaptureCallback+0x62>
				{
					// Handle channel
					ThrottleChannel->callback();
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf4 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff fd5a 	bl	800067c <_ZN9RCChannel8callbackEv>
					debug_throttle_value = ThrottleChannel->value;
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf4 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	695b      	ldr	r3, [r3, #20]
 8000bce:	b21a      	sxth	r2, r3
 8000bd0:	4b09      	ldr	r3, [pc, #36]	@ (8000bf8 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000bd2:	801a      	strh	r2, [r3, #0]
					Throttle->update_motor();
 8000bd4:	4b09      	ldr	r3, [pc, #36]	@ (8000bfc <HAL_TIM_IC_CaptureCallback+0x80>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff fe3d 	bl	8000858 <_ZN20RemoteControlControl12update_motorEv>
				}
			}
		}
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200001fc 	.word	0x200001fc
 8000bec:	40010000 	.word	0x40010000
 8000bf0:	20000208 	.word	0x20000208
 8000bf4:	20000204 	.word	0x20000204
 8000bf8:	20000218 	.word	0x20000218
 8000bfc:	2000020c 	.word	0x2000020c

08000c00 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	//encoder_count = __HAL_TIM_GET_COUNTER(&htim5);
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c14:	b590      	push	{r4, r7, lr}
 8000c16:	b08d      	sub	sp, #52	@ 0x34
 8000c18:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c1a:	f000 fe0f 	bl	800183c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c1e:	f000 f911 	bl	8000e44 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c22:	f000 fb37 	bl	8001294 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000c26:	f000 fb07 	bl	8001238 <_ZL19MX_USART2_UART_Initv>
  MX_TIM2_Init();
 8000c2a:	f000 fa19 	bl	8001060 <_ZL12MX_TIM2_Initv>
  MX_TIM5_Init();
 8000c2e:	f000 faa5 	bl	800117c <_ZL12MX_TIM5_Initv>
  MX_TIM1_Init();
 8000c32:	f000 f979 	bl	8000f28 <_ZL12MX_TIM1_Initv>
  My_Motor = new TB6612FNG_Motor(
		  GPIOB, GPIO_PIN_14,
		  GPIOB, GPIO_PIN_15,
		  &htim2, TIM_CHANNEL_1,
		  CPU_CLOCK_MHZ,
		  MOTOR_PWM_HZ);
 8000c36:	2024      	movs	r0, #36	@ 0x24
 8000c38:	f003 fef8 	bl	8004a2c <_Znwj>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	461c      	mov	r4, r3
 8000c40:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000c44:	9304      	str	r3, [sp, #16]
 8000c46:	2364      	movs	r3, #100	@ 0x64
 8000c48:	9303      	str	r3, [sp, #12]
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	9302      	str	r3, [sp, #8]
 8000c4e:	4b6c      	ldr	r3, [pc, #432]	@ (8000e00 <main+0x1ec>)
 8000c50:	9301      	str	r3, [sp, #4]
 8000c52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c56:	9300      	str	r3, [sp, #0]
 8000c58:	4b6a      	ldr	r3, [pc, #424]	@ (8000e04 <main+0x1f0>)
 8000c5a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c5e:	4969      	ldr	r1, [pc, #420]	@ (8000e04 <main+0x1f0>)
 8000c60:	4620      	mov	r0, r4
 8000c62:	f7ff fe4d 	bl	8000900 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm>
  My_Motor = new TB6612FNG_Motor(
 8000c66:	4b68      	ldr	r3, [pc, #416]	@ (8000e08 <main+0x1f4>)
 8000c68:	601c      	str	r4, [r3, #0]
  		  1520,      // Calibrated neutral
  		  2035,      // Calibrated full left
  		  100,       // New max positive
		  100,       // New max negative (magnitude)
		  true     // Saturate if signal is over full? True by default. False good for debugging.
		  );
 8000c6a:	205c      	movs	r0, #92	@ 0x5c
 8000c6c:	f003 fede 	bl	8004a2c <_Znwj>
 8000c70:	4603      	mov	r3, r0
 8000c72:	461c      	mov	r4, r3
 8000c74:	2301      	movs	r3, #1
 8000c76:	9308      	str	r3, [sp, #32]
 8000c78:	2364      	movs	r3, #100	@ 0x64
 8000c7a:	9307      	str	r3, [sp, #28]
 8000c7c:	2364      	movs	r3, #100	@ 0x64
 8000c7e:	9306      	str	r3, [sp, #24]
 8000c80:	f240 73f3 	movw	r3, #2035	@ 0x7f3
 8000c84:	9305      	str	r3, [sp, #20]
 8000c86:	f44f 63be 	mov.w	r3, #1520	@ 0x5f0
 8000c8a:	9304      	str	r3, [sp, #16]
 8000c8c:	f240 33ea 	movw	r3, #1002	@ 0x3ea
 8000c90:	9303      	str	r3, [sp, #12]
 8000c92:	2364      	movs	r3, #100	@ 0x64
 8000c94:	9302      	str	r3, [sp, #8]
 8000c96:	f244 435c 	movw	r3, #17500	@ 0x445c
 8000c9a:	9301      	str	r3, [sp, #4]
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	9300      	str	r3, [sp, #0]
 8000ca0:	4b5a      	ldr	r3, [pc, #360]	@ (8000e0c <main+0x1f8>)
 8000ca2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ca6:	495a      	ldr	r1, [pc, #360]	@ (8000e10 <main+0x1fc>)
 8000ca8:	4620      	mov	r0, r4
 8000caa:	f7ff fc61 	bl	8000570 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb>
  SteeringChannel = new RCChannel
 8000cae:	4b59      	ldr	r3, [pc, #356]	@ (8000e14 <main+0x200>)
 8000cb0:	601c      	str	r4, [r3, #0]
		  		  1533,  // Calibrated neutral
		  		  2017,  // Calibrated full speed
		  		  100,   // New max positive
				  100,    // New max negative (magnitude)
				  true  // Saturate if signal is over full? True by default. False good for debugging.
		  	  	  );
 8000cb2:	205c      	movs	r0, #92	@ 0x5c
 8000cb4:	f003 feba 	bl	8004a2c <_Znwj>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	461c      	mov	r4, r3
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	9308      	str	r3, [sp, #32]
 8000cc0:	2364      	movs	r3, #100	@ 0x64
 8000cc2:	9307      	str	r3, [sp, #28]
 8000cc4:	2364      	movs	r3, #100	@ 0x64
 8000cc6:	9306      	str	r3, [sp, #24]
 8000cc8:	f240 73e1 	movw	r3, #2017	@ 0x7e1
 8000ccc:	9305      	str	r3, [sp, #20]
 8000cce:	f240 53fd 	movw	r3, #1533	@ 0x5fd
 8000cd2:	9304      	str	r3, [sp, #16]
 8000cd4:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8000cd8:	9303      	str	r3, [sp, #12]
 8000cda:	2364      	movs	r3, #100	@ 0x64
 8000cdc:	9302      	str	r3, [sp, #8]
 8000cde:	f244 435c 	movw	r3, #17500	@ 0x445c
 8000ce2:	9301      	str	r3, [sp, #4]
 8000ce4:	2304      	movs	r3, #4
 8000ce6:	9300      	str	r3, [sp, #0]
 8000ce8:	4b48      	ldr	r3, [pc, #288]	@ (8000e0c <main+0x1f8>)
 8000cea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cee:	4948      	ldr	r1, [pc, #288]	@ (8000e10 <main+0x1fc>)
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	f7ff fc3d 	bl	8000570 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb>
  ThrottleChannel = new RCChannel
 8000cf6:	4b48      	ldr	r3, [pc, #288]	@ (8000e18 <main+0x204>)
 8000cf8:	601c      	str	r4, [r3, #0]

  Throttle = new RemoteControlControl
		  (
		  ThrottleChannel,
		  My_Motor
		  );
 8000cfa:	2010      	movs	r0, #16
 8000cfc:	f003 fe96 	bl	8004a2c <_Znwj>
 8000d00:	4603      	mov	r3, r0
 8000d02:	461c      	mov	r4, r3
 8000d04:	4b44      	ldr	r3, [pc, #272]	@ (8000e18 <main+0x204>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a3f      	ldr	r2, [pc, #252]	@ (8000e08 <main+0x1f4>)
 8000d0a:	6812      	ldr	r2, [r2, #0]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4620      	mov	r0, r4
 8000d10:	f7ff fd78 	bl	8000804 <_ZN20RemoteControlControlC1EP9RCChannelP15TB6612FNG_Motor>
  Throttle = new RemoteControlControl
 8000d14:	4b41      	ldr	r3, [pc, #260]	@ (8000e1c <main+0x208>)
 8000d16:	601c      	str	r4, [r3, #0]


  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8000d18:	213c      	movs	r1, #60	@ 0x3c
 8000d1a:	4841      	ldr	r0, [pc, #260]	@ (8000e20 <main+0x20c>)
 8000d1c:	f002 f9fa 	bl	8003114 <HAL_TIM_Encoder_Start>
  initialized = true;
 8000d20:	4b40      	ldr	r3, [pc, #256]	@ (8000e24 <main+0x210>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	701a      	strb	r2, [r3, #0]
//	                             VALUE_WIDTH, (long signed int)ThrottleChannel->value,
//								 VALUE_WIDTH, (long signed int)ThrottleChannel->us_width);
//	  HAL_UART_Transmit(&huart2, (uint8_t*)my_message, string_length, HAL_MAX_DELAY);

	   //Encoder
	  	  encoder_count = __HAL_TIM_GET_COUNTER(&htim5);
 8000d26:	4b3e      	ldr	r3, [pc, #248]	@ (8000e20 <main+0x20c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	4b3e      	ldr	r3, [pc, #248]	@ (8000e28 <main+0x214>)
 8000d30:	801a      	strh	r2, [r3, #0]
		encoder_delta = (int16_t) (encoder_count-encoder_last_count);
 8000d32:	4b3d      	ldr	r3, [pc, #244]	@ (8000e28 <main+0x214>)
 8000d34:	881a      	ldrh	r2, [r3, #0]
 8000d36:	4b3d      	ldr	r3, [pc, #244]	@ (8000e2c <main+0x218>)
 8000d38:	881b      	ldrh	r3, [r3, #0]
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	b21a      	sxth	r2, r3
 8000d40:	4b3b      	ldr	r3, [pc, #236]	@ (8000e30 <main+0x21c>)
 8000d42:	801a      	strh	r2, [r3, #0]
		encoder_last_count = encoder_count;
 8000d44:	4b38      	ldr	r3, [pc, #224]	@ (8000e28 <main+0x214>)
 8000d46:	881a      	ldrh	r2, [r3, #0]
 8000d48:	4b38      	ldr	r3, [pc, #224]	@ (8000e2c <main+0x218>)
 8000d4a:	801a      	strh	r2, [r3, #0]

		// Handle timer overflow
		uint16_t max_count = 0xffff;
 8000d4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d50:	80fb      	strh	r3, [r7, #6]
		uint16_t half_max_count = max_count/2;
 8000d52:	88fb      	ldrh	r3, [r7, #6]
 8000d54:	085b      	lsrs	r3, r3, #1
 8000d56:	80bb      	strh	r3, [r7, #4]
		int16_t neg_half_max_count = -half_max_count;
 8000d58:	88bb      	ldrh	r3, [r7, #4]
 8000d5a:	425b      	negs	r3, r3
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	807b      	strh	r3, [r7, #2]
		if (encoder_delta > half_max_count)
 8000d60:	4b33      	ldr	r3, [pc, #204]	@ (8000e30 <main+0x21c>)
 8000d62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d66:	461a      	mov	r2, r3
 8000d68:	88bb      	ldrh	r3, [r7, #4]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	dd0c      	ble.n	8000d88 <main+0x174>
		{
			// We've overflowed in the negative direction
			encoder_delta -= max_count + 1;
 8000d6e:	4b30      	ldr	r3, [pc, #192]	@ (8000e30 <main+0x21c>)
 8000d70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d74:	b29a      	uxth	r2, r3
 8000d76:	88fb      	ldrh	r3, [r7, #6]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	3b01      	subs	r3, #1
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	b21a      	sxth	r2, r3
 8000d82:	4b2b      	ldr	r3, [pc, #172]	@ (8000e30 <main+0x21c>)
 8000d84:	801a      	strh	r2, [r3, #0]
 8000d86:	e01f      	b.n	8000dc8 <main+0x1b4>
		}
		else if (encoder_delta < neg_half_max_count)
 8000d88:	4b29      	ldr	r3, [pc, #164]	@ (8000e30 <main+0x21c>)
 8000d8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d8e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000d92:	429a      	cmp	r2, r3
 8000d94:	dd18      	ble.n	8000dc8 <main+0x1b4>
		{
		    // We've overflowed in the positive direciton.
			encoder_delta += max_count + 1;
 8000d96:	4b26      	ldr	r3, [pc, #152]	@ (8000e30 <main+0x21c>)
 8000d98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d9c:	b29a      	uxth	r2, r3
 8000d9e:	88fb      	ldrh	r3, [r7, #6]
 8000da0:	4413      	add	r3, r2
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	3301      	adds	r3, #1
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	b21a      	sxth	r2, r3
 8000daa:	4b21      	ldr	r3, [pc, #132]	@ (8000e30 <main+0x21c>)
 8000dac:	801a      	strh	r2, [r3, #0]
			encoder_position += encoder_delta;
 8000dae:	4b21      	ldr	r3, [pc, #132]	@ (8000e34 <main+0x220>)
 8000db0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	4b1e      	ldr	r3, [pc, #120]	@ (8000e30 <main+0x21c>)
 8000db8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	4413      	add	r3, r2
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	b21a      	sxth	r2, r3
 8000dc4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e34 <main+0x220>)
 8000dc6:	801a      	strh	r2, [r3, #0]
		}
       sprintf(my_message, "Encoder cnt: %i, pos: %i,delta %i.\r\n", encoder_count, encoder_position, encoder_delta);
 8000dc8:	4b17      	ldr	r3, [pc, #92]	@ (8000e28 <main+0x214>)
 8000dca:	881b      	ldrh	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b19      	ldr	r3, [pc, #100]	@ (8000e34 <main+0x220>)
 8000dd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4b16      	ldr	r3, [pc, #88]	@ (8000e30 <main+0x21c>)
 8000dd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ddc:	9300      	str	r3, [sp, #0]
 8000dde:	460b      	mov	r3, r1
 8000de0:	4915      	ldr	r1, [pc, #84]	@ (8000e38 <main+0x224>)
 8000de2:	4816      	ldr	r0, [pc, #88]	@ (8000e3c <main+0x228>)
 8000de4:	f003 ff04 	bl	8004bf0 <siprintf>
	  //sprintf(my_message, "Encoder cnt: %i\r\n", encoder_count);
	  HAL_UART_Transmit(&huart2, (uint8_t*)my_message, MESSAGE_LENGTH, HAL_MAX_DELAY);
 8000de8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dec:	2264      	movs	r2, #100	@ 0x64
 8000dee:	4913      	ldr	r1, [pc, #76]	@ (8000e3c <main+0x228>)
 8000df0:	4813      	ldr	r0, [pc, #76]	@ (8000e40 <main+0x22c>)
 8000df2:	f003 fa5d 	bl	80042b0 <HAL_UART_Transmit>
	  HAL_Delay(150);
 8000df6:	2096      	movs	r0, #150	@ 0x96
 8000df8:	f000 fd92 	bl	8001920 <HAL_Delay>

  }
 8000dfc:	e793      	b.n	8000d26 <main+0x112>
 8000dfe:	bf00      	nop
 8000e00:	200000c0 	.word	0x200000c0
 8000e04:	40020400 	.word	0x40020400
 8000e08:	20000200 	.word	0x20000200
 8000e0c:	20000078 	.word	0x20000078
 8000e10:	40020000 	.word	0x40020000
 8000e14:	20000208 	.word	0x20000208
 8000e18:	20000204 	.word	0x20000204
 8000e1c:	2000020c 	.word	0x2000020c
 8000e20:	20000108 	.word	0x20000108
 8000e24:	200001fc 	.word	0x200001fc
 8000e28:	20000214 	.word	0x20000214
 8000e2c:	20000212 	.word	0x20000212
 8000e30:	20000210 	.word	0x20000210
 8000e34:	20000216 	.word	0x20000216
 8000e38:	0800548c 	.word	0x0800548c
 8000e3c:	20000198 	.word	0x20000198
 8000e40:	20000150 	.word	0x20000150

08000e44 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b094      	sub	sp, #80	@ 0x50
 8000e48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e4a:	f107 0320 	add.w	r3, r7, #32
 8000e4e:	2230      	movs	r2, #48	@ 0x30
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f003 feec 	bl	8004c30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e58:	f107 030c 	add.w	r3, r7, #12
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	4b2c      	ldr	r3, [pc, #176]	@ (8000f20 <_Z18SystemClock_Configv+0xdc>)
 8000e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e70:	4a2b      	ldr	r2, [pc, #172]	@ (8000f20 <_Z18SystemClock_Configv+0xdc>)
 8000e72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e76:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e78:	4b29      	ldr	r3, [pc, #164]	@ (8000f20 <_Z18SystemClock_Configv+0xdc>)
 8000e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e84:	2300      	movs	r3, #0
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	4b26      	ldr	r3, [pc, #152]	@ (8000f24 <_Z18SystemClock_Configv+0xe0>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a25      	ldr	r2, [pc, #148]	@ (8000f24 <_Z18SystemClock_Configv+0xe0>)
 8000e8e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e92:	6013      	str	r3, [r2, #0]
 8000e94:	4b23      	ldr	r3, [pc, #140]	@ (8000f24 <_Z18SystemClock_Configv+0xe0>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ea8:	2310      	movs	r3, #16
 8000eaa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eac:	2302      	movs	r3, #2
 8000eae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000eb4:	2308      	movs	r3, #8
 8000eb6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000eb8:	2364      	movs	r3, #100	@ 0x64
 8000eba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ec0:	2304      	movs	r3, #4
 8000ec2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec4:	f107 0320 	add.w	r3, r7, #32
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f001 f847 	bl	8001f5c <HAL_RCC_OscConfig>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	bf14      	ite	ne
 8000ed4:	2301      	movne	r3, #1
 8000ed6:	2300      	moveq	r3, #0
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8000ede:	f000 fa33 	bl	8001348 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee2:	230f      	movs	r3, #15
 8000ee4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ef2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	2103      	movs	r1, #3
 8000efe:	4618      	mov	r0, r3
 8000f00:	f001 faa4 	bl	800244c <HAL_RCC_ClockConfig>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	bf14      	ite	ne
 8000f0a:	2301      	movne	r3, #1
 8000f0c:	2300      	moveq	r3, #0
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8000f14:	f000 fa18 	bl	8001348 <Error_Handler>
  }
}
 8000f18:	bf00      	nop
 8000f1a:	3750      	adds	r7, #80	@ 0x50
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40007000 	.word	0x40007000

08000f28 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	@ 0x28
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2e:	f107 0318 	add.w	r3, r7, #24
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f3c:	f107 0310 	add.w	r3, r7, #16
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f46:	463b      	mov	r3, r7
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f52:	4b41      	ldr	r3, [pc, #260]	@ (8001058 <_ZL12MX_TIM1_Initv+0x130>)
 8000f54:	4a41      	ldr	r2, [pc, #260]	@ (800105c <_ZL12MX_TIM1_Initv+0x134>)
 8000f56:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8000f58:	4b3f      	ldr	r3, [pc, #252]	@ (8001058 <_ZL12MX_TIM1_Initv+0x130>)
 8000f5a:	2263      	movs	r2, #99	@ 0x63
 8000f5c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5e:	4b3e      	ldr	r3, [pc, #248]	@ (8001058 <_ZL12MX_TIM1_Initv+0x130>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f64:	4b3c      	ldr	r3, [pc, #240]	@ (8001058 <_ZL12MX_TIM1_Initv+0x130>)
 8000f66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f6a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f6c:	4b3a      	ldr	r3, [pc, #232]	@ (8001058 <_ZL12MX_TIM1_Initv+0x130>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f72:	4b39      	ldr	r3, [pc, #228]	@ (8001058 <_ZL12MX_TIM1_Initv+0x130>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f78:	4b37      	ldr	r3, [pc, #220]	@ (8001058 <_ZL12MX_TIM1_Initv+0x130>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f7e:	4836      	ldr	r0, [pc, #216]	@ (8001058 <_ZL12MX_TIM1_Initv+0x130>)
 8000f80:	f001 fc44 	bl	800280c <HAL_TIM_Base_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	bf14      	ite	ne
 8000f8a:	2301      	movne	r3, #1
 8000f8c:	2300      	moveq	r3, #0
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <_ZL12MX_TIM1_Initv+0x70>
  {
    Error_Handler();
 8000f94:	f000 f9d8 	bl	8001348 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f9c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f9e:	f107 0318 	add.w	r3, r7, #24
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	482c      	ldr	r0, [pc, #176]	@ (8001058 <_ZL12MX_TIM1_Initv+0x130>)
 8000fa6:	f002 fb91 	bl	80036cc <HAL_TIM_ConfigClockSource>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	bf14      	ite	ne
 8000fb0:	2301      	movne	r3, #1
 8000fb2:	2300      	moveq	r3, #0
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <_ZL12MX_TIM1_Initv+0x96>
  {
    Error_Handler();
 8000fba:	f000 f9c5 	bl	8001348 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000fbe:	4826      	ldr	r0, [pc, #152]	@ (8001058 <_ZL12MX_TIM1_Initv+0x130>)
 8000fc0:	f001 fde0 	bl	8002b84 <HAL_TIM_IC_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	bf14      	ite	ne
 8000fca:	2301      	movne	r3, #1
 8000fcc:	2300      	moveq	r3, #0
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <_ZL12MX_TIM1_Initv+0xb0>
  {
    Error_Handler();
 8000fd4:	f000 f9b8 	bl	8001348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fe0:	f107 0310 	add.w	r3, r7, #16
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	481c      	ldr	r0, [pc, #112]	@ (8001058 <_ZL12MX_TIM1_Initv+0x130>)
 8000fe8:	f003 f890 	bl	800410c <HAL_TIMEx_MasterConfigSynchronization>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	bf14      	ite	ne
 8000ff2:	2301      	movne	r3, #1
 8000ff4:	2300      	moveq	r3, #0
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <_ZL12MX_TIM1_Initv+0xd8>
  {
    Error_Handler();
 8000ffc:	f000 f9a4 	bl	8001348 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001000:	230a      	movs	r3, #10
 8001002:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001004:	2301      	movs	r3, #1
 8001006:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001008:	2300      	movs	r3, #0
 800100a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001010:	463b      	mov	r3, r7
 8001012:	2200      	movs	r2, #0
 8001014:	4619      	mov	r1, r3
 8001016:	4810      	ldr	r0, [pc, #64]	@ (8001058 <_ZL12MX_TIM1_Initv+0x130>)
 8001018:	f002 f9fa 	bl	8003410 <HAL_TIM_IC_ConfigChannel>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	bf14      	ite	ne
 8001022:	2301      	movne	r3, #1
 8001024:	2300      	moveq	r3, #0
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <_ZL12MX_TIM1_Initv+0x108>
  {
    Error_Handler();
 800102c:	f000 f98c 	bl	8001348 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001030:	463b      	mov	r3, r7
 8001032:	2204      	movs	r2, #4
 8001034:	4619      	mov	r1, r3
 8001036:	4808      	ldr	r0, [pc, #32]	@ (8001058 <_ZL12MX_TIM1_Initv+0x130>)
 8001038:	f002 f9ea 	bl	8003410 <HAL_TIM_IC_ConfigChannel>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	bf14      	ite	ne
 8001042:	2301      	movne	r3, #1
 8001044:	2300      	moveq	r3, #0
 8001046:	b2db      	uxtb	r3, r3
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <_ZL12MX_TIM1_Initv+0x128>
  {
    Error_Handler();
 800104c:	f000 f97c 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001050:	bf00      	nop
 8001052:	3728      	adds	r7, #40	@ 0x28
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000078 	.word	0x20000078
 800105c:	40010000 	.word	0x40010000

08001060 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08e      	sub	sp, #56	@ 0x38
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001066:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001074:	f107 0320 	add.w	r3, r7, #32
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
 800108c:	615a      	str	r2, [r3, #20]
 800108e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001090:	4b39      	ldr	r3, [pc, #228]	@ (8001178 <_ZL12MX_TIM2_Initv+0x118>)
 8001092:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001096:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001098:	4b37      	ldr	r3, [pc, #220]	@ (8001178 <_ZL12MX_TIM2_Initv+0x118>)
 800109a:	2200      	movs	r2, #0
 800109c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109e:	4b36      	ldr	r3, [pc, #216]	@ (8001178 <_ZL12MX_TIM2_Initv+0x118>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 80010a4:	4b34      	ldr	r3, [pc, #208]	@ (8001178 <_ZL12MX_TIM2_Initv+0x118>)
 80010a6:	f241 3287 	movw	r2, #4999	@ 0x1387
 80010aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ac:	4b32      	ldr	r3, [pc, #200]	@ (8001178 <_ZL12MX_TIM2_Initv+0x118>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b2:	4b31      	ldr	r3, [pc, #196]	@ (8001178 <_ZL12MX_TIM2_Initv+0x118>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010b8:	482f      	ldr	r0, [pc, #188]	@ (8001178 <_ZL12MX_TIM2_Initv+0x118>)
 80010ba:	f001 fba7 	bl	800280c <HAL_TIM_Base_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	bf14      	ite	ne
 80010c4:	2301      	movne	r3, #1
 80010c6:	2300      	moveq	r3, #0
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 80010ce:	f000 f93b 	bl	8001348 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010dc:	4619      	mov	r1, r3
 80010de:	4826      	ldr	r0, [pc, #152]	@ (8001178 <_ZL12MX_TIM2_Initv+0x118>)
 80010e0:	f002 faf4 	bl	80036cc <HAL_TIM_ConfigClockSource>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	bf14      	ite	ne
 80010ea:	2301      	movne	r3, #1
 80010ec:	2300      	moveq	r3, #0
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 80010f4:	f000 f928 	bl	8001348 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010f8:	481f      	ldr	r0, [pc, #124]	@ (8001178 <_ZL12MX_TIM2_Initv+0x118>)
 80010fa:	f001 fbd6 	bl	80028aa <HAL_TIM_PWM_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	bf14      	ite	ne
 8001104:	2301      	movne	r3, #1
 8001106:	2300      	moveq	r3, #0
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 800110e:	f000 f91b 	bl	8001348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001112:	2300      	movs	r3, #0
 8001114:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001116:	2300      	movs	r3, #0
 8001118:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800111a:	f107 0320 	add.w	r3, r7, #32
 800111e:	4619      	mov	r1, r3
 8001120:	4815      	ldr	r0, [pc, #84]	@ (8001178 <_ZL12MX_TIM2_Initv+0x118>)
 8001122:	f002 fff3 	bl	800410c <HAL_TIMEx_MasterConfigSynchronization>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	bf14      	ite	ne
 800112c:	2301      	movne	r3, #1
 800112e:	2300      	moveq	r3, #0
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 8001136:	f000 f907 	bl	8001348 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800113a:	2360      	movs	r3, #96	@ 0x60
 800113c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	2200      	movs	r2, #0
 800114e:	4619      	mov	r1, r3
 8001150:	4809      	ldr	r0, [pc, #36]	@ (8001178 <_ZL12MX_TIM2_Initv+0x118>)
 8001152:	f002 f9f9 	bl	8003548 <HAL_TIM_PWM_ConfigChannel>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	bf14      	ite	ne
 800115c:	2301      	movne	r3, #1
 800115e:	2300      	moveq	r3, #0
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <_ZL12MX_TIM2_Initv+0x10a>
  {
    Error_Handler();
 8001166:	f000 f8ef 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800116a:	4803      	ldr	r0, [pc, #12]	@ (8001178 <_ZL12MX_TIM2_Initv+0x118>)
 800116c:	f000 f9e6 	bl	800153c <HAL_TIM_MspPostInit>

}
 8001170:	bf00      	nop
 8001172:	3738      	adds	r7, #56	@ 0x38
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	200000c0 	.word	0x200000c0

0800117c <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08c      	sub	sp, #48	@ 0x30
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001182:	f107 030c 	add.w	r3, r7, #12
 8001186:	2224      	movs	r2, #36	@ 0x24
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f003 fd50 	bl	8004c30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001198:	4b25      	ldr	r3, [pc, #148]	@ (8001230 <_ZL12MX_TIM5_Initv+0xb4>)
 800119a:	4a26      	ldr	r2, [pc, #152]	@ (8001234 <_ZL12MX_TIM5_Initv+0xb8>)
 800119c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800119e:	4b24      	ldr	r3, [pc, #144]	@ (8001230 <_ZL12MX_TIM5_Initv+0xb4>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a4:	4b22      	ldr	r3, [pc, #136]	@ (8001230 <_ZL12MX_TIM5_Initv+0xb4>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80011aa:	4b21      	ldr	r3, [pc, #132]	@ (8001230 <_ZL12MX_TIM5_Initv+0xb4>)
 80011ac:	f04f 32ff 	mov.w	r2, #4294967295
 80011b0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001230 <_ZL12MX_TIM5_Initv+0xb4>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001230 <_ZL12MX_TIM5_Initv+0xb4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011be:	2303      	movs	r3, #3
 80011c0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011c6:	2301      	movs	r3, #1
 80011c8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011d2:	2300      	movs	r3, #0
 80011d4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011d6:	2301      	movs	r3, #1
 80011d8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011da:	2300      	movs	r3, #0
 80011dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80011e2:	f107 030c 	add.w	r3, r7, #12
 80011e6:	4619      	mov	r1, r3
 80011e8:	4811      	ldr	r0, [pc, #68]	@ (8001230 <_ZL12MX_TIM5_Initv+0xb4>)
 80011ea:	f001 feed 	bl	8002fc8 <HAL_TIM_Encoder_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	bf14      	ite	ne
 80011f4:	2301      	movne	r3, #1
 80011f6:	2300      	moveq	r3, #0
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <_ZL12MX_TIM5_Initv+0x86>
  {
    Error_Handler();
 80011fe:	f000 f8a3 	bl	8001348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001202:	2300      	movs	r3, #0
 8001204:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	4619      	mov	r1, r3
 800120e:	4808      	ldr	r0, [pc, #32]	@ (8001230 <_ZL12MX_TIM5_Initv+0xb4>)
 8001210:	f002 ff7c 	bl	800410c <HAL_TIMEx_MasterConfigSynchronization>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	bf14      	ite	ne
 800121a:	2301      	movne	r3, #1
 800121c:	2300      	moveq	r3, #0
 800121e:	b2db      	uxtb	r3, r3
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <_ZL12MX_TIM5_Initv+0xac>
  {
    Error_Handler();
 8001224:	f000 f890 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001228:	bf00      	nop
 800122a:	3730      	adds	r7, #48	@ 0x30
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000108 	.word	0x20000108
 8001234:	40000c00 	.word	0x40000c00

08001238 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800123c:	4b13      	ldr	r3, [pc, #76]	@ (800128c <_ZL19MX_USART2_UART_Initv+0x54>)
 800123e:	4a14      	ldr	r2, [pc, #80]	@ (8001290 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001240:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001242:	4b12      	ldr	r3, [pc, #72]	@ (800128c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001244:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001248:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800124a:	4b10      	ldr	r3, [pc, #64]	@ (800128c <_ZL19MX_USART2_UART_Initv+0x54>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001250:	4b0e      	ldr	r3, [pc, #56]	@ (800128c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001256:	4b0d      	ldr	r3, [pc, #52]	@ (800128c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800125c:	4b0b      	ldr	r3, [pc, #44]	@ (800128c <_ZL19MX_USART2_UART_Initv+0x54>)
 800125e:	220c      	movs	r2, #12
 8001260:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001262:	4b0a      	ldr	r3, [pc, #40]	@ (800128c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001268:	4b08      	ldr	r3, [pc, #32]	@ (800128c <_ZL19MX_USART2_UART_Initv+0x54>)
 800126a:	2200      	movs	r2, #0
 800126c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800126e:	4807      	ldr	r0, [pc, #28]	@ (800128c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001270:	f002 ffce 	bl	8004210 <HAL_UART_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	bf14      	ite	ne
 800127a:	2301      	movne	r3, #1
 800127c:	2300      	moveq	r3, #0
 800127e:	b2db      	uxtb	r3, r3
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001284:	f000 f860 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000150 	.word	0x20000150
 8001290:	40004400 	.word	0x40004400

08001294 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129a:	f107 030c 	add.w	r3, r7, #12
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
 80012a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	4b24      	ldr	r3, [pc, #144]	@ (8001340 <_ZL12MX_GPIO_Initv+0xac>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	4a23      	ldr	r2, [pc, #140]	@ (8001340 <_ZL12MX_GPIO_Initv+0xac>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ba:	4b21      	ldr	r3, [pc, #132]	@ (8001340 <_ZL12MX_GPIO_Initv+0xac>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001340 <_ZL12MX_GPIO_Initv+0xac>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	4a1c      	ldr	r2, [pc, #112]	@ (8001340 <_ZL12MX_GPIO_Initv+0xac>)
 80012d0:	f043 0302 	orr.w	r3, r3, #2
 80012d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001340 <_ZL12MX_GPIO_Initv+0xac>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80012e2:	2200      	movs	r2, #0
 80012e4:	f44f 4150 	mov.w	r1, #53248	@ 0xd000
 80012e8:	4816      	ldr	r0, [pc, #88]	@ (8001344 <_ZL12MX_GPIO_Initv+0xb0>)
 80012ea:	f000 fdeb 	bl	8001ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 80012ee:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80012f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f4:	2301      	movs	r3, #1
 80012f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001300:	f107 030c 	add.w	r3, r7, #12
 8001304:	4619      	mov	r1, r3
 8001306:	480f      	ldr	r0, [pc, #60]	@ (8001344 <_ZL12MX_GPIO_Initv+0xb0>)
 8001308:	f000 fc40 	bl	8001b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800130c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001310:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001312:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001316:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	4619      	mov	r1, r3
 8001322:	4808      	ldr	r0, [pc, #32]	@ (8001344 <_ZL12MX_GPIO_Initv+0xb0>)
 8001324:	f000 fc32 	bl	8001b8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001328:	2200      	movs	r2, #0
 800132a:	2100      	movs	r1, #0
 800132c:	2028      	movs	r0, #40	@ 0x28
 800132e:	f000 fbf6 	bl	8001b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001332:	2028      	movs	r0, #40	@ 0x28
 8001334:	f000 fc0f 	bl	8001b56 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001338:	bf00      	nop
 800133a:	3720      	adds	r7, #32
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40023800 	.word	0x40023800
 8001344:	40020400 	.word	0x40020400

08001348 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800134c:	b672      	cpsid	i
}
 800134e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001350:	bf00      	nop
 8001352:	e7fd      	b.n	8001350 <Error_Handler+0x8>

08001354 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	607b      	str	r3, [r7, #4]
 800135e:	4b10      	ldr	r3, [pc, #64]	@ (80013a0 <HAL_MspInit+0x4c>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001362:	4a0f      	ldr	r2, [pc, #60]	@ (80013a0 <HAL_MspInit+0x4c>)
 8001364:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001368:	6453      	str	r3, [r2, #68]	@ 0x44
 800136a:	4b0d      	ldr	r3, [pc, #52]	@ (80013a0 <HAL_MspInit+0x4c>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	603b      	str	r3, [r7, #0]
 800137a:	4b09      	ldr	r3, [pc, #36]	@ (80013a0 <HAL_MspInit+0x4c>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137e:	4a08      	ldr	r2, [pc, #32]	@ (80013a0 <HAL_MspInit+0x4c>)
 8001380:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001384:	6413      	str	r3, [r2, #64]	@ 0x40
 8001386:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <HAL_MspInit+0x4c>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800138e:	603b      	str	r3, [r7, #0]
 8001390:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800

080013a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	@ 0x28
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a33      	ldr	r2, [pc, #204]	@ (8001490 <HAL_TIM_Base_MspInit+0xec>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d14d      	bne.n	8001462 <HAL_TIM_Base_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	4b32      	ldr	r3, [pc, #200]	@ (8001494 <HAL_TIM_Base_MspInit+0xf0>)
 80013cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ce:	4a31      	ldr	r2, [pc, #196]	@ (8001494 <HAL_TIM_Base_MspInit+0xf0>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80013d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001494 <HAL_TIM_Base_MspInit+0xf0>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001494 <HAL_TIM_Base_MspInit+0xf0>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	4a2a      	ldr	r2, [pc, #168]	@ (8001494 <HAL_TIM_Base_MspInit+0xf0>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f2:	4b28      	ldr	r3, [pc, #160]	@ (8001494 <HAL_TIM_Base_MspInit+0xf0>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001404:	2302      	movs	r3, #2
 8001406:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140c:	2300      	movs	r3, #0
 800140e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001410:	2301      	movs	r3, #1
 8001412:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	4619      	mov	r1, r3
 800141a:	481f      	ldr	r0, [pc, #124]	@ (8001498 <HAL_TIM_Base_MspInit+0xf4>)
 800141c:	f000 fbb6 	bl	8001b8c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001420:	2200      	movs	r2, #0
 8001422:	2100      	movs	r1, #0
 8001424:	2018      	movs	r0, #24
 8001426:	f000 fb7a 	bl	8001b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800142a:	2018      	movs	r0, #24
 800142c:	f000 fb93 	bl	8001b56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001430:	2200      	movs	r2, #0
 8001432:	2100      	movs	r1, #0
 8001434:	2019      	movs	r0, #25
 8001436:	f000 fb72 	bl	8001b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800143a:	2019      	movs	r0, #25
 800143c:	f000 fb8b 	bl	8001b56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001440:	2200      	movs	r2, #0
 8001442:	2100      	movs	r1, #0
 8001444:	201a      	movs	r0, #26
 8001446:	f000 fb6a 	bl	8001b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800144a:	201a      	movs	r0, #26
 800144c:	f000 fb83 	bl	8001b56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001450:	2200      	movs	r2, #0
 8001452:	2100      	movs	r1, #0
 8001454:	201b      	movs	r0, #27
 8001456:	f000 fb62 	bl	8001b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800145a:	201b      	movs	r0, #27
 800145c:	f000 fb7b 	bl	8001b56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001460:	e012      	b.n	8001488 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800146a:	d10d      	bne.n	8001488 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800146c:	2300      	movs	r3, #0
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	4b08      	ldr	r3, [pc, #32]	@ (8001494 <HAL_TIM_Base_MspInit+0xf0>)
 8001472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001474:	4a07      	ldr	r2, [pc, #28]	@ (8001494 <HAL_TIM_Base_MspInit+0xf0>)
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	6413      	str	r3, [r2, #64]	@ 0x40
 800147c:	4b05      	ldr	r3, [pc, #20]	@ (8001494 <HAL_TIM_Base_MspInit+0xf0>)
 800147e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	68bb      	ldr	r3, [r7, #8]
}
 8001488:	bf00      	nop
 800148a:	3728      	adds	r7, #40	@ 0x28
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40010000 	.word	0x40010000
 8001494:	40023800 	.word	0x40023800
 8001498:	40020000 	.word	0x40020000

0800149c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08a      	sub	sp, #40	@ 0x28
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a1d      	ldr	r2, [pc, #116]	@ (8001530 <HAL_TIM_Encoder_MspInit+0x94>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d133      	bne.n	8001526 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001534 <HAL_TIM_Encoder_MspInit+0x98>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c6:	4a1b      	ldr	r2, [pc, #108]	@ (8001534 <HAL_TIM_Encoder_MspInit+0x98>)
 80014c8:	f043 0308 	orr.w	r3, r3, #8
 80014cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ce:	4b19      	ldr	r3, [pc, #100]	@ (8001534 <HAL_TIM_Encoder_MspInit+0x98>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d2:	f003 0308 	and.w	r3, r3, #8
 80014d6:	613b      	str	r3, [r7, #16]
 80014d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	4b15      	ldr	r3, [pc, #84]	@ (8001534 <HAL_TIM_Encoder_MspInit+0x98>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	4a14      	ldr	r2, [pc, #80]	@ (8001534 <HAL_TIM_Encoder_MspInit+0x98>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ea:	4b12      	ldr	r3, [pc, #72]	@ (8001534 <HAL_TIM_Encoder_MspInit+0x98>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014f6:	2303      	movs	r3, #3
 80014f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001502:	2300      	movs	r3, #0
 8001504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001506:	2302      	movs	r3, #2
 8001508:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	4619      	mov	r1, r3
 8001510:	4809      	ldr	r0, [pc, #36]	@ (8001538 <HAL_TIM_Encoder_MspInit+0x9c>)
 8001512:	f000 fb3b 	bl	8001b8c <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2100      	movs	r1, #0
 800151a:	2032      	movs	r0, #50	@ 0x32
 800151c:	f000 faff 	bl	8001b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001520:	2032      	movs	r0, #50	@ 0x32
 8001522:	f000 fb18 	bl	8001b56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001526:	bf00      	nop
 8001528:	3728      	adds	r7, #40	@ 0x28
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40000c00 	.word	0x40000c00
 8001534:	40023800 	.word	0x40023800
 8001538:	40020000 	.word	0x40020000

0800153c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b088      	sub	sp, #32
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 030c 	add.w	r3, r7, #12
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800155c:	d11e      	bne.n	800159c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	4b10      	ldr	r3, [pc, #64]	@ (80015a4 <HAL_TIM_MspPostInit+0x68>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001566:	4a0f      	ldr	r2, [pc, #60]	@ (80015a4 <HAL_TIM_MspPostInit+0x68>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6313      	str	r3, [r2, #48]	@ 0x30
 800156e:	4b0d      	ldr	r3, [pc, #52]	@ (80015a4 <HAL_TIM_MspPostInit+0x68>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800157a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800157e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001580:	2302      	movs	r3, #2
 8001582:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001588:	2300      	movs	r3, #0
 800158a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800158c:	2301      	movs	r3, #1
 800158e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001590:	f107 030c 	add.w	r3, r7, #12
 8001594:	4619      	mov	r1, r3
 8001596:	4804      	ldr	r0, [pc, #16]	@ (80015a8 <HAL_TIM_MspPostInit+0x6c>)
 8001598:	f000 faf8 	bl	8001b8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800159c:	bf00      	nop
 800159e:	3720      	adds	r7, #32
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40020000 	.word	0x40020000

080015ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08a      	sub	sp, #40	@ 0x28
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b4:	f107 0314 	add.w	r3, r7, #20
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a19      	ldr	r2, [pc, #100]	@ (8001630 <HAL_UART_MspInit+0x84>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d12b      	bne.n	8001626 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	613b      	str	r3, [r7, #16]
 80015d2:	4b18      	ldr	r3, [pc, #96]	@ (8001634 <HAL_UART_MspInit+0x88>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d6:	4a17      	ldr	r2, [pc, #92]	@ (8001634 <HAL_UART_MspInit+0x88>)
 80015d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80015de:	4b15      	ldr	r3, [pc, #84]	@ (8001634 <HAL_UART_MspInit+0x88>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015e6:	613b      	str	r3, [r7, #16]
 80015e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	4b11      	ldr	r3, [pc, #68]	@ (8001634 <HAL_UART_MspInit+0x88>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	4a10      	ldr	r2, [pc, #64]	@ (8001634 <HAL_UART_MspInit+0x88>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001634 <HAL_UART_MspInit+0x88>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001606:	230c      	movs	r3, #12
 8001608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160a:	2302      	movs	r3, #2
 800160c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001612:	2303      	movs	r3, #3
 8001614:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001616:	2307      	movs	r3, #7
 8001618:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161a:	f107 0314 	add.w	r3, r7, #20
 800161e:	4619      	mov	r1, r3
 8001620:	4805      	ldr	r0, [pc, #20]	@ (8001638 <HAL_UART_MspInit+0x8c>)
 8001622:	f000 fab3 	bl	8001b8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001626:	bf00      	nop
 8001628:	3728      	adds	r7, #40	@ 0x28
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40004400 	.word	0x40004400
 8001634:	40023800 	.word	0x40023800
 8001638:	40020000 	.word	0x40020000

0800163c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <NMI_Handler+0x4>

08001644 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <HardFault_Handler+0x4>

0800164c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <MemManage_Handler+0x4>

08001654 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001658:	bf00      	nop
 800165a:	e7fd      	b.n	8001658 <BusFault_Handler+0x4>

0800165c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001660:	bf00      	nop
 8001662:	e7fd      	b.n	8001660 <UsageFault_Handler+0x4>

08001664 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001692:	f000 f925 	bl	80018e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
	...

0800169c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016a0:	4802      	ldr	r0, [pc, #8]	@ (80016ac <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80016a2:	f001 fdc5 	bl	8003230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000078 	.word	0x20000078

080016b0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016b4:	4802      	ldr	r0, [pc, #8]	@ (80016c0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80016b6:	f001 fdbb 	bl	8003230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000078 	.word	0x20000078

080016c4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016c8:	4802      	ldr	r0, [pc, #8]	@ (80016d4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80016ca:	f001 fdb1 	bl	8003230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000078 	.word	0x20000078

080016d8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016dc:	4802      	ldr	r0, [pc, #8]	@ (80016e8 <TIM1_CC_IRQHandler+0x10>)
 80016de:	f001 fda7 	bl	8003230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000078 	.word	0x20000078

080016ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80016f0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80016f4:	f000 fc1a 	bl	8001f2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}

080016fc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001700:	4802      	ldr	r0, [pc, #8]	@ (800170c <TIM5_IRQHandler+0x10>)
 8001702:	f001 fd95 	bl	8003230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000108 	.word	0x20000108

08001710 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return 1;
 8001714:	2301      	movs	r3, #1
}
 8001716:	4618      	mov	r0, r3
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <_kill>:

int _kill(int pid, int sig)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800172a:	f003 fadd 	bl	8004ce8 <__errno>
 800172e:	4603      	mov	r3, r0
 8001730:	2216      	movs	r2, #22
 8001732:	601a      	str	r2, [r3, #0]
  return -1;
 8001734:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <_exit>:

void _exit (int status)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001748:	f04f 31ff 	mov.w	r1, #4294967295
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff ffe7 	bl	8001720 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001752:	bf00      	nop
 8001754:	e7fd      	b.n	8001752 <_exit+0x12>
	...

08001758 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001760:	4a14      	ldr	r2, [pc, #80]	@ (80017b4 <_sbrk+0x5c>)
 8001762:	4b15      	ldr	r3, [pc, #84]	@ (80017b8 <_sbrk+0x60>)
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800176c:	4b13      	ldr	r3, [pc, #76]	@ (80017bc <_sbrk+0x64>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d102      	bne.n	800177a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001774:	4b11      	ldr	r3, [pc, #68]	@ (80017bc <_sbrk+0x64>)
 8001776:	4a12      	ldr	r2, [pc, #72]	@ (80017c0 <_sbrk+0x68>)
 8001778:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800177a:	4b10      	ldr	r3, [pc, #64]	@ (80017bc <_sbrk+0x64>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	429a      	cmp	r2, r3
 8001786:	d207      	bcs.n	8001798 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001788:	f003 faae 	bl	8004ce8 <__errno>
 800178c:	4603      	mov	r3, r0
 800178e:	220c      	movs	r2, #12
 8001790:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001792:	f04f 33ff 	mov.w	r3, #4294967295
 8001796:	e009      	b.n	80017ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001798:	4b08      	ldr	r3, [pc, #32]	@ (80017bc <_sbrk+0x64>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800179e:	4b07      	ldr	r3, [pc, #28]	@ (80017bc <_sbrk+0x64>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4413      	add	r3, r2
 80017a6:	4a05      	ldr	r2, [pc, #20]	@ (80017bc <_sbrk+0x64>)
 80017a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017aa:	68fb      	ldr	r3, [r7, #12]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20020000 	.word	0x20020000
 80017b8:	00000400 	.word	0x00000400
 80017bc:	2000021c 	.word	0x2000021c
 80017c0:	20000370 	.word	0x20000370

080017c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c8:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <SystemInit+0x20>)
 80017ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017ce:	4a05      	ldr	r2, [pc, #20]	@ (80017e4 <SystemInit+0x20>)
 80017d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001820 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017ec:	f7ff ffea 	bl	80017c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017f0:	480c      	ldr	r0, [pc, #48]	@ (8001824 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017f2:	490d      	ldr	r1, [pc, #52]	@ (8001828 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017f4:	4a0d      	ldr	r2, [pc, #52]	@ (800182c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f8:	e002      	b.n	8001800 <LoopCopyDataInit>

080017fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fe:	3304      	adds	r3, #4

08001800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001804:	d3f9      	bcc.n	80017fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001806:	4a0a      	ldr	r2, [pc, #40]	@ (8001830 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001808:	4c0a      	ldr	r4, [pc, #40]	@ (8001834 <LoopFillZerobss+0x22>)
  movs r3, #0
 800180a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800180c:	e001      	b.n	8001812 <LoopFillZerobss>

0800180e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001810:	3204      	adds	r2, #4

08001812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001814:	d3fb      	bcc.n	800180e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001816:	f003 fa6d 	bl	8004cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800181a:	f7ff f9fb 	bl	8000c14 <main>
  bx  lr    
 800181e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001820:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001828:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800182c:	08005540 	.word	0x08005540
  ldr r2, =_sbss
 8001830:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001834:	20000370 	.word	0x20000370

08001838 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001838:	e7fe      	b.n	8001838 <ADC_IRQHandler>
	...

0800183c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001840:	4b0e      	ldr	r3, [pc, #56]	@ (800187c <HAL_Init+0x40>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0d      	ldr	r2, [pc, #52]	@ (800187c <HAL_Init+0x40>)
 8001846:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800184a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800184c:	4b0b      	ldr	r3, [pc, #44]	@ (800187c <HAL_Init+0x40>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0a      	ldr	r2, [pc, #40]	@ (800187c <HAL_Init+0x40>)
 8001852:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001856:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001858:	4b08      	ldr	r3, [pc, #32]	@ (800187c <HAL_Init+0x40>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a07      	ldr	r2, [pc, #28]	@ (800187c <HAL_Init+0x40>)
 800185e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001862:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001864:	2003      	movs	r0, #3
 8001866:	f000 f94f 	bl	8001b08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800186a:	200f      	movs	r0, #15
 800186c:	f000 f808 	bl	8001880 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001870:	f7ff fd70 	bl	8001354 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40023c00 	.word	0x40023c00

08001880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001888:	4b12      	ldr	r3, [pc, #72]	@ (80018d4 <HAL_InitTick+0x54>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4b12      	ldr	r3, [pc, #72]	@ (80018d8 <HAL_InitTick+0x58>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	4619      	mov	r1, r3
 8001892:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001896:	fbb3 f3f1 	udiv	r3, r3, r1
 800189a:	fbb2 f3f3 	udiv	r3, r2, r3
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 f967 	bl	8001b72 <HAL_SYSTICK_Config>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e00e      	b.n	80018cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b0f      	cmp	r3, #15
 80018b2:	d80a      	bhi.n	80018ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b4:	2200      	movs	r2, #0
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	f04f 30ff 	mov.w	r0, #4294967295
 80018bc:	f000 f92f 	bl	8001b1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c0:	4a06      	ldr	r2, [pc, #24]	@ (80018dc <HAL_InitTick+0x5c>)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
 80018c8:	e000      	b.n	80018cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000000 	.word	0x20000000
 80018d8:	20000008 	.word	0x20000008
 80018dc:	20000004 	.word	0x20000004

080018e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e4:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <HAL_IncTick+0x20>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b06      	ldr	r3, [pc, #24]	@ (8001904 <HAL_IncTick+0x24>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	4a04      	ldr	r2, [pc, #16]	@ (8001904 <HAL_IncTick+0x24>)
 80018f2:	6013      	str	r3, [r2, #0]
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	20000008 	.word	0x20000008
 8001904:	20000220 	.word	0x20000220

08001908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return uwTick;
 800190c:	4b03      	ldr	r3, [pc, #12]	@ (800191c <HAL_GetTick+0x14>)
 800190e:	681b      	ldr	r3, [r3, #0]
}
 8001910:	4618      	mov	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	20000220 	.word	0x20000220

08001920 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001928:	f7ff ffee 	bl	8001908 <HAL_GetTick>
 800192c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001938:	d005      	beq.n	8001946 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800193a:	4b0a      	ldr	r3, [pc, #40]	@ (8001964 <HAL_Delay+0x44>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4413      	add	r3, r2
 8001944:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001946:	bf00      	nop
 8001948:	f7ff ffde 	bl	8001908 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	429a      	cmp	r2, r3
 8001956:	d8f7      	bhi.n	8001948 <HAL_Delay+0x28>
  {
  }
}
 8001958:	bf00      	nop
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000008 	.word	0x20000008

08001968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001978:	4b0c      	ldr	r3, [pc, #48]	@ (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001984:	4013      	ands	r3, r2
 8001986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001990:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001994:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800199a:	4a04      	ldr	r2, [pc, #16]	@ (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	60d3      	str	r3, [r2, #12]
}
 80019a0:	bf00      	nop
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b4:	4b04      	ldr	r3, [pc, #16]	@ (80019c8 <__NVIC_GetPriorityGrouping+0x18>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	0a1b      	lsrs	r3, r3, #8
 80019ba:	f003 0307 	and.w	r3, r3, #7
}
 80019be:	4618      	mov	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	db0b      	blt.n	80019f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	f003 021f 	and.w	r2, r3, #31
 80019e4:	4907      	ldr	r1, [pc, #28]	@ (8001a04 <__NVIC_EnableIRQ+0x38>)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	095b      	lsrs	r3, r3, #5
 80019ec:	2001      	movs	r0, #1
 80019ee:	fa00 f202 	lsl.w	r2, r0, r2
 80019f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000e100 	.word	0xe000e100

08001a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	6039      	str	r1, [r7, #0]
 8001a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	db0a      	blt.n	8001a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	490c      	ldr	r1, [pc, #48]	@ (8001a54 <__NVIC_SetPriority+0x4c>)
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	0112      	lsls	r2, r2, #4
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	440b      	add	r3, r1
 8001a2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a30:	e00a      	b.n	8001a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	4908      	ldr	r1, [pc, #32]	@ (8001a58 <__NVIC_SetPriority+0x50>)
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	3b04      	subs	r3, #4
 8001a40:	0112      	lsls	r2, r2, #4
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	440b      	add	r3, r1
 8001a46:	761a      	strb	r2, [r3, #24]
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	e000e100 	.word	0xe000e100
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b089      	sub	sp, #36	@ 0x24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	f1c3 0307 	rsb	r3, r3, #7
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	bf28      	it	cs
 8001a7a:	2304      	movcs	r3, #4
 8001a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3304      	adds	r3, #4
 8001a82:	2b06      	cmp	r3, #6
 8001a84:	d902      	bls.n	8001a8c <NVIC_EncodePriority+0x30>
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3b03      	subs	r3, #3
 8001a8a:	e000      	b.n	8001a8e <NVIC_EncodePriority+0x32>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a90:	f04f 32ff 	mov.w	r2, #4294967295
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43da      	mvns	r2, r3
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001aae:	43d9      	mvns	r1, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab4:	4313      	orrs	r3, r2
         );
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3724      	adds	r7, #36	@ 0x24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
	...

08001ac4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ad4:	d301      	bcc.n	8001ada <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e00f      	b.n	8001afa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ada:	4a0a      	ldr	r2, [pc, #40]	@ (8001b04 <SysTick_Config+0x40>)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ae2:	210f      	movs	r1, #15
 8001ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae8:	f7ff ff8e 	bl	8001a08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aec:	4b05      	ldr	r3, [pc, #20]	@ (8001b04 <SysTick_Config+0x40>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001af2:	4b04      	ldr	r3, [pc, #16]	@ (8001b04 <SysTick_Config+0x40>)
 8001af4:	2207      	movs	r2, #7
 8001af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	e000e010 	.word	0xe000e010

08001b08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff ff29 	bl	8001968 <__NVIC_SetPriorityGrouping>
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b086      	sub	sp, #24
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	4603      	mov	r3, r0
 8001b26:	60b9      	str	r1, [r7, #8]
 8001b28:	607a      	str	r2, [r7, #4]
 8001b2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b30:	f7ff ff3e 	bl	80019b0 <__NVIC_GetPriorityGrouping>
 8001b34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	68b9      	ldr	r1, [r7, #8]
 8001b3a:	6978      	ldr	r0, [r7, #20]
 8001b3c:	f7ff ff8e 	bl	8001a5c <NVIC_EncodePriority>
 8001b40:	4602      	mov	r2, r0
 8001b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b46:	4611      	mov	r1, r2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ff5d 	bl	8001a08 <__NVIC_SetPriority>
}
 8001b4e:	bf00      	nop
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff ff31 	bl	80019cc <__NVIC_EnableIRQ>
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff ffa2 	bl	8001ac4 <SysTick_Config>
 8001b80:	4603      	mov	r3, r0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b089      	sub	sp, #36	@ 0x24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61fb      	str	r3, [r7, #28]
 8001ba6:	e159      	b.n	8001e5c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ba8:	2201      	movs	r2, #1
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	f040 8148 	bne.w	8001e56 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d005      	beq.n	8001bde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d130      	bne.n	8001c40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	2203      	movs	r2, #3
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	68da      	ldr	r2, [r3, #12]
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c14:	2201      	movs	r2, #1
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	091b      	lsrs	r3, r3, #4
 8001c2a:	f003 0201 	and.w	r2, r3, #1
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	2b03      	cmp	r3, #3
 8001c4a:	d017      	beq.n	8001c7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	2203      	movs	r2, #3
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d123      	bne.n	8001cd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	08da      	lsrs	r2, r3, #3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3208      	adds	r2, #8
 8001c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	220f      	movs	r2, #15
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	691a      	ldr	r2, [r3, #16]
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	08da      	lsrs	r2, r3, #3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	3208      	adds	r2, #8
 8001cca:	69b9      	ldr	r1, [r7, #24]
 8001ccc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	2203      	movs	r2, #3
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 0203 	and.w	r2, r3, #3
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 80a2 	beq.w	8001e56 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	4b57      	ldr	r3, [pc, #348]	@ (8001e74 <HAL_GPIO_Init+0x2e8>)
 8001d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1a:	4a56      	ldr	r2, [pc, #344]	@ (8001e74 <HAL_GPIO_Init+0x2e8>)
 8001d1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d22:	4b54      	ldr	r3, [pc, #336]	@ (8001e74 <HAL_GPIO_Init+0x2e8>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d2e:	4a52      	ldr	r2, [pc, #328]	@ (8001e78 <HAL_GPIO_Init+0x2ec>)
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	089b      	lsrs	r3, r3, #2
 8001d34:	3302      	adds	r3, #2
 8001d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	220f      	movs	r2, #15
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a49      	ldr	r2, [pc, #292]	@ (8001e7c <HAL_GPIO_Init+0x2f0>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d019      	beq.n	8001d8e <HAL_GPIO_Init+0x202>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a48      	ldr	r2, [pc, #288]	@ (8001e80 <HAL_GPIO_Init+0x2f4>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d013      	beq.n	8001d8a <HAL_GPIO_Init+0x1fe>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a47      	ldr	r2, [pc, #284]	@ (8001e84 <HAL_GPIO_Init+0x2f8>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d00d      	beq.n	8001d86 <HAL_GPIO_Init+0x1fa>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a46      	ldr	r2, [pc, #280]	@ (8001e88 <HAL_GPIO_Init+0x2fc>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d007      	beq.n	8001d82 <HAL_GPIO_Init+0x1f6>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a45      	ldr	r2, [pc, #276]	@ (8001e8c <HAL_GPIO_Init+0x300>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d101      	bne.n	8001d7e <HAL_GPIO_Init+0x1f2>
 8001d7a:	2304      	movs	r3, #4
 8001d7c:	e008      	b.n	8001d90 <HAL_GPIO_Init+0x204>
 8001d7e:	2307      	movs	r3, #7
 8001d80:	e006      	b.n	8001d90 <HAL_GPIO_Init+0x204>
 8001d82:	2303      	movs	r3, #3
 8001d84:	e004      	b.n	8001d90 <HAL_GPIO_Init+0x204>
 8001d86:	2302      	movs	r3, #2
 8001d88:	e002      	b.n	8001d90 <HAL_GPIO_Init+0x204>
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <HAL_GPIO_Init+0x204>
 8001d8e:	2300      	movs	r3, #0
 8001d90:	69fa      	ldr	r2, [r7, #28]
 8001d92:	f002 0203 	and.w	r2, r2, #3
 8001d96:	0092      	lsls	r2, r2, #2
 8001d98:	4093      	lsls	r3, r2
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001da0:	4935      	ldr	r1, [pc, #212]	@ (8001e78 <HAL_GPIO_Init+0x2ec>)
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	089b      	lsrs	r3, r3, #2
 8001da6:	3302      	adds	r3, #2
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dae:	4b38      	ldr	r3, [pc, #224]	@ (8001e90 <HAL_GPIO_Init+0x304>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	43db      	mvns	r3, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dd2:	4a2f      	ldr	r2, [pc, #188]	@ (8001e90 <HAL_GPIO_Init+0x304>)
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dd8:	4b2d      	ldr	r3, [pc, #180]	@ (8001e90 <HAL_GPIO_Init+0x304>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	43db      	mvns	r3, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4013      	ands	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dfc:	4a24      	ldr	r2, [pc, #144]	@ (8001e90 <HAL_GPIO_Init+0x304>)
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e02:	4b23      	ldr	r3, [pc, #140]	@ (8001e90 <HAL_GPIO_Init+0x304>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e26:	4a1a      	ldr	r2, [pc, #104]	@ (8001e90 <HAL_GPIO_Init+0x304>)
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e2c:	4b18      	ldr	r3, [pc, #96]	@ (8001e90 <HAL_GPIO_Init+0x304>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	43db      	mvns	r3, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e50:	4a0f      	ldr	r2, [pc, #60]	@ (8001e90 <HAL_GPIO_Init+0x304>)
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	61fb      	str	r3, [r7, #28]
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	2b0f      	cmp	r3, #15
 8001e60:	f67f aea2 	bls.w	8001ba8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e64:	bf00      	nop
 8001e66:	bf00      	nop
 8001e68:	3724      	adds	r7, #36	@ 0x24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	40023800 	.word	0x40023800
 8001e78:	40013800 	.word	0x40013800
 8001e7c:	40020000 	.word	0x40020000
 8001e80:	40020400 	.word	0x40020400
 8001e84:	40020800 	.word	0x40020800
 8001e88:	40020c00 	.word	0x40020c00
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	40013c00 	.word	0x40013c00

08001e94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	691a      	ldr	r2, [r3, #16]
 8001ea4:	887b      	ldrh	r3, [r7, #2]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d002      	beq.n	8001eb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001eac:	2301      	movs	r3, #1
 8001eae:	73fb      	strb	r3, [r7, #15]
 8001eb0:	e001      	b.n	8001eb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	807b      	strh	r3, [r7, #2]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ed4:	787b      	ldrb	r3, [r7, #1]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eda:	887a      	ldrh	r2, [r7, #2]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ee0:	e003      	b.n	8001eea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ee2:	887b      	ldrh	r3, [r7, #2]
 8001ee4:	041a      	lsls	r2, r3, #16
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	619a      	str	r2, [r3, #24]
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b085      	sub	sp, #20
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	460b      	mov	r3, r1
 8001f00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f08:	887a      	ldrh	r2, [r7, #2]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	041a      	lsls	r2, r3, #16
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	43d9      	mvns	r1, r3
 8001f14:	887b      	ldrh	r3, [r7, #2]
 8001f16:	400b      	ands	r3, r1
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	619a      	str	r2, [r3, #24]
}
 8001f1e:	bf00      	nop
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
	...

08001f2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f36:	4b08      	ldr	r3, [pc, #32]	@ (8001f58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f38:	695a      	ldr	r2, [r3, #20]
 8001f3a:	88fb      	ldrh	r3, [r7, #6]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d006      	beq.n	8001f50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f42:	4a05      	ldr	r2, [pc, #20]	@ (8001f58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f44:	88fb      	ldrh	r3, [r7, #6]
 8001f46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f48:	88fb      	ldrh	r3, [r7, #6]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe fdf0 	bl	8000b30 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40013c00 	.word	0x40013c00

08001f5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e267      	b.n	800243e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d075      	beq.n	8002066 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f7a:	4b88      	ldr	r3, [pc, #544]	@ (800219c <HAL_RCC_OscConfig+0x240>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 030c 	and.w	r3, r3, #12
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	d00c      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f86:	4b85      	ldr	r3, [pc, #532]	@ (800219c <HAL_RCC_OscConfig+0x240>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f8e:	2b08      	cmp	r3, #8
 8001f90:	d112      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f92:	4b82      	ldr	r3, [pc, #520]	@ (800219c <HAL_RCC_OscConfig+0x240>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f9e:	d10b      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa0:	4b7e      	ldr	r3, [pc, #504]	@ (800219c <HAL_RCC_OscConfig+0x240>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d05b      	beq.n	8002064 <HAL_RCC_OscConfig+0x108>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d157      	bne.n	8002064 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e242      	b.n	800243e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fc0:	d106      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x74>
 8001fc2:	4b76      	ldr	r3, [pc, #472]	@ (800219c <HAL_RCC_OscConfig+0x240>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a75      	ldr	r2, [pc, #468]	@ (800219c <HAL_RCC_OscConfig+0x240>)
 8001fc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	e01d      	b.n	800200c <HAL_RCC_OscConfig+0xb0>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fd8:	d10c      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x98>
 8001fda:	4b70      	ldr	r3, [pc, #448]	@ (800219c <HAL_RCC_OscConfig+0x240>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a6f      	ldr	r2, [pc, #444]	@ (800219c <HAL_RCC_OscConfig+0x240>)
 8001fe0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	4b6d      	ldr	r3, [pc, #436]	@ (800219c <HAL_RCC_OscConfig+0x240>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a6c      	ldr	r2, [pc, #432]	@ (800219c <HAL_RCC_OscConfig+0x240>)
 8001fec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	e00b      	b.n	800200c <HAL_RCC_OscConfig+0xb0>
 8001ff4:	4b69      	ldr	r3, [pc, #420]	@ (800219c <HAL_RCC_OscConfig+0x240>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a68      	ldr	r2, [pc, #416]	@ (800219c <HAL_RCC_OscConfig+0x240>)
 8001ffa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ffe:	6013      	str	r3, [r2, #0]
 8002000:	4b66      	ldr	r3, [pc, #408]	@ (800219c <HAL_RCC_OscConfig+0x240>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a65      	ldr	r2, [pc, #404]	@ (800219c <HAL_RCC_OscConfig+0x240>)
 8002006:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800200a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d013      	beq.n	800203c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002014:	f7ff fc78 	bl	8001908 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800201c:	f7ff fc74 	bl	8001908 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b64      	cmp	r3, #100	@ 0x64
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e207      	b.n	800243e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202e:	4b5b      	ldr	r3, [pc, #364]	@ (800219c <HAL_RCC_OscConfig+0x240>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0f0      	beq.n	800201c <HAL_RCC_OscConfig+0xc0>
 800203a:	e014      	b.n	8002066 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203c:	f7ff fc64 	bl	8001908 <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002044:	f7ff fc60 	bl	8001908 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b64      	cmp	r3, #100	@ 0x64
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e1f3      	b.n	800243e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002056:	4b51      	ldr	r3, [pc, #324]	@ (800219c <HAL_RCC_OscConfig+0x240>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f0      	bne.n	8002044 <HAL_RCC_OscConfig+0xe8>
 8002062:	e000      	b.n	8002066 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002064:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d063      	beq.n	800213a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002072:	4b4a      	ldr	r3, [pc, #296]	@ (800219c <HAL_RCC_OscConfig+0x240>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f003 030c 	and.w	r3, r3, #12
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00b      	beq.n	8002096 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800207e:	4b47      	ldr	r3, [pc, #284]	@ (800219c <HAL_RCC_OscConfig+0x240>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002086:	2b08      	cmp	r3, #8
 8002088:	d11c      	bne.n	80020c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800208a:	4b44      	ldr	r3, [pc, #272]	@ (800219c <HAL_RCC_OscConfig+0x240>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d116      	bne.n	80020c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002096:	4b41      	ldr	r3, [pc, #260]	@ (800219c <HAL_RCC_OscConfig+0x240>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d005      	beq.n	80020ae <HAL_RCC_OscConfig+0x152>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d001      	beq.n	80020ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e1c7      	b.n	800243e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ae:	4b3b      	ldr	r3, [pc, #236]	@ (800219c <HAL_RCC_OscConfig+0x240>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	4937      	ldr	r1, [pc, #220]	@ (800219c <HAL_RCC_OscConfig+0x240>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c2:	e03a      	b.n	800213a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d020      	beq.n	800210e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020cc:	4b34      	ldr	r3, [pc, #208]	@ (80021a0 <HAL_RCC_OscConfig+0x244>)
 80020ce:	2201      	movs	r2, #1
 80020d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d2:	f7ff fc19 	bl	8001908 <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d8:	e008      	b.n	80020ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020da:	f7ff fc15 	bl	8001908 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e1a8      	b.n	800243e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ec:	4b2b      	ldr	r3, [pc, #172]	@ (800219c <HAL_RCC_OscConfig+0x240>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0f0      	beq.n	80020da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f8:	4b28      	ldr	r3, [pc, #160]	@ (800219c <HAL_RCC_OscConfig+0x240>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	4925      	ldr	r1, [pc, #148]	@ (800219c <HAL_RCC_OscConfig+0x240>)
 8002108:	4313      	orrs	r3, r2
 800210a:	600b      	str	r3, [r1, #0]
 800210c:	e015      	b.n	800213a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800210e:	4b24      	ldr	r3, [pc, #144]	@ (80021a0 <HAL_RCC_OscConfig+0x244>)
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002114:	f7ff fbf8 	bl	8001908 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800211c:	f7ff fbf4 	bl	8001908 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e187      	b.n	800243e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800212e:	4b1b      	ldr	r3, [pc, #108]	@ (800219c <HAL_RCC_OscConfig+0x240>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f0      	bne.n	800211c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	2b00      	cmp	r3, #0
 8002144:	d036      	beq.n	80021b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d016      	beq.n	800217c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800214e:	4b15      	ldr	r3, [pc, #84]	@ (80021a4 <HAL_RCC_OscConfig+0x248>)
 8002150:	2201      	movs	r2, #1
 8002152:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002154:	f7ff fbd8 	bl	8001908 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800215c:	f7ff fbd4 	bl	8001908 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e167      	b.n	800243e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800216e:	4b0b      	ldr	r3, [pc, #44]	@ (800219c <HAL_RCC_OscConfig+0x240>)
 8002170:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0f0      	beq.n	800215c <HAL_RCC_OscConfig+0x200>
 800217a:	e01b      	b.n	80021b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800217c:	4b09      	ldr	r3, [pc, #36]	@ (80021a4 <HAL_RCC_OscConfig+0x248>)
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002182:	f7ff fbc1 	bl	8001908 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002188:	e00e      	b.n	80021a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800218a:	f7ff fbbd 	bl	8001908 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d907      	bls.n	80021a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e150      	b.n	800243e <HAL_RCC_OscConfig+0x4e2>
 800219c:	40023800 	.word	0x40023800
 80021a0:	42470000 	.word	0x42470000
 80021a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a8:	4b88      	ldr	r3, [pc, #544]	@ (80023cc <HAL_RCC_OscConfig+0x470>)
 80021aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1ea      	bne.n	800218a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 8097 	beq.w	80022f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021c2:	2300      	movs	r3, #0
 80021c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021c6:	4b81      	ldr	r3, [pc, #516]	@ (80023cc <HAL_RCC_OscConfig+0x470>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10f      	bne.n	80021f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	60bb      	str	r3, [r7, #8]
 80021d6:	4b7d      	ldr	r3, [pc, #500]	@ (80023cc <HAL_RCC_OscConfig+0x470>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021da:	4a7c      	ldr	r2, [pc, #496]	@ (80023cc <HAL_RCC_OscConfig+0x470>)
 80021dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80021e2:	4b7a      	ldr	r3, [pc, #488]	@ (80023cc <HAL_RCC_OscConfig+0x470>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ea:	60bb      	str	r3, [r7, #8]
 80021ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ee:	2301      	movs	r3, #1
 80021f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f2:	4b77      	ldr	r3, [pc, #476]	@ (80023d0 <HAL_RCC_OscConfig+0x474>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d118      	bne.n	8002230 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021fe:	4b74      	ldr	r3, [pc, #464]	@ (80023d0 <HAL_RCC_OscConfig+0x474>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a73      	ldr	r2, [pc, #460]	@ (80023d0 <HAL_RCC_OscConfig+0x474>)
 8002204:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002208:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800220a:	f7ff fb7d 	bl	8001908 <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002212:	f7ff fb79 	bl	8001908 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e10c      	b.n	800243e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002224:	4b6a      	ldr	r3, [pc, #424]	@ (80023d0 <HAL_RCC_OscConfig+0x474>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800222c:	2b00      	cmp	r3, #0
 800222e:	d0f0      	beq.n	8002212 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d106      	bne.n	8002246 <HAL_RCC_OscConfig+0x2ea>
 8002238:	4b64      	ldr	r3, [pc, #400]	@ (80023cc <HAL_RCC_OscConfig+0x470>)
 800223a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800223c:	4a63      	ldr	r2, [pc, #396]	@ (80023cc <HAL_RCC_OscConfig+0x470>)
 800223e:	f043 0301 	orr.w	r3, r3, #1
 8002242:	6713      	str	r3, [r2, #112]	@ 0x70
 8002244:	e01c      	b.n	8002280 <HAL_RCC_OscConfig+0x324>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	2b05      	cmp	r3, #5
 800224c:	d10c      	bne.n	8002268 <HAL_RCC_OscConfig+0x30c>
 800224e:	4b5f      	ldr	r3, [pc, #380]	@ (80023cc <HAL_RCC_OscConfig+0x470>)
 8002250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002252:	4a5e      	ldr	r2, [pc, #376]	@ (80023cc <HAL_RCC_OscConfig+0x470>)
 8002254:	f043 0304 	orr.w	r3, r3, #4
 8002258:	6713      	str	r3, [r2, #112]	@ 0x70
 800225a:	4b5c      	ldr	r3, [pc, #368]	@ (80023cc <HAL_RCC_OscConfig+0x470>)
 800225c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800225e:	4a5b      	ldr	r2, [pc, #364]	@ (80023cc <HAL_RCC_OscConfig+0x470>)
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	6713      	str	r3, [r2, #112]	@ 0x70
 8002266:	e00b      	b.n	8002280 <HAL_RCC_OscConfig+0x324>
 8002268:	4b58      	ldr	r3, [pc, #352]	@ (80023cc <HAL_RCC_OscConfig+0x470>)
 800226a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800226c:	4a57      	ldr	r2, [pc, #348]	@ (80023cc <HAL_RCC_OscConfig+0x470>)
 800226e:	f023 0301 	bic.w	r3, r3, #1
 8002272:	6713      	str	r3, [r2, #112]	@ 0x70
 8002274:	4b55      	ldr	r3, [pc, #340]	@ (80023cc <HAL_RCC_OscConfig+0x470>)
 8002276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002278:	4a54      	ldr	r2, [pc, #336]	@ (80023cc <HAL_RCC_OscConfig+0x470>)
 800227a:	f023 0304 	bic.w	r3, r3, #4
 800227e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d015      	beq.n	80022b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002288:	f7ff fb3e 	bl	8001908 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800228e:	e00a      	b.n	80022a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002290:	f7ff fb3a 	bl	8001908 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800229e:	4293      	cmp	r3, r2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e0cb      	b.n	800243e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a6:	4b49      	ldr	r3, [pc, #292]	@ (80023cc <HAL_RCC_OscConfig+0x470>)
 80022a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d0ee      	beq.n	8002290 <HAL_RCC_OscConfig+0x334>
 80022b2:	e014      	b.n	80022de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b4:	f7ff fb28 	bl	8001908 <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ba:	e00a      	b.n	80022d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022bc:	f7ff fb24 	bl	8001908 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e0b5      	b.n	800243e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d2:	4b3e      	ldr	r3, [pc, #248]	@ (80023cc <HAL_RCC_OscConfig+0x470>)
 80022d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1ee      	bne.n	80022bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022de:	7dfb      	ldrb	r3, [r7, #23]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d105      	bne.n	80022f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022e4:	4b39      	ldr	r3, [pc, #228]	@ (80023cc <HAL_RCC_OscConfig+0x470>)
 80022e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e8:	4a38      	ldr	r2, [pc, #224]	@ (80023cc <HAL_RCC_OscConfig+0x470>)
 80022ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 80a1 	beq.w	800243c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022fa:	4b34      	ldr	r3, [pc, #208]	@ (80023cc <HAL_RCC_OscConfig+0x470>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 030c 	and.w	r3, r3, #12
 8002302:	2b08      	cmp	r3, #8
 8002304:	d05c      	beq.n	80023c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	2b02      	cmp	r3, #2
 800230c:	d141      	bne.n	8002392 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800230e:	4b31      	ldr	r3, [pc, #196]	@ (80023d4 <HAL_RCC_OscConfig+0x478>)
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002314:	f7ff faf8 	bl	8001908 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800231c:	f7ff faf4 	bl	8001908 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e087      	b.n	800243e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800232e:	4b27      	ldr	r3, [pc, #156]	@ (80023cc <HAL_RCC_OscConfig+0x470>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1f0      	bne.n	800231c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69da      	ldr	r2, [r3, #28]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002348:	019b      	lsls	r3, r3, #6
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002350:	085b      	lsrs	r3, r3, #1
 8002352:	3b01      	subs	r3, #1
 8002354:	041b      	lsls	r3, r3, #16
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800235c:	061b      	lsls	r3, r3, #24
 800235e:	491b      	ldr	r1, [pc, #108]	@ (80023cc <HAL_RCC_OscConfig+0x470>)
 8002360:	4313      	orrs	r3, r2
 8002362:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002364:	4b1b      	ldr	r3, [pc, #108]	@ (80023d4 <HAL_RCC_OscConfig+0x478>)
 8002366:	2201      	movs	r2, #1
 8002368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236a:	f7ff facd 	bl	8001908 <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002372:	f7ff fac9 	bl	8001908 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e05c      	b.n	800243e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002384:	4b11      	ldr	r3, [pc, #68]	@ (80023cc <HAL_RCC_OscConfig+0x470>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0f0      	beq.n	8002372 <HAL_RCC_OscConfig+0x416>
 8002390:	e054      	b.n	800243c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002392:	4b10      	ldr	r3, [pc, #64]	@ (80023d4 <HAL_RCC_OscConfig+0x478>)
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002398:	f7ff fab6 	bl	8001908 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023a0:	f7ff fab2 	bl	8001908 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e045      	b.n	800243e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023b2:	4b06      	ldr	r3, [pc, #24]	@ (80023cc <HAL_RCC_OscConfig+0x470>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1f0      	bne.n	80023a0 <HAL_RCC_OscConfig+0x444>
 80023be:	e03d      	b.n	800243c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d107      	bne.n	80023d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e038      	b.n	800243e <HAL_RCC_OscConfig+0x4e2>
 80023cc:	40023800 	.word	0x40023800
 80023d0:	40007000 	.word	0x40007000
 80023d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002448 <HAL_RCC_OscConfig+0x4ec>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d028      	beq.n	8002438 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d121      	bne.n	8002438 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fe:	429a      	cmp	r2, r3
 8002400:	d11a      	bne.n	8002438 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002408:	4013      	ands	r3, r2
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800240e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002410:	4293      	cmp	r3, r2
 8002412:	d111      	bne.n	8002438 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800241e:	085b      	lsrs	r3, r3, #1
 8002420:	3b01      	subs	r3, #1
 8002422:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002424:	429a      	cmp	r2, r3
 8002426:	d107      	bne.n	8002438 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002432:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002434:	429a      	cmp	r2, r3
 8002436:	d001      	beq.n	800243c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e000      	b.n	800243e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40023800 	.word	0x40023800

0800244c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e0cc      	b.n	80025fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002460:	4b68      	ldr	r3, [pc, #416]	@ (8002604 <HAL_RCC_ClockConfig+0x1b8>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d90c      	bls.n	8002488 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246e:	4b65      	ldr	r3, [pc, #404]	@ (8002604 <HAL_RCC_ClockConfig+0x1b8>)
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002476:	4b63      	ldr	r3, [pc, #396]	@ (8002604 <HAL_RCC_ClockConfig+0x1b8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	429a      	cmp	r2, r3
 8002482:	d001      	beq.n	8002488 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e0b8      	b.n	80025fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d020      	beq.n	80024d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b00      	cmp	r3, #0
 800249e:	d005      	beq.n	80024ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024a0:	4b59      	ldr	r3, [pc, #356]	@ (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	4a58      	ldr	r2, [pc, #352]	@ (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80024a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80024aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0308 	and.w	r3, r3, #8
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d005      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024b8:	4b53      	ldr	r3, [pc, #332]	@ (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	4a52      	ldr	r2, [pc, #328]	@ (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80024be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80024c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c4:	4b50      	ldr	r3, [pc, #320]	@ (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	494d      	ldr	r1, [pc, #308]	@ (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d044      	beq.n	800256c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d107      	bne.n	80024fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ea:	4b47      	ldr	r3, [pc, #284]	@ (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d119      	bne.n	800252a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e07f      	b.n	80025fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d003      	beq.n	800250a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002506:	2b03      	cmp	r3, #3
 8002508:	d107      	bne.n	800251a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800250a:	4b3f      	ldr	r3, [pc, #252]	@ (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d109      	bne.n	800252a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e06f      	b.n	80025fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251a:	4b3b      	ldr	r3, [pc, #236]	@ (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e067      	b.n	80025fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800252a:	4b37      	ldr	r3, [pc, #220]	@ (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f023 0203 	bic.w	r2, r3, #3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	4934      	ldr	r1, [pc, #208]	@ (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 8002538:	4313      	orrs	r3, r2
 800253a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800253c:	f7ff f9e4 	bl	8001908 <HAL_GetTick>
 8002540:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002542:	e00a      	b.n	800255a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002544:	f7ff f9e0 	bl	8001908 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002552:	4293      	cmp	r3, r2
 8002554:	d901      	bls.n	800255a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e04f      	b.n	80025fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255a:	4b2b      	ldr	r3, [pc, #172]	@ (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 020c 	and.w	r2, r3, #12
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	429a      	cmp	r2, r3
 800256a:	d1eb      	bne.n	8002544 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800256c:	4b25      	ldr	r3, [pc, #148]	@ (8002604 <HAL_RCC_ClockConfig+0x1b8>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	d20c      	bcs.n	8002594 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257a:	4b22      	ldr	r3, [pc, #136]	@ (8002604 <HAL_RCC_ClockConfig+0x1b8>)
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002582:	4b20      	ldr	r3, [pc, #128]	@ (8002604 <HAL_RCC_ClockConfig+0x1b8>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	429a      	cmp	r2, r3
 800258e:	d001      	beq.n	8002594 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e032      	b.n	80025fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	d008      	beq.n	80025b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025a0:	4b19      	ldr	r3, [pc, #100]	@ (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	4916      	ldr	r1, [pc, #88]	@ (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d009      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025be:	4b12      	ldr	r3, [pc, #72]	@ (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	490e      	ldr	r1, [pc, #56]	@ (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025d2:	f000 f821 	bl	8002618 <HAL_RCC_GetSysClockFreq>
 80025d6:	4602      	mov	r2, r0
 80025d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002608 <HAL_RCC_ClockConfig+0x1bc>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	091b      	lsrs	r3, r3, #4
 80025de:	f003 030f 	and.w	r3, r3, #15
 80025e2:	490a      	ldr	r1, [pc, #40]	@ (800260c <HAL_RCC_ClockConfig+0x1c0>)
 80025e4:	5ccb      	ldrb	r3, [r1, r3]
 80025e6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ea:	4a09      	ldr	r2, [pc, #36]	@ (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 80025ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025ee:	4b09      	ldr	r3, [pc, #36]	@ (8002614 <HAL_RCC_ClockConfig+0x1c8>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff f944 	bl	8001880 <HAL_InitTick>

  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40023c00 	.word	0x40023c00
 8002608:	40023800 	.word	0x40023800
 800260c:	080054e4 	.word	0x080054e4
 8002610:	20000000 	.word	0x20000000
 8002614:	20000004 	.word	0x20000004

08002618 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800261c:	b090      	sub	sp, #64	@ 0x40
 800261e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002620:	2300      	movs	r3, #0
 8002622:	637b      	str	r3, [r7, #52]	@ 0x34
 8002624:	2300      	movs	r3, #0
 8002626:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002628:	2300      	movs	r3, #0
 800262a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800262c:	2300      	movs	r3, #0
 800262e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002630:	4b59      	ldr	r3, [pc, #356]	@ (8002798 <HAL_RCC_GetSysClockFreq+0x180>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f003 030c 	and.w	r3, r3, #12
 8002638:	2b08      	cmp	r3, #8
 800263a:	d00d      	beq.n	8002658 <HAL_RCC_GetSysClockFreq+0x40>
 800263c:	2b08      	cmp	r3, #8
 800263e:	f200 80a1 	bhi.w	8002784 <HAL_RCC_GetSysClockFreq+0x16c>
 8002642:	2b00      	cmp	r3, #0
 8002644:	d002      	beq.n	800264c <HAL_RCC_GetSysClockFreq+0x34>
 8002646:	2b04      	cmp	r3, #4
 8002648:	d003      	beq.n	8002652 <HAL_RCC_GetSysClockFreq+0x3a>
 800264a:	e09b      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800264c:	4b53      	ldr	r3, [pc, #332]	@ (800279c <HAL_RCC_GetSysClockFreq+0x184>)
 800264e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002650:	e09b      	b.n	800278a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002652:	4b53      	ldr	r3, [pc, #332]	@ (80027a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002654:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002656:	e098      	b.n	800278a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002658:	4b4f      	ldr	r3, [pc, #316]	@ (8002798 <HAL_RCC_GetSysClockFreq+0x180>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002660:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002662:	4b4d      	ldr	r3, [pc, #308]	@ (8002798 <HAL_RCC_GetSysClockFreq+0x180>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d028      	beq.n	80026c0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800266e:	4b4a      	ldr	r3, [pc, #296]	@ (8002798 <HAL_RCC_GetSysClockFreq+0x180>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	099b      	lsrs	r3, r3, #6
 8002674:	2200      	movs	r2, #0
 8002676:	623b      	str	r3, [r7, #32]
 8002678:	627a      	str	r2, [r7, #36]	@ 0x24
 800267a:	6a3b      	ldr	r3, [r7, #32]
 800267c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002680:	2100      	movs	r1, #0
 8002682:	4b47      	ldr	r3, [pc, #284]	@ (80027a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002684:	fb03 f201 	mul.w	r2, r3, r1
 8002688:	2300      	movs	r3, #0
 800268a:	fb00 f303 	mul.w	r3, r0, r3
 800268e:	4413      	add	r3, r2
 8002690:	4a43      	ldr	r2, [pc, #268]	@ (80027a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002692:	fba0 1202 	umull	r1, r2, r0, r2
 8002696:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002698:	460a      	mov	r2, r1
 800269a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800269c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800269e:	4413      	add	r3, r2
 80026a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026a4:	2200      	movs	r2, #0
 80026a6:	61bb      	str	r3, [r7, #24]
 80026a8:	61fa      	str	r2, [r7, #28]
 80026aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80026b2:	f7fd fde5 	bl	8000280 <__aeabi_uldivmod>
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	4613      	mov	r3, r2
 80026bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026be:	e053      	b.n	8002768 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026c0:	4b35      	ldr	r3, [pc, #212]	@ (8002798 <HAL_RCC_GetSysClockFreq+0x180>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	099b      	lsrs	r3, r3, #6
 80026c6:	2200      	movs	r2, #0
 80026c8:	613b      	str	r3, [r7, #16]
 80026ca:	617a      	str	r2, [r7, #20]
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80026d2:	f04f 0b00 	mov.w	fp, #0
 80026d6:	4652      	mov	r2, sl
 80026d8:	465b      	mov	r3, fp
 80026da:	f04f 0000 	mov.w	r0, #0
 80026de:	f04f 0100 	mov.w	r1, #0
 80026e2:	0159      	lsls	r1, r3, #5
 80026e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026e8:	0150      	lsls	r0, r2, #5
 80026ea:	4602      	mov	r2, r0
 80026ec:	460b      	mov	r3, r1
 80026ee:	ebb2 080a 	subs.w	r8, r2, sl
 80026f2:	eb63 090b 	sbc.w	r9, r3, fp
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	f04f 0300 	mov.w	r3, #0
 80026fe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002702:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002706:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800270a:	ebb2 0408 	subs.w	r4, r2, r8
 800270e:	eb63 0509 	sbc.w	r5, r3, r9
 8002712:	f04f 0200 	mov.w	r2, #0
 8002716:	f04f 0300 	mov.w	r3, #0
 800271a:	00eb      	lsls	r3, r5, #3
 800271c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002720:	00e2      	lsls	r2, r4, #3
 8002722:	4614      	mov	r4, r2
 8002724:	461d      	mov	r5, r3
 8002726:	eb14 030a 	adds.w	r3, r4, sl
 800272a:	603b      	str	r3, [r7, #0]
 800272c:	eb45 030b 	adc.w	r3, r5, fp
 8002730:	607b      	str	r3, [r7, #4]
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	f04f 0300 	mov.w	r3, #0
 800273a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800273e:	4629      	mov	r1, r5
 8002740:	028b      	lsls	r3, r1, #10
 8002742:	4621      	mov	r1, r4
 8002744:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002748:	4621      	mov	r1, r4
 800274a:	028a      	lsls	r2, r1, #10
 800274c:	4610      	mov	r0, r2
 800274e:	4619      	mov	r1, r3
 8002750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002752:	2200      	movs	r2, #0
 8002754:	60bb      	str	r3, [r7, #8]
 8002756:	60fa      	str	r2, [r7, #12]
 8002758:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800275c:	f7fd fd90 	bl	8000280 <__aeabi_uldivmod>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4613      	mov	r3, r2
 8002766:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002768:	4b0b      	ldr	r3, [pc, #44]	@ (8002798 <HAL_RCC_GetSysClockFreq+0x180>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	0c1b      	lsrs	r3, r3, #16
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	3301      	adds	r3, #1
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002778:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800277a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800277c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002780:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002782:	e002      	b.n	800278a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002784:	4b05      	ldr	r3, [pc, #20]	@ (800279c <HAL_RCC_GetSysClockFreq+0x184>)
 8002786:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002788:	bf00      	nop
    }
  }
  return sysclockfreq;
 800278a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800278c:	4618      	mov	r0, r3
 800278e:	3740      	adds	r7, #64	@ 0x40
 8002790:	46bd      	mov	sp, r7
 8002792:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002796:	bf00      	nop
 8002798:	40023800 	.word	0x40023800
 800279c:	00f42400 	.word	0x00f42400
 80027a0:	017d7840 	.word	0x017d7840

080027a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027a8:	4b03      	ldr	r3, [pc, #12]	@ (80027b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80027aa:	681b      	ldr	r3, [r3, #0]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	20000000 	.word	0x20000000

080027bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027c0:	f7ff fff0 	bl	80027a4 <HAL_RCC_GetHCLKFreq>
 80027c4:	4602      	mov	r2, r0
 80027c6:	4b05      	ldr	r3, [pc, #20]	@ (80027dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	0a9b      	lsrs	r3, r3, #10
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	4903      	ldr	r1, [pc, #12]	@ (80027e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027d2:	5ccb      	ldrb	r3, [r1, r3]
 80027d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027d8:	4618      	mov	r0, r3
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40023800 	.word	0x40023800
 80027e0:	080054f4 	.word	0x080054f4

080027e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027e8:	f7ff ffdc 	bl	80027a4 <HAL_RCC_GetHCLKFreq>
 80027ec:	4602      	mov	r2, r0
 80027ee:	4b05      	ldr	r3, [pc, #20]	@ (8002804 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	0b5b      	lsrs	r3, r3, #13
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	4903      	ldr	r1, [pc, #12]	@ (8002808 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027fa:	5ccb      	ldrb	r3, [r1, r3]
 80027fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002800:	4618      	mov	r0, r3
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40023800 	.word	0x40023800
 8002808:	080054f4 	.word	0x080054f4

0800280c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e041      	b.n	80028a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d106      	bne.n	8002838 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7fe fdb6 	bl	80013a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2202      	movs	r2, #2
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3304      	adds	r3, #4
 8002848:	4619      	mov	r1, r3
 800284a:	4610      	mov	r0, r2
 800284c:	f001 f868 	bl	8003920 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e041      	b.n	8002940 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d106      	bne.n	80028d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 f839 	bl	8002948 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2202      	movs	r2, #2
 80028da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	3304      	adds	r3, #4
 80028e6:	4619      	mov	r1, r3
 80028e8:	4610      	mov	r0, r2
 80028ea:	f001 f819 	bl	8003920 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d109      	bne.n	8002980 <HAL_TIM_PWM_Start+0x24>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b01      	cmp	r3, #1
 8002976:	bf14      	ite	ne
 8002978:	2301      	movne	r3, #1
 800297a:	2300      	moveq	r3, #0
 800297c:	b2db      	uxtb	r3, r3
 800297e:	e022      	b.n	80029c6 <HAL_TIM_PWM_Start+0x6a>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	2b04      	cmp	r3, #4
 8002984:	d109      	bne.n	800299a <HAL_TIM_PWM_Start+0x3e>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b01      	cmp	r3, #1
 8002990:	bf14      	ite	ne
 8002992:	2301      	movne	r3, #1
 8002994:	2300      	moveq	r3, #0
 8002996:	b2db      	uxtb	r3, r3
 8002998:	e015      	b.n	80029c6 <HAL_TIM_PWM_Start+0x6a>
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	2b08      	cmp	r3, #8
 800299e:	d109      	bne.n	80029b4 <HAL_TIM_PWM_Start+0x58>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	bf14      	ite	ne
 80029ac:	2301      	movne	r3, #1
 80029ae:	2300      	moveq	r3, #0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	e008      	b.n	80029c6 <HAL_TIM_PWM_Start+0x6a>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b01      	cmp	r3, #1
 80029be:	bf14      	ite	ne
 80029c0:	2301      	movne	r3, #1
 80029c2:	2300      	moveq	r3, #0
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e068      	b.n	8002aa0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d104      	bne.n	80029de <HAL_TIM_PWM_Start+0x82>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2202      	movs	r2, #2
 80029d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029dc:	e013      	b.n	8002a06 <HAL_TIM_PWM_Start+0xaa>
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	2b04      	cmp	r3, #4
 80029e2:	d104      	bne.n	80029ee <HAL_TIM_PWM_Start+0x92>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2202      	movs	r2, #2
 80029e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029ec:	e00b      	b.n	8002a06 <HAL_TIM_PWM_Start+0xaa>
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	d104      	bne.n	80029fe <HAL_TIM_PWM_Start+0xa2>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2202      	movs	r2, #2
 80029f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029fc:	e003      	b.n	8002a06 <HAL_TIM_PWM_Start+0xaa>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2202      	movs	r2, #2
 8002a02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	6839      	ldr	r1, [r7, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f001 fb56 	bl	80040c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a23      	ldr	r2, [pc, #140]	@ (8002aa8 <HAL_TIM_PWM_Start+0x14c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d107      	bne.n	8002a2e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a2c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a1d      	ldr	r2, [pc, #116]	@ (8002aa8 <HAL_TIM_PWM_Start+0x14c>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d018      	beq.n	8002a6a <HAL_TIM_PWM_Start+0x10e>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a40:	d013      	beq.n	8002a6a <HAL_TIM_PWM_Start+0x10e>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a19      	ldr	r2, [pc, #100]	@ (8002aac <HAL_TIM_PWM_Start+0x150>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d00e      	beq.n	8002a6a <HAL_TIM_PWM_Start+0x10e>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a17      	ldr	r2, [pc, #92]	@ (8002ab0 <HAL_TIM_PWM_Start+0x154>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d009      	beq.n	8002a6a <HAL_TIM_PWM_Start+0x10e>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a16      	ldr	r2, [pc, #88]	@ (8002ab4 <HAL_TIM_PWM_Start+0x158>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d004      	beq.n	8002a6a <HAL_TIM_PWM_Start+0x10e>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a14      	ldr	r2, [pc, #80]	@ (8002ab8 <HAL_TIM_PWM_Start+0x15c>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d111      	bne.n	8002a8e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2b06      	cmp	r3, #6
 8002a7a:	d010      	beq.n	8002a9e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f042 0201 	orr.w	r2, r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a8c:	e007      	b.n	8002a9e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f042 0201 	orr.w	r2, r2, #1
 8002a9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40010000 	.word	0x40010000
 8002aac:	40000400 	.word	0x40000400
 8002ab0:	40000800 	.word	0x40000800
 8002ab4:	40000c00 	.word	0x40000c00
 8002ab8:	40014000 	.word	0x40014000

08002abc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2200      	movs	r2, #0
 8002acc:	6839      	ldr	r1, [r7, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f001 faf6 	bl	80040c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a29      	ldr	r2, [pc, #164]	@ (8002b80 <HAL_TIM_PWM_Stop+0xc4>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d117      	bne.n	8002b0e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6a1a      	ldr	r2, [r3, #32]
 8002ae4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002ae8:	4013      	ands	r3, r2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10f      	bne.n	8002b0e <HAL_TIM_PWM_Stop+0x52>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6a1a      	ldr	r2, [r3, #32]
 8002af4:	f240 4344 	movw	r3, #1092	@ 0x444
 8002af8:	4013      	ands	r3, r2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d107      	bne.n	8002b0e <HAL_TIM_PWM_Stop+0x52>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b0c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6a1a      	ldr	r2, [r3, #32]
 8002b14:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002b18:	4013      	ands	r3, r2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10f      	bne.n	8002b3e <HAL_TIM_PWM_Stop+0x82>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6a1a      	ldr	r2, [r3, #32]
 8002b24:	f240 4344 	movw	r3, #1092	@ 0x444
 8002b28:	4013      	ands	r3, r2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d107      	bne.n	8002b3e <HAL_TIM_PWM_Stop+0x82>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0201 	bic.w	r2, r2, #1
 8002b3c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d104      	bne.n	8002b4e <HAL_TIM_PWM_Stop+0x92>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b4c:	e013      	b.n	8002b76 <HAL_TIM_PWM_Stop+0xba>
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	2b04      	cmp	r3, #4
 8002b52:	d104      	bne.n	8002b5e <HAL_TIM_PWM_Stop+0xa2>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b5c:	e00b      	b.n	8002b76 <HAL_TIM_PWM_Stop+0xba>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d104      	bne.n	8002b6e <HAL_TIM_PWM_Stop+0xb2>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b6c:	e003      	b.n	8002b76 <HAL_TIM_PWM_Stop+0xba>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40010000 	.word	0x40010000

08002b84 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e041      	b.n	8002c1a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d106      	bne.n	8002bb0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f839 	bl	8002c22 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3304      	adds	r3, #4
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	4610      	mov	r0, r2
 8002bc4:	f000 feac 	bl	8003920 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
	...

08002c38 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c42:	2300      	movs	r3, #0
 8002c44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d104      	bne.n	8002c56 <HAL_TIM_IC_Start_IT+0x1e>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	e013      	b.n	8002c7e <HAL_TIM_IC_Start_IT+0x46>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	2b04      	cmp	r3, #4
 8002c5a:	d104      	bne.n	8002c66 <HAL_TIM_IC_Start_IT+0x2e>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	e00b      	b.n	8002c7e <HAL_TIM_IC_Start_IT+0x46>
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	2b08      	cmp	r3, #8
 8002c6a:	d104      	bne.n	8002c76 <HAL_TIM_IC_Start_IT+0x3e>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	e003      	b.n	8002c7e <HAL_TIM_IC_Start_IT+0x46>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d104      	bne.n	8002c90 <HAL_TIM_IC_Start_IT+0x58>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	e013      	b.n	8002cb8 <HAL_TIM_IC_Start_IT+0x80>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	d104      	bne.n	8002ca0 <HAL_TIM_IC_Start_IT+0x68>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	e00b      	b.n	8002cb8 <HAL_TIM_IC_Start_IT+0x80>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	2b08      	cmp	r3, #8
 8002ca4:	d104      	bne.n	8002cb0 <HAL_TIM_IC_Start_IT+0x78>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	e003      	b.n	8002cb8 <HAL_TIM_IC_Start_IT+0x80>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002cba:	7bbb      	ldrb	r3, [r7, #14]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d102      	bne.n	8002cc6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002cc0:	7b7b      	ldrb	r3, [r7, #13]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d001      	beq.n	8002cca <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e0c2      	b.n	8002e50 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d104      	bne.n	8002cda <HAL_TIM_IC_Start_IT+0xa2>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cd8:	e013      	b.n	8002d02 <HAL_TIM_IC_Start_IT+0xca>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2b04      	cmp	r3, #4
 8002cde:	d104      	bne.n	8002cea <HAL_TIM_IC_Start_IT+0xb2>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ce8:	e00b      	b.n	8002d02 <HAL_TIM_IC_Start_IT+0xca>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d104      	bne.n	8002cfa <HAL_TIM_IC_Start_IT+0xc2>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cf8:	e003      	b.n	8002d02 <HAL_TIM_IC_Start_IT+0xca>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d104      	bne.n	8002d12 <HAL_TIM_IC_Start_IT+0xda>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d10:	e013      	b.n	8002d3a <HAL_TIM_IC_Start_IT+0x102>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d104      	bne.n	8002d22 <HAL_TIM_IC_Start_IT+0xea>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d20:	e00b      	b.n	8002d3a <HAL_TIM_IC_Start_IT+0x102>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d104      	bne.n	8002d32 <HAL_TIM_IC_Start_IT+0xfa>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d30:	e003      	b.n	8002d3a <HAL_TIM_IC_Start_IT+0x102>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2202      	movs	r2, #2
 8002d36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	2b0c      	cmp	r3, #12
 8002d3e:	d841      	bhi.n	8002dc4 <HAL_TIM_IC_Start_IT+0x18c>
 8002d40:	a201      	add	r2, pc, #4	@ (adr r2, 8002d48 <HAL_TIM_IC_Start_IT+0x110>)
 8002d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d46:	bf00      	nop
 8002d48:	08002d7d 	.word	0x08002d7d
 8002d4c:	08002dc5 	.word	0x08002dc5
 8002d50:	08002dc5 	.word	0x08002dc5
 8002d54:	08002dc5 	.word	0x08002dc5
 8002d58:	08002d8f 	.word	0x08002d8f
 8002d5c:	08002dc5 	.word	0x08002dc5
 8002d60:	08002dc5 	.word	0x08002dc5
 8002d64:	08002dc5 	.word	0x08002dc5
 8002d68:	08002da1 	.word	0x08002da1
 8002d6c:	08002dc5 	.word	0x08002dc5
 8002d70:	08002dc5 	.word	0x08002dc5
 8002d74:	08002dc5 	.word	0x08002dc5
 8002d78:	08002db3 	.word	0x08002db3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68da      	ldr	r2, [r3, #12]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f042 0202 	orr.w	r2, r2, #2
 8002d8a:	60da      	str	r2, [r3, #12]
      break;
 8002d8c:	e01d      	b.n	8002dca <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f042 0204 	orr.w	r2, r2, #4
 8002d9c:	60da      	str	r2, [r3, #12]
      break;
 8002d9e:	e014      	b.n	8002dca <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68da      	ldr	r2, [r3, #12]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f042 0208 	orr.w	r2, r2, #8
 8002dae:	60da      	str	r2, [r3, #12]
      break;
 8002db0:	e00b      	b.n	8002dca <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68da      	ldr	r2, [r3, #12]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f042 0210 	orr.w	r2, r2, #16
 8002dc0:	60da      	str	r2, [r3, #12]
      break;
 8002dc2:	e002      	b.n	8002dca <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8002dc8:	bf00      	nop
  }

  if (status == HAL_OK)
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d13e      	bne.n	8002e4e <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	6839      	ldr	r1, [r7, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f001 f971 	bl	80040c0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a1d      	ldr	r2, [pc, #116]	@ (8002e58 <HAL_TIM_IC_Start_IT+0x220>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d018      	beq.n	8002e1a <HAL_TIM_IC_Start_IT+0x1e2>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002df0:	d013      	beq.n	8002e1a <HAL_TIM_IC_Start_IT+0x1e2>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a19      	ldr	r2, [pc, #100]	@ (8002e5c <HAL_TIM_IC_Start_IT+0x224>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d00e      	beq.n	8002e1a <HAL_TIM_IC_Start_IT+0x1e2>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a17      	ldr	r2, [pc, #92]	@ (8002e60 <HAL_TIM_IC_Start_IT+0x228>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d009      	beq.n	8002e1a <HAL_TIM_IC_Start_IT+0x1e2>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a16      	ldr	r2, [pc, #88]	@ (8002e64 <HAL_TIM_IC_Start_IT+0x22c>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d004      	beq.n	8002e1a <HAL_TIM_IC_Start_IT+0x1e2>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a14      	ldr	r2, [pc, #80]	@ (8002e68 <HAL_TIM_IC_Start_IT+0x230>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d111      	bne.n	8002e3e <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	2b06      	cmp	r3, #6
 8002e2a:	d010      	beq.n	8002e4e <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0201 	orr.w	r2, r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e3c:	e007      	b.n	8002e4e <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f042 0201 	orr.w	r2, r2, #1
 8002e4c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3710      	adds	r7, #16
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40010000 	.word	0x40010000
 8002e5c:	40000400 	.word	0x40000400
 8002e60:	40000800 	.word	0x40000800
 8002e64:	40000c00 	.word	0x40000c00
 8002e68:	40014000 	.word	0x40014000

08002e6c <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e76:	2300      	movs	r3, #0
 8002e78:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	2b0c      	cmp	r3, #12
 8002e7e:	d841      	bhi.n	8002f04 <HAL_TIM_IC_Stop_IT+0x98>
 8002e80:	a201      	add	r2, pc, #4	@ (adr r2, 8002e88 <HAL_TIM_IC_Stop_IT+0x1c>)
 8002e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e86:	bf00      	nop
 8002e88:	08002ebd 	.word	0x08002ebd
 8002e8c:	08002f05 	.word	0x08002f05
 8002e90:	08002f05 	.word	0x08002f05
 8002e94:	08002f05 	.word	0x08002f05
 8002e98:	08002ecf 	.word	0x08002ecf
 8002e9c:	08002f05 	.word	0x08002f05
 8002ea0:	08002f05 	.word	0x08002f05
 8002ea4:	08002f05 	.word	0x08002f05
 8002ea8:	08002ee1 	.word	0x08002ee1
 8002eac:	08002f05 	.word	0x08002f05
 8002eb0:	08002f05 	.word	0x08002f05
 8002eb4:	08002f05 	.word	0x08002f05
 8002eb8:	08002ef3 	.word	0x08002ef3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0202 	bic.w	r2, r2, #2
 8002eca:	60da      	str	r2, [r3, #12]
      break;
 8002ecc:	e01d      	b.n	8002f0a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0204 	bic.w	r2, r2, #4
 8002edc:	60da      	str	r2, [r3, #12]
      break;
 8002ede:	e014      	b.n	8002f0a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68da      	ldr	r2, [r3, #12]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 0208 	bic.w	r2, r2, #8
 8002eee:	60da      	str	r2, [r3, #12]
      break;
 8002ef0:	e00b      	b.n	8002f0a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 0210 	bic.w	r2, r2, #16
 8002f00:	60da      	str	r2, [r3, #12]
      break;
 8002f02:	e002      	b.n	8002f0a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	73fb      	strb	r3, [r7, #15]
      break;
 8002f08:	bf00      	nop
  }

  if (status == HAL_OK)
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d156      	bne.n	8002fbe <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2200      	movs	r2, #0
 8002f16:	6839      	ldr	r1, [r7, #0]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f001 f8d1 	bl	80040c0 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6a1a      	ldr	r2, [r3, #32]
 8002f24:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10f      	bne.n	8002f4e <HAL_TIM_IC_Stop_IT+0xe2>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6a1a      	ldr	r2, [r3, #32]
 8002f34:	f240 4344 	movw	r3, #1092	@ 0x444
 8002f38:	4013      	ands	r3, r2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d107      	bne.n	8002f4e <HAL_TIM_IC_Stop_IT+0xe2>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 0201 	bic.w	r2, r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d104      	bne.n	8002f5e <HAL_TIM_IC_Stop_IT+0xf2>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f5c:	e013      	b.n	8002f86 <HAL_TIM_IC_Stop_IT+0x11a>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	2b04      	cmp	r3, #4
 8002f62:	d104      	bne.n	8002f6e <HAL_TIM_IC_Stop_IT+0x102>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f6c:	e00b      	b.n	8002f86 <HAL_TIM_IC_Stop_IT+0x11a>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d104      	bne.n	8002f7e <HAL_TIM_IC_Stop_IT+0x112>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f7c:	e003      	b.n	8002f86 <HAL_TIM_IC_Stop_IT+0x11a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d104      	bne.n	8002f96 <HAL_TIM_IC_Stop_IT+0x12a>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f94:	e013      	b.n	8002fbe <HAL_TIM_IC_Stop_IT+0x152>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	d104      	bne.n	8002fa6 <HAL_TIM_IC_Stop_IT+0x13a>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002fa4:	e00b      	b.n	8002fbe <HAL_TIM_IC_Stop_IT+0x152>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d104      	bne.n	8002fb6 <HAL_TIM_IC_Stop_IT+0x14a>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fb4:	e003      	b.n	8002fbe <HAL_TIM_IC_Stop_IT+0x152>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 8002fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e097      	b.n	800310c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d106      	bne.n	8002ff6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7fe fa53 	bl	800149c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2202      	movs	r2, #2
 8002ffa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	6812      	ldr	r2, [r2, #0]
 8003008:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800300c:	f023 0307 	bic.w	r3, r3, #7
 8003010:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	3304      	adds	r3, #4
 800301a:	4619      	mov	r1, r3
 800301c:	4610      	mov	r0, r2
 800301e:	f000 fc7f 	bl	8003920 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	4313      	orrs	r3, r2
 8003042:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800304a:	f023 0303 	bic.w	r3, r3, #3
 800304e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	021b      	lsls	r3, r3, #8
 800305a:	4313      	orrs	r3, r2
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	4313      	orrs	r3, r2
 8003060:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003068:	f023 030c 	bic.w	r3, r3, #12
 800306c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003074:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003078:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	68da      	ldr	r2, [r3, #12]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	021b      	lsls	r3, r3, #8
 8003084:	4313      	orrs	r3, r2
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	4313      	orrs	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	011a      	lsls	r2, r3, #4
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	031b      	lsls	r3, r3, #12
 8003098:	4313      	orrs	r3, r2
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	4313      	orrs	r3, r2
 800309e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80030a6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80030ae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	011b      	lsls	r3, r3, #4
 80030ba:	4313      	orrs	r3, r2
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	4313      	orrs	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003124:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800312c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003134:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800313c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d110      	bne.n	8003166 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003144:	7bfb      	ldrb	r3, [r7, #15]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d102      	bne.n	8003150 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800314a:	7b7b      	ldrb	r3, [r7, #13]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d001      	beq.n	8003154 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e069      	b.n	8003228 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2202      	movs	r2, #2
 8003158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2202      	movs	r2, #2
 8003160:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003164:	e031      	b.n	80031ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	2b04      	cmp	r3, #4
 800316a:	d110      	bne.n	800318e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800316c:	7bbb      	ldrb	r3, [r7, #14]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d102      	bne.n	8003178 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003172:	7b3b      	ldrb	r3, [r7, #12]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d001      	beq.n	800317c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e055      	b.n	8003228 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2202      	movs	r2, #2
 8003180:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2202      	movs	r2, #2
 8003188:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800318c:	e01d      	b.n	80031ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800318e:	7bfb      	ldrb	r3, [r7, #15]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d108      	bne.n	80031a6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003194:	7bbb      	ldrb	r3, [r7, #14]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d105      	bne.n	80031a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800319a:	7b7b      	ldrb	r3, [r7, #13]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d102      	bne.n	80031a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80031a0:	7b3b      	ldrb	r3, [r7, #12]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d001      	beq.n	80031aa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e03e      	b.n	8003228 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2202      	movs	r2, #2
 80031ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2202      	movs	r2, #2
 80031b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2202      	movs	r2, #2
 80031be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2202      	movs	r2, #2
 80031c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <HAL_TIM_Encoder_Start+0xc4>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d008      	beq.n	80031e8 <HAL_TIM_Encoder_Start+0xd4>
 80031d6:	e00f      	b.n	80031f8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2201      	movs	r2, #1
 80031de:	2100      	movs	r1, #0
 80031e0:	4618      	mov	r0, r3
 80031e2:	f000 ff6d 	bl	80040c0 <TIM_CCxChannelCmd>
      break;
 80031e6:	e016      	b.n	8003216 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2201      	movs	r2, #1
 80031ee:	2104      	movs	r1, #4
 80031f0:	4618      	mov	r0, r3
 80031f2:	f000 ff65 	bl	80040c0 <TIM_CCxChannelCmd>
      break;
 80031f6:	e00e      	b.n	8003216 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2201      	movs	r2, #1
 80031fe:	2100      	movs	r1, #0
 8003200:	4618      	mov	r0, r3
 8003202:	f000 ff5d 	bl	80040c0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2201      	movs	r2, #1
 800320c:	2104      	movs	r1, #4
 800320e:	4618      	mov	r0, r3
 8003210:	f000 ff56 	bl	80040c0 <TIM_CCxChannelCmd>
      break;
 8003214:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f042 0201 	orr.w	r2, r2, #1
 8003224:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d020      	beq.n	8003294 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d01b      	beq.n	8003294 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f06f 0202 	mvn.w	r2, #2
 8003264:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	f003 0303 	and.w	r3, r3, #3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7fd fc7e 	bl	8000b7c <HAL_TIM_IC_CaptureCallback>
 8003280:	e005      	b.n	800328e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 fb2e 	bl	80038e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f000 fb35 	bl	80038f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	f003 0304 	and.w	r3, r3, #4
 800329a:	2b00      	cmp	r3, #0
 800329c:	d020      	beq.n	80032e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d01b      	beq.n	80032e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f06f 0204 	mvn.w	r2, #4
 80032b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2202      	movs	r2, #2
 80032b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7fd fc58 	bl	8000b7c <HAL_TIM_IC_CaptureCallback>
 80032cc:	e005      	b.n	80032da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 fb08 	bl	80038e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 fb0f 	bl	80038f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	f003 0308 	and.w	r3, r3, #8
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d020      	beq.n	800332c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f003 0308 	and.w	r3, r3, #8
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d01b      	beq.n	800332c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f06f 0208 	mvn.w	r2, #8
 80032fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2204      	movs	r2, #4
 8003302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	f003 0303 	and.w	r3, r3, #3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7fd fc32 	bl	8000b7c <HAL_TIM_IC_CaptureCallback>
 8003318:	e005      	b.n	8003326 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 fae2 	bl	80038e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 fae9 	bl	80038f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	f003 0310 	and.w	r3, r3, #16
 8003332:	2b00      	cmp	r3, #0
 8003334:	d020      	beq.n	8003378 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f003 0310 	and.w	r3, r3, #16
 800333c:	2b00      	cmp	r3, #0
 800333e:	d01b      	beq.n	8003378 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f06f 0210 	mvn.w	r2, #16
 8003348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2208      	movs	r2, #8
 800334e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7fd fc0c 	bl	8000b7c <HAL_TIM_IC_CaptureCallback>
 8003364:	e005      	b.n	8003372 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 fabc 	bl	80038e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 fac3 	bl	80038f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00c      	beq.n	800339c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b00      	cmp	r3, #0
 800338a:	d007      	beq.n	800339c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f06f 0201 	mvn.w	r2, #1
 8003394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7fd fc32 	bl	8000c00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00c      	beq.n	80033c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d007      	beq.n	80033c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80033b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 ff1e 	bl	80041fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00c      	beq.n	80033e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d007      	beq.n	80033e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80033dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 fa94 	bl	800390c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	f003 0320 	and.w	r3, r3, #32
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00c      	beq.n	8003408 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f003 0320 	and.w	r3, r3, #32
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d007      	beq.n	8003408 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f06f 0220 	mvn.w	r2, #32
 8003400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 fef0 	bl	80041e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003408:	bf00      	nop
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800341c:	2300      	movs	r3, #0
 800341e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <HAL_TIM_IC_ConfigChannel+0x1e>
 800342a:	2302      	movs	r3, #2
 800342c:	e088      	b.n	8003540 <HAL_TIM_IC_ConfigChannel+0x130>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d11b      	bne.n	8003474 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800344c:	f000 fc80 	bl	8003d50 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	699a      	ldr	r2, [r3, #24]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 020c 	bic.w	r2, r2, #12
 800345e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6999      	ldr	r1, [r3, #24]
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	689a      	ldr	r2, [r3, #8]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	619a      	str	r2, [r3, #24]
 8003472:	e060      	b.n	8003536 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b04      	cmp	r3, #4
 8003478:	d11c      	bne.n	80034b4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800348a:	f000 fcf8 	bl	8003e7e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	699a      	ldr	r2, [r3, #24]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800349c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6999      	ldr	r1, [r3, #24]
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	021a      	lsls	r2, r3, #8
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	619a      	str	r2, [r3, #24]
 80034b2:	e040      	b.n	8003536 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b08      	cmp	r3, #8
 80034b8:	d11b      	bne.n	80034f2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80034ca:	f000 fd45 	bl	8003f58 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	69da      	ldr	r2, [r3, #28]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 020c 	bic.w	r2, r2, #12
 80034dc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	69d9      	ldr	r1, [r3, #28]
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	61da      	str	r2, [r3, #28]
 80034f0:	e021      	b.n	8003536 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b0c      	cmp	r3, #12
 80034f6:	d11c      	bne.n	8003532 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003508:	f000 fd62 	bl	8003fd0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	69da      	ldr	r2, [r3, #28]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800351a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	69d9      	ldr	r1, [r3, #28]
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	021a      	lsls	r2, r3, #8
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	61da      	str	r2, [r3, #28]
 8003530:	e001      	b.n	8003536 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800353e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003540:	4618      	mov	r0, r3
 8003542:	3718      	adds	r7, #24
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003554:	2300      	movs	r3, #0
 8003556:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800355e:	2b01      	cmp	r3, #1
 8003560:	d101      	bne.n	8003566 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003562:	2302      	movs	r3, #2
 8003564:	e0ae      	b.n	80036c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b0c      	cmp	r3, #12
 8003572:	f200 809f 	bhi.w	80036b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003576:	a201      	add	r2, pc, #4	@ (adr r2, 800357c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357c:	080035b1 	.word	0x080035b1
 8003580:	080036b5 	.word	0x080036b5
 8003584:	080036b5 	.word	0x080036b5
 8003588:	080036b5 	.word	0x080036b5
 800358c:	080035f1 	.word	0x080035f1
 8003590:	080036b5 	.word	0x080036b5
 8003594:	080036b5 	.word	0x080036b5
 8003598:	080036b5 	.word	0x080036b5
 800359c:	08003633 	.word	0x08003633
 80035a0:	080036b5 	.word	0x080036b5
 80035a4:	080036b5 	.word	0x080036b5
 80035a8:	080036b5 	.word	0x080036b5
 80035ac:	08003673 	.word	0x08003673
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68b9      	ldr	r1, [r7, #8]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 fa3e 	bl	8003a38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699a      	ldr	r2, [r3, #24]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0208 	orr.w	r2, r2, #8
 80035ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	699a      	ldr	r2, [r3, #24]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 0204 	bic.w	r2, r2, #4
 80035da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6999      	ldr	r1, [r3, #24]
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	691a      	ldr	r2, [r3, #16]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	619a      	str	r2, [r3, #24]
      break;
 80035ee:	e064      	b.n	80036ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68b9      	ldr	r1, [r7, #8]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 fa84 	bl	8003b04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	699a      	ldr	r2, [r3, #24]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800360a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	699a      	ldr	r2, [r3, #24]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800361a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6999      	ldr	r1, [r3, #24]
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	021a      	lsls	r2, r3, #8
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	619a      	str	r2, [r3, #24]
      break;
 8003630:	e043      	b.n	80036ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68b9      	ldr	r1, [r7, #8]
 8003638:	4618      	mov	r0, r3
 800363a:	f000 facf 	bl	8003bdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	69da      	ldr	r2, [r3, #28]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f042 0208 	orr.w	r2, r2, #8
 800364c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	69da      	ldr	r2, [r3, #28]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 0204 	bic.w	r2, r2, #4
 800365c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	69d9      	ldr	r1, [r3, #28]
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	691a      	ldr	r2, [r3, #16]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	61da      	str	r2, [r3, #28]
      break;
 8003670:	e023      	b.n	80036ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68b9      	ldr	r1, [r7, #8]
 8003678:	4618      	mov	r0, r3
 800367a:	f000 fb19 	bl	8003cb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	69da      	ldr	r2, [r3, #28]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800368c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	69da      	ldr	r2, [r3, #28]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800369c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	69d9      	ldr	r1, [r3, #28]
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	021a      	lsls	r2, r3, #8
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	61da      	str	r2, [r3, #28]
      break;
 80036b2:	e002      	b.n	80036ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	75fb      	strb	r3, [r7, #23]
      break;
 80036b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80036c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3718      	adds	r7, #24
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036d6:	2300      	movs	r3, #0
 80036d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d101      	bne.n	80036e8 <HAL_TIM_ConfigClockSource+0x1c>
 80036e4:	2302      	movs	r3, #2
 80036e6:	e0b4      	b.n	8003852 <HAL_TIM_ConfigClockSource+0x186>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003706:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800370e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003720:	d03e      	beq.n	80037a0 <HAL_TIM_ConfigClockSource+0xd4>
 8003722:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003726:	f200 8087 	bhi.w	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 800372a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800372e:	f000 8086 	beq.w	800383e <HAL_TIM_ConfigClockSource+0x172>
 8003732:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003736:	d87f      	bhi.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 8003738:	2b70      	cmp	r3, #112	@ 0x70
 800373a:	d01a      	beq.n	8003772 <HAL_TIM_ConfigClockSource+0xa6>
 800373c:	2b70      	cmp	r3, #112	@ 0x70
 800373e:	d87b      	bhi.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 8003740:	2b60      	cmp	r3, #96	@ 0x60
 8003742:	d050      	beq.n	80037e6 <HAL_TIM_ConfigClockSource+0x11a>
 8003744:	2b60      	cmp	r3, #96	@ 0x60
 8003746:	d877      	bhi.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 8003748:	2b50      	cmp	r3, #80	@ 0x50
 800374a:	d03c      	beq.n	80037c6 <HAL_TIM_ConfigClockSource+0xfa>
 800374c:	2b50      	cmp	r3, #80	@ 0x50
 800374e:	d873      	bhi.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 8003750:	2b40      	cmp	r3, #64	@ 0x40
 8003752:	d058      	beq.n	8003806 <HAL_TIM_ConfigClockSource+0x13a>
 8003754:	2b40      	cmp	r3, #64	@ 0x40
 8003756:	d86f      	bhi.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 8003758:	2b30      	cmp	r3, #48	@ 0x30
 800375a:	d064      	beq.n	8003826 <HAL_TIM_ConfigClockSource+0x15a>
 800375c:	2b30      	cmp	r3, #48	@ 0x30
 800375e:	d86b      	bhi.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 8003760:	2b20      	cmp	r3, #32
 8003762:	d060      	beq.n	8003826 <HAL_TIM_ConfigClockSource+0x15a>
 8003764:	2b20      	cmp	r3, #32
 8003766:	d867      	bhi.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
 8003768:	2b00      	cmp	r3, #0
 800376a:	d05c      	beq.n	8003826 <HAL_TIM_ConfigClockSource+0x15a>
 800376c:	2b10      	cmp	r3, #16
 800376e:	d05a      	beq.n	8003826 <HAL_TIM_ConfigClockSource+0x15a>
 8003770:	e062      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003782:	f000 fc7d 	bl	8004080 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003794:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	609a      	str	r2, [r3, #8]
      break;
 800379e:	e04f      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037b0:	f000 fc66 	bl	8004080 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037c2:	609a      	str	r2, [r3, #8]
      break;
 80037c4:	e03c      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037d2:	461a      	mov	r2, r3
 80037d4:	f000 fb24 	bl	8003e20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2150      	movs	r1, #80	@ 0x50
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 fc33 	bl	800404a <TIM_ITRx_SetConfig>
      break;
 80037e4:	e02c      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037f2:	461a      	mov	r2, r3
 80037f4:	f000 fb80 	bl	8003ef8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2160      	movs	r1, #96	@ 0x60
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 fc23 	bl	800404a <TIM_ITRx_SetConfig>
      break;
 8003804:	e01c      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003812:	461a      	mov	r2, r3
 8003814:	f000 fb04 	bl	8003e20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2140      	movs	r1, #64	@ 0x40
 800381e:	4618      	mov	r0, r3
 8003820:	f000 fc13 	bl	800404a <TIM_ITRx_SetConfig>
      break;
 8003824:	e00c      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4619      	mov	r1, r3
 8003830:	4610      	mov	r0, r2
 8003832:	f000 fc0a 	bl	800404a <TIM_ITRx_SetConfig>
      break;
 8003836:	e003      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	73fb      	strb	r3, [r7, #15]
      break;
 800383c:	e000      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800383e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003850:	7bfb      	ldrb	r3, [r7, #15]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
	...

0800385c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003866:	2300      	movs	r3, #0
 8003868:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b0c      	cmp	r3, #12
 800386e:	d831      	bhi.n	80038d4 <HAL_TIM_ReadCapturedValue+0x78>
 8003870:	a201      	add	r2, pc, #4	@ (adr r2, 8003878 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003876:	bf00      	nop
 8003878:	080038ad 	.word	0x080038ad
 800387c:	080038d5 	.word	0x080038d5
 8003880:	080038d5 	.word	0x080038d5
 8003884:	080038d5 	.word	0x080038d5
 8003888:	080038b7 	.word	0x080038b7
 800388c:	080038d5 	.word	0x080038d5
 8003890:	080038d5 	.word	0x080038d5
 8003894:	080038d5 	.word	0x080038d5
 8003898:	080038c1 	.word	0x080038c1
 800389c:	080038d5 	.word	0x080038d5
 80038a0:	080038d5 	.word	0x080038d5
 80038a4:	080038d5 	.word	0x080038d5
 80038a8:	080038cb 	.word	0x080038cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038b2:	60fb      	str	r3, [r7, #12]

      break;
 80038b4:	e00f      	b.n	80038d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038bc:	60fb      	str	r3, [r7, #12]

      break;
 80038be:	e00a      	b.n	80038d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038c6:	60fb      	str	r3, [r7, #12]

      break;
 80038c8:	e005      	b.n	80038d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d0:	60fb      	str	r3, [r7, #12]

      break;
 80038d2:	e000      	b.n	80038d6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80038d4:	bf00      	nop
  }

  return tmpreg;
 80038d6:	68fb      	ldr	r3, [r7, #12]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3714      	adds	r7, #20
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a3a      	ldr	r2, [pc, #232]	@ (8003a1c <TIM_Base_SetConfig+0xfc>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d00f      	beq.n	8003958 <TIM_Base_SetConfig+0x38>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800393e:	d00b      	beq.n	8003958 <TIM_Base_SetConfig+0x38>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a37      	ldr	r2, [pc, #220]	@ (8003a20 <TIM_Base_SetConfig+0x100>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d007      	beq.n	8003958 <TIM_Base_SetConfig+0x38>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a36      	ldr	r2, [pc, #216]	@ (8003a24 <TIM_Base_SetConfig+0x104>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d003      	beq.n	8003958 <TIM_Base_SetConfig+0x38>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a35      	ldr	r2, [pc, #212]	@ (8003a28 <TIM_Base_SetConfig+0x108>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d108      	bne.n	800396a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800395e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	4313      	orrs	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a2b      	ldr	r2, [pc, #172]	@ (8003a1c <TIM_Base_SetConfig+0xfc>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d01b      	beq.n	80039aa <TIM_Base_SetConfig+0x8a>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003978:	d017      	beq.n	80039aa <TIM_Base_SetConfig+0x8a>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a28      	ldr	r2, [pc, #160]	@ (8003a20 <TIM_Base_SetConfig+0x100>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d013      	beq.n	80039aa <TIM_Base_SetConfig+0x8a>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a27      	ldr	r2, [pc, #156]	@ (8003a24 <TIM_Base_SetConfig+0x104>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d00f      	beq.n	80039aa <TIM_Base_SetConfig+0x8a>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a26      	ldr	r2, [pc, #152]	@ (8003a28 <TIM_Base_SetConfig+0x108>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d00b      	beq.n	80039aa <TIM_Base_SetConfig+0x8a>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a25      	ldr	r2, [pc, #148]	@ (8003a2c <TIM_Base_SetConfig+0x10c>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d007      	beq.n	80039aa <TIM_Base_SetConfig+0x8a>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a24      	ldr	r2, [pc, #144]	@ (8003a30 <TIM_Base_SetConfig+0x110>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d003      	beq.n	80039aa <TIM_Base_SetConfig+0x8a>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a23      	ldr	r2, [pc, #140]	@ (8003a34 <TIM_Base_SetConfig+0x114>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d108      	bne.n	80039bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a0e      	ldr	r2, [pc, #56]	@ (8003a1c <TIM_Base_SetConfig+0xfc>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d103      	bne.n	80039f0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	691a      	ldr	r2, [r3, #16]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d105      	bne.n	8003a0e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	f023 0201 	bic.w	r2, r3, #1
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	611a      	str	r2, [r3, #16]
  }
}
 8003a0e:	bf00      	nop
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	40010000 	.word	0x40010000
 8003a20:	40000400 	.word	0x40000400
 8003a24:	40000800 	.word	0x40000800
 8003a28:	40000c00 	.word	0x40000c00
 8003a2c:	40014000 	.word	0x40014000
 8003a30:	40014400 	.word	0x40014400
 8003a34:	40014800 	.word	0x40014800

08003a38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	f023 0201 	bic.w	r2, r3, #1
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f023 0303 	bic.w	r3, r3, #3
 8003a6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f023 0302 	bic.w	r3, r3, #2
 8003a80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a1c      	ldr	r2, [pc, #112]	@ (8003b00 <TIM_OC1_SetConfig+0xc8>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d10c      	bne.n	8003aae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f023 0308 	bic.w	r3, r3, #8
 8003a9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f023 0304 	bic.w	r3, r3, #4
 8003aac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a13      	ldr	r2, [pc, #76]	@ (8003b00 <TIM_OC1_SetConfig+0xc8>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d111      	bne.n	8003ada <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003abc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	621a      	str	r2, [r3, #32]
}
 8003af4:	bf00      	nop
 8003af6:	371c      	adds	r7, #28
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	40010000 	.word	0x40010000

08003b04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b087      	sub	sp, #28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	f023 0210 	bic.w	r2, r3, #16
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	021b      	lsls	r3, r3, #8
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f023 0320 	bic.w	r3, r3, #32
 8003b4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a1e      	ldr	r2, [pc, #120]	@ (8003bd8 <TIM_OC2_SetConfig+0xd4>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d10d      	bne.n	8003b80 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a15      	ldr	r2, [pc, #84]	@ (8003bd8 <TIM_OC2_SetConfig+0xd4>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d113      	bne.n	8003bb0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	621a      	str	r2, [r3, #32]
}
 8003bca:	bf00      	nop
 8003bcc:	371c      	adds	r7, #28
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	40010000 	.word	0x40010000

08003bdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b087      	sub	sp, #28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f023 0303 	bic.w	r3, r3, #3
 8003c12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	021b      	lsls	r3, r3, #8
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a1d      	ldr	r2, [pc, #116]	@ (8003cac <TIM_OC3_SetConfig+0xd0>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d10d      	bne.n	8003c56 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	021b      	lsls	r3, r3, #8
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a14      	ldr	r2, [pc, #80]	@ (8003cac <TIM_OC3_SetConfig+0xd0>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d113      	bne.n	8003c86 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	011b      	lsls	r3, r3, #4
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	011b      	lsls	r3, r3, #4
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	621a      	str	r2, [r3, #32]
}
 8003ca0:	bf00      	nop
 8003ca2:	371c      	adds	r7, #28
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	40010000 	.word	0x40010000

08003cb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b087      	sub	sp, #28
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	021b      	lsls	r3, r3, #8
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003cfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	031b      	lsls	r3, r3, #12
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a10      	ldr	r2, [pc, #64]	@ (8003d4c <TIM_OC4_SetConfig+0x9c>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d109      	bne.n	8003d24 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	019b      	lsls	r3, r3, #6
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685a      	ldr	r2, [r3, #4]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	621a      	str	r2, [r3, #32]
}
 8003d3e:	bf00      	nop
 8003d40:	371c      	adds	r7, #28
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	40010000 	.word	0x40010000

08003d50 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b087      	sub	sp, #28
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
 8003d5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	f023 0201 	bic.w	r2, r3, #1
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	4a24      	ldr	r2, [pc, #144]	@ (8003e0c <TIM_TI1_SetConfig+0xbc>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d013      	beq.n	8003da6 <TIM_TI1_SetConfig+0x56>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d84:	d00f      	beq.n	8003da6 <TIM_TI1_SetConfig+0x56>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	4a21      	ldr	r2, [pc, #132]	@ (8003e10 <TIM_TI1_SetConfig+0xc0>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d00b      	beq.n	8003da6 <TIM_TI1_SetConfig+0x56>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	4a20      	ldr	r2, [pc, #128]	@ (8003e14 <TIM_TI1_SetConfig+0xc4>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d007      	beq.n	8003da6 <TIM_TI1_SetConfig+0x56>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	4a1f      	ldr	r2, [pc, #124]	@ (8003e18 <TIM_TI1_SetConfig+0xc8>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d003      	beq.n	8003da6 <TIM_TI1_SetConfig+0x56>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	4a1e      	ldr	r2, [pc, #120]	@ (8003e1c <TIM_TI1_SetConfig+0xcc>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d101      	bne.n	8003daa <TIM_TI1_SetConfig+0x5a>
 8003da6:	2301      	movs	r3, #1
 8003da8:	e000      	b.n	8003dac <TIM_TI1_SetConfig+0x5c>
 8003daa:	2300      	movs	r3, #0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d008      	beq.n	8003dc2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	f023 0303 	bic.w	r3, r3, #3
 8003db6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	617b      	str	r3, [r7, #20]
 8003dc0:	e003      	b.n	8003dca <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	f043 0301 	orr.w	r3, r3, #1
 8003dc8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003dd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	011b      	lsls	r3, r3, #4
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	f023 030a 	bic.w	r3, r3, #10
 8003de4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	f003 030a 	and.w	r3, r3, #10
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	621a      	str	r2, [r3, #32]
}
 8003dfe:	bf00      	nop
 8003e00:	371c      	adds	r7, #28
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	40010000 	.word	0x40010000
 8003e10:	40000400 	.word	0x40000400
 8003e14:	40000800 	.word	0x40000800
 8003e18:	40000c00 	.word	0x40000c00
 8003e1c:	40014000 	.word	0x40014000

08003e20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b087      	sub	sp, #28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	f023 0201 	bic.w	r2, r3, #1
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	011b      	lsls	r3, r3, #4
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f023 030a 	bic.w	r3, r3, #10
 8003e5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	621a      	str	r2, [r3, #32]
}
 8003e72:	bf00      	nop
 8003e74:	371c      	adds	r7, #28
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b087      	sub	sp, #28
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	60f8      	str	r0, [r7, #12]
 8003e86:	60b9      	str	r1, [r7, #8]
 8003e88:	607a      	str	r2, [r7, #4]
 8003e8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	f023 0210 	bic.w	r2, r3, #16
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003eaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	021b      	lsls	r3, r3, #8
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ebc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	031b      	lsls	r3, r3, #12
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003ed0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	011b      	lsls	r3, r3, #4
 8003ed6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	621a      	str	r2, [r3, #32]
}
 8003eec:	bf00      	nop
 8003eee:	371c      	adds	r7, #28
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b087      	sub	sp, #28
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	f023 0210 	bic.w	r2, r3, #16
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003f22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	031b      	lsls	r3, r3, #12
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003f34:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	011b      	lsls	r3, r3, #4
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	621a      	str	r2, [r3, #32]
}
 8003f4c:	bf00      	nop
 8003f4e:	371c      	adds	r7, #28
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b087      	sub	sp, #28
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
 8003f64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	69db      	ldr	r3, [r3, #28]
 8003f7c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	f023 0303 	bic.w	r3, r3, #3
 8003f84:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f94:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	011b      	lsls	r3, r3, #4
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003fa8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	021b      	lsls	r3, r3, #8
 8003fae:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	621a      	str	r2, [r3, #32]
}
 8003fc4:	bf00      	nop
 8003fc6:	371c      	adds	r7, #28
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b087      	sub	sp, #28
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
 8003fdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
 8003fe8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ffc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	021b      	lsls	r3, r3, #8
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	4313      	orrs	r3, r2
 8004006:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800400e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	031b      	lsls	r3, r3, #12
 8004014:	b29b      	uxth	r3, r3
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	4313      	orrs	r3, r2
 800401a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004022:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	031b      	lsls	r3, r3, #12
 8004028:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	4313      	orrs	r3, r2
 8004030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	621a      	str	r2, [r3, #32]
}
 800403e:	bf00      	nop
 8004040:	371c      	adds	r7, #28
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800404a:	b480      	push	{r7}
 800404c:	b085      	sub	sp, #20
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
 8004052:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004060:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4313      	orrs	r3, r2
 8004068:	f043 0307 	orr.w	r3, r3, #7
 800406c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	609a      	str	r2, [r3, #8]
}
 8004074:	bf00      	nop
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004080:	b480      	push	{r7}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
 800408c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800409a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	021a      	lsls	r2, r3, #8
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	431a      	orrs	r2, r3
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	609a      	str	r2, [r3, #8]
}
 80040b4:	bf00      	nop
 80040b6:	371c      	adds	r7, #28
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b087      	sub	sp, #28
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	f003 031f 	and.w	r3, r3, #31
 80040d2:	2201      	movs	r2, #1
 80040d4:	fa02 f303 	lsl.w	r3, r2, r3
 80040d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6a1a      	ldr	r2, [r3, #32]
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	43db      	mvns	r3, r3
 80040e2:	401a      	ands	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6a1a      	ldr	r2, [r3, #32]
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	f003 031f 	and.w	r3, r3, #31
 80040f2:	6879      	ldr	r1, [r7, #4]
 80040f4:	fa01 f303 	lsl.w	r3, r1, r3
 80040f8:	431a      	orrs	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	621a      	str	r2, [r3, #32]
}
 80040fe:	bf00      	nop
 8004100:	371c      	adds	r7, #28
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
	...

0800410c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800411c:	2b01      	cmp	r3, #1
 800411e:	d101      	bne.n	8004124 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004120:	2302      	movs	r3, #2
 8004122:	e050      	b.n	80041c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2202      	movs	r2, #2
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800414a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	4313      	orrs	r3, r2
 8004154:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a1c      	ldr	r2, [pc, #112]	@ (80041d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d018      	beq.n	800419a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004170:	d013      	beq.n	800419a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a18      	ldr	r2, [pc, #96]	@ (80041d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d00e      	beq.n	800419a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a16      	ldr	r2, [pc, #88]	@ (80041dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d009      	beq.n	800419a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a15      	ldr	r2, [pc, #84]	@ (80041e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d004      	beq.n	800419a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a13      	ldr	r2, [pc, #76]	@ (80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d10c      	bne.n	80041b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3714      	adds	r7, #20
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	40010000 	.word	0x40010000
 80041d8:	40000400 	.word	0x40000400
 80041dc:	40000800 	.word	0x40000800
 80041e0:	40000c00 	.word	0x40000c00
 80041e4:	40014000 	.word	0x40014000

080041e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e042      	b.n	80042a8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d106      	bne.n	800423c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7fd f9b8 	bl	80015ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2224      	movs	r2, #36	@ 0x24
 8004240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68da      	ldr	r2, [r3, #12]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004252:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 f973 	bl	8004540 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	691a      	ldr	r2, [r3, #16]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004268:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	695a      	ldr	r2, [r3, #20]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004278:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68da      	ldr	r2, [r3, #12]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004288:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2220      	movs	r2, #32
 8004294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2220      	movs	r2, #32
 800429c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b08a      	sub	sp, #40	@ 0x28
 80042b4:	af02      	add	r7, sp, #8
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	603b      	str	r3, [r7, #0]
 80042bc:	4613      	mov	r3, r2
 80042be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042c0:	2300      	movs	r3, #0
 80042c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b20      	cmp	r3, #32
 80042ce:	d175      	bne.n	80043bc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d002      	beq.n	80042dc <HAL_UART_Transmit+0x2c>
 80042d6:	88fb      	ldrh	r3, [r7, #6]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d101      	bne.n	80042e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e06e      	b.n	80043be <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2221      	movs	r2, #33	@ 0x21
 80042ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042ee:	f7fd fb0b 	bl	8001908 <HAL_GetTick>
 80042f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	88fa      	ldrh	r2, [r7, #6]
 80042f8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	88fa      	ldrh	r2, [r7, #6]
 80042fe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004308:	d108      	bne.n	800431c <HAL_UART_Transmit+0x6c>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d104      	bne.n	800431c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004312:	2300      	movs	r3, #0
 8004314:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	61bb      	str	r3, [r7, #24]
 800431a:	e003      	b.n	8004324 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004320:	2300      	movs	r3, #0
 8004322:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004324:	e02e      	b.n	8004384 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	2200      	movs	r2, #0
 800432e:	2180      	movs	r1, #128	@ 0x80
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f000 f848 	bl	80043c6 <UART_WaitOnFlagUntilTimeout>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d005      	beq.n	8004348 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2220      	movs	r2, #32
 8004340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e03a      	b.n	80043be <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10b      	bne.n	8004366 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	881b      	ldrh	r3, [r3, #0]
 8004352:	461a      	mov	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800435c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	3302      	adds	r3, #2
 8004362:	61bb      	str	r3, [r7, #24]
 8004364:	e007      	b.n	8004376 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	781a      	ldrb	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	3301      	adds	r3, #1
 8004374:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800437a:	b29b      	uxth	r3, r3
 800437c:	3b01      	subs	r3, #1
 800437e:	b29a      	uxth	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004388:	b29b      	uxth	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1cb      	bne.n	8004326 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2200      	movs	r2, #0
 8004396:	2140      	movs	r1, #64	@ 0x40
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f000 f814 	bl	80043c6 <UART_WaitOnFlagUntilTimeout>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d005      	beq.n	80043b0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2220      	movs	r2, #32
 80043a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e006      	b.n	80043be <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80043b8:	2300      	movs	r3, #0
 80043ba:	e000      	b.n	80043be <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80043bc:	2302      	movs	r3, #2
  }
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3720      	adds	r7, #32
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b086      	sub	sp, #24
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	60f8      	str	r0, [r7, #12]
 80043ce:	60b9      	str	r1, [r7, #8]
 80043d0:	603b      	str	r3, [r7, #0]
 80043d2:	4613      	mov	r3, r2
 80043d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043d6:	e03b      	b.n	8004450 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043d8:	6a3b      	ldr	r3, [r7, #32]
 80043da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043de:	d037      	beq.n	8004450 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043e0:	f7fd fa92 	bl	8001908 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	6a3a      	ldr	r2, [r7, #32]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d302      	bcc.n	80043f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80043f0:	6a3b      	ldr	r3, [r7, #32]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e03a      	b.n	8004470 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f003 0304 	and.w	r3, r3, #4
 8004404:	2b00      	cmp	r3, #0
 8004406:	d023      	beq.n	8004450 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	2b80      	cmp	r3, #128	@ 0x80
 800440c:	d020      	beq.n	8004450 <UART_WaitOnFlagUntilTimeout+0x8a>
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	2b40      	cmp	r3, #64	@ 0x40
 8004412:	d01d      	beq.n	8004450 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b08      	cmp	r3, #8
 8004420:	d116      	bne.n	8004450 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004422:	2300      	movs	r3, #0
 8004424:	617b      	str	r3, [r7, #20]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	617b      	str	r3, [r7, #20]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	617b      	str	r3, [r7, #20]
 8004436:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f000 f81d 	bl	8004478 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2208      	movs	r2, #8
 8004442:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e00f      	b.n	8004470 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	4013      	ands	r3, r2
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	429a      	cmp	r2, r3
 800445e:	bf0c      	ite	eq
 8004460:	2301      	moveq	r3, #1
 8004462:	2300      	movne	r3, #0
 8004464:	b2db      	uxtb	r3, r3
 8004466:	461a      	mov	r2, r3
 8004468:	79fb      	ldrb	r3, [r7, #7]
 800446a:	429a      	cmp	r2, r3
 800446c:	d0b4      	beq.n	80043d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3718      	adds	r7, #24
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004478:	b480      	push	{r7}
 800447a:	b095      	sub	sp, #84	@ 0x54
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	330c      	adds	r3, #12
 8004486:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800448a:	e853 3f00 	ldrex	r3, [r3]
 800448e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004492:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004496:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	330c      	adds	r3, #12
 800449e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80044a0:	643a      	str	r2, [r7, #64]	@ 0x40
 80044a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80044a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044a8:	e841 2300 	strex	r3, r2, [r1]
 80044ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1e5      	bne.n	8004480 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	3314      	adds	r3, #20
 80044ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044bc:	6a3b      	ldr	r3, [r7, #32]
 80044be:	e853 3f00 	ldrex	r3, [r3]
 80044c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	f023 0301 	bic.w	r3, r3, #1
 80044ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	3314      	adds	r3, #20
 80044d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044dc:	e841 2300 	strex	r3, r2, [r1]
 80044e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1e5      	bne.n	80044b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d119      	bne.n	8004524 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	330c      	adds	r3, #12
 80044f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	e853 3f00 	ldrex	r3, [r3]
 80044fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	f023 0310 	bic.w	r3, r3, #16
 8004506:	647b      	str	r3, [r7, #68]	@ 0x44
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	330c      	adds	r3, #12
 800450e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004510:	61ba      	str	r2, [r7, #24]
 8004512:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004514:	6979      	ldr	r1, [r7, #20]
 8004516:	69ba      	ldr	r2, [r7, #24]
 8004518:	e841 2300 	strex	r3, r2, [r1]
 800451c:	613b      	str	r3, [r7, #16]
   return(result);
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1e5      	bne.n	80044f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2220      	movs	r2, #32
 8004528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004532:	bf00      	nop
 8004534:	3754      	adds	r7, #84	@ 0x54
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
	...

08004540 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004544:	b0c0      	sub	sp, #256	@ 0x100
 8004546:	af00      	add	r7, sp, #0
 8004548:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800454c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800455c:	68d9      	ldr	r1, [r3, #12]
 800455e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	ea40 0301 	orr.w	r3, r0, r1
 8004568:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800456a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800456e:	689a      	ldr	r2, [r3, #8]
 8004570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	431a      	orrs	r2, r3
 8004578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	431a      	orrs	r2, r3
 8004580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	4313      	orrs	r3, r2
 8004588:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800458c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004598:	f021 010c 	bic.w	r1, r1, #12
 800459c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80045a6:	430b      	orrs	r3, r1
 80045a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80045b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ba:	6999      	ldr	r1, [r3, #24]
 80045bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	ea40 0301 	orr.w	r3, r0, r1
 80045c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	4b8f      	ldr	r3, [pc, #572]	@ (800480c <UART_SetConfig+0x2cc>)
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d005      	beq.n	80045e0 <UART_SetConfig+0xa0>
 80045d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	4b8d      	ldr	r3, [pc, #564]	@ (8004810 <UART_SetConfig+0x2d0>)
 80045dc:	429a      	cmp	r2, r3
 80045de:	d104      	bne.n	80045ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045e0:	f7fe f900 	bl	80027e4 <HAL_RCC_GetPCLK2Freq>
 80045e4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80045e8:	e003      	b.n	80045f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045ea:	f7fe f8e7 	bl	80027bc <HAL_RCC_GetPCLK1Freq>
 80045ee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f6:	69db      	ldr	r3, [r3, #28]
 80045f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045fc:	f040 810c 	bne.w	8004818 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004600:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004604:	2200      	movs	r2, #0
 8004606:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800460a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800460e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004612:	4622      	mov	r2, r4
 8004614:	462b      	mov	r3, r5
 8004616:	1891      	adds	r1, r2, r2
 8004618:	65b9      	str	r1, [r7, #88]	@ 0x58
 800461a:	415b      	adcs	r3, r3
 800461c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800461e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004622:	4621      	mov	r1, r4
 8004624:	eb12 0801 	adds.w	r8, r2, r1
 8004628:	4629      	mov	r1, r5
 800462a:	eb43 0901 	adc.w	r9, r3, r1
 800462e:	f04f 0200 	mov.w	r2, #0
 8004632:	f04f 0300 	mov.w	r3, #0
 8004636:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800463a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800463e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004642:	4690      	mov	r8, r2
 8004644:	4699      	mov	r9, r3
 8004646:	4623      	mov	r3, r4
 8004648:	eb18 0303 	adds.w	r3, r8, r3
 800464c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004650:	462b      	mov	r3, r5
 8004652:	eb49 0303 	adc.w	r3, r9, r3
 8004656:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800465a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004666:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800466a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800466e:	460b      	mov	r3, r1
 8004670:	18db      	adds	r3, r3, r3
 8004672:	653b      	str	r3, [r7, #80]	@ 0x50
 8004674:	4613      	mov	r3, r2
 8004676:	eb42 0303 	adc.w	r3, r2, r3
 800467a:	657b      	str	r3, [r7, #84]	@ 0x54
 800467c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004680:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004684:	f7fb fdfc 	bl	8000280 <__aeabi_uldivmod>
 8004688:	4602      	mov	r2, r0
 800468a:	460b      	mov	r3, r1
 800468c:	4b61      	ldr	r3, [pc, #388]	@ (8004814 <UART_SetConfig+0x2d4>)
 800468e:	fba3 2302 	umull	r2, r3, r3, r2
 8004692:	095b      	lsrs	r3, r3, #5
 8004694:	011c      	lsls	r4, r3, #4
 8004696:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800469a:	2200      	movs	r2, #0
 800469c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046a0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80046a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80046a8:	4642      	mov	r2, r8
 80046aa:	464b      	mov	r3, r9
 80046ac:	1891      	adds	r1, r2, r2
 80046ae:	64b9      	str	r1, [r7, #72]	@ 0x48
 80046b0:	415b      	adcs	r3, r3
 80046b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80046b8:	4641      	mov	r1, r8
 80046ba:	eb12 0a01 	adds.w	sl, r2, r1
 80046be:	4649      	mov	r1, r9
 80046c0:	eb43 0b01 	adc.w	fp, r3, r1
 80046c4:	f04f 0200 	mov.w	r2, #0
 80046c8:	f04f 0300 	mov.w	r3, #0
 80046cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046d8:	4692      	mov	sl, r2
 80046da:	469b      	mov	fp, r3
 80046dc:	4643      	mov	r3, r8
 80046de:	eb1a 0303 	adds.w	r3, sl, r3
 80046e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80046e6:	464b      	mov	r3, r9
 80046e8:	eb4b 0303 	adc.w	r3, fp, r3
 80046ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80046f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80046fc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004700:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004704:	460b      	mov	r3, r1
 8004706:	18db      	adds	r3, r3, r3
 8004708:	643b      	str	r3, [r7, #64]	@ 0x40
 800470a:	4613      	mov	r3, r2
 800470c:	eb42 0303 	adc.w	r3, r2, r3
 8004710:	647b      	str	r3, [r7, #68]	@ 0x44
 8004712:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004716:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800471a:	f7fb fdb1 	bl	8000280 <__aeabi_uldivmod>
 800471e:	4602      	mov	r2, r0
 8004720:	460b      	mov	r3, r1
 8004722:	4611      	mov	r1, r2
 8004724:	4b3b      	ldr	r3, [pc, #236]	@ (8004814 <UART_SetConfig+0x2d4>)
 8004726:	fba3 2301 	umull	r2, r3, r3, r1
 800472a:	095b      	lsrs	r3, r3, #5
 800472c:	2264      	movs	r2, #100	@ 0x64
 800472e:	fb02 f303 	mul.w	r3, r2, r3
 8004732:	1acb      	subs	r3, r1, r3
 8004734:	00db      	lsls	r3, r3, #3
 8004736:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800473a:	4b36      	ldr	r3, [pc, #216]	@ (8004814 <UART_SetConfig+0x2d4>)
 800473c:	fba3 2302 	umull	r2, r3, r3, r2
 8004740:	095b      	lsrs	r3, r3, #5
 8004742:	005b      	lsls	r3, r3, #1
 8004744:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004748:	441c      	add	r4, r3
 800474a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800474e:	2200      	movs	r2, #0
 8004750:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004754:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004758:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800475c:	4642      	mov	r2, r8
 800475e:	464b      	mov	r3, r9
 8004760:	1891      	adds	r1, r2, r2
 8004762:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004764:	415b      	adcs	r3, r3
 8004766:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004768:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800476c:	4641      	mov	r1, r8
 800476e:	1851      	adds	r1, r2, r1
 8004770:	6339      	str	r1, [r7, #48]	@ 0x30
 8004772:	4649      	mov	r1, r9
 8004774:	414b      	adcs	r3, r1
 8004776:	637b      	str	r3, [r7, #52]	@ 0x34
 8004778:	f04f 0200 	mov.w	r2, #0
 800477c:	f04f 0300 	mov.w	r3, #0
 8004780:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004784:	4659      	mov	r1, fp
 8004786:	00cb      	lsls	r3, r1, #3
 8004788:	4651      	mov	r1, sl
 800478a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800478e:	4651      	mov	r1, sl
 8004790:	00ca      	lsls	r2, r1, #3
 8004792:	4610      	mov	r0, r2
 8004794:	4619      	mov	r1, r3
 8004796:	4603      	mov	r3, r0
 8004798:	4642      	mov	r2, r8
 800479a:	189b      	adds	r3, r3, r2
 800479c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047a0:	464b      	mov	r3, r9
 80047a2:	460a      	mov	r2, r1
 80047a4:	eb42 0303 	adc.w	r3, r2, r3
 80047a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80047b8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80047bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80047c0:	460b      	mov	r3, r1
 80047c2:	18db      	adds	r3, r3, r3
 80047c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047c6:	4613      	mov	r3, r2
 80047c8:	eb42 0303 	adc.w	r3, r2, r3
 80047cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80047d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80047d6:	f7fb fd53 	bl	8000280 <__aeabi_uldivmod>
 80047da:	4602      	mov	r2, r0
 80047dc:	460b      	mov	r3, r1
 80047de:	4b0d      	ldr	r3, [pc, #52]	@ (8004814 <UART_SetConfig+0x2d4>)
 80047e0:	fba3 1302 	umull	r1, r3, r3, r2
 80047e4:	095b      	lsrs	r3, r3, #5
 80047e6:	2164      	movs	r1, #100	@ 0x64
 80047e8:	fb01 f303 	mul.w	r3, r1, r3
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	00db      	lsls	r3, r3, #3
 80047f0:	3332      	adds	r3, #50	@ 0x32
 80047f2:	4a08      	ldr	r2, [pc, #32]	@ (8004814 <UART_SetConfig+0x2d4>)
 80047f4:	fba2 2303 	umull	r2, r3, r2, r3
 80047f8:	095b      	lsrs	r3, r3, #5
 80047fa:	f003 0207 	and.w	r2, r3, #7
 80047fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4422      	add	r2, r4
 8004806:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004808:	e106      	b.n	8004a18 <UART_SetConfig+0x4d8>
 800480a:	bf00      	nop
 800480c:	40011000 	.word	0x40011000
 8004810:	40011400 	.word	0x40011400
 8004814:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004818:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800481c:	2200      	movs	r2, #0
 800481e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004822:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004826:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800482a:	4642      	mov	r2, r8
 800482c:	464b      	mov	r3, r9
 800482e:	1891      	adds	r1, r2, r2
 8004830:	6239      	str	r1, [r7, #32]
 8004832:	415b      	adcs	r3, r3
 8004834:	627b      	str	r3, [r7, #36]	@ 0x24
 8004836:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800483a:	4641      	mov	r1, r8
 800483c:	1854      	adds	r4, r2, r1
 800483e:	4649      	mov	r1, r9
 8004840:	eb43 0501 	adc.w	r5, r3, r1
 8004844:	f04f 0200 	mov.w	r2, #0
 8004848:	f04f 0300 	mov.w	r3, #0
 800484c:	00eb      	lsls	r3, r5, #3
 800484e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004852:	00e2      	lsls	r2, r4, #3
 8004854:	4614      	mov	r4, r2
 8004856:	461d      	mov	r5, r3
 8004858:	4643      	mov	r3, r8
 800485a:	18e3      	adds	r3, r4, r3
 800485c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004860:	464b      	mov	r3, r9
 8004862:	eb45 0303 	adc.w	r3, r5, r3
 8004866:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800486a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004876:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800487a:	f04f 0200 	mov.w	r2, #0
 800487e:	f04f 0300 	mov.w	r3, #0
 8004882:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004886:	4629      	mov	r1, r5
 8004888:	008b      	lsls	r3, r1, #2
 800488a:	4621      	mov	r1, r4
 800488c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004890:	4621      	mov	r1, r4
 8004892:	008a      	lsls	r2, r1, #2
 8004894:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004898:	f7fb fcf2 	bl	8000280 <__aeabi_uldivmod>
 800489c:	4602      	mov	r2, r0
 800489e:	460b      	mov	r3, r1
 80048a0:	4b60      	ldr	r3, [pc, #384]	@ (8004a24 <UART_SetConfig+0x4e4>)
 80048a2:	fba3 2302 	umull	r2, r3, r3, r2
 80048a6:	095b      	lsrs	r3, r3, #5
 80048a8:	011c      	lsls	r4, r3, #4
 80048aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048ae:	2200      	movs	r2, #0
 80048b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80048b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80048b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80048bc:	4642      	mov	r2, r8
 80048be:	464b      	mov	r3, r9
 80048c0:	1891      	adds	r1, r2, r2
 80048c2:	61b9      	str	r1, [r7, #24]
 80048c4:	415b      	adcs	r3, r3
 80048c6:	61fb      	str	r3, [r7, #28]
 80048c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048cc:	4641      	mov	r1, r8
 80048ce:	1851      	adds	r1, r2, r1
 80048d0:	6139      	str	r1, [r7, #16]
 80048d2:	4649      	mov	r1, r9
 80048d4:	414b      	adcs	r3, r1
 80048d6:	617b      	str	r3, [r7, #20]
 80048d8:	f04f 0200 	mov.w	r2, #0
 80048dc:	f04f 0300 	mov.w	r3, #0
 80048e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048e4:	4659      	mov	r1, fp
 80048e6:	00cb      	lsls	r3, r1, #3
 80048e8:	4651      	mov	r1, sl
 80048ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048ee:	4651      	mov	r1, sl
 80048f0:	00ca      	lsls	r2, r1, #3
 80048f2:	4610      	mov	r0, r2
 80048f4:	4619      	mov	r1, r3
 80048f6:	4603      	mov	r3, r0
 80048f8:	4642      	mov	r2, r8
 80048fa:	189b      	adds	r3, r3, r2
 80048fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004900:	464b      	mov	r3, r9
 8004902:	460a      	mov	r2, r1
 8004904:	eb42 0303 	adc.w	r3, r2, r3
 8004908:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800490c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004916:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004918:	f04f 0200 	mov.w	r2, #0
 800491c:	f04f 0300 	mov.w	r3, #0
 8004920:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004924:	4649      	mov	r1, r9
 8004926:	008b      	lsls	r3, r1, #2
 8004928:	4641      	mov	r1, r8
 800492a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800492e:	4641      	mov	r1, r8
 8004930:	008a      	lsls	r2, r1, #2
 8004932:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004936:	f7fb fca3 	bl	8000280 <__aeabi_uldivmod>
 800493a:	4602      	mov	r2, r0
 800493c:	460b      	mov	r3, r1
 800493e:	4611      	mov	r1, r2
 8004940:	4b38      	ldr	r3, [pc, #224]	@ (8004a24 <UART_SetConfig+0x4e4>)
 8004942:	fba3 2301 	umull	r2, r3, r3, r1
 8004946:	095b      	lsrs	r3, r3, #5
 8004948:	2264      	movs	r2, #100	@ 0x64
 800494a:	fb02 f303 	mul.w	r3, r2, r3
 800494e:	1acb      	subs	r3, r1, r3
 8004950:	011b      	lsls	r3, r3, #4
 8004952:	3332      	adds	r3, #50	@ 0x32
 8004954:	4a33      	ldr	r2, [pc, #204]	@ (8004a24 <UART_SetConfig+0x4e4>)
 8004956:	fba2 2303 	umull	r2, r3, r2, r3
 800495a:	095b      	lsrs	r3, r3, #5
 800495c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004960:	441c      	add	r4, r3
 8004962:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004966:	2200      	movs	r2, #0
 8004968:	673b      	str	r3, [r7, #112]	@ 0x70
 800496a:	677a      	str	r2, [r7, #116]	@ 0x74
 800496c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004970:	4642      	mov	r2, r8
 8004972:	464b      	mov	r3, r9
 8004974:	1891      	adds	r1, r2, r2
 8004976:	60b9      	str	r1, [r7, #8]
 8004978:	415b      	adcs	r3, r3
 800497a:	60fb      	str	r3, [r7, #12]
 800497c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004980:	4641      	mov	r1, r8
 8004982:	1851      	adds	r1, r2, r1
 8004984:	6039      	str	r1, [r7, #0]
 8004986:	4649      	mov	r1, r9
 8004988:	414b      	adcs	r3, r1
 800498a:	607b      	str	r3, [r7, #4]
 800498c:	f04f 0200 	mov.w	r2, #0
 8004990:	f04f 0300 	mov.w	r3, #0
 8004994:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004998:	4659      	mov	r1, fp
 800499a:	00cb      	lsls	r3, r1, #3
 800499c:	4651      	mov	r1, sl
 800499e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049a2:	4651      	mov	r1, sl
 80049a4:	00ca      	lsls	r2, r1, #3
 80049a6:	4610      	mov	r0, r2
 80049a8:	4619      	mov	r1, r3
 80049aa:	4603      	mov	r3, r0
 80049ac:	4642      	mov	r2, r8
 80049ae:	189b      	adds	r3, r3, r2
 80049b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049b2:	464b      	mov	r3, r9
 80049b4:	460a      	mov	r2, r1
 80049b6:	eb42 0303 	adc.w	r3, r2, r3
 80049ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80049bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80049c6:	667a      	str	r2, [r7, #100]	@ 0x64
 80049c8:	f04f 0200 	mov.w	r2, #0
 80049cc:	f04f 0300 	mov.w	r3, #0
 80049d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80049d4:	4649      	mov	r1, r9
 80049d6:	008b      	lsls	r3, r1, #2
 80049d8:	4641      	mov	r1, r8
 80049da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049de:	4641      	mov	r1, r8
 80049e0:	008a      	lsls	r2, r1, #2
 80049e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80049e6:	f7fb fc4b 	bl	8000280 <__aeabi_uldivmod>
 80049ea:	4602      	mov	r2, r0
 80049ec:	460b      	mov	r3, r1
 80049ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004a24 <UART_SetConfig+0x4e4>)
 80049f0:	fba3 1302 	umull	r1, r3, r3, r2
 80049f4:	095b      	lsrs	r3, r3, #5
 80049f6:	2164      	movs	r1, #100	@ 0x64
 80049f8:	fb01 f303 	mul.w	r3, r1, r3
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	011b      	lsls	r3, r3, #4
 8004a00:	3332      	adds	r3, #50	@ 0x32
 8004a02:	4a08      	ldr	r2, [pc, #32]	@ (8004a24 <UART_SetConfig+0x4e4>)
 8004a04:	fba2 2303 	umull	r2, r3, r2, r3
 8004a08:	095b      	lsrs	r3, r3, #5
 8004a0a:	f003 020f 	and.w	r2, r3, #15
 8004a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4422      	add	r2, r4
 8004a16:	609a      	str	r2, [r3, #8]
}
 8004a18:	bf00      	nop
 8004a1a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a24:	51eb851f 	.word	0x51eb851f

08004a28 <_ZdlPvj>:
 8004a28:	f000 b811 	b.w	8004a4e <_ZdlPv>

08004a2c <_Znwj>:
 8004a2c:	2801      	cmp	r0, #1
 8004a2e:	bf38      	it	cc
 8004a30:	2001      	movcc	r0, #1
 8004a32:	b510      	push	{r4, lr}
 8004a34:	4604      	mov	r4, r0
 8004a36:	4620      	mov	r0, r4
 8004a38:	f000 f81c 	bl	8004a74 <malloc>
 8004a3c:	b100      	cbz	r0, 8004a40 <_Znwj+0x14>
 8004a3e:	bd10      	pop	{r4, pc}
 8004a40:	f000 f808 	bl	8004a54 <_ZSt15get_new_handlerv>
 8004a44:	b908      	cbnz	r0, 8004a4a <_Znwj+0x1e>
 8004a46:	f000 f80d 	bl	8004a64 <abort>
 8004a4a:	4780      	blx	r0
 8004a4c:	e7f3      	b.n	8004a36 <_Znwj+0xa>

08004a4e <_ZdlPv>:
 8004a4e:	f000 b819 	b.w	8004a84 <free>
	...

08004a54 <_ZSt15get_new_handlerv>:
 8004a54:	4b02      	ldr	r3, [pc, #8]	@ (8004a60 <_ZSt15get_new_handlerv+0xc>)
 8004a56:	6818      	ldr	r0, [r3, #0]
 8004a58:	f3bf 8f5b 	dmb	ish
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	20000224 	.word	0x20000224

08004a64 <abort>:
 8004a64:	b508      	push	{r3, lr}
 8004a66:	2006      	movs	r0, #6
 8004a68:	f000 f912 	bl	8004c90 <raise>
 8004a6c:	2001      	movs	r0, #1
 8004a6e:	f7fc fe67 	bl	8001740 <_exit>
	...

08004a74 <malloc>:
 8004a74:	4b02      	ldr	r3, [pc, #8]	@ (8004a80 <malloc+0xc>)
 8004a76:	4601      	mov	r1, r0
 8004a78:	6818      	ldr	r0, [r3, #0]
 8004a7a:	f000 b82d 	b.w	8004ad8 <_malloc_r>
 8004a7e:	bf00      	nop
 8004a80:	2000000c 	.word	0x2000000c

08004a84 <free>:
 8004a84:	4b02      	ldr	r3, [pc, #8]	@ (8004a90 <free+0xc>)
 8004a86:	4601      	mov	r1, r0
 8004a88:	6818      	ldr	r0, [r3, #0]
 8004a8a:	f000 b959 	b.w	8004d40 <_free_r>
 8004a8e:	bf00      	nop
 8004a90:	2000000c 	.word	0x2000000c

08004a94 <sbrk_aligned>:
 8004a94:	b570      	push	{r4, r5, r6, lr}
 8004a96:	4e0f      	ldr	r6, [pc, #60]	@ (8004ad4 <sbrk_aligned+0x40>)
 8004a98:	460c      	mov	r4, r1
 8004a9a:	6831      	ldr	r1, [r6, #0]
 8004a9c:	4605      	mov	r5, r0
 8004a9e:	b911      	cbnz	r1, 8004aa6 <sbrk_aligned+0x12>
 8004aa0:	f000 f912 	bl	8004cc8 <_sbrk_r>
 8004aa4:	6030      	str	r0, [r6, #0]
 8004aa6:	4621      	mov	r1, r4
 8004aa8:	4628      	mov	r0, r5
 8004aaa:	f000 f90d 	bl	8004cc8 <_sbrk_r>
 8004aae:	1c43      	adds	r3, r0, #1
 8004ab0:	d103      	bne.n	8004aba <sbrk_aligned+0x26>
 8004ab2:	f04f 34ff 	mov.w	r4, #4294967295
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	bd70      	pop	{r4, r5, r6, pc}
 8004aba:	1cc4      	adds	r4, r0, #3
 8004abc:	f024 0403 	bic.w	r4, r4, #3
 8004ac0:	42a0      	cmp	r0, r4
 8004ac2:	d0f8      	beq.n	8004ab6 <sbrk_aligned+0x22>
 8004ac4:	1a21      	subs	r1, r4, r0
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	f000 f8fe 	bl	8004cc8 <_sbrk_r>
 8004acc:	3001      	adds	r0, #1
 8004ace:	d1f2      	bne.n	8004ab6 <sbrk_aligned+0x22>
 8004ad0:	e7ef      	b.n	8004ab2 <sbrk_aligned+0x1e>
 8004ad2:	bf00      	nop
 8004ad4:	20000228 	.word	0x20000228

08004ad8 <_malloc_r>:
 8004ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004adc:	1ccd      	adds	r5, r1, #3
 8004ade:	f025 0503 	bic.w	r5, r5, #3
 8004ae2:	3508      	adds	r5, #8
 8004ae4:	2d0c      	cmp	r5, #12
 8004ae6:	bf38      	it	cc
 8004ae8:	250c      	movcc	r5, #12
 8004aea:	2d00      	cmp	r5, #0
 8004aec:	4606      	mov	r6, r0
 8004aee:	db01      	blt.n	8004af4 <_malloc_r+0x1c>
 8004af0:	42a9      	cmp	r1, r5
 8004af2:	d904      	bls.n	8004afe <_malloc_r+0x26>
 8004af4:	230c      	movs	r3, #12
 8004af6:	6033      	str	r3, [r6, #0]
 8004af8:	2000      	movs	r0, #0
 8004afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004afe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004bd4 <_malloc_r+0xfc>
 8004b02:	f000 f869 	bl	8004bd8 <__malloc_lock>
 8004b06:	f8d8 3000 	ldr.w	r3, [r8]
 8004b0a:	461c      	mov	r4, r3
 8004b0c:	bb44      	cbnz	r4, 8004b60 <_malloc_r+0x88>
 8004b0e:	4629      	mov	r1, r5
 8004b10:	4630      	mov	r0, r6
 8004b12:	f7ff ffbf 	bl	8004a94 <sbrk_aligned>
 8004b16:	1c43      	adds	r3, r0, #1
 8004b18:	4604      	mov	r4, r0
 8004b1a:	d158      	bne.n	8004bce <_malloc_r+0xf6>
 8004b1c:	f8d8 4000 	ldr.w	r4, [r8]
 8004b20:	4627      	mov	r7, r4
 8004b22:	2f00      	cmp	r7, #0
 8004b24:	d143      	bne.n	8004bae <_malloc_r+0xd6>
 8004b26:	2c00      	cmp	r4, #0
 8004b28:	d04b      	beq.n	8004bc2 <_malloc_r+0xea>
 8004b2a:	6823      	ldr	r3, [r4, #0]
 8004b2c:	4639      	mov	r1, r7
 8004b2e:	4630      	mov	r0, r6
 8004b30:	eb04 0903 	add.w	r9, r4, r3
 8004b34:	f000 f8c8 	bl	8004cc8 <_sbrk_r>
 8004b38:	4581      	cmp	r9, r0
 8004b3a:	d142      	bne.n	8004bc2 <_malloc_r+0xea>
 8004b3c:	6821      	ldr	r1, [r4, #0]
 8004b3e:	1a6d      	subs	r5, r5, r1
 8004b40:	4629      	mov	r1, r5
 8004b42:	4630      	mov	r0, r6
 8004b44:	f7ff ffa6 	bl	8004a94 <sbrk_aligned>
 8004b48:	3001      	adds	r0, #1
 8004b4a:	d03a      	beq.n	8004bc2 <_malloc_r+0xea>
 8004b4c:	6823      	ldr	r3, [r4, #0]
 8004b4e:	442b      	add	r3, r5
 8004b50:	6023      	str	r3, [r4, #0]
 8004b52:	f8d8 3000 	ldr.w	r3, [r8]
 8004b56:	685a      	ldr	r2, [r3, #4]
 8004b58:	bb62      	cbnz	r2, 8004bb4 <_malloc_r+0xdc>
 8004b5a:	f8c8 7000 	str.w	r7, [r8]
 8004b5e:	e00f      	b.n	8004b80 <_malloc_r+0xa8>
 8004b60:	6822      	ldr	r2, [r4, #0]
 8004b62:	1b52      	subs	r2, r2, r5
 8004b64:	d420      	bmi.n	8004ba8 <_malloc_r+0xd0>
 8004b66:	2a0b      	cmp	r2, #11
 8004b68:	d917      	bls.n	8004b9a <_malloc_r+0xc2>
 8004b6a:	1961      	adds	r1, r4, r5
 8004b6c:	42a3      	cmp	r3, r4
 8004b6e:	6025      	str	r5, [r4, #0]
 8004b70:	bf18      	it	ne
 8004b72:	6059      	strne	r1, [r3, #4]
 8004b74:	6863      	ldr	r3, [r4, #4]
 8004b76:	bf08      	it	eq
 8004b78:	f8c8 1000 	streq.w	r1, [r8]
 8004b7c:	5162      	str	r2, [r4, r5]
 8004b7e:	604b      	str	r3, [r1, #4]
 8004b80:	4630      	mov	r0, r6
 8004b82:	f000 f82f 	bl	8004be4 <__malloc_unlock>
 8004b86:	f104 000b 	add.w	r0, r4, #11
 8004b8a:	1d23      	adds	r3, r4, #4
 8004b8c:	f020 0007 	bic.w	r0, r0, #7
 8004b90:	1ac2      	subs	r2, r0, r3
 8004b92:	bf1c      	itt	ne
 8004b94:	1a1b      	subne	r3, r3, r0
 8004b96:	50a3      	strne	r3, [r4, r2]
 8004b98:	e7af      	b.n	8004afa <_malloc_r+0x22>
 8004b9a:	6862      	ldr	r2, [r4, #4]
 8004b9c:	42a3      	cmp	r3, r4
 8004b9e:	bf0c      	ite	eq
 8004ba0:	f8c8 2000 	streq.w	r2, [r8]
 8004ba4:	605a      	strne	r2, [r3, #4]
 8004ba6:	e7eb      	b.n	8004b80 <_malloc_r+0xa8>
 8004ba8:	4623      	mov	r3, r4
 8004baa:	6864      	ldr	r4, [r4, #4]
 8004bac:	e7ae      	b.n	8004b0c <_malloc_r+0x34>
 8004bae:	463c      	mov	r4, r7
 8004bb0:	687f      	ldr	r7, [r7, #4]
 8004bb2:	e7b6      	b.n	8004b22 <_malloc_r+0x4a>
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	42a3      	cmp	r3, r4
 8004bba:	d1fb      	bne.n	8004bb4 <_malloc_r+0xdc>
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	6053      	str	r3, [r2, #4]
 8004bc0:	e7de      	b.n	8004b80 <_malloc_r+0xa8>
 8004bc2:	230c      	movs	r3, #12
 8004bc4:	6033      	str	r3, [r6, #0]
 8004bc6:	4630      	mov	r0, r6
 8004bc8:	f000 f80c 	bl	8004be4 <__malloc_unlock>
 8004bcc:	e794      	b.n	8004af8 <_malloc_r+0x20>
 8004bce:	6005      	str	r5, [r0, #0]
 8004bd0:	e7d6      	b.n	8004b80 <_malloc_r+0xa8>
 8004bd2:	bf00      	nop
 8004bd4:	2000022c 	.word	0x2000022c

08004bd8 <__malloc_lock>:
 8004bd8:	4801      	ldr	r0, [pc, #4]	@ (8004be0 <__malloc_lock+0x8>)
 8004bda:	f000 b8af 	b.w	8004d3c <__retarget_lock_acquire_recursive>
 8004bde:	bf00      	nop
 8004be0:	2000036c 	.word	0x2000036c

08004be4 <__malloc_unlock>:
 8004be4:	4801      	ldr	r0, [pc, #4]	@ (8004bec <__malloc_unlock+0x8>)
 8004be6:	f000 b8aa 	b.w	8004d3e <__retarget_lock_release_recursive>
 8004bea:	bf00      	nop
 8004bec:	2000036c 	.word	0x2000036c

08004bf0 <siprintf>:
 8004bf0:	b40e      	push	{r1, r2, r3}
 8004bf2:	b500      	push	{lr}
 8004bf4:	b09c      	sub	sp, #112	@ 0x70
 8004bf6:	ab1d      	add	r3, sp, #116	@ 0x74
 8004bf8:	9002      	str	r0, [sp, #8]
 8004bfa:	9006      	str	r0, [sp, #24]
 8004bfc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004c00:	4809      	ldr	r0, [pc, #36]	@ (8004c28 <siprintf+0x38>)
 8004c02:	9107      	str	r1, [sp, #28]
 8004c04:	9104      	str	r1, [sp, #16]
 8004c06:	4909      	ldr	r1, [pc, #36]	@ (8004c2c <siprintf+0x3c>)
 8004c08:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c0c:	9105      	str	r1, [sp, #20]
 8004c0e:	6800      	ldr	r0, [r0, #0]
 8004c10:	9301      	str	r3, [sp, #4]
 8004c12:	a902      	add	r1, sp, #8
 8004c14:	f000 f93a 	bl	8004e8c <_svfiprintf_r>
 8004c18:	9b02      	ldr	r3, [sp, #8]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	701a      	strb	r2, [r3, #0]
 8004c1e:	b01c      	add	sp, #112	@ 0x70
 8004c20:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c24:	b003      	add	sp, #12
 8004c26:	4770      	bx	lr
 8004c28:	2000000c 	.word	0x2000000c
 8004c2c:	ffff0208 	.word	0xffff0208

08004c30 <memset>:
 8004c30:	4402      	add	r2, r0
 8004c32:	4603      	mov	r3, r0
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d100      	bne.n	8004c3a <memset+0xa>
 8004c38:	4770      	bx	lr
 8004c3a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c3e:	e7f9      	b.n	8004c34 <memset+0x4>

08004c40 <_raise_r>:
 8004c40:	291f      	cmp	r1, #31
 8004c42:	b538      	push	{r3, r4, r5, lr}
 8004c44:	4605      	mov	r5, r0
 8004c46:	460c      	mov	r4, r1
 8004c48:	d904      	bls.n	8004c54 <_raise_r+0x14>
 8004c4a:	2316      	movs	r3, #22
 8004c4c:	6003      	str	r3, [r0, #0]
 8004c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c52:	bd38      	pop	{r3, r4, r5, pc}
 8004c54:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004c56:	b112      	cbz	r2, 8004c5e <_raise_r+0x1e>
 8004c58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004c5c:	b94b      	cbnz	r3, 8004c72 <_raise_r+0x32>
 8004c5e:	4628      	mov	r0, r5
 8004c60:	f000 f830 	bl	8004cc4 <_getpid_r>
 8004c64:	4622      	mov	r2, r4
 8004c66:	4601      	mov	r1, r0
 8004c68:	4628      	mov	r0, r5
 8004c6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c6e:	f000 b817 	b.w	8004ca0 <_kill_r>
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d00a      	beq.n	8004c8c <_raise_r+0x4c>
 8004c76:	1c59      	adds	r1, r3, #1
 8004c78:	d103      	bne.n	8004c82 <_raise_r+0x42>
 8004c7a:	2316      	movs	r3, #22
 8004c7c:	6003      	str	r3, [r0, #0]
 8004c7e:	2001      	movs	r0, #1
 8004c80:	e7e7      	b.n	8004c52 <_raise_r+0x12>
 8004c82:	2100      	movs	r1, #0
 8004c84:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004c88:	4620      	mov	r0, r4
 8004c8a:	4798      	blx	r3
 8004c8c:	2000      	movs	r0, #0
 8004c8e:	e7e0      	b.n	8004c52 <_raise_r+0x12>

08004c90 <raise>:
 8004c90:	4b02      	ldr	r3, [pc, #8]	@ (8004c9c <raise+0xc>)
 8004c92:	4601      	mov	r1, r0
 8004c94:	6818      	ldr	r0, [r3, #0]
 8004c96:	f7ff bfd3 	b.w	8004c40 <_raise_r>
 8004c9a:	bf00      	nop
 8004c9c:	2000000c 	.word	0x2000000c

08004ca0 <_kill_r>:
 8004ca0:	b538      	push	{r3, r4, r5, lr}
 8004ca2:	4d07      	ldr	r5, [pc, #28]	@ (8004cc0 <_kill_r+0x20>)
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	4604      	mov	r4, r0
 8004ca8:	4608      	mov	r0, r1
 8004caa:	4611      	mov	r1, r2
 8004cac:	602b      	str	r3, [r5, #0]
 8004cae:	f7fc fd37 	bl	8001720 <_kill>
 8004cb2:	1c43      	adds	r3, r0, #1
 8004cb4:	d102      	bne.n	8004cbc <_kill_r+0x1c>
 8004cb6:	682b      	ldr	r3, [r5, #0]
 8004cb8:	b103      	cbz	r3, 8004cbc <_kill_r+0x1c>
 8004cba:	6023      	str	r3, [r4, #0]
 8004cbc:	bd38      	pop	{r3, r4, r5, pc}
 8004cbe:	bf00      	nop
 8004cc0:	20000368 	.word	0x20000368

08004cc4 <_getpid_r>:
 8004cc4:	f7fc bd24 	b.w	8001710 <_getpid>

08004cc8 <_sbrk_r>:
 8004cc8:	b538      	push	{r3, r4, r5, lr}
 8004cca:	4d06      	ldr	r5, [pc, #24]	@ (8004ce4 <_sbrk_r+0x1c>)
 8004ccc:	2300      	movs	r3, #0
 8004cce:	4604      	mov	r4, r0
 8004cd0:	4608      	mov	r0, r1
 8004cd2:	602b      	str	r3, [r5, #0]
 8004cd4:	f7fc fd40 	bl	8001758 <_sbrk>
 8004cd8:	1c43      	adds	r3, r0, #1
 8004cda:	d102      	bne.n	8004ce2 <_sbrk_r+0x1a>
 8004cdc:	682b      	ldr	r3, [r5, #0]
 8004cde:	b103      	cbz	r3, 8004ce2 <_sbrk_r+0x1a>
 8004ce0:	6023      	str	r3, [r4, #0]
 8004ce2:	bd38      	pop	{r3, r4, r5, pc}
 8004ce4:	20000368 	.word	0x20000368

08004ce8 <__errno>:
 8004ce8:	4b01      	ldr	r3, [pc, #4]	@ (8004cf0 <__errno+0x8>)
 8004cea:	6818      	ldr	r0, [r3, #0]
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	2000000c 	.word	0x2000000c

08004cf4 <__libc_init_array>:
 8004cf4:	b570      	push	{r4, r5, r6, lr}
 8004cf6:	4d0d      	ldr	r5, [pc, #52]	@ (8004d2c <__libc_init_array+0x38>)
 8004cf8:	4c0d      	ldr	r4, [pc, #52]	@ (8004d30 <__libc_init_array+0x3c>)
 8004cfa:	1b64      	subs	r4, r4, r5
 8004cfc:	10a4      	asrs	r4, r4, #2
 8004cfe:	2600      	movs	r6, #0
 8004d00:	42a6      	cmp	r6, r4
 8004d02:	d109      	bne.n	8004d18 <__libc_init_array+0x24>
 8004d04:	4d0b      	ldr	r5, [pc, #44]	@ (8004d34 <__libc_init_array+0x40>)
 8004d06:	4c0c      	ldr	r4, [pc, #48]	@ (8004d38 <__libc_init_array+0x44>)
 8004d08:	f000 fba8 	bl	800545c <_init>
 8004d0c:	1b64      	subs	r4, r4, r5
 8004d0e:	10a4      	asrs	r4, r4, #2
 8004d10:	2600      	movs	r6, #0
 8004d12:	42a6      	cmp	r6, r4
 8004d14:	d105      	bne.n	8004d22 <__libc_init_array+0x2e>
 8004d16:	bd70      	pop	{r4, r5, r6, pc}
 8004d18:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d1c:	4798      	blx	r3
 8004d1e:	3601      	adds	r6, #1
 8004d20:	e7ee      	b.n	8004d00 <__libc_init_array+0xc>
 8004d22:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d26:	4798      	blx	r3
 8004d28:	3601      	adds	r6, #1
 8004d2a:	e7f2      	b.n	8004d12 <__libc_init_array+0x1e>
 8004d2c:	08005538 	.word	0x08005538
 8004d30:	08005538 	.word	0x08005538
 8004d34:	08005538 	.word	0x08005538
 8004d38:	0800553c 	.word	0x0800553c

08004d3c <__retarget_lock_acquire_recursive>:
 8004d3c:	4770      	bx	lr

08004d3e <__retarget_lock_release_recursive>:
 8004d3e:	4770      	bx	lr

08004d40 <_free_r>:
 8004d40:	b538      	push	{r3, r4, r5, lr}
 8004d42:	4605      	mov	r5, r0
 8004d44:	2900      	cmp	r1, #0
 8004d46:	d041      	beq.n	8004dcc <_free_r+0x8c>
 8004d48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d4c:	1f0c      	subs	r4, r1, #4
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	bfb8      	it	lt
 8004d52:	18e4      	addlt	r4, r4, r3
 8004d54:	f7ff ff40 	bl	8004bd8 <__malloc_lock>
 8004d58:	4a1d      	ldr	r2, [pc, #116]	@ (8004dd0 <_free_r+0x90>)
 8004d5a:	6813      	ldr	r3, [r2, #0]
 8004d5c:	b933      	cbnz	r3, 8004d6c <_free_r+0x2c>
 8004d5e:	6063      	str	r3, [r4, #4]
 8004d60:	6014      	str	r4, [r2, #0]
 8004d62:	4628      	mov	r0, r5
 8004d64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d68:	f7ff bf3c 	b.w	8004be4 <__malloc_unlock>
 8004d6c:	42a3      	cmp	r3, r4
 8004d6e:	d908      	bls.n	8004d82 <_free_r+0x42>
 8004d70:	6820      	ldr	r0, [r4, #0]
 8004d72:	1821      	adds	r1, r4, r0
 8004d74:	428b      	cmp	r3, r1
 8004d76:	bf01      	itttt	eq
 8004d78:	6819      	ldreq	r1, [r3, #0]
 8004d7a:	685b      	ldreq	r3, [r3, #4]
 8004d7c:	1809      	addeq	r1, r1, r0
 8004d7e:	6021      	streq	r1, [r4, #0]
 8004d80:	e7ed      	b.n	8004d5e <_free_r+0x1e>
 8004d82:	461a      	mov	r2, r3
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	b10b      	cbz	r3, 8004d8c <_free_r+0x4c>
 8004d88:	42a3      	cmp	r3, r4
 8004d8a:	d9fa      	bls.n	8004d82 <_free_r+0x42>
 8004d8c:	6811      	ldr	r1, [r2, #0]
 8004d8e:	1850      	adds	r0, r2, r1
 8004d90:	42a0      	cmp	r0, r4
 8004d92:	d10b      	bne.n	8004dac <_free_r+0x6c>
 8004d94:	6820      	ldr	r0, [r4, #0]
 8004d96:	4401      	add	r1, r0
 8004d98:	1850      	adds	r0, r2, r1
 8004d9a:	4283      	cmp	r3, r0
 8004d9c:	6011      	str	r1, [r2, #0]
 8004d9e:	d1e0      	bne.n	8004d62 <_free_r+0x22>
 8004da0:	6818      	ldr	r0, [r3, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	6053      	str	r3, [r2, #4]
 8004da6:	4408      	add	r0, r1
 8004da8:	6010      	str	r0, [r2, #0]
 8004daa:	e7da      	b.n	8004d62 <_free_r+0x22>
 8004dac:	d902      	bls.n	8004db4 <_free_r+0x74>
 8004dae:	230c      	movs	r3, #12
 8004db0:	602b      	str	r3, [r5, #0]
 8004db2:	e7d6      	b.n	8004d62 <_free_r+0x22>
 8004db4:	6820      	ldr	r0, [r4, #0]
 8004db6:	1821      	adds	r1, r4, r0
 8004db8:	428b      	cmp	r3, r1
 8004dba:	bf04      	itt	eq
 8004dbc:	6819      	ldreq	r1, [r3, #0]
 8004dbe:	685b      	ldreq	r3, [r3, #4]
 8004dc0:	6063      	str	r3, [r4, #4]
 8004dc2:	bf04      	itt	eq
 8004dc4:	1809      	addeq	r1, r1, r0
 8004dc6:	6021      	streq	r1, [r4, #0]
 8004dc8:	6054      	str	r4, [r2, #4]
 8004dca:	e7ca      	b.n	8004d62 <_free_r+0x22>
 8004dcc:	bd38      	pop	{r3, r4, r5, pc}
 8004dce:	bf00      	nop
 8004dd0:	2000022c 	.word	0x2000022c

08004dd4 <__ssputs_r>:
 8004dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dd8:	688e      	ldr	r6, [r1, #8]
 8004dda:	461f      	mov	r7, r3
 8004ddc:	42be      	cmp	r6, r7
 8004dde:	680b      	ldr	r3, [r1, #0]
 8004de0:	4682      	mov	sl, r0
 8004de2:	460c      	mov	r4, r1
 8004de4:	4690      	mov	r8, r2
 8004de6:	d82d      	bhi.n	8004e44 <__ssputs_r+0x70>
 8004de8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004dec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004df0:	d026      	beq.n	8004e40 <__ssputs_r+0x6c>
 8004df2:	6965      	ldr	r5, [r4, #20]
 8004df4:	6909      	ldr	r1, [r1, #16]
 8004df6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004dfa:	eba3 0901 	sub.w	r9, r3, r1
 8004dfe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e02:	1c7b      	adds	r3, r7, #1
 8004e04:	444b      	add	r3, r9
 8004e06:	106d      	asrs	r5, r5, #1
 8004e08:	429d      	cmp	r5, r3
 8004e0a:	bf38      	it	cc
 8004e0c:	461d      	movcc	r5, r3
 8004e0e:	0553      	lsls	r3, r2, #21
 8004e10:	d527      	bpl.n	8004e62 <__ssputs_r+0x8e>
 8004e12:	4629      	mov	r1, r5
 8004e14:	f7ff fe60 	bl	8004ad8 <_malloc_r>
 8004e18:	4606      	mov	r6, r0
 8004e1a:	b360      	cbz	r0, 8004e76 <__ssputs_r+0xa2>
 8004e1c:	6921      	ldr	r1, [r4, #16]
 8004e1e:	464a      	mov	r2, r9
 8004e20:	f000 fad8 	bl	80053d4 <memcpy>
 8004e24:	89a3      	ldrh	r3, [r4, #12]
 8004e26:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004e2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e2e:	81a3      	strh	r3, [r4, #12]
 8004e30:	6126      	str	r6, [r4, #16]
 8004e32:	6165      	str	r5, [r4, #20]
 8004e34:	444e      	add	r6, r9
 8004e36:	eba5 0509 	sub.w	r5, r5, r9
 8004e3a:	6026      	str	r6, [r4, #0]
 8004e3c:	60a5      	str	r5, [r4, #8]
 8004e3e:	463e      	mov	r6, r7
 8004e40:	42be      	cmp	r6, r7
 8004e42:	d900      	bls.n	8004e46 <__ssputs_r+0x72>
 8004e44:	463e      	mov	r6, r7
 8004e46:	6820      	ldr	r0, [r4, #0]
 8004e48:	4632      	mov	r2, r6
 8004e4a:	4641      	mov	r1, r8
 8004e4c:	f000 faa8 	bl	80053a0 <memmove>
 8004e50:	68a3      	ldr	r3, [r4, #8]
 8004e52:	1b9b      	subs	r3, r3, r6
 8004e54:	60a3      	str	r3, [r4, #8]
 8004e56:	6823      	ldr	r3, [r4, #0]
 8004e58:	4433      	add	r3, r6
 8004e5a:	6023      	str	r3, [r4, #0]
 8004e5c:	2000      	movs	r0, #0
 8004e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e62:	462a      	mov	r2, r5
 8004e64:	f000 fac4 	bl	80053f0 <_realloc_r>
 8004e68:	4606      	mov	r6, r0
 8004e6a:	2800      	cmp	r0, #0
 8004e6c:	d1e0      	bne.n	8004e30 <__ssputs_r+0x5c>
 8004e6e:	6921      	ldr	r1, [r4, #16]
 8004e70:	4650      	mov	r0, sl
 8004e72:	f7ff ff65 	bl	8004d40 <_free_r>
 8004e76:	230c      	movs	r3, #12
 8004e78:	f8ca 3000 	str.w	r3, [sl]
 8004e7c:	89a3      	ldrh	r3, [r4, #12]
 8004e7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e82:	81a3      	strh	r3, [r4, #12]
 8004e84:	f04f 30ff 	mov.w	r0, #4294967295
 8004e88:	e7e9      	b.n	8004e5e <__ssputs_r+0x8a>
	...

08004e8c <_svfiprintf_r>:
 8004e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e90:	4698      	mov	r8, r3
 8004e92:	898b      	ldrh	r3, [r1, #12]
 8004e94:	061b      	lsls	r3, r3, #24
 8004e96:	b09d      	sub	sp, #116	@ 0x74
 8004e98:	4607      	mov	r7, r0
 8004e9a:	460d      	mov	r5, r1
 8004e9c:	4614      	mov	r4, r2
 8004e9e:	d510      	bpl.n	8004ec2 <_svfiprintf_r+0x36>
 8004ea0:	690b      	ldr	r3, [r1, #16]
 8004ea2:	b973      	cbnz	r3, 8004ec2 <_svfiprintf_r+0x36>
 8004ea4:	2140      	movs	r1, #64	@ 0x40
 8004ea6:	f7ff fe17 	bl	8004ad8 <_malloc_r>
 8004eaa:	6028      	str	r0, [r5, #0]
 8004eac:	6128      	str	r0, [r5, #16]
 8004eae:	b930      	cbnz	r0, 8004ebe <_svfiprintf_r+0x32>
 8004eb0:	230c      	movs	r3, #12
 8004eb2:	603b      	str	r3, [r7, #0]
 8004eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb8:	b01d      	add	sp, #116	@ 0x74
 8004eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ebe:	2340      	movs	r3, #64	@ 0x40
 8004ec0:	616b      	str	r3, [r5, #20]
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ec6:	2320      	movs	r3, #32
 8004ec8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004ecc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ed0:	2330      	movs	r3, #48	@ 0x30
 8004ed2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005070 <_svfiprintf_r+0x1e4>
 8004ed6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004eda:	f04f 0901 	mov.w	r9, #1
 8004ede:	4623      	mov	r3, r4
 8004ee0:	469a      	mov	sl, r3
 8004ee2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ee6:	b10a      	cbz	r2, 8004eec <_svfiprintf_r+0x60>
 8004ee8:	2a25      	cmp	r2, #37	@ 0x25
 8004eea:	d1f9      	bne.n	8004ee0 <_svfiprintf_r+0x54>
 8004eec:	ebba 0b04 	subs.w	fp, sl, r4
 8004ef0:	d00b      	beq.n	8004f0a <_svfiprintf_r+0x7e>
 8004ef2:	465b      	mov	r3, fp
 8004ef4:	4622      	mov	r2, r4
 8004ef6:	4629      	mov	r1, r5
 8004ef8:	4638      	mov	r0, r7
 8004efa:	f7ff ff6b 	bl	8004dd4 <__ssputs_r>
 8004efe:	3001      	adds	r0, #1
 8004f00:	f000 80a7 	beq.w	8005052 <_svfiprintf_r+0x1c6>
 8004f04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f06:	445a      	add	r2, fp
 8004f08:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f0a:	f89a 3000 	ldrb.w	r3, [sl]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f000 809f 	beq.w	8005052 <_svfiprintf_r+0x1c6>
 8004f14:	2300      	movs	r3, #0
 8004f16:	f04f 32ff 	mov.w	r2, #4294967295
 8004f1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f1e:	f10a 0a01 	add.w	sl, sl, #1
 8004f22:	9304      	str	r3, [sp, #16]
 8004f24:	9307      	str	r3, [sp, #28]
 8004f26:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004f2a:	931a      	str	r3, [sp, #104]	@ 0x68
 8004f2c:	4654      	mov	r4, sl
 8004f2e:	2205      	movs	r2, #5
 8004f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f34:	484e      	ldr	r0, [pc, #312]	@ (8005070 <_svfiprintf_r+0x1e4>)
 8004f36:	f7fb f953 	bl	80001e0 <memchr>
 8004f3a:	9a04      	ldr	r2, [sp, #16]
 8004f3c:	b9d8      	cbnz	r0, 8004f76 <_svfiprintf_r+0xea>
 8004f3e:	06d0      	lsls	r0, r2, #27
 8004f40:	bf44      	itt	mi
 8004f42:	2320      	movmi	r3, #32
 8004f44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f48:	0711      	lsls	r1, r2, #28
 8004f4a:	bf44      	itt	mi
 8004f4c:	232b      	movmi	r3, #43	@ 0x2b
 8004f4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f52:	f89a 3000 	ldrb.w	r3, [sl]
 8004f56:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f58:	d015      	beq.n	8004f86 <_svfiprintf_r+0xfa>
 8004f5a:	9a07      	ldr	r2, [sp, #28]
 8004f5c:	4654      	mov	r4, sl
 8004f5e:	2000      	movs	r0, #0
 8004f60:	f04f 0c0a 	mov.w	ip, #10
 8004f64:	4621      	mov	r1, r4
 8004f66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f6a:	3b30      	subs	r3, #48	@ 0x30
 8004f6c:	2b09      	cmp	r3, #9
 8004f6e:	d94b      	bls.n	8005008 <_svfiprintf_r+0x17c>
 8004f70:	b1b0      	cbz	r0, 8004fa0 <_svfiprintf_r+0x114>
 8004f72:	9207      	str	r2, [sp, #28]
 8004f74:	e014      	b.n	8004fa0 <_svfiprintf_r+0x114>
 8004f76:	eba0 0308 	sub.w	r3, r0, r8
 8004f7a:	fa09 f303 	lsl.w	r3, r9, r3
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	9304      	str	r3, [sp, #16]
 8004f82:	46a2      	mov	sl, r4
 8004f84:	e7d2      	b.n	8004f2c <_svfiprintf_r+0xa0>
 8004f86:	9b03      	ldr	r3, [sp, #12]
 8004f88:	1d19      	adds	r1, r3, #4
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	9103      	str	r1, [sp, #12]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	bfbb      	ittet	lt
 8004f92:	425b      	neglt	r3, r3
 8004f94:	f042 0202 	orrlt.w	r2, r2, #2
 8004f98:	9307      	strge	r3, [sp, #28]
 8004f9a:	9307      	strlt	r3, [sp, #28]
 8004f9c:	bfb8      	it	lt
 8004f9e:	9204      	strlt	r2, [sp, #16]
 8004fa0:	7823      	ldrb	r3, [r4, #0]
 8004fa2:	2b2e      	cmp	r3, #46	@ 0x2e
 8004fa4:	d10a      	bne.n	8004fbc <_svfiprintf_r+0x130>
 8004fa6:	7863      	ldrb	r3, [r4, #1]
 8004fa8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004faa:	d132      	bne.n	8005012 <_svfiprintf_r+0x186>
 8004fac:	9b03      	ldr	r3, [sp, #12]
 8004fae:	1d1a      	adds	r2, r3, #4
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	9203      	str	r2, [sp, #12]
 8004fb4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004fb8:	3402      	adds	r4, #2
 8004fba:	9305      	str	r3, [sp, #20]
 8004fbc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005080 <_svfiprintf_r+0x1f4>
 8004fc0:	7821      	ldrb	r1, [r4, #0]
 8004fc2:	2203      	movs	r2, #3
 8004fc4:	4650      	mov	r0, sl
 8004fc6:	f7fb f90b 	bl	80001e0 <memchr>
 8004fca:	b138      	cbz	r0, 8004fdc <_svfiprintf_r+0x150>
 8004fcc:	9b04      	ldr	r3, [sp, #16]
 8004fce:	eba0 000a 	sub.w	r0, r0, sl
 8004fd2:	2240      	movs	r2, #64	@ 0x40
 8004fd4:	4082      	lsls	r2, r0
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	3401      	adds	r4, #1
 8004fda:	9304      	str	r3, [sp, #16]
 8004fdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fe0:	4824      	ldr	r0, [pc, #144]	@ (8005074 <_svfiprintf_r+0x1e8>)
 8004fe2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004fe6:	2206      	movs	r2, #6
 8004fe8:	f7fb f8fa 	bl	80001e0 <memchr>
 8004fec:	2800      	cmp	r0, #0
 8004fee:	d036      	beq.n	800505e <_svfiprintf_r+0x1d2>
 8004ff0:	4b21      	ldr	r3, [pc, #132]	@ (8005078 <_svfiprintf_r+0x1ec>)
 8004ff2:	bb1b      	cbnz	r3, 800503c <_svfiprintf_r+0x1b0>
 8004ff4:	9b03      	ldr	r3, [sp, #12]
 8004ff6:	3307      	adds	r3, #7
 8004ff8:	f023 0307 	bic.w	r3, r3, #7
 8004ffc:	3308      	adds	r3, #8
 8004ffe:	9303      	str	r3, [sp, #12]
 8005000:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005002:	4433      	add	r3, r6
 8005004:	9309      	str	r3, [sp, #36]	@ 0x24
 8005006:	e76a      	b.n	8004ede <_svfiprintf_r+0x52>
 8005008:	fb0c 3202 	mla	r2, ip, r2, r3
 800500c:	460c      	mov	r4, r1
 800500e:	2001      	movs	r0, #1
 8005010:	e7a8      	b.n	8004f64 <_svfiprintf_r+0xd8>
 8005012:	2300      	movs	r3, #0
 8005014:	3401      	adds	r4, #1
 8005016:	9305      	str	r3, [sp, #20]
 8005018:	4619      	mov	r1, r3
 800501a:	f04f 0c0a 	mov.w	ip, #10
 800501e:	4620      	mov	r0, r4
 8005020:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005024:	3a30      	subs	r2, #48	@ 0x30
 8005026:	2a09      	cmp	r2, #9
 8005028:	d903      	bls.n	8005032 <_svfiprintf_r+0x1a6>
 800502a:	2b00      	cmp	r3, #0
 800502c:	d0c6      	beq.n	8004fbc <_svfiprintf_r+0x130>
 800502e:	9105      	str	r1, [sp, #20]
 8005030:	e7c4      	b.n	8004fbc <_svfiprintf_r+0x130>
 8005032:	fb0c 2101 	mla	r1, ip, r1, r2
 8005036:	4604      	mov	r4, r0
 8005038:	2301      	movs	r3, #1
 800503a:	e7f0      	b.n	800501e <_svfiprintf_r+0x192>
 800503c:	ab03      	add	r3, sp, #12
 800503e:	9300      	str	r3, [sp, #0]
 8005040:	462a      	mov	r2, r5
 8005042:	4b0e      	ldr	r3, [pc, #56]	@ (800507c <_svfiprintf_r+0x1f0>)
 8005044:	a904      	add	r1, sp, #16
 8005046:	4638      	mov	r0, r7
 8005048:	f3af 8000 	nop.w
 800504c:	1c42      	adds	r2, r0, #1
 800504e:	4606      	mov	r6, r0
 8005050:	d1d6      	bne.n	8005000 <_svfiprintf_r+0x174>
 8005052:	89ab      	ldrh	r3, [r5, #12]
 8005054:	065b      	lsls	r3, r3, #25
 8005056:	f53f af2d 	bmi.w	8004eb4 <_svfiprintf_r+0x28>
 800505a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800505c:	e72c      	b.n	8004eb8 <_svfiprintf_r+0x2c>
 800505e:	ab03      	add	r3, sp, #12
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	462a      	mov	r2, r5
 8005064:	4b05      	ldr	r3, [pc, #20]	@ (800507c <_svfiprintf_r+0x1f0>)
 8005066:	a904      	add	r1, sp, #16
 8005068:	4638      	mov	r0, r7
 800506a:	f000 f879 	bl	8005160 <_printf_i>
 800506e:	e7ed      	b.n	800504c <_svfiprintf_r+0x1c0>
 8005070:	080054fc 	.word	0x080054fc
 8005074:	08005506 	.word	0x08005506
 8005078:	00000000 	.word	0x00000000
 800507c:	08004dd5 	.word	0x08004dd5
 8005080:	08005502 	.word	0x08005502

08005084 <_printf_common>:
 8005084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005088:	4616      	mov	r6, r2
 800508a:	4698      	mov	r8, r3
 800508c:	688a      	ldr	r2, [r1, #8]
 800508e:	690b      	ldr	r3, [r1, #16]
 8005090:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005094:	4293      	cmp	r3, r2
 8005096:	bfb8      	it	lt
 8005098:	4613      	movlt	r3, r2
 800509a:	6033      	str	r3, [r6, #0]
 800509c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80050a0:	4607      	mov	r7, r0
 80050a2:	460c      	mov	r4, r1
 80050a4:	b10a      	cbz	r2, 80050aa <_printf_common+0x26>
 80050a6:	3301      	adds	r3, #1
 80050a8:	6033      	str	r3, [r6, #0]
 80050aa:	6823      	ldr	r3, [r4, #0]
 80050ac:	0699      	lsls	r1, r3, #26
 80050ae:	bf42      	ittt	mi
 80050b0:	6833      	ldrmi	r3, [r6, #0]
 80050b2:	3302      	addmi	r3, #2
 80050b4:	6033      	strmi	r3, [r6, #0]
 80050b6:	6825      	ldr	r5, [r4, #0]
 80050b8:	f015 0506 	ands.w	r5, r5, #6
 80050bc:	d106      	bne.n	80050cc <_printf_common+0x48>
 80050be:	f104 0a19 	add.w	sl, r4, #25
 80050c2:	68e3      	ldr	r3, [r4, #12]
 80050c4:	6832      	ldr	r2, [r6, #0]
 80050c6:	1a9b      	subs	r3, r3, r2
 80050c8:	42ab      	cmp	r3, r5
 80050ca:	dc26      	bgt.n	800511a <_printf_common+0x96>
 80050cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80050d0:	6822      	ldr	r2, [r4, #0]
 80050d2:	3b00      	subs	r3, #0
 80050d4:	bf18      	it	ne
 80050d6:	2301      	movne	r3, #1
 80050d8:	0692      	lsls	r2, r2, #26
 80050da:	d42b      	bmi.n	8005134 <_printf_common+0xb0>
 80050dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80050e0:	4641      	mov	r1, r8
 80050e2:	4638      	mov	r0, r7
 80050e4:	47c8      	blx	r9
 80050e6:	3001      	adds	r0, #1
 80050e8:	d01e      	beq.n	8005128 <_printf_common+0xa4>
 80050ea:	6823      	ldr	r3, [r4, #0]
 80050ec:	6922      	ldr	r2, [r4, #16]
 80050ee:	f003 0306 	and.w	r3, r3, #6
 80050f2:	2b04      	cmp	r3, #4
 80050f4:	bf02      	ittt	eq
 80050f6:	68e5      	ldreq	r5, [r4, #12]
 80050f8:	6833      	ldreq	r3, [r6, #0]
 80050fa:	1aed      	subeq	r5, r5, r3
 80050fc:	68a3      	ldr	r3, [r4, #8]
 80050fe:	bf0c      	ite	eq
 8005100:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005104:	2500      	movne	r5, #0
 8005106:	4293      	cmp	r3, r2
 8005108:	bfc4      	itt	gt
 800510a:	1a9b      	subgt	r3, r3, r2
 800510c:	18ed      	addgt	r5, r5, r3
 800510e:	2600      	movs	r6, #0
 8005110:	341a      	adds	r4, #26
 8005112:	42b5      	cmp	r5, r6
 8005114:	d11a      	bne.n	800514c <_printf_common+0xc8>
 8005116:	2000      	movs	r0, #0
 8005118:	e008      	b.n	800512c <_printf_common+0xa8>
 800511a:	2301      	movs	r3, #1
 800511c:	4652      	mov	r2, sl
 800511e:	4641      	mov	r1, r8
 8005120:	4638      	mov	r0, r7
 8005122:	47c8      	blx	r9
 8005124:	3001      	adds	r0, #1
 8005126:	d103      	bne.n	8005130 <_printf_common+0xac>
 8005128:	f04f 30ff 	mov.w	r0, #4294967295
 800512c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005130:	3501      	adds	r5, #1
 8005132:	e7c6      	b.n	80050c2 <_printf_common+0x3e>
 8005134:	18e1      	adds	r1, r4, r3
 8005136:	1c5a      	adds	r2, r3, #1
 8005138:	2030      	movs	r0, #48	@ 0x30
 800513a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800513e:	4422      	add	r2, r4
 8005140:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005144:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005148:	3302      	adds	r3, #2
 800514a:	e7c7      	b.n	80050dc <_printf_common+0x58>
 800514c:	2301      	movs	r3, #1
 800514e:	4622      	mov	r2, r4
 8005150:	4641      	mov	r1, r8
 8005152:	4638      	mov	r0, r7
 8005154:	47c8      	blx	r9
 8005156:	3001      	adds	r0, #1
 8005158:	d0e6      	beq.n	8005128 <_printf_common+0xa4>
 800515a:	3601      	adds	r6, #1
 800515c:	e7d9      	b.n	8005112 <_printf_common+0x8e>
	...

08005160 <_printf_i>:
 8005160:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005164:	7e0f      	ldrb	r7, [r1, #24]
 8005166:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005168:	2f78      	cmp	r7, #120	@ 0x78
 800516a:	4691      	mov	r9, r2
 800516c:	4680      	mov	r8, r0
 800516e:	460c      	mov	r4, r1
 8005170:	469a      	mov	sl, r3
 8005172:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005176:	d807      	bhi.n	8005188 <_printf_i+0x28>
 8005178:	2f62      	cmp	r7, #98	@ 0x62
 800517a:	d80a      	bhi.n	8005192 <_printf_i+0x32>
 800517c:	2f00      	cmp	r7, #0
 800517e:	f000 80d2 	beq.w	8005326 <_printf_i+0x1c6>
 8005182:	2f58      	cmp	r7, #88	@ 0x58
 8005184:	f000 80b9 	beq.w	80052fa <_printf_i+0x19a>
 8005188:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800518c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005190:	e03a      	b.n	8005208 <_printf_i+0xa8>
 8005192:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005196:	2b15      	cmp	r3, #21
 8005198:	d8f6      	bhi.n	8005188 <_printf_i+0x28>
 800519a:	a101      	add	r1, pc, #4	@ (adr r1, 80051a0 <_printf_i+0x40>)
 800519c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051a0:	080051f9 	.word	0x080051f9
 80051a4:	0800520d 	.word	0x0800520d
 80051a8:	08005189 	.word	0x08005189
 80051ac:	08005189 	.word	0x08005189
 80051b0:	08005189 	.word	0x08005189
 80051b4:	08005189 	.word	0x08005189
 80051b8:	0800520d 	.word	0x0800520d
 80051bc:	08005189 	.word	0x08005189
 80051c0:	08005189 	.word	0x08005189
 80051c4:	08005189 	.word	0x08005189
 80051c8:	08005189 	.word	0x08005189
 80051cc:	0800530d 	.word	0x0800530d
 80051d0:	08005237 	.word	0x08005237
 80051d4:	080052c7 	.word	0x080052c7
 80051d8:	08005189 	.word	0x08005189
 80051dc:	08005189 	.word	0x08005189
 80051e0:	0800532f 	.word	0x0800532f
 80051e4:	08005189 	.word	0x08005189
 80051e8:	08005237 	.word	0x08005237
 80051ec:	08005189 	.word	0x08005189
 80051f0:	08005189 	.word	0x08005189
 80051f4:	080052cf 	.word	0x080052cf
 80051f8:	6833      	ldr	r3, [r6, #0]
 80051fa:	1d1a      	adds	r2, r3, #4
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	6032      	str	r2, [r6, #0]
 8005200:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005204:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005208:	2301      	movs	r3, #1
 800520a:	e09d      	b.n	8005348 <_printf_i+0x1e8>
 800520c:	6833      	ldr	r3, [r6, #0]
 800520e:	6820      	ldr	r0, [r4, #0]
 8005210:	1d19      	adds	r1, r3, #4
 8005212:	6031      	str	r1, [r6, #0]
 8005214:	0606      	lsls	r6, r0, #24
 8005216:	d501      	bpl.n	800521c <_printf_i+0xbc>
 8005218:	681d      	ldr	r5, [r3, #0]
 800521a:	e003      	b.n	8005224 <_printf_i+0xc4>
 800521c:	0645      	lsls	r5, r0, #25
 800521e:	d5fb      	bpl.n	8005218 <_printf_i+0xb8>
 8005220:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005224:	2d00      	cmp	r5, #0
 8005226:	da03      	bge.n	8005230 <_printf_i+0xd0>
 8005228:	232d      	movs	r3, #45	@ 0x2d
 800522a:	426d      	negs	r5, r5
 800522c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005230:	4859      	ldr	r0, [pc, #356]	@ (8005398 <_printf_i+0x238>)
 8005232:	230a      	movs	r3, #10
 8005234:	e011      	b.n	800525a <_printf_i+0xfa>
 8005236:	6821      	ldr	r1, [r4, #0]
 8005238:	6833      	ldr	r3, [r6, #0]
 800523a:	0608      	lsls	r0, r1, #24
 800523c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005240:	d402      	bmi.n	8005248 <_printf_i+0xe8>
 8005242:	0649      	lsls	r1, r1, #25
 8005244:	bf48      	it	mi
 8005246:	b2ad      	uxthmi	r5, r5
 8005248:	2f6f      	cmp	r7, #111	@ 0x6f
 800524a:	4853      	ldr	r0, [pc, #332]	@ (8005398 <_printf_i+0x238>)
 800524c:	6033      	str	r3, [r6, #0]
 800524e:	bf14      	ite	ne
 8005250:	230a      	movne	r3, #10
 8005252:	2308      	moveq	r3, #8
 8005254:	2100      	movs	r1, #0
 8005256:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800525a:	6866      	ldr	r6, [r4, #4]
 800525c:	60a6      	str	r6, [r4, #8]
 800525e:	2e00      	cmp	r6, #0
 8005260:	bfa2      	ittt	ge
 8005262:	6821      	ldrge	r1, [r4, #0]
 8005264:	f021 0104 	bicge.w	r1, r1, #4
 8005268:	6021      	strge	r1, [r4, #0]
 800526a:	b90d      	cbnz	r5, 8005270 <_printf_i+0x110>
 800526c:	2e00      	cmp	r6, #0
 800526e:	d04b      	beq.n	8005308 <_printf_i+0x1a8>
 8005270:	4616      	mov	r6, r2
 8005272:	fbb5 f1f3 	udiv	r1, r5, r3
 8005276:	fb03 5711 	mls	r7, r3, r1, r5
 800527a:	5dc7      	ldrb	r7, [r0, r7]
 800527c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005280:	462f      	mov	r7, r5
 8005282:	42bb      	cmp	r3, r7
 8005284:	460d      	mov	r5, r1
 8005286:	d9f4      	bls.n	8005272 <_printf_i+0x112>
 8005288:	2b08      	cmp	r3, #8
 800528a:	d10b      	bne.n	80052a4 <_printf_i+0x144>
 800528c:	6823      	ldr	r3, [r4, #0]
 800528e:	07df      	lsls	r7, r3, #31
 8005290:	d508      	bpl.n	80052a4 <_printf_i+0x144>
 8005292:	6923      	ldr	r3, [r4, #16]
 8005294:	6861      	ldr	r1, [r4, #4]
 8005296:	4299      	cmp	r1, r3
 8005298:	bfde      	ittt	le
 800529a:	2330      	movle	r3, #48	@ 0x30
 800529c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80052a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80052a4:	1b92      	subs	r2, r2, r6
 80052a6:	6122      	str	r2, [r4, #16]
 80052a8:	f8cd a000 	str.w	sl, [sp]
 80052ac:	464b      	mov	r3, r9
 80052ae:	aa03      	add	r2, sp, #12
 80052b0:	4621      	mov	r1, r4
 80052b2:	4640      	mov	r0, r8
 80052b4:	f7ff fee6 	bl	8005084 <_printf_common>
 80052b8:	3001      	adds	r0, #1
 80052ba:	d14a      	bne.n	8005352 <_printf_i+0x1f2>
 80052bc:	f04f 30ff 	mov.w	r0, #4294967295
 80052c0:	b004      	add	sp, #16
 80052c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052c6:	6823      	ldr	r3, [r4, #0]
 80052c8:	f043 0320 	orr.w	r3, r3, #32
 80052cc:	6023      	str	r3, [r4, #0]
 80052ce:	4833      	ldr	r0, [pc, #204]	@ (800539c <_printf_i+0x23c>)
 80052d0:	2778      	movs	r7, #120	@ 0x78
 80052d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80052d6:	6823      	ldr	r3, [r4, #0]
 80052d8:	6831      	ldr	r1, [r6, #0]
 80052da:	061f      	lsls	r7, r3, #24
 80052dc:	f851 5b04 	ldr.w	r5, [r1], #4
 80052e0:	d402      	bmi.n	80052e8 <_printf_i+0x188>
 80052e2:	065f      	lsls	r7, r3, #25
 80052e4:	bf48      	it	mi
 80052e6:	b2ad      	uxthmi	r5, r5
 80052e8:	6031      	str	r1, [r6, #0]
 80052ea:	07d9      	lsls	r1, r3, #31
 80052ec:	bf44      	itt	mi
 80052ee:	f043 0320 	orrmi.w	r3, r3, #32
 80052f2:	6023      	strmi	r3, [r4, #0]
 80052f4:	b11d      	cbz	r5, 80052fe <_printf_i+0x19e>
 80052f6:	2310      	movs	r3, #16
 80052f8:	e7ac      	b.n	8005254 <_printf_i+0xf4>
 80052fa:	4827      	ldr	r0, [pc, #156]	@ (8005398 <_printf_i+0x238>)
 80052fc:	e7e9      	b.n	80052d2 <_printf_i+0x172>
 80052fe:	6823      	ldr	r3, [r4, #0]
 8005300:	f023 0320 	bic.w	r3, r3, #32
 8005304:	6023      	str	r3, [r4, #0]
 8005306:	e7f6      	b.n	80052f6 <_printf_i+0x196>
 8005308:	4616      	mov	r6, r2
 800530a:	e7bd      	b.n	8005288 <_printf_i+0x128>
 800530c:	6833      	ldr	r3, [r6, #0]
 800530e:	6825      	ldr	r5, [r4, #0]
 8005310:	6961      	ldr	r1, [r4, #20]
 8005312:	1d18      	adds	r0, r3, #4
 8005314:	6030      	str	r0, [r6, #0]
 8005316:	062e      	lsls	r6, r5, #24
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	d501      	bpl.n	8005320 <_printf_i+0x1c0>
 800531c:	6019      	str	r1, [r3, #0]
 800531e:	e002      	b.n	8005326 <_printf_i+0x1c6>
 8005320:	0668      	lsls	r0, r5, #25
 8005322:	d5fb      	bpl.n	800531c <_printf_i+0x1bc>
 8005324:	8019      	strh	r1, [r3, #0]
 8005326:	2300      	movs	r3, #0
 8005328:	6123      	str	r3, [r4, #16]
 800532a:	4616      	mov	r6, r2
 800532c:	e7bc      	b.n	80052a8 <_printf_i+0x148>
 800532e:	6833      	ldr	r3, [r6, #0]
 8005330:	1d1a      	adds	r2, r3, #4
 8005332:	6032      	str	r2, [r6, #0]
 8005334:	681e      	ldr	r6, [r3, #0]
 8005336:	6862      	ldr	r2, [r4, #4]
 8005338:	2100      	movs	r1, #0
 800533a:	4630      	mov	r0, r6
 800533c:	f7fa ff50 	bl	80001e0 <memchr>
 8005340:	b108      	cbz	r0, 8005346 <_printf_i+0x1e6>
 8005342:	1b80      	subs	r0, r0, r6
 8005344:	6060      	str	r0, [r4, #4]
 8005346:	6863      	ldr	r3, [r4, #4]
 8005348:	6123      	str	r3, [r4, #16]
 800534a:	2300      	movs	r3, #0
 800534c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005350:	e7aa      	b.n	80052a8 <_printf_i+0x148>
 8005352:	6923      	ldr	r3, [r4, #16]
 8005354:	4632      	mov	r2, r6
 8005356:	4649      	mov	r1, r9
 8005358:	4640      	mov	r0, r8
 800535a:	47d0      	blx	sl
 800535c:	3001      	adds	r0, #1
 800535e:	d0ad      	beq.n	80052bc <_printf_i+0x15c>
 8005360:	6823      	ldr	r3, [r4, #0]
 8005362:	079b      	lsls	r3, r3, #30
 8005364:	d413      	bmi.n	800538e <_printf_i+0x22e>
 8005366:	68e0      	ldr	r0, [r4, #12]
 8005368:	9b03      	ldr	r3, [sp, #12]
 800536a:	4298      	cmp	r0, r3
 800536c:	bfb8      	it	lt
 800536e:	4618      	movlt	r0, r3
 8005370:	e7a6      	b.n	80052c0 <_printf_i+0x160>
 8005372:	2301      	movs	r3, #1
 8005374:	4632      	mov	r2, r6
 8005376:	4649      	mov	r1, r9
 8005378:	4640      	mov	r0, r8
 800537a:	47d0      	blx	sl
 800537c:	3001      	adds	r0, #1
 800537e:	d09d      	beq.n	80052bc <_printf_i+0x15c>
 8005380:	3501      	adds	r5, #1
 8005382:	68e3      	ldr	r3, [r4, #12]
 8005384:	9903      	ldr	r1, [sp, #12]
 8005386:	1a5b      	subs	r3, r3, r1
 8005388:	42ab      	cmp	r3, r5
 800538a:	dcf2      	bgt.n	8005372 <_printf_i+0x212>
 800538c:	e7eb      	b.n	8005366 <_printf_i+0x206>
 800538e:	2500      	movs	r5, #0
 8005390:	f104 0619 	add.w	r6, r4, #25
 8005394:	e7f5      	b.n	8005382 <_printf_i+0x222>
 8005396:	bf00      	nop
 8005398:	0800550d 	.word	0x0800550d
 800539c:	0800551e 	.word	0x0800551e

080053a0 <memmove>:
 80053a0:	4288      	cmp	r0, r1
 80053a2:	b510      	push	{r4, lr}
 80053a4:	eb01 0402 	add.w	r4, r1, r2
 80053a8:	d902      	bls.n	80053b0 <memmove+0x10>
 80053aa:	4284      	cmp	r4, r0
 80053ac:	4623      	mov	r3, r4
 80053ae:	d807      	bhi.n	80053c0 <memmove+0x20>
 80053b0:	1e43      	subs	r3, r0, #1
 80053b2:	42a1      	cmp	r1, r4
 80053b4:	d008      	beq.n	80053c8 <memmove+0x28>
 80053b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80053be:	e7f8      	b.n	80053b2 <memmove+0x12>
 80053c0:	4402      	add	r2, r0
 80053c2:	4601      	mov	r1, r0
 80053c4:	428a      	cmp	r2, r1
 80053c6:	d100      	bne.n	80053ca <memmove+0x2a>
 80053c8:	bd10      	pop	{r4, pc}
 80053ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80053d2:	e7f7      	b.n	80053c4 <memmove+0x24>

080053d4 <memcpy>:
 80053d4:	440a      	add	r2, r1
 80053d6:	4291      	cmp	r1, r2
 80053d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80053dc:	d100      	bne.n	80053e0 <memcpy+0xc>
 80053de:	4770      	bx	lr
 80053e0:	b510      	push	{r4, lr}
 80053e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053ea:	4291      	cmp	r1, r2
 80053ec:	d1f9      	bne.n	80053e2 <memcpy+0xe>
 80053ee:	bd10      	pop	{r4, pc}

080053f0 <_realloc_r>:
 80053f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053f4:	4680      	mov	r8, r0
 80053f6:	4615      	mov	r5, r2
 80053f8:	460c      	mov	r4, r1
 80053fa:	b921      	cbnz	r1, 8005406 <_realloc_r+0x16>
 80053fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005400:	4611      	mov	r1, r2
 8005402:	f7ff bb69 	b.w	8004ad8 <_malloc_r>
 8005406:	b92a      	cbnz	r2, 8005414 <_realloc_r+0x24>
 8005408:	f7ff fc9a 	bl	8004d40 <_free_r>
 800540c:	2400      	movs	r4, #0
 800540e:	4620      	mov	r0, r4
 8005410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005414:	f000 f81a 	bl	800544c <_malloc_usable_size_r>
 8005418:	4285      	cmp	r5, r0
 800541a:	4606      	mov	r6, r0
 800541c:	d802      	bhi.n	8005424 <_realloc_r+0x34>
 800541e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005422:	d8f4      	bhi.n	800540e <_realloc_r+0x1e>
 8005424:	4629      	mov	r1, r5
 8005426:	4640      	mov	r0, r8
 8005428:	f7ff fb56 	bl	8004ad8 <_malloc_r>
 800542c:	4607      	mov	r7, r0
 800542e:	2800      	cmp	r0, #0
 8005430:	d0ec      	beq.n	800540c <_realloc_r+0x1c>
 8005432:	42b5      	cmp	r5, r6
 8005434:	462a      	mov	r2, r5
 8005436:	4621      	mov	r1, r4
 8005438:	bf28      	it	cs
 800543a:	4632      	movcs	r2, r6
 800543c:	f7ff ffca 	bl	80053d4 <memcpy>
 8005440:	4621      	mov	r1, r4
 8005442:	4640      	mov	r0, r8
 8005444:	f7ff fc7c 	bl	8004d40 <_free_r>
 8005448:	463c      	mov	r4, r7
 800544a:	e7e0      	b.n	800540e <_realloc_r+0x1e>

0800544c <_malloc_usable_size_r>:
 800544c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005450:	1f18      	subs	r0, r3, #4
 8005452:	2b00      	cmp	r3, #0
 8005454:	bfbc      	itt	lt
 8005456:	580b      	ldrlt	r3, [r1, r0]
 8005458:	18c0      	addlt	r0, r0, r3
 800545a:	4770      	bx	lr

0800545c <_init>:
 800545c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800545e:	bf00      	nop
 8005460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005462:	bc08      	pop	{r3}
 8005464:	469e      	mov	lr, r3
 8005466:	4770      	bx	lr

08005468 <_fini>:
 8005468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800546a:	bf00      	nop
 800546c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800546e:	bc08      	pop	{r3}
 8005470:	469e      	mov	lr, r3
 8005472:	4770      	bx	lr
