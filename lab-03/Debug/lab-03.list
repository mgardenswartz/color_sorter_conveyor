
lab-03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059b8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08005b58  08005b58  00006b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bf0  08005bf0  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005bf0  08005bf0  00006bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bf8  08005bf8  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bf8  08005bf8  00006bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005bfc  08005bfc  00006bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005c00  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  2000005c  08005c5c  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  08005c5c  00007304  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd67  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027fe  00000000  00000000  00016df3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  000195f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000af9  00000000  00000000  0001a3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b446  00000000  00000000  0001aed1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e36  00000000  00000000  00036317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093903  00000000  00000000  0004714d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000daa50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040a0  00000000  00000000  000daa94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009a  00000000  00000000  000deb34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005b40 	.word	0x08005b40

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08005b40 	.word	0x08005b40

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <_ZN11MotorDriverC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftmS3_tm>:
 *      Author: Max Gardenswartz
 */

#include "MotorDriver.h"

MotorDriver::MotorDriver(TIM_HandleTypeDef* timer,
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
 800057c:	807b      	strh	r3, [r7, #2]
	GPIO_TypeDef* pin_1_group, uint16_t pin_1, uint32_t pin_1_timer_channel,
	GPIO_TypeDef* pin_2_group, uint16_t pin_2, uint32_t pin_2_timer_channel)
		: timer(timer),
		  pin_1_group(pin_1_group), pin_1(pin_1), pin_1_timer_channel(pin_1_timer_channel),
		  pin_2_group(pin_2_group), pin_2(pin_2), pin_2_timer_channel(pin_2_timer_channel)
 800057e:	4a14      	ldr	r2, [pc, #80]	@ (80005d0 <_ZN11MotorDriverC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftmS3_tm+0x60>)
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	601a      	str	r2, [r3, #0]
		: timer(timer),
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	68ba      	ldr	r2, [r7, #8]
 8000588:	605a      	str	r2, [r3, #4]
		  pin_1_group(pin_1_group), pin_1(pin_1), pin_1_timer_channel(pin_1_timer_channel),
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	687a      	ldr	r2, [r7, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	887a      	ldrh	r2, [r7, #2]
 8000594:	819a      	strh	r2, [r3, #12]
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	69ba      	ldr	r2, [r7, #24]
 800059a:	611a      	str	r2, [r3, #16]
		  pin_2_group(pin_2_group), pin_2(pin_2), pin_2_timer_channel(pin_2_timer_channel)
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	69fa      	ldr	r2, [r7, #28]
 80005a0:	615a      	str	r2, [r3, #20]
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	8c3a      	ldrh	r2, [r7, #32]
 80005a6:	831a      	strh	r2, [r3, #24]
 80005a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	835a      	strh	r2, [r3, #26]
{
	// Motor stop
	disable();
 80005b0:	68f8      	ldr	r0, [r7, #12]
 80005b2:	f000 f9d6 	bl	8000962 <_ZN11MotorDriver7disableEv>

	// Set the auto_reload_value
	auto_reload_value = timer->Init.Period;
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	68da      	ldr	r2, [r3, #12]
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	61da      	str	r2, [r3, #28]

	// Start the PWM generation
	enable();
 80005be:	68f8      	ldr	r0, [r7, #12]
 80005c0:	f000 f9b7 	bl	8000932 <_ZN11MotorDriver6enableEv>
}
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	4618      	mov	r0, r3
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	08005b7c 	.word	0x08005b7c

080005d4 <_ZN11MotorDriverD1Ev>:

MotorDriver::~MotorDriver()
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	4a04      	ldr	r2, [pc, #16]	@ (80005f0 <_ZN11MotorDriverD1Ev+0x1c>)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4618      	mov	r0, r3
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	08005b7c 	.word	0x08005b7c

080005f4 <_ZN11MotorDriverD0Ev>:
MotorDriver::~MotorDriver()
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
}
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f7ff ffe9 	bl	80005d4 <_ZN11MotorDriverD1Ev>
 8000602:	2120      	movs	r1, #32
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f004 fd6d 	bl	80050e4 <_ZdlPvj>
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4618      	mov	r0, r3
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <_ZN11MotorDriver8set_dutyEf>:

void MotorDriver::set_duty(float duty = 0)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	ed87 0a00 	vstr	s0, [r7]

	// Update duty cycle
	if(duty>=0)
 8000620:	edd7 7a00 	vldr	s15, [r7]
 8000624:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800062c:	db61      	blt.n	80006f2 <_ZN11MotorDriver8set_dutyEf+0xde>
	{
		uint32_t compare_value = (100-duty)*auto_reload_value/100;
 800062e:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 80007cc <_ZN11MotorDriver8set_dutyEf+0x1b8>
 8000632:	edd7 7a00 	vldr	s15, [r7]
 8000636:	ee37 7a67 	vsub.f32	s14, s14, s15
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	69db      	ldr	r3, [r3, #28]
 800063e:	ee07 3a90 	vmov	s15, r3
 8000642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000646:	ee27 7a27 	vmul.f32	s14, s14, s15
 800064a:	eddf 6a60 	vldr	s13, [pc, #384]	@ 80007cc <_ZN11MotorDriver8set_dutyEf+0x1b8>
 800064e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000652:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000656:	ee17 3a90 	vmov	r3, s15
 800065a:	60bb      	str	r3, [r7, #8]

		// Raise pin 1
		__HAL_TIM_SET_COMPARE(timer, pin_1_timer_channel, auto_reload_value);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	691b      	ldr	r3, [r3, #16]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d106      	bne.n	8000672 <_ZN11MotorDriver8set_dutyEf+0x5e>
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	685b      	ldr	r3, [r3, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	687a      	ldr	r2, [r7, #4]
 800066c:	69d2      	ldr	r2, [r2, #28]
 800066e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000670:	e01b      	b.n	80006aa <_ZN11MotorDriver8set_dutyEf+0x96>
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	691b      	ldr	r3, [r3, #16]
 8000676:	2b04      	cmp	r3, #4
 8000678:	d106      	bne.n	8000688 <_ZN11MotorDriver8set_dutyEf+0x74>
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	685b      	ldr	r3, [r3, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	69d2      	ldr	r2, [r2, #28]
 8000684:	639a      	str	r2, [r3, #56]	@ 0x38
 8000686:	e010      	b.n	80006aa <_ZN11MotorDriver8set_dutyEf+0x96>
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	691b      	ldr	r3, [r3, #16]
 800068c:	2b08      	cmp	r3, #8
 800068e:	d106      	bne.n	800069e <_ZN11MotorDriver8set_dutyEf+0x8a>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	69d2      	ldr	r2, [r2, #28]
 800069a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800069c:	e005      	b.n	80006aa <_ZN11MotorDriver8set_dutyEf+0x96>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	69d2      	ldr	r2, [r2, #28]
 80006a8:	641a      	str	r2, [r3, #64]	@ 0x40

		// Update duty cycle on pin 2
		__HAL_TIM_SET_COMPARE(timer, pin_2_timer_channel, compare_value);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	8b5b      	ldrh	r3, [r3, #26]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d105      	bne.n	80006be <_ZN11MotorDriver8set_dutyEf+0xaa>
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	685b      	ldr	r3, [r3, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	68ba      	ldr	r2, [r7, #8]
 80006ba:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(timer, pin_2_timer_channel, auto_reload_value);

		// Update duty cycle on pin 1
		__HAL_TIM_SET_COMPARE(timer, pin_1_timer_channel, compare_value);
	}
}
 80006bc:	e080      	b.n	80007c0 <_ZN11MotorDriver8set_dutyEf+0x1ac>
		__HAL_TIM_SET_COMPARE(timer, pin_2_timer_channel, compare_value);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	8b5b      	ldrh	r3, [r3, #26]
 80006c2:	2b04      	cmp	r3, #4
 80006c4:	d105      	bne.n	80006d2 <_ZN11MotorDriver8set_dutyEf+0xbe>
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	685b      	ldr	r3, [r3, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	68ba      	ldr	r2, [r7, #8]
 80006ce:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80006d0:	e076      	b.n	80007c0 <_ZN11MotorDriver8set_dutyEf+0x1ac>
		__HAL_TIM_SET_COMPARE(timer, pin_2_timer_channel, compare_value);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	8b5b      	ldrh	r3, [r3, #26]
 80006d6:	2b08      	cmp	r3, #8
 80006d8:	d105      	bne.n	80006e6 <_ZN11MotorDriver8set_dutyEf+0xd2>
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	685b      	ldr	r3, [r3, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	68ba      	ldr	r2, [r7, #8]
 80006e2:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80006e4:	e06c      	b.n	80007c0 <_ZN11MotorDriver8set_dutyEf+0x1ac>
		__HAL_TIM_SET_COMPARE(timer, pin_2_timer_channel, compare_value);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	68ba      	ldr	r2, [r7, #8]
 80006ee:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80006f0:	e066      	b.n	80007c0 <_ZN11MotorDriver8set_dutyEf+0x1ac>
		duty *= -1;
 80006f2:	edd7 7a00 	vldr	s15, [r7]
 80006f6:	eef1 7a67 	vneg.f32	s15, s15
 80006fa:	edc7 7a00 	vstr	s15, [r7]
		uint32_t compare_value = (100-duty)*auto_reload_value/100;
 80006fe:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80007cc <_ZN11MotorDriver8set_dutyEf+0x1b8>
 8000702:	edd7 7a00 	vldr	s15, [r7]
 8000706:	ee37 7a67 	vsub.f32	s14, s14, s15
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	69db      	ldr	r3, [r3, #28]
 800070e:	ee07 3a90 	vmov	s15, r3
 8000712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000716:	ee27 7a27 	vmul.f32	s14, s14, s15
 800071a:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 80007cc <_ZN11MotorDriver8set_dutyEf+0x1b8>
 800071e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000722:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000726:	ee17 3a90 	vmov	r3, s15
 800072a:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_COMPARE(timer, pin_2_timer_channel, auto_reload_value);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	8b5b      	ldrh	r3, [r3, #26]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d106      	bne.n	8000742 <_ZN11MotorDriver8set_dutyEf+0x12e>
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	685b      	ldr	r3, [r3, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	69d2      	ldr	r2, [r2, #28]
 800073e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000740:	e01b      	b.n	800077a <_ZN11MotorDriver8set_dutyEf+0x166>
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	8b5b      	ldrh	r3, [r3, #26]
 8000746:	2b04      	cmp	r3, #4
 8000748:	d106      	bne.n	8000758 <_ZN11MotorDriver8set_dutyEf+0x144>
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	685b      	ldr	r3, [r3, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	69d2      	ldr	r2, [r2, #28]
 8000754:	639a      	str	r2, [r3, #56]	@ 0x38
 8000756:	e010      	b.n	800077a <_ZN11MotorDriver8set_dutyEf+0x166>
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	8b5b      	ldrh	r3, [r3, #26]
 800075c:	2b08      	cmp	r3, #8
 800075e:	d106      	bne.n	800076e <_ZN11MotorDriver8set_dutyEf+0x15a>
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	69d2      	ldr	r2, [r2, #28]
 800076a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800076c:	e005      	b.n	800077a <_ZN11MotorDriver8set_dutyEf+0x166>
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	69d2      	ldr	r2, [r2, #28]
 8000778:	641a      	str	r2, [r3, #64]	@ 0x40
		__HAL_TIM_SET_COMPARE(timer, pin_1_timer_channel, compare_value);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	691b      	ldr	r3, [r3, #16]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d105      	bne.n	800078e <_ZN11MotorDriver8set_dutyEf+0x17a>
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	68fa      	ldr	r2, [r7, #12]
 800078a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800078c:	e018      	b.n	80007c0 <_ZN11MotorDriver8set_dutyEf+0x1ac>
		__HAL_TIM_SET_COMPARE(timer, pin_1_timer_channel, compare_value);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	691b      	ldr	r3, [r3, #16]
 8000792:	2b04      	cmp	r3, #4
 8000794:	d105      	bne.n	80007a2 <_ZN11MotorDriver8set_dutyEf+0x18e>
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	68fa      	ldr	r2, [r7, #12]
 800079e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80007a0:	e00e      	b.n	80007c0 <_ZN11MotorDriver8set_dutyEf+0x1ac>
		__HAL_TIM_SET_COMPARE(timer, pin_1_timer_channel, compare_value);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	691b      	ldr	r3, [r3, #16]
 80007a6:	2b08      	cmp	r3, #8
 80007a8:	d105      	bne.n	80007b6 <_ZN11MotorDriver8set_dutyEf+0x1a2>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	68fa      	ldr	r2, [r7, #12]
 80007b2:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80007b4:	e004      	b.n	80007c0 <_ZN11MotorDriver8set_dutyEf+0x1ac>
		__HAL_TIM_SET_COMPARE(timer, pin_1_timer_channel, compare_value);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	68fa      	ldr	r2, [r7, #12]
 80007be:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80007c0:	bf00      	nop
 80007c2:	3714      	adds	r7, #20
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	42c80000 	.word	0x42c80000

080007d0 <_ZN11MotorDriver26set_inverted_compare_valueElbb>:

void MotorDriver::set_inverted_compare_value(int32_t compare_value, bool direction, bool inverted)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	4611      	mov	r1, r2
 80007dc:	461a      	mov	r2, r3
 80007de:	460b      	mov	r3, r1
 80007e0:	71fb      	strb	r3, [r7, #7]
 80007e2:	4613      	mov	r3, r2
 80007e4:	71bb      	strb	r3, [r7, #6]
	// Get the auto_reload_value
	if(inverted)
 80007e6:	79bb      	ldrb	r3, [r7, #6]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d004      	beq.n	80007f6 <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x26>
	{
		compare_value = auto_reload_value - compare_value;
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	69da      	ldr	r2, [r3, #28]
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	1ad3      	subs	r3, r2, r3
 80007f4:	60bb      	str	r3, [r7, #8]
//	{
//		compare_value = auto_reload_value;
//	}

	// Direction
	if(direction)
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d04a      	beq.n	8000892 <_ZN11MotorDriver26set_inverted_compare_valueElbb+0xc2>
	{
		// Raise pin 2
		__HAL_TIM_SET_COMPARE(timer, pin_2_timer_channel, auto_reload_value);
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	8b5b      	ldrh	r3, [r3, #26]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d106      	bne.n	8000812 <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x42>
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	68fa      	ldr	r2, [r7, #12]
 800080c:	69d2      	ldr	r2, [r2, #28]
 800080e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000810:	e01b      	b.n	800084a <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x7a>
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	8b5b      	ldrh	r3, [r3, #26]
 8000816:	2b04      	cmp	r3, #4
 8000818:	d106      	bne.n	8000828 <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x58>
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	68fa      	ldr	r2, [r7, #12]
 8000822:	69d2      	ldr	r2, [r2, #28]
 8000824:	639a      	str	r2, [r3, #56]	@ 0x38
 8000826:	e010      	b.n	800084a <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x7a>
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	8b5b      	ldrh	r3, [r3, #26]
 800082c:	2b08      	cmp	r3, #8
 800082e:	d106      	bne.n	800083e <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x6e>
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	68fa      	ldr	r2, [r7, #12]
 8000838:	69d2      	ldr	r2, [r2, #28]
 800083a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800083c:	e005      	b.n	800084a <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x7a>
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	68fa      	ldr	r2, [r7, #12]
 8000846:	69d2      	ldr	r2, [r2, #28]
 8000848:	641a      	str	r2, [r3, #64]	@ 0x40

		// Update duty cycle on pin 1
		__HAL_TIM_SET_COMPARE(timer, pin_1_timer_channel, compare_value);
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	691b      	ldr	r3, [r3, #16]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d105      	bne.n	800085e <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x8e>
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	68ba      	ldr	r2, [r7, #8]
 800085a:	635a      	str	r2, [r3, #52]	@ 0x34

		// Update duty cycle on pin 2
		__HAL_TIM_SET_COMPARE(timer, pin_2_timer_channel, compare_value);
	}

}
 800085c:	e063      	b.n	8000926 <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x156>
		__HAL_TIM_SET_COMPARE(timer, pin_1_timer_channel, compare_value);
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	691b      	ldr	r3, [r3, #16]
 8000862:	2b04      	cmp	r3, #4
 8000864:	d105      	bne.n	8000872 <_ZN11MotorDriver26set_inverted_compare_valueElbb+0xa2>
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	68ba      	ldr	r2, [r7, #8]
 800086e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000870:	e059      	b.n	8000926 <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x156>
		__HAL_TIM_SET_COMPARE(timer, pin_1_timer_channel, compare_value);
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	691b      	ldr	r3, [r3, #16]
 8000876:	2b08      	cmp	r3, #8
 8000878:	d105      	bne.n	8000886 <_ZN11MotorDriver26set_inverted_compare_valueElbb+0xb6>
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	68ba      	ldr	r2, [r7, #8]
 8000882:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000884:	e04f      	b.n	8000926 <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x156>
		__HAL_TIM_SET_COMPARE(timer, pin_1_timer_channel, compare_value);
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	68ba      	ldr	r2, [r7, #8]
 800088e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000890:	e049      	b.n	8000926 <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x156>
		__HAL_TIM_SET_COMPARE(timer, pin_1_timer_channel, auto_reload_value);
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	691b      	ldr	r3, [r3, #16]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d106      	bne.n	80008a8 <_ZN11MotorDriver26set_inverted_compare_valueElbb+0xd8>
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	68fa      	ldr	r2, [r7, #12]
 80008a2:	69d2      	ldr	r2, [r2, #28]
 80008a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80008a6:	e01b      	b.n	80008e0 <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x110>
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	691b      	ldr	r3, [r3, #16]
 80008ac:	2b04      	cmp	r3, #4
 80008ae:	d106      	bne.n	80008be <_ZN11MotorDriver26set_inverted_compare_valueElbb+0xee>
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	68fa      	ldr	r2, [r7, #12]
 80008b8:	69d2      	ldr	r2, [r2, #28]
 80008ba:	639a      	str	r2, [r3, #56]	@ 0x38
 80008bc:	e010      	b.n	80008e0 <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x110>
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	691b      	ldr	r3, [r3, #16]
 80008c2:	2b08      	cmp	r3, #8
 80008c4:	d106      	bne.n	80008d4 <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x104>
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	68fa      	ldr	r2, [r7, #12]
 80008ce:	69d2      	ldr	r2, [r2, #28]
 80008d0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008d2:	e005      	b.n	80008e0 <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x110>
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	68fa      	ldr	r2, [r7, #12]
 80008dc:	69d2      	ldr	r2, [r2, #28]
 80008de:	641a      	str	r2, [r3, #64]	@ 0x40
		__HAL_TIM_SET_COMPARE(timer, pin_2_timer_channel, compare_value);
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	8b5b      	ldrh	r3, [r3, #26]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d105      	bne.n	80008f4 <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x124>
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	68ba      	ldr	r2, [r7, #8]
 80008f0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80008f2:	e018      	b.n	8000926 <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x156>
		__HAL_TIM_SET_COMPARE(timer, pin_2_timer_channel, compare_value);
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	8b5b      	ldrh	r3, [r3, #26]
 80008f8:	2b04      	cmp	r3, #4
 80008fa:	d105      	bne.n	8000908 <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x138>
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	68ba      	ldr	r2, [r7, #8]
 8000904:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000906:	e00e      	b.n	8000926 <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x156>
		__HAL_TIM_SET_COMPARE(timer, pin_2_timer_channel, compare_value);
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	8b5b      	ldrh	r3, [r3, #26]
 800090c:	2b08      	cmp	r3, #8
 800090e:	d105      	bne.n	800091c <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x14c>
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	68ba      	ldr	r2, [r7, #8]
 8000918:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800091a:	e004      	b.n	8000926 <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x156>
		__HAL_TIM_SET_COMPARE(timer, pin_2_timer_channel, compare_value);
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	68ba      	ldr	r2, [r7, #8]
 8000924:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000926:	bf00      	nop
 8000928:	3714      	adds	r7, #20
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr

08000932 <_ZN11MotorDriver6enableEv>:

void MotorDriver::enable()
{
 8000932:	b580      	push	{r7, lr}
 8000934:	b082      	sub	sp, #8
 8000936:	af00      	add	r7, sp, #0
 8000938:	6078      	str	r0, [r7, #4]
	// Start PWM Generation
	HAL_TIM_PWM_Start(timer, pin_1_timer_channel);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	685a      	ldr	r2, [r3, #4]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	691b      	ldr	r3, [r3, #16]
 8000942:	4619      	mov	r1, r3
 8000944:	4610      	mov	r0, r2
 8000946:	f002 f953 	bl	8002bf0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer, pin_2_timer_channel);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	685a      	ldr	r2, [r3, #4]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	8b5b      	ldrh	r3, [r3, #26]
 8000952:	4619      	mov	r1, r3
 8000954:	4610      	mov	r0, r2
 8000956:	f002 f94b 	bl	8002bf0 <HAL_TIM_PWM_Start>
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <_ZN11MotorDriver7disableEv>:

void MotorDriver::disable()
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b082      	sub	sp, #8
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
	// Motor stop
	__HAL_TIM_SET_COMPARE(timer, pin_1_timer_channel, 0);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	691b      	ldr	r3, [r3, #16]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d105      	bne.n	800097e <_ZN11MotorDriver7disableEv+0x1c>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2200      	movs	r2, #0
 800097a:	635a      	str	r2, [r3, #52]	@ 0x34
 800097c:	e018      	b.n	80009b0 <_ZN11MotorDriver7disableEv+0x4e>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	691b      	ldr	r3, [r3, #16]
 8000982:	2b04      	cmp	r3, #4
 8000984:	d105      	bne.n	8000992 <_ZN11MotorDriver7disableEv+0x30>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2200      	movs	r2, #0
 800098e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000990:	e00e      	b.n	80009b0 <_ZN11MotorDriver7disableEv+0x4e>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	691b      	ldr	r3, [r3, #16]
 8000996:	2b08      	cmp	r3, #8
 8000998:	d105      	bne.n	80009a6 <_ZN11MotorDriver7disableEv+0x44>
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2200      	movs	r2, #0
 80009a2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80009a4:	e004      	b.n	80009b0 <_ZN11MotorDriver7disableEv+0x4e>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2200      	movs	r2, #0
 80009ae:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(timer, pin_2_timer_channel, 0);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	8b5b      	ldrh	r3, [r3, #26]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d105      	bne.n	80009c4 <_ZN11MotorDriver7disableEv+0x62>
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	2200      	movs	r2, #0
 80009c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80009c2:	e018      	b.n	80009f6 <_ZN11MotorDriver7disableEv+0x94>
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	8b5b      	ldrh	r3, [r3, #26]
 80009c8:	2b04      	cmp	r3, #4
 80009ca:	d105      	bne.n	80009d8 <_ZN11MotorDriver7disableEv+0x76>
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2200      	movs	r2, #0
 80009d4:	639a      	str	r2, [r3, #56]	@ 0x38
 80009d6:	e00e      	b.n	80009f6 <_ZN11MotorDriver7disableEv+0x94>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	8b5b      	ldrh	r3, [r3, #26]
 80009dc:	2b08      	cmp	r3, #8
 80009de:	d105      	bne.n	80009ec <_ZN11MotorDriver7disableEv+0x8a>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2200      	movs	r2, #0
 80009e8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80009ea:	e004      	b.n	80009f6 <_ZN11MotorDriver7disableEv+0x94>
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	2200      	movs	r2, #0
 80009f4:	641a      	str	r2, [r3, #64]	@ 0x40

	// Stop PWM Generation
	HAL_TIM_PWM_Stop(timer, pin_1_timer_channel);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	685a      	ldr	r2, [r3, #4]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	691b      	ldr	r3, [r3, #16]
 80009fe:	4619      	mov	r1, r3
 8000a00:	4610      	mov	r0, r2
 8000a02:	f002 f9a5 	bl	8002d50 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(timer, pin_2_timer_channel);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	685a      	ldr	r2, [r3, #4]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	8b5b      	ldrh	r3, [r3, #26]
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4610      	mov	r0, r2
 8000a12:	f002 f99d 	bl	8002d50 <HAL_TIM_PWM_Stop>
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll>:
 *      Author: Max
 */

#include "RCChannel.h"

RCChannel::RCChannel(
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
 8000a2c:	603b      	str	r3, [r7, #0]
    CPU_clock_speed_MHz(CPU_clock_speed_MHz),
    full_reverse_us_width(full_reverse_us_width),
    neutral_us_width(neutral_us_width),
    full_forward_us_width(full_forward_us_width),
    rescale_forward_magnitude(rescale_forward_magnitude),
	rescale_reverse_magnitude(rescale_reverse_magnitude)
 8000a2e:	4a37      	ldr	r2, [pc, #220]	@ (8000b0c <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll+0xec>)
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	2200      	movs	r2, #0
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	615a      	str	r2, [r3, #20]
    timer_handle(timer_handle),
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	68ba      	ldr	r2, [r7, #8]
 8000a56:	619a      	str	r2, [r3, #24]
    timer_channel(timer_channel),
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	61da      	str	r2, [r3, #28]
    RC_signal_period_us(RC_signal_period_us),
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	683a      	ldr	r2, [r7, #0]
 8000a62:	621a      	str	r2, [r3, #32]
    CPU_clock_speed_MHz(CPU_clock_speed_MHz),
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	6a3a      	ldr	r2, [r7, #32]
 8000a68:	625a      	str	r2, [r3, #36]	@ 0x24
    full_reverse_us_width(full_reverse_us_width),
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a6e:	629a      	str	r2, [r3, #40]	@ 0x28
    neutral_us_width(neutral_us_width),
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000a74:	62da      	str	r2, [r3, #44]	@ 0x2c
    full_forward_us_width(full_forward_us_width),
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000a7a:	631a      	str	r2, [r3, #48]	@ 0x30
    rescale_forward_magnitude(rescale_forward_magnitude),
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000a80:	635a      	str	r2, [r3, #52]	@ 0x34
	rescale_reverse_magnitude(rescale_reverse_magnitude)
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000a86:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
{
	// Critical. Starts the first interrupt.
	HAL_TIM_IC_Start_IT(timer_handle, timer_channel);
 8000a90:	6879      	ldr	r1, [r7, #4]
 8000a92:	68b8      	ldr	r0, [r7, #8]
 8000a94:	f002 fa10 	bl	8002eb8 <HAL_TIM_IC_Start_IT>

	// Set minuend depending on whether it's a 16-bit or 32-bit timer.
	// This is specific to the STM32F411CUE6!!
	if(( (timer_handle->Instance) == TIM2 ) or ( (timer_handle->Instance) == TIM5 ))
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000aa0:	d004      	beq.n	8000aac <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll+0x8c>
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a1a      	ldr	r2, [pc, #104]	@ (8000b10 <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll+0xf0>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d104      	bne.n	8000ab6 <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll+0x96>
	{
		minuend = 0xffffffff;
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ab4:	e003      	b.n	8000abe <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll+0x9e>
	}
	else
	{
		minuend = 0xffff;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000abc:	63da      	str	r2, [r3, #60]	@ 0x3c
	}

	// For later scaling
	uint32_t prescalar = timer_handle->Instance->PSC + 1;
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	617b      	str	r3, [r7, #20]
	float refClock = CPU_clock_speed_MHz/prescalar;
 8000ac8:	6a3a      	ldr	r2, [r7, #32]
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad0:	ee07 3a90 	vmov	s15, r3
 8000ad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ad8:	edc7 7a04 	vstr	s15, [r7, #16]
	mFactor = 1000000/refClock;
 8000adc:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8000b14 <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll+0xf4>
 8000ae0:	ed97 7a04 	vldr	s14, [r7, #16]
 8000ae4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

	// Needed later
	forward_range = full_forward_us_width - neutral_us_width;
 8000aee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000af2:	1ad2      	subs	r2, r2, r3
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	64da      	str	r2, [r3, #76]	@ 0x4c
	reverse_range = neutral_us_width - full_reverse_us_width;
 8000af8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000afc:	1ad2      	subs	r2, r2, r3
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	649a      	str	r2, [r3, #72]	@ 0x48

}
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	4618      	mov	r0, r3
 8000b06:	3718      	adds	r7, #24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	08005b8c 	.word	0x08005b8c
 8000b10:	40000c00 	.word	0x40000c00
 8000b14:	49742400 	.word	0x49742400

08000b18 <_ZN9RCChannel8callbackEv>:


void RCChannel::callback(){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	if(first_capture)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d010      	beq.n	8000b4c <_ZN9RCChannel8callbackEv+0x34>
 	{
 		first_value = HAL_TIM_ReadCapturedValue(timer_handle, timer_channel);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	699a      	ldr	r2, [r3, #24]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	69db      	ldr	r3, [r3, #28]
 8000b32:	4619      	mov	r1, r3
 8000b34:	4610      	mov	r0, r2
 8000b36:	f002 fdef 	bl	8003718 <HAL_TIM_ReadCapturedValue>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	605a      	str	r2, [r3, #4]
 		first_capture = false;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2200      	movs	r2, #0
 8000b46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 		// Make sure it never exceeds the magnitude.

 	// Finally
 	first_capture = true;
 	}
}
 8000b4a:	e080      	b.n	8000c4e <_ZN9RCChannel8callbackEv+0x136>
 		second_value = HAL_TIM_ReadCapturedValue(timer_handle, timer_channel);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	699a      	ldr	r2, [r3, #24]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	69db      	ldr	r3, [r3, #28]
 8000b54:	4619      	mov	r1, r3
 8000b56:	4610      	mov	r0, r2
 8000b58:	f002 fdde 	bl	8003718 <HAL_TIM_ReadCapturedValue>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	461a      	mov	r2, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 		if(first_value > second_value)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	685a      	ldr	r2, [r3, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	dd0c      	ble.n	8000b8a <_ZN9RCChannel8callbackEv+0x72>
 			difference = minuend - first_value + second_value + 1;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	6852      	ldr	r2, [r2, #4]
 8000b78:	1a9b      	subs	r3, r3, r2
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	6892      	ldr	r2, [r2, #8]
 8000b7e:	4413      	add	r3, r2
 8000b80:	3301      	adds	r3, #1
 8000b82:	461a      	mov	r2, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	60da      	str	r2, [r3, #12]
 8000b88:	e006      	b.n	8000b98 <_ZN9RCChannel8callbackEv+0x80>
 			difference = second_value - first_value;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	689a      	ldr	r2, [r3, #8]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	1ad2      	subs	r2, r2, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	60da      	str	r2, [r3, #12]
 		us_width = difference*mFactor;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	ee07 3a90 	vmov	s15, r3
 8000ba0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8000baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bb2:	ee17 2a90 	vmov	r2, s15
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	611a      	str	r2, [r3, #16]
		if(us_width > RC_signal_period_us/2)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	691a      	ldr	r2, [r3, #16]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6a1b      	ldr	r3, [r3, #32]
 8000bc2:	0fd9      	lsrs	r1, r3, #31
 8000bc4:	440b      	add	r3, r1
 8000bc6:	105b      	asrs	r3, r3, #1
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	dd06      	ble.n	8000bda <_ZN9RCChannel8callbackEv+0xc2>
			us_width = RC_signal_period_us - us_width;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6a1a      	ldr	r2, [r3, #32]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	691b      	ldr	r3, [r3, #16]
 8000bd4:	1ad2      	subs	r2, r2, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	611a      	str	r2, [r3, #16]
		int32_t centered_value = us_width - neutral_us_width;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	691a      	ldr	r2, [r3, #16]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000be2:	1ad3      	subs	r3, r2, r3
 8000be4:	60fb      	str	r3, [r7, #12]
 		if(centered_value >= 0)
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	db15      	blt.n	8000c18 <_ZN9RCChannel8callbackEv+0x100>
 			value = centered_value*rescale_forward_magnitude/forward_range;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bf0:	68fa      	ldr	r2, [r7, #12]
 8000bf2:	fb03 f202 	mul.w	r2, r3, r2
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfa:	fb92 f2f3 	sdiv	r2, r2, r3
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	615a      	str	r2, [r3, #20]
 	 		if(value>rescale_forward_magnitude)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	695a      	ldr	r2, [r3, #20]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	dd1b      	ble.n	8000c46 <_ZN9RCChannel8callbackEv+0x12e>
 	 			value = rescale_forward_magnitude;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	615a      	str	r2, [r3, #20]
 8000c16:	e016      	b.n	8000c46 <_ZN9RCChannel8callbackEv+0x12e>
			value =  centered_value*rescale_reverse_magnitude/reverse_range;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c1c:	68fa      	ldr	r2, [r7, #12]
 8000c1e:	fb03 f202 	mul.w	r2, r3, r2
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c26:	fb92 f2f3 	sdiv	r2, r2, r3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	615a      	str	r2, [r3, #20]
	 		if(value<-rescale_reverse_magnitude)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	695a      	ldr	r2, [r3, #20]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c36:	425b      	negs	r3, r3
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	da04      	bge.n	8000c46 <_ZN9RCChannel8callbackEv+0x12e>
	 			value = -rescale_reverse_magnitude;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c40:	425a      	negs	r2, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	615a      	str	r2, [r3, #20]
 	first_capture = true;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2201      	movs	r2, #1
 8000c4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
}
 8000c4e:	bf00      	nop
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <_ZN9RCChannelD1Ev>:

RCChannel::~RCChannel() {
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	4a04      	ldr	r2, [pc, #16]	@ (8000c74 <_ZN9RCChannelD1Ev+0x1c>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	08005b8c 	.word	0x08005b8c

08000c78 <_ZN9RCChannelD0Ev>:
RCChannel::~RCChannel() {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
}
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff ffe9 	bl	8000c58 <_ZN9RCChannelD1Ev>
 8000c86:	2150      	movs	r1, #80	@ 0x50
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f004 fa2b 	bl	80050e4 <_ZdlPvj>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4618      	mov	r0, r3
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <_ZN20RemoteControlControlC1EP9RCChannelP11MotorDriverb>:
 *      Author: Max
 */

#include "RemoteControlControl.h"

RemoteControlControl::RemoteControlControl(
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
 8000ca4:	70fb      	strb	r3, [r7, #3]
		MotorDriver* motor,
		bool invert)
		:
		rc_channel(rc_channel),
		motor(motor),
		invert(invert)
 8000ca6:	4a0e      	ldr	r2, [pc, #56]	@ (8000ce0 <_ZN20RemoteControlControlC1EP9RCChannelP11MotorDriverb+0x48>)
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	601a      	str	r2, [r3, #0]
		rc_channel(rc_channel),
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	68ba      	ldr	r2, [r7, #8]
 8000cb0:	605a      	str	r2, [r3, #4]
		motor(motor),
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
		invert(invert)
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	78fa      	ldrb	r2, [r7, #3]
 8000cbc:	731a      	strb	r2, [r3, #12]
	{
		// Reassign the magnitudes for rescaling to prevent rounding error.
		rc_channel->rescale_forward_magnitude = motor->timer->Init.Period;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	635a      	str	r2, [r3, #52]	@ 0x34
		rc_channel->rescale_reverse_magnitude = rc_channel->rescale_forward_magnitude;
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	639a      	str	r2, [r3, #56]	@ 0x38
	}
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	08005b9c 	.word	0x08005b9c

08000ce4 <_ZN20RemoteControlControl6updateEv>:

void RemoteControlControl::update()
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	//
	// Read from the remote control channel
	int32_t value = rc_channel->value;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	695b      	ldr	r3, [r3, #20]
 8000cf2:	60fb      	str	r3, [r7, #12]

	// Set direction
	bool direction;
	if(value<0)
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	da05      	bge.n	8000d06 <_ZN20RemoteControlControl6updateEv+0x22>
	{
		direction = true;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	72fb      	strb	r3, [r7, #11]
		value *= -1;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	425b      	negs	r3, r3
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	e001      	b.n	8000d0a <_ZN20RemoteControlControl6updateEv+0x26>
	}
	else
	{
		direction = false;
 8000d06:	2300      	movs	r3, #0
 8000d08:	72fb      	strb	r3, [r7, #11]
	}

	// Update the motor
	motor->set_inverted_compare_value(value, direction);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6898      	ldr	r0, [r3, #8]
 8000d0e:	7afa      	ldrb	r2, [r7, #11]
 8000d10:	2301      	movs	r3, #1
 8000d12:	68f9      	ldr	r1, [r7, #12]
 8000d14:	f7ff fd5c 	bl	80007d0 <_ZN11MotorDriver26set_inverted_compare_valueElbb>

}
 8000d18:	bf00      	nop
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <_ZN20RemoteControlControlD1Ev>:
RemoteControlControl::~RemoteControlControl()
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	4a13      	ldr	r2, [pc, #76]	@ (8000d78 <_ZN20RemoteControlControlD1Ev+0x58>)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	601a      	str	r2, [r3, #0]
{
    // Release any dynamically allocated resources
    // Deallocate memory for rc_channel if it was dynamically allocated
    if (rc_channel != nullptr)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d00b      	beq.n	8000d4e <_ZN20RemoteControlControlD1Ev+0x2e>
    {
        delete rc_channel;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d004      	beq.n	8000d48 <_ZN20RemoteControlControlD1Ev+0x28>
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	3204      	adds	r2, #4
 8000d42:	6812      	ldr	r2, [r2, #0]
 8000d44:	4618      	mov	r0, r3
 8000d46:	4790      	blx	r2
        rc_channel = nullptr; // Optional: Set to nullptr to avoid dangling pointers
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	605a      	str	r2, [r3, #4]
    }

    // Deallocate memory for motor if it was dynamically allocated
    if (motor != nullptr)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d00b      	beq.n	8000d6e <_ZN20RemoteControlControlD1Ev+0x4e>
    {
        delete motor;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d004      	beq.n	8000d68 <_ZN20RemoteControlControlD1Ev+0x48>
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	3204      	adds	r2, #4
 8000d62:	6812      	ldr	r2, [r2, #0]
 8000d64:	4618      	mov	r0, r3
 8000d66:	4790      	blx	r2
        motor = nullptr; // Optional: Set to nullptr to avoid dangling pointers
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
    }
}
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4618      	mov	r0, r3
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	08005b9c 	.word	0x08005b9c

08000d7c <_ZN20RemoteControlControlD0Ev>:
RemoteControlControl::~RemoteControlControl()
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
}
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff ffcb 	bl	8000d20 <_ZN20RemoteControlControlD1Ev>
 8000d8a:	2110      	movs	r1, #16
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f004 f9a9 	bl	80050e4 <_ZdlPvj>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4618      	mov	r0, r3
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <HAL_TIM_IC_CaptureCallback>:
RemoteControlControl* Steering;
MotorDriver* Motor_1;
MotorDriver* Motor_2;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	if((htim->Instance = TIM1))
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a15      	ldr	r2, [pc, #84]	@ (8000dfc <HAL_TIM_IC_CaptureCallback+0x60>)
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	bf14      	ite	ne
 8000db2:	2301      	movne	r3, #1
 8000db4:	2300      	moveq	r3, #0
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d01b      	beq.n	8000df4 <HAL_TIM_IC_CaptureCallback+0x58>
	{
		    if ( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 )
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	7f1b      	ldrb	r3, [r3, #28]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d109      	bne.n	8000dd8 <HAL_TIM_IC_CaptureCallback+0x3c>
		    {
		        // Handle channel
		    	SteeringChannel->callback();
 8000dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e00 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fea5 	bl	8000b18 <_ZN9RCChannel8callbackEv>
		    	Steering->update();
 8000dce:	4b0d      	ldr	r3, [pc, #52]	@ (8000e04 <HAL_TIM_IC_CaptureCallback+0x68>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff ff86 	bl	8000ce4 <_ZN20RemoteControlControl6updateEv>
		    }

			if ( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	7f1b      	ldrb	r3, [r3, #28]
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d109      	bne.n	8000df4 <HAL_TIM_IC_CaptureCallback+0x58>
			{
		        // Handle channel
		    	ThrottleChannel->callback();
 8000de0:	4b09      	ldr	r3, [pc, #36]	@ (8000e08 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fe97 	bl	8000b18 <_ZN9RCChannel8callbackEv>
		    	Throttle->update();
 8000dea:	4b08      	ldr	r3, [pc, #32]	@ (8000e0c <HAL_TIM_IC_CaptureCallback+0x70>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff ff78 	bl	8000ce4 <_ZN20RemoteControlControl6updateEv>
			}
	}
}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40010000 	.word	0x40010000
 8000e00:	2000019c 	.word	0x2000019c
 8000e04:	200001a4 	.word	0x200001a4
 8000e08:	20000198 	.word	0x20000198
 8000e0c:	200001a0 	.word	0x200001a0

08000e10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e10:	b590      	push	{r4, r7, lr}
 8000e12:	b095      	sub	sp, #84	@ 0x54
 8000e14:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e16:	f000 fdef 	bl	80019f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e1a:	f000 f8db 	bl	8000fd4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e1e:	f000 fadd 	bl	80013dc <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000e22:	f000 faad 	bl	8001380 <_ZL19MX_USART2_UART_Initv>
  MX_TIM1_Init();
 8000e26:	f000 f947 	bl	80010b8 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 8000e2a:	f000 f9bb 	bl	80011a4 <_ZL12MX_TIM3_Initv>
  MX_USART1_UART_Init();
 8000e2e:	f000 fa79 	bl	8001324 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
  char my_message[MESSAGE_LENGTH] = "";
 8000e32:	2300      	movs	r3, #0
 8000e34:	603b      	str	r3, [r7, #0]
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	222e      	movs	r2, #46	@ 0x2e
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f004 fa69 	bl	8005314 <memset>
  int string_length;

  Motor_1 = new MotorDriver(
		  &htim3,
		  GPIOA, GPIO_PIN_6, TIM_CHANNEL_1,
		  GPIOA, GPIO_PIN_7, TIM_CHANNEL_2);
 8000e42:	2020      	movs	r0, #32
 8000e44:	f004 f950 	bl	80050e8 <_Znwj>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	461c      	mov	r4, r3
 8000e4c:	2304      	movs	r3, #4
 8000e4e:	9303      	str	r3, [sp, #12]
 8000e50:	2380      	movs	r3, #128	@ 0x80
 8000e52:	9302      	str	r3, [sp, #8]
 8000e54:	4b52      	ldr	r3, [pc, #328]	@ (8000fa0 <main+0x190>)
 8000e56:	9301      	str	r3, [sp, #4]
 8000e58:	2300      	movs	r3, #0
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	2340      	movs	r3, #64	@ 0x40
 8000e5e:	4a50      	ldr	r2, [pc, #320]	@ (8000fa0 <main+0x190>)
 8000e60:	4950      	ldr	r1, [pc, #320]	@ (8000fa4 <main+0x194>)
 8000e62:	4620      	mov	r0, r4
 8000e64:	f7ff fb84 	bl	8000570 <_ZN11MotorDriverC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftmS3_tm>
  Motor_1 = new MotorDriver(
 8000e68:	4b4f      	ldr	r3, [pc, #316]	@ (8000fa8 <main+0x198>)
 8000e6a:	601c      	str	r4, [r3, #0]

  Motor_2 = new MotorDriver(
		  &htim3,
		  GPIOB, GPIO_PIN_0, TIM_CHANNEL_3,
		  GPIOB, GPIO_PIN_1, TIM_CHANNEL_4);
 8000e6c:	2020      	movs	r0, #32
 8000e6e:	f004 f93b 	bl	80050e8 <_Znwj>
 8000e72:	4603      	mov	r3, r0
 8000e74:	461c      	mov	r4, r3
 8000e76:	230c      	movs	r3, #12
 8000e78:	9303      	str	r3, [sp, #12]
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	9302      	str	r3, [sp, #8]
 8000e7e:	4b4b      	ldr	r3, [pc, #300]	@ (8000fac <main+0x19c>)
 8000e80:	9301      	str	r3, [sp, #4]
 8000e82:	2308      	movs	r3, #8
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	2301      	movs	r3, #1
 8000e88:	4a48      	ldr	r2, [pc, #288]	@ (8000fac <main+0x19c>)
 8000e8a:	4946      	ldr	r1, [pc, #280]	@ (8000fa4 <main+0x194>)
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	f7ff fb6f 	bl	8000570 <_ZN11MotorDriverC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftmS3_tm>
  Motor_2 = new MotorDriver(
 8000e92:	4b47      	ldr	r3, [pc, #284]	@ (8000fb0 <main+0x1a0>)
 8000e94:	601c      	str	r4, [r3, #0]
		  		  1069,  // Calibrated full reverse
		  		  1503,  // Calibrated neutral
		  		  1940,  // Calibrated full speed
		  		  100,   // New max positive
				  100    // New max negative (magnitude)
		  	  	  );
 8000e96:	2050      	movs	r0, #80	@ 0x50
 8000e98:	f004 f926 	bl	80050e8 <_Znwj>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	461c      	mov	r4, r3
 8000ea0:	2364      	movs	r3, #100	@ 0x64
 8000ea2:	9305      	str	r3, [sp, #20]
 8000ea4:	2364      	movs	r3, #100	@ 0x64
 8000ea6:	9304      	str	r3, [sp, #16]
 8000ea8:	f240 7394 	movw	r3, #1940	@ 0x794
 8000eac:	9303      	str	r3, [sp, #12]
 8000eae:	f240 53df 	movw	r3, #1503	@ 0x5df
 8000eb2:	9302      	str	r3, [sp, #8]
 8000eb4:	f240 432d 	movw	r3, #1069	@ 0x42d
 8000eb8:	9301      	str	r3, [sp, #4]
 8000eba:	4b3e      	ldr	r3, [pc, #248]	@ (8000fb4 <main+0x1a4>)
 8000ebc:	9300      	str	r3, [sp, #0]
 8000ebe:	f244 435c 	movw	r3, #17500	@ 0x445c
 8000ec2:	2204      	movs	r2, #4
 8000ec4:	493c      	ldr	r1, [pc, #240]	@ (8000fb8 <main+0x1a8>)
 8000ec6:	4620      	mov	r0, r4
 8000ec8:	f7ff fdaa 	bl	8000a20 <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll>
  ThrottleChannel = new RCChannel
 8000ecc:	4b3b      	ldr	r3, [pc, #236]	@ (8000fbc <main+0x1ac>)
 8000ece:	601c      	str	r4, [r3, #0]
  		  1068,       // Calibrated full left
  		  1500,      // Calibrated neutral
  		  1933,      // Calibrated full right
  		  100,       // New max positive
		  100        // New max negative (magnitude)
		  );
 8000ed0:	2050      	movs	r0, #80	@ 0x50
 8000ed2:	f004 f909 	bl	80050e8 <_Znwj>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	461c      	mov	r4, r3
 8000eda:	2364      	movs	r3, #100	@ 0x64
 8000edc:	9305      	str	r3, [sp, #20]
 8000ede:	2364      	movs	r3, #100	@ 0x64
 8000ee0:	9304      	str	r3, [sp, #16]
 8000ee2:	f240 738d 	movw	r3, #1933	@ 0x78d
 8000ee6:	9303      	str	r3, [sp, #12]
 8000ee8:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000eec:	9302      	str	r3, [sp, #8]
 8000eee:	f240 432c 	movw	r3, #1068	@ 0x42c
 8000ef2:	9301      	str	r3, [sp, #4]
 8000ef4:	4b2f      	ldr	r3, [pc, #188]	@ (8000fb4 <main+0x1a4>)
 8000ef6:	9300      	str	r3, [sp, #0]
 8000ef8:	f244 435c 	movw	r3, #17500	@ 0x445c
 8000efc:	2200      	movs	r2, #0
 8000efe:	492e      	ldr	r1, [pc, #184]	@ (8000fb8 <main+0x1a8>)
 8000f00:	4620      	mov	r0, r4
 8000f02:	f7ff fd8d 	bl	8000a20 <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll>
  SteeringChannel = new RCChannel
 8000f06:	4b2e      	ldr	r3, [pc, #184]	@ (8000fc0 <main+0x1b0>)
 8000f08:	601c      	str	r4, [r3, #0]

  Throttle = new RemoteControlControl
		  (
		  ThrottleChannel,
		  Motor_1
		  );
 8000f0a:	2010      	movs	r0, #16
 8000f0c:	f004 f8ec 	bl	80050e8 <_Znwj>
 8000f10:	4603      	mov	r3, r0
 8000f12:	461c      	mov	r4, r3
 8000f14:	4b29      	ldr	r3, [pc, #164]	@ (8000fbc <main+0x1ac>)
 8000f16:	6819      	ldr	r1, [r3, #0]
 8000f18:	4b23      	ldr	r3, [pc, #140]	@ (8000fa8 <main+0x198>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	4620      	mov	r0, r4
 8000f20:	f7ff feba 	bl	8000c98 <_ZN20RemoteControlControlC1EP9RCChannelP11MotorDriverb>
  Throttle = new RemoteControlControl
 8000f24:	4b27      	ldr	r3, [pc, #156]	@ (8000fc4 <main+0x1b4>)
 8000f26:	601c      	str	r4, [r3, #0]

  Steering = new RemoteControlControl
		  (
            SteeringChannel,
		    Motor_2
			);
 8000f28:	2010      	movs	r0, #16
 8000f2a:	f004 f8dd 	bl	80050e8 <_Znwj>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	461c      	mov	r4, r3
 8000f32:	4b23      	ldr	r3, [pc, #140]	@ (8000fc0 <main+0x1b0>)
 8000f34:	6819      	ldr	r1, [r3, #0]
 8000f36:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb0 <main+0x1a0>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	f7ff feab 	bl	8000c98 <_ZN20RemoteControlControlC1EP9RCChannelP11MotorDriverb>
  Steering = new RemoteControlControl
 8000f42:	4b21      	ldr	r3, [pc, #132]	@ (8000fc8 <main+0x1b8>)
 8000f44:	601c      	str	r4, [r3, #0]

  Motor_1->set_duty(10);
 8000f46:	4b18      	ldr	r3, [pc, #96]	@ (8000fa8 <main+0x198>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fb60 	bl	8000614 <_ZN11MotorDriver8set_dutyEf>
  Motor_2->set_duty(-10);
 8000f54:	4b16      	ldr	r3, [pc, #88]	@ (8000fb0 <main+0x1a0>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	eeba 0a04 	vmov.f32	s0, #164	@ 0xc1200000 -10.0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fb59 	bl	8000614 <_ZN11MotorDriver8set_dutyEf>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_Delay(250);
 8000f62:	20fa      	movs	r0, #250	@ 0xfa
 8000f64:	f000 fdba 	bl	8001adc <HAL_Delay>
	  string_length = snprintf(my_message, MESSAGE_LENGTH, "CH1: %*li%%, CH2: %*li%%.\r\n",
 8000f68:	4b15      	ldr	r3, [pc, #84]	@ (8000fc0 <main+0x1b0>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
	                             VALUE_WIDTH, (long signed int)SteeringChannel->us_width, //value,
 8000f6c:	691b      	ldr	r3, [r3, #16]
	  string_length = snprintf(my_message, MESSAGE_LENGTH, "CH1: %*li%%, CH2: %*li%%.\r\n",
 8000f6e:	4a13      	ldr	r2, [pc, #76]	@ (8000fbc <main+0x1ac>)
 8000f70:	6812      	ldr	r2, [r2, #0]
	                             VALUE_WIDTH, (long signed int)ThrottleChannel->us_width); //value);
 8000f72:	6912      	ldr	r2, [r2, #16]
	  string_length = snprintf(my_message, MESSAGE_LENGTH, "CH1: %*li%%, CH2: %*li%%.\r\n",
 8000f74:	4638      	mov	r0, r7
 8000f76:	9202      	str	r2, [sp, #8]
 8000f78:	2205      	movs	r2, #5
 8000f7a:	9201      	str	r2, [sp, #4]
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	2305      	movs	r3, #5
 8000f80:	4a12      	ldr	r2, [pc, #72]	@ (8000fcc <main+0x1bc>)
 8000f82:	2132      	movs	r1, #50	@ 0x32
 8000f84:	f004 f992 	bl	80052ac <sniprintf>
 8000f88:	6378      	str	r0, [r7, #52]	@ 0x34
//	  string_length = snprintf(my_message, MESSAGE_LENGTH, "CH1: %*li%%, CH2: %*li%%.\r\n",
//	                             VALUE_WIDTH, (long signed int)SteeringChannel->value,
//	                             VALUE_WIDTH, (long signed int)ThrottleChannel->value);
	  HAL_UART_Transmit(&huart2, (uint8_t*)my_message, string_length, HAL_MAX_DELAY);
 8000f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	4639      	mov	r1, r7
 8000f90:	f04f 33ff 	mov.w	r3, #4294967295
 8000f94:	480e      	ldr	r0, [pc, #56]	@ (8000fd0 <main+0x1c0>)
 8000f96:	f003 f8f3 	bl	8004180 <HAL_UART_Transmit>
	  HAL_Delay(250);
 8000f9a:	bf00      	nop
 8000f9c:	e7e1      	b.n	8000f62 <main+0x152>
 8000f9e:	bf00      	nop
 8000fa0:	40020000 	.word	0x40020000
 8000fa4:	200000c0 	.word	0x200000c0
 8000fa8:	200001a8 	.word	0x200001a8
 8000fac:	40020400 	.word	0x40020400
 8000fb0:	200001ac 	.word	0x200001ac
 8000fb4:	05b8d800 	.word	0x05b8d800
 8000fb8:	20000078 	.word	0x20000078
 8000fbc:	20000198 	.word	0x20000198
 8000fc0:	2000019c 	.word	0x2000019c
 8000fc4:	200001a0 	.word	0x200001a0
 8000fc8:	200001a4 	.word	0x200001a4
 8000fcc:	08005b58 	.word	0x08005b58
 8000fd0:	20000150 	.word	0x20000150

08000fd4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b094      	sub	sp, #80	@ 0x50
 8000fd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fda:	f107 0320 	add.w	r3, r7, #32
 8000fde:	2230      	movs	r2, #48	@ 0x30
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f004 f996 	bl	8005314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	4b2c      	ldr	r3, [pc, #176]	@ (80010b0 <_Z18SystemClock_Configv+0xdc>)
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001000:	4a2b      	ldr	r2, [pc, #172]	@ (80010b0 <_Z18SystemClock_Configv+0xdc>)
 8001002:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001006:	6413      	str	r3, [r2, #64]	@ 0x40
 8001008:	4b29      	ldr	r3, [pc, #164]	@ (80010b0 <_Z18SystemClock_Configv+0xdc>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001014:	2300      	movs	r3, #0
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	4b26      	ldr	r3, [pc, #152]	@ (80010b4 <_Z18SystemClock_Configv+0xe0>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a25      	ldr	r2, [pc, #148]	@ (80010b4 <_Z18SystemClock_Configv+0xe0>)
 800101e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001022:	6013      	str	r3, [r2, #0]
 8001024:	4b23      	ldr	r3, [pc, #140]	@ (80010b4 <_Z18SystemClock_Configv+0xe0>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001030:	2301      	movs	r3, #1
 8001032:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001034:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001038:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800103a:	2302      	movs	r3, #2
 800103c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800103e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001042:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001044:	2319      	movs	r3, #25
 8001046:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001048:	23c0      	movs	r3, #192	@ 0xc0
 800104a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800104c:	2302      	movs	r3, #2
 800104e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001050:	2304      	movs	r3, #4
 8001052:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001054:	f107 0320 	add.w	r3, r7, #32
 8001058:	4618      	mov	r0, r3
 800105a:	f001 f8c9 	bl	80021f0 <HAL_RCC_OscConfig>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	bf14      	ite	ne
 8001064:	2301      	movne	r3, #1
 8001066:	2300      	moveq	r3, #0
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800106e:	f000 fa2d 	bl	80014cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001072:	230f      	movs	r3, #15
 8001074:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001076:	2302      	movs	r3, #2
 8001078:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800107e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001082:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	2103      	movs	r1, #3
 800108e:	4618      	mov	r0, r3
 8001090:	f001 fb26 	bl	80026e0 <HAL_RCC_ClockConfig>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	bf14      	ite	ne
 800109a:	2301      	movne	r3, #1
 800109c:	2300      	moveq	r3, #0
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 80010a4:	f000 fa12 	bl	80014cc <Error_Handler>
  }
}
 80010a8:	bf00      	nop
 80010aa:	3750      	adds	r7, #80	@ 0x50
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40007000 	.word	0x40007000

080010b8 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010be:	f107 0310 	add.w	r3, r7, #16
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010c8:	463b      	mov	r3, r7
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010d4:	4b31      	ldr	r3, [pc, #196]	@ (800119c <_ZL12MX_TIM1_Initv+0xe4>)
 80010d6:	4a32      	ldr	r2, [pc, #200]	@ (80011a0 <_ZL12MX_TIM1_Initv+0xe8>)
 80010d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 80010da:	4b30      	ldr	r3, [pc, #192]	@ (800119c <_ZL12MX_TIM1_Initv+0xe4>)
 80010dc:	225f      	movs	r2, #95	@ 0x5f
 80010de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e0:	4b2e      	ldr	r3, [pc, #184]	@ (800119c <_ZL12MX_TIM1_Initv+0xe4>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80010e6:	4b2d      	ldr	r3, [pc, #180]	@ (800119c <_ZL12MX_TIM1_Initv+0xe4>)
 80010e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ee:	4b2b      	ldr	r3, [pc, #172]	@ (800119c <_ZL12MX_TIM1_Initv+0xe4>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010f4:	4b29      	ldr	r3, [pc, #164]	@ (800119c <_ZL12MX_TIM1_Initv+0xe4>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fa:	4b28      	ldr	r3, [pc, #160]	@ (800119c <_ZL12MX_TIM1_Initv+0xe4>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001100:	4826      	ldr	r0, [pc, #152]	@ (800119c <_ZL12MX_TIM1_Initv+0xe4>)
 8001102:	f001 fe89 	bl	8002e18 <HAL_TIM_IC_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	bf14      	ite	ne
 800110c:	2301      	movne	r3, #1
 800110e:	2300      	moveq	r3, #0
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <_ZL12MX_TIM1_Initv+0x62>
  {
    Error_Handler();
 8001116:	f000 f9d9 	bl	80014cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001122:	f107 0310 	add.w	r3, r7, #16
 8001126:	4619      	mov	r1, r3
 8001128:	481c      	ldr	r0, [pc, #112]	@ (800119c <_ZL12MX_TIM1_Initv+0xe4>)
 800112a:	f002 ff57 	bl	8003fdc <HAL_TIMEx_MasterConfigSynchronization>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	bf14      	ite	ne
 8001134:	2301      	movne	r3, #1
 8001136:	2300      	moveq	r3, #0
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <_ZL12MX_TIM1_Initv+0x8a>
  {
    Error_Handler();
 800113e:	f000 f9c5 	bl	80014cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001142:	230a      	movs	r3, #10
 8001144:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001146:	2301      	movs	r3, #1
 8001148:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001152:	463b      	mov	r3, r7
 8001154:	2200      	movs	r2, #0
 8001156:	4619      	mov	r1, r3
 8001158:	4810      	ldr	r0, [pc, #64]	@ (800119c <_ZL12MX_TIM1_Initv+0xe4>)
 800115a:	f002 f8b7 	bl	80032cc <HAL_TIM_IC_ConfigChannel>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	bf14      	ite	ne
 8001164:	2301      	movne	r3, #1
 8001166:	2300      	moveq	r3, #0
 8001168:	b2db      	uxtb	r3, r3
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <_ZL12MX_TIM1_Initv+0xba>
  {
    Error_Handler();
 800116e:	f000 f9ad 	bl	80014cc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001172:	463b      	mov	r3, r7
 8001174:	2204      	movs	r2, #4
 8001176:	4619      	mov	r1, r3
 8001178:	4808      	ldr	r0, [pc, #32]	@ (800119c <_ZL12MX_TIM1_Initv+0xe4>)
 800117a:	f002 f8a7 	bl	80032cc <HAL_TIM_IC_ConfigChannel>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	bf14      	ite	ne
 8001184:	2301      	movne	r3, #1
 8001186:	2300      	moveq	r3, #0
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <_ZL12MX_TIM1_Initv+0xda>
  {
    Error_Handler();
 800118e:	f000 f99d 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000078 	.word	0x20000078
 80011a0:	40010000 	.word	0x40010000

080011a4 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08e      	sub	sp, #56	@ 0x38
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b8:	f107 0320 	add.w	r3, r7, #32
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
 80011d0:	615a      	str	r2, [r3, #20]
 80011d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011d4:	4b51      	ldr	r3, [pc, #324]	@ (800131c <_ZL12MX_TIM3_Initv+0x178>)
 80011d6:	4a52      	ldr	r2, [pc, #328]	@ (8001320 <_ZL12MX_TIM3_Initv+0x17c>)
 80011d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80011da:	4b50      	ldr	r3, [pc, #320]	@ (800131c <_ZL12MX_TIM3_Initv+0x178>)
 80011dc:	2200      	movs	r2, #0
 80011de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e0:	4b4e      	ldr	r3, [pc, #312]	@ (800131c <_ZL12MX_TIM3_Initv+0x178>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4799;
 80011e6:	4b4d      	ldr	r3, [pc, #308]	@ (800131c <_ZL12MX_TIM3_Initv+0x178>)
 80011e8:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 80011ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ee:	4b4b      	ldr	r3, [pc, #300]	@ (800131c <_ZL12MX_TIM3_Initv+0x178>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f4:	4b49      	ldr	r3, [pc, #292]	@ (800131c <_ZL12MX_TIM3_Initv+0x178>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011fa:	4848      	ldr	r0, [pc, #288]	@ (800131c <_ZL12MX_TIM3_Initv+0x178>)
 80011fc:	f001 fc50 	bl	8002aa0 <HAL_TIM_Base_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	bf14      	ite	ne
 8001206:	2301      	movne	r3, #1
 8001208:	2300      	moveq	r3, #0
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 8001210:	f000 f95c 	bl	80014cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001214:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001218:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800121a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800121e:	4619      	mov	r1, r3
 8001220:	483e      	ldr	r0, [pc, #248]	@ (800131c <_ZL12MX_TIM3_Initv+0x178>)
 8001222:	f002 f9b1 	bl	8003588 <HAL_TIM_ConfigClockSource>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	bf14      	ite	ne
 800122c:	2301      	movne	r3, #1
 800122e:	2300      	moveq	r3, #0
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 8001236:	f000 f949 	bl	80014cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800123a:	4838      	ldr	r0, [pc, #224]	@ (800131c <_ZL12MX_TIM3_Initv+0x178>)
 800123c:	f001 fc7f 	bl	8002b3e <HAL_TIM_PWM_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	bf14      	ite	ne
 8001246:	2301      	movne	r3, #1
 8001248:	2300      	moveq	r3, #0
 800124a:	b2db      	uxtb	r3, r3
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <_ZL12MX_TIM3_Initv+0xb0>
  {
    Error_Handler();
 8001250:	f000 f93c 	bl	80014cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001254:	2300      	movs	r3, #0
 8001256:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800125c:	f107 0320 	add.w	r3, r7, #32
 8001260:	4619      	mov	r1, r3
 8001262:	482e      	ldr	r0, [pc, #184]	@ (800131c <_ZL12MX_TIM3_Initv+0x178>)
 8001264:	f002 feba 	bl	8003fdc <HAL_TIMEx_MasterConfigSynchronization>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	bf14      	ite	ne
 800126e:	2301      	movne	r3, #1
 8001270:	2300      	moveq	r3, #0
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8001278:	f000 f928 	bl	80014cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800127c:	2360      	movs	r3, #96	@ 0x60
 800127e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001284:	2300      	movs	r3, #0
 8001286:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	2200      	movs	r2, #0
 8001290:	4619      	mov	r1, r3
 8001292:	4822      	ldr	r0, [pc, #136]	@ (800131c <_ZL12MX_TIM3_Initv+0x178>)
 8001294:	f002 f8b6 	bl	8003404 <HAL_TIM_PWM_ConfigChannel>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	bf14      	ite	ne
 800129e:	2301      	movne	r3, #1
 80012a0:	2300      	moveq	r3, #0
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <_ZL12MX_TIM3_Initv+0x108>
  {
    Error_Handler();
 80012a8:	f000 f910 	bl	80014cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	2204      	movs	r2, #4
 80012b0:	4619      	mov	r1, r3
 80012b2:	481a      	ldr	r0, [pc, #104]	@ (800131c <_ZL12MX_TIM3_Initv+0x178>)
 80012b4:	f002 f8a6 	bl	8003404 <HAL_TIM_PWM_ConfigChannel>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	bf14      	ite	ne
 80012be:	2301      	movne	r3, #1
 80012c0:	2300      	moveq	r3, #0
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <_ZL12MX_TIM3_Initv+0x128>
  {
    Error_Handler();
 80012c8:	f000 f900 	bl	80014cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	2208      	movs	r2, #8
 80012d0:	4619      	mov	r1, r3
 80012d2:	4812      	ldr	r0, [pc, #72]	@ (800131c <_ZL12MX_TIM3_Initv+0x178>)
 80012d4:	f002 f896 	bl	8003404 <HAL_TIM_PWM_ConfigChannel>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	bf14      	ite	ne
 80012de:	2301      	movne	r3, #1
 80012e0:	2300      	moveq	r3, #0
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <_ZL12MX_TIM3_Initv+0x148>
  {
    Error_Handler();
 80012e8:	f000 f8f0 	bl	80014cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	220c      	movs	r2, #12
 80012f0:	4619      	mov	r1, r3
 80012f2:	480a      	ldr	r0, [pc, #40]	@ (800131c <_ZL12MX_TIM3_Initv+0x178>)
 80012f4:	f002 f886 	bl	8003404 <HAL_TIM_PWM_ConfigChannel>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	bf14      	ite	ne
 80012fe:	2301      	movne	r3, #1
 8001300:	2300      	moveq	r3, #0
 8001302:	b2db      	uxtb	r3, r3
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <_ZL12MX_TIM3_Initv+0x168>
  {
    Error_Handler();
 8001308:	f000 f8e0 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800130c:	4803      	ldr	r0, [pc, #12]	@ (800131c <_ZL12MX_TIM3_Initv+0x178>)
 800130e:	f000 f995 	bl	800163c <HAL_TIM_MspPostInit>

}
 8001312:	bf00      	nop
 8001314:	3738      	adds	r7, #56	@ 0x38
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200000c0 	.word	0x200000c0
 8001320:	40000400 	.word	0x40000400

08001324 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001328:	4b13      	ldr	r3, [pc, #76]	@ (8001378 <_ZL19MX_USART1_UART_Initv+0x54>)
 800132a:	4a14      	ldr	r2, [pc, #80]	@ (800137c <_ZL19MX_USART1_UART_Initv+0x58>)
 800132c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800132e:	4b12      	ldr	r3, [pc, #72]	@ (8001378 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001330:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001334:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001336:	4b10      	ldr	r3, [pc, #64]	@ (8001378 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800133c:	4b0e      	ldr	r3, [pc, #56]	@ (8001378 <_ZL19MX_USART1_UART_Initv+0x54>)
 800133e:	2200      	movs	r2, #0
 8001340:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001342:	4b0d      	ldr	r3, [pc, #52]	@ (8001378 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001348:	4b0b      	ldr	r3, [pc, #44]	@ (8001378 <_ZL19MX_USART1_UART_Initv+0x54>)
 800134a:	220c      	movs	r2, #12
 800134c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800134e:	4b0a      	ldr	r3, [pc, #40]	@ (8001378 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001354:	4b08      	ldr	r3, [pc, #32]	@ (8001378 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001356:	2200      	movs	r2, #0
 8001358:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800135a:	4807      	ldr	r0, [pc, #28]	@ (8001378 <_ZL19MX_USART1_UART_Initv+0x54>)
 800135c:	f002 fec0 	bl	80040e0 <HAL_UART_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	bf14      	ite	ne
 8001366:	2301      	movne	r3, #1
 8001368:	2300      	moveq	r3, #0
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8001370:	f000 f8ac 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000108 	.word	0x20000108
 800137c:	40011000 	.word	0x40011000

08001380 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001384:	4b13      	ldr	r3, [pc, #76]	@ (80013d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001386:	4a14      	ldr	r2, [pc, #80]	@ (80013d8 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001388:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800138a:	4b12      	ldr	r3, [pc, #72]	@ (80013d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 800138c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001390:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001392:	4b10      	ldr	r3, [pc, #64]	@ (80013d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001398:	4b0e      	ldr	r3, [pc, #56]	@ (80013d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 800139a:	2200      	movs	r2, #0
 800139c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800139e:	4b0d      	ldr	r3, [pc, #52]	@ (80013d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013a4:	4b0b      	ldr	r3, [pc, #44]	@ (80013d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80013a6:	220c      	movs	r2, #12
 80013a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013aa:	4b0a      	ldr	r3, [pc, #40]	@ (80013d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b0:	4b08      	ldr	r3, [pc, #32]	@ (80013d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013b6:	4807      	ldr	r0, [pc, #28]	@ (80013d4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80013b8:	f002 fe92 	bl	80040e0 <HAL_UART_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	bf14      	ite	ne
 80013c2:	2301      	movne	r3, #1
 80013c4:	2300      	moveq	r3, #0
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80013cc:	f000 f87e 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000150 	.word	0x20000150
 80013d8:	40004400 	.word	0x40004400

080013dc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	@ 0x28
 80013e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
 80013f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	4b32      	ldr	r3, [pc, #200]	@ (80014c0 <_ZL12MX_GPIO_Initv+0xe4>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	4a31      	ldr	r2, [pc, #196]	@ (80014c0 <_ZL12MX_GPIO_Initv+0xe4>)
 80013fc:	f043 0304 	orr.w	r3, r3, #4
 8001400:	6313      	str	r3, [r2, #48]	@ 0x30
 8001402:	4b2f      	ldr	r3, [pc, #188]	@ (80014c0 <_ZL12MX_GPIO_Initv+0xe4>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	f003 0304 	and.w	r3, r3, #4
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	4b2b      	ldr	r3, [pc, #172]	@ (80014c0 <_ZL12MX_GPIO_Initv+0xe4>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	4a2a      	ldr	r2, [pc, #168]	@ (80014c0 <_ZL12MX_GPIO_Initv+0xe4>)
 8001418:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800141c:	6313      	str	r3, [r2, #48]	@ 0x30
 800141e:	4b28      	ldr	r3, [pc, #160]	@ (80014c0 <_ZL12MX_GPIO_Initv+0xe4>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	4b24      	ldr	r3, [pc, #144]	@ (80014c0 <_ZL12MX_GPIO_Initv+0xe4>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	4a23      	ldr	r2, [pc, #140]	@ (80014c0 <_ZL12MX_GPIO_Initv+0xe4>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6313      	str	r3, [r2, #48]	@ 0x30
 800143a:	4b21      	ldr	r3, [pc, #132]	@ (80014c0 <_ZL12MX_GPIO_Initv+0xe4>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	4b1d      	ldr	r3, [pc, #116]	@ (80014c0 <_ZL12MX_GPIO_Initv+0xe4>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	4a1c      	ldr	r2, [pc, #112]	@ (80014c0 <_ZL12MX_GPIO_Initv+0xe4>)
 8001450:	f043 0302 	orr.w	r3, r3, #2
 8001454:	6313      	str	r3, [r2, #48]	@ 0x30
 8001456:	4b1a      	ldr	r3, [pc, #104]	@ (80014c0 <_ZL12MX_GPIO_Initv+0xe4>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001462:	2200      	movs	r2, #0
 8001464:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001468:	4816      	ldr	r0, [pc, #88]	@ (80014c4 <_ZL12MX_GPIO_Initv+0xe8>)
 800146a:	f000 fe83 	bl	8002174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800146e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001474:	2301      	movs	r3, #1
 8001476:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147c:	2300      	movs	r3, #0
 800147e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	4619      	mov	r1, r3
 8001486:	480f      	ldr	r0, [pc, #60]	@ (80014c4 <_ZL12MX_GPIO_Initv+0xe8>)
 8001488:	f000 fcf0 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800148c:	2301      	movs	r3, #1
 800148e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001490:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001494:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149a:	f107 0314 	add.w	r3, r7, #20
 800149e:	4619      	mov	r1, r3
 80014a0:	4809      	ldr	r0, [pc, #36]	@ (80014c8 <_ZL12MX_GPIO_Initv+0xec>)
 80014a2:	f000 fce3 	bl	8001e6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	2006      	movs	r0, #6
 80014ac:	f000 fc15 	bl	8001cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80014b0:	2006      	movs	r0, #6
 80014b2:	f000 fc2e 	bl	8001d12 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014b6:	bf00      	nop
 80014b8:	3728      	adds	r7, #40	@ 0x28
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40020800 	.word	0x40020800
 80014c8:	40020000 	.word	0x40020000

080014cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d0:	b672      	cpsid	i
}
 80014d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d4:	bf00      	nop
 80014d6:	e7fd      	b.n	80014d4 <Error_Handler+0x8>

080014d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	4b10      	ldr	r3, [pc, #64]	@ (8001524 <HAL_MspInit+0x4c>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001524 <HAL_MspInit+0x4c>)
 80014e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001524 <HAL_MspInit+0x4c>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	603b      	str	r3, [r7, #0]
 80014fe:	4b09      	ldr	r3, [pc, #36]	@ (8001524 <HAL_MspInit+0x4c>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001502:	4a08      	ldr	r2, [pc, #32]	@ (8001524 <HAL_MspInit+0x4c>)
 8001504:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001508:	6413      	str	r3, [r2, #64]	@ 0x40
 800150a:	4b06      	ldr	r3, [pc, #24]	@ (8001524 <HAL_MspInit+0x4c>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800

08001528 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	@ 0x28
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a29      	ldr	r2, [pc, #164]	@ (80015ec <HAL_TIM_IC_MspInit+0xc4>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d14c      	bne.n	80015e4 <HAL_TIM_IC_MspInit+0xbc>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	4b28      	ldr	r3, [pc, #160]	@ (80015f0 <HAL_TIM_IC_MspInit+0xc8>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001552:	4a27      	ldr	r2, [pc, #156]	@ (80015f0 <HAL_TIM_IC_MspInit+0xc8>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6453      	str	r3, [r2, #68]	@ 0x44
 800155a:	4b25      	ldr	r3, [pc, #148]	@ (80015f0 <HAL_TIM_IC_MspInit+0xc8>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	613b      	str	r3, [r7, #16]
 8001564:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	4b21      	ldr	r3, [pc, #132]	@ (80015f0 <HAL_TIM_IC_MspInit+0xc8>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	4a20      	ldr	r2, [pc, #128]	@ (80015f0 <HAL_TIM_IC_MspInit+0xc8>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6313      	str	r3, [r2, #48]	@ 0x30
 8001576:	4b1e      	ldr	r3, [pc, #120]	@ (80015f0 <HAL_TIM_IC_MspInit+0xc8>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 8001582:	f44f 6330 	mov.w	r3, #2816	@ 0xb00
 8001586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001588:	2302      	movs	r3, #2
 800158a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2300      	movs	r3, #0
 8001592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001594:	2301      	movs	r3, #1
 8001596:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	4619      	mov	r1, r3
 800159e:	4815      	ldr	r0, [pc, #84]	@ (80015f4 <HAL_TIM_IC_MspInit+0xcc>)
 80015a0:	f000 fc64 	bl	8001e6c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2100      	movs	r1, #0
 80015a8:	2018      	movs	r0, #24
 80015aa:	f000 fb96 	bl	8001cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80015ae:	2018      	movs	r0, #24
 80015b0:	f000 fbaf 	bl	8001d12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80015b4:	2200      	movs	r2, #0
 80015b6:	2100      	movs	r1, #0
 80015b8:	2019      	movs	r0, #25
 80015ba:	f000 fb8e 	bl	8001cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80015be:	2019      	movs	r0, #25
 80015c0:	f000 fba7 	bl	8001d12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80015c4:	2200      	movs	r2, #0
 80015c6:	2100      	movs	r1, #0
 80015c8:	201a      	movs	r0, #26
 80015ca:	f000 fb86 	bl	8001cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80015ce:	201a      	movs	r0, #26
 80015d0:	f000 fb9f 	bl	8001d12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80015d4:	2200      	movs	r2, #0
 80015d6:	2100      	movs	r1, #0
 80015d8:	201b      	movs	r0, #27
 80015da:	f000 fb7e 	bl	8001cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80015de:	201b      	movs	r0, #27
 80015e0:	f000 fb97 	bl	8001d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80015e4:	bf00      	nop
 80015e6:	3728      	adds	r7, #40	@ 0x28
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40010000 	.word	0x40010000
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40020000 	.word	0x40020000

080015f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a0b      	ldr	r2, [pc, #44]	@ (8001634 <HAL_TIM_Base_MspInit+0x3c>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d10d      	bne.n	8001626 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	4b0a      	ldr	r3, [pc, #40]	@ (8001638 <HAL_TIM_Base_MspInit+0x40>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001612:	4a09      	ldr	r2, [pc, #36]	@ (8001638 <HAL_TIM_Base_MspInit+0x40>)
 8001614:	f043 0302 	orr.w	r3, r3, #2
 8001618:	6413      	str	r3, [r2, #64]	@ 0x40
 800161a:	4b07      	ldr	r3, [pc, #28]	@ (8001638 <HAL_TIM_Base_MspInit+0x40>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001626:	bf00      	nop
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	40000400 	.word	0x40000400
 8001638:	40023800 	.word	0x40023800

0800163c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	@ 0x28
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a21      	ldr	r2, [pc, #132]	@ (80016e0 <HAL_TIM_MspPostInit+0xa4>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d13b      	bne.n	80016d6 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	4b20      	ldr	r3, [pc, #128]	@ (80016e4 <HAL_TIM_MspPostInit+0xa8>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001666:	4a1f      	ldr	r2, [pc, #124]	@ (80016e4 <HAL_TIM_MspPostInit+0xa8>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6313      	str	r3, [r2, #48]	@ 0x30
 800166e:	4b1d      	ldr	r3, [pc, #116]	@ (80016e4 <HAL_TIM_MspPostInit+0xa8>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	4b19      	ldr	r3, [pc, #100]	@ (80016e4 <HAL_TIM_MspPostInit+0xa8>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	4a18      	ldr	r2, [pc, #96]	@ (80016e4 <HAL_TIM_MspPostInit+0xa8>)
 8001684:	f043 0302 	orr.w	r3, r3, #2
 8001688:	6313      	str	r3, [r2, #48]	@ 0x30
 800168a:	4b16      	ldr	r3, [pc, #88]	@ (80016e4 <HAL_TIM_MspPostInit+0xa8>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001696:	23c0      	movs	r3, #192	@ 0xc0
 8001698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	2302      	movs	r3, #2
 800169c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a2:	2300      	movs	r3, #0
 80016a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016a6:	2302      	movs	r3, #2
 80016a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016aa:	f107 0314 	add.w	r3, r7, #20
 80016ae:	4619      	mov	r1, r3
 80016b0:	480d      	ldr	r0, [pc, #52]	@ (80016e8 <HAL_TIM_MspPostInit+0xac>)
 80016b2:	f000 fbdb 	bl	8001e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016b6:	2303      	movs	r3, #3
 80016b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	2302      	movs	r3, #2
 80016bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c2:	2300      	movs	r3, #0
 80016c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016c6:	2302      	movs	r3, #2
 80016c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	4619      	mov	r1, r3
 80016d0:	4806      	ldr	r0, [pc, #24]	@ (80016ec <HAL_TIM_MspPostInit+0xb0>)
 80016d2:	f000 fbcb 	bl	8001e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80016d6:	bf00      	nop
 80016d8:	3728      	adds	r7, #40	@ 0x28
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40000400 	.word	0x40000400
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40020000 	.word	0x40020000
 80016ec:	40020400 	.word	0x40020400

080016f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08c      	sub	sp, #48	@ 0x30
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 031c 	add.w	r3, r7, #28
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a36      	ldr	r2, [pc, #216]	@ (80017e8 <HAL_UART_MspInit+0xf8>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d12c      	bne.n	800176c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	61bb      	str	r3, [r7, #24]
 8001716:	4b35      	ldr	r3, [pc, #212]	@ (80017ec <HAL_UART_MspInit+0xfc>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800171a:	4a34      	ldr	r2, [pc, #208]	@ (80017ec <HAL_UART_MspInit+0xfc>)
 800171c:	f043 0310 	orr.w	r3, r3, #16
 8001720:	6453      	str	r3, [r2, #68]	@ 0x44
 8001722:	4b32      	ldr	r3, [pc, #200]	@ (80017ec <HAL_UART_MspInit+0xfc>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001726:	f003 0310 	and.w	r3, r3, #16
 800172a:	61bb      	str	r3, [r7, #24]
 800172c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	4b2e      	ldr	r3, [pc, #184]	@ (80017ec <HAL_UART_MspInit+0xfc>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	4a2d      	ldr	r2, [pc, #180]	@ (80017ec <HAL_UART_MspInit+0xfc>)
 8001738:	f043 0302 	orr.w	r3, r3, #2
 800173c:	6313      	str	r3, [r2, #48]	@ 0x30
 800173e:	4b2b      	ldr	r3, [pc, #172]	@ (80017ec <HAL_UART_MspInit+0xfc>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800174a:	23c0      	movs	r3, #192	@ 0xc0
 800174c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001756:	2303      	movs	r3, #3
 8001758:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800175a:	2307      	movs	r3, #7
 800175c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175e:	f107 031c 	add.w	r3, r7, #28
 8001762:	4619      	mov	r1, r3
 8001764:	4822      	ldr	r0, [pc, #136]	@ (80017f0 <HAL_UART_MspInit+0x100>)
 8001766:	f000 fb81 	bl	8001e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800176a:	e038      	b.n	80017de <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART2)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a20      	ldr	r2, [pc, #128]	@ (80017f4 <HAL_UART_MspInit+0x104>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d133      	bne.n	80017de <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
 800177a:	4b1c      	ldr	r3, [pc, #112]	@ (80017ec <HAL_UART_MspInit+0xfc>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177e:	4a1b      	ldr	r2, [pc, #108]	@ (80017ec <HAL_UART_MspInit+0xfc>)
 8001780:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001784:	6413      	str	r3, [r2, #64]	@ 0x40
 8001786:	4b19      	ldr	r3, [pc, #100]	@ (80017ec <HAL_UART_MspInit+0xfc>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	4b15      	ldr	r3, [pc, #84]	@ (80017ec <HAL_UART_MspInit+0xfc>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	4a14      	ldr	r2, [pc, #80]	@ (80017ec <HAL_UART_MspInit+0xfc>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a2:	4b12      	ldr	r3, [pc, #72]	@ (80017ec <HAL_UART_MspInit+0xfc>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017ae:	230c      	movs	r3, #12
 80017b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	2302      	movs	r3, #2
 80017b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ba:	2303      	movs	r3, #3
 80017bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017be:	2307      	movs	r3, #7
 80017c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c2:	f107 031c 	add.w	r3, r7, #28
 80017c6:	4619      	mov	r1, r3
 80017c8:	480b      	ldr	r0, [pc, #44]	@ (80017f8 <HAL_UART_MspInit+0x108>)
 80017ca:	f000 fb4f 	bl	8001e6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2100      	movs	r1, #0
 80017d2:	2026      	movs	r0, #38	@ 0x26
 80017d4:	f000 fa81 	bl	8001cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017d8:	2026      	movs	r0, #38	@ 0x26
 80017da:	f000 fa9a 	bl	8001d12 <HAL_NVIC_EnableIRQ>
}
 80017de:	bf00      	nop
 80017e0:	3730      	adds	r7, #48	@ 0x30
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40011000 	.word	0x40011000
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40020400 	.word	0x40020400
 80017f4:	40004400 	.word	0x40004400
 80017f8:	40020000 	.word	0x40020000

080017fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001800:	bf00      	nop
 8001802:	e7fd      	b.n	8001800 <NMI_Handler+0x4>

08001804 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <HardFault_Handler+0x4>

0800180c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001810:	bf00      	nop
 8001812:	e7fd      	b.n	8001810 <MemManage_Handler+0x4>

08001814 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001818:	bf00      	nop
 800181a:	e7fd      	b.n	8001818 <BusFault_Handler+0x4>

0800181c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001820:	bf00      	nop
 8001822:	e7fd      	b.n	8001820 <UsageFault_Handler+0x4>

08001824 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001852:	f000 f923 	bl	8001a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}

0800185a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800185e:	2001      	movs	r0, #1
 8001860:	f000 fca2 	bl	80021a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}

08001868 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800186c:	4802      	ldr	r0, [pc, #8]	@ (8001878 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800186e:	f001 fc3d 	bl	80030ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000078 	.word	0x20000078

0800187c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001880:	4802      	ldr	r0, [pc, #8]	@ (800188c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001882:	f001 fc33 	bl	80030ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000078 	.word	0x20000078

08001890 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001894:	4802      	ldr	r0, [pc, #8]	@ (80018a0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001896:	f001 fc29 	bl	80030ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000078 	.word	0x20000078

080018a4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018a8:	4802      	ldr	r0, [pc, #8]	@ (80018b4 <TIM1_CC_IRQHandler+0x10>)
 80018aa:	f001 fc1f 	bl	80030ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000078 	.word	0x20000078

080018b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018bc:	4802      	ldr	r0, [pc, #8]	@ (80018c8 <USART2_IRQHandler+0x10>)
 80018be:	f002 fceb 	bl	8004298 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000150 	.word	0x20000150

080018cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return 1;
 80018d0:	2301      	movs	r3, #1
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <_kill>:

int _kill(int pid, int sig)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018e6:	f003 fd71 	bl	80053cc <__errno>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2216      	movs	r2, #22
 80018ee:	601a      	str	r2, [r3, #0]
  return -1;
 80018f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <_exit>:

void _exit (int status)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001904:	f04f 31ff 	mov.w	r1, #4294967295
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff ffe7 	bl	80018dc <_kill>
  while (1) {}    /* Make sure we hang here */
 800190e:	bf00      	nop
 8001910:	e7fd      	b.n	800190e <_exit+0x12>
	...

08001914 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800191c:	4a14      	ldr	r2, [pc, #80]	@ (8001970 <_sbrk+0x5c>)
 800191e:	4b15      	ldr	r3, [pc, #84]	@ (8001974 <_sbrk+0x60>)
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001928:	4b13      	ldr	r3, [pc, #76]	@ (8001978 <_sbrk+0x64>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d102      	bne.n	8001936 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001930:	4b11      	ldr	r3, [pc, #68]	@ (8001978 <_sbrk+0x64>)
 8001932:	4a12      	ldr	r2, [pc, #72]	@ (800197c <_sbrk+0x68>)
 8001934:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001936:	4b10      	ldr	r3, [pc, #64]	@ (8001978 <_sbrk+0x64>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4413      	add	r3, r2
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	429a      	cmp	r2, r3
 8001942:	d207      	bcs.n	8001954 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001944:	f003 fd42 	bl	80053cc <__errno>
 8001948:	4603      	mov	r3, r0
 800194a:	220c      	movs	r2, #12
 800194c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800194e:	f04f 33ff 	mov.w	r3, #4294967295
 8001952:	e009      	b.n	8001968 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001954:	4b08      	ldr	r3, [pc, #32]	@ (8001978 <_sbrk+0x64>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800195a:	4b07      	ldr	r3, [pc, #28]	@ (8001978 <_sbrk+0x64>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4413      	add	r3, r2
 8001962:	4a05      	ldr	r2, [pc, #20]	@ (8001978 <_sbrk+0x64>)
 8001964:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001966:	68fb      	ldr	r3, [r7, #12]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3718      	adds	r7, #24
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20020000 	.word	0x20020000
 8001974:	00000400 	.word	0x00000400
 8001978:	200001b0 	.word	0x200001b0
 800197c:	20000308 	.word	0x20000308

08001980 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001984:	4b06      	ldr	r3, [pc, #24]	@ (80019a0 <SystemInit+0x20>)
 8001986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800198a:	4a05      	ldr	r2, [pc, #20]	@ (80019a0 <SystemInit+0x20>)
 800198c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001990:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019a8:	f7ff ffea 	bl	8001980 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019ac:	480c      	ldr	r0, [pc, #48]	@ (80019e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019ae:	490d      	ldr	r1, [pc, #52]	@ (80019e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019b0:	4a0d      	ldr	r2, [pc, #52]	@ (80019e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b4:	e002      	b.n	80019bc <LoopCopyDataInit>

080019b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ba:	3304      	adds	r3, #4

080019bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c0:	d3f9      	bcc.n	80019b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019c2:	4a0a      	ldr	r2, [pc, #40]	@ (80019ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019c4:	4c0a      	ldr	r4, [pc, #40]	@ (80019f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c8:	e001      	b.n	80019ce <LoopFillZerobss>

080019ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019cc:	3204      	adds	r2, #4

080019ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d0:	d3fb      	bcc.n	80019ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019d2:	f003 fd01 	bl	80053d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019d6:	f7ff fa1b 	bl	8000e10 <main>
  bx  lr    
 80019da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80019e8:	08005c00 	.word	0x08005c00
  ldr r2, =_sbss
 80019ec:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80019f0:	20000304 	.word	0x20000304

080019f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019f4:	e7fe      	b.n	80019f4 <ADC_IRQHandler>
	...

080019f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001a38 <HAL_Init+0x40>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a0d      	ldr	r2, [pc, #52]	@ (8001a38 <HAL_Init+0x40>)
 8001a02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a08:	4b0b      	ldr	r3, [pc, #44]	@ (8001a38 <HAL_Init+0x40>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a0a      	ldr	r2, [pc, #40]	@ (8001a38 <HAL_Init+0x40>)
 8001a0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a14:	4b08      	ldr	r3, [pc, #32]	@ (8001a38 <HAL_Init+0x40>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a07      	ldr	r2, [pc, #28]	@ (8001a38 <HAL_Init+0x40>)
 8001a1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a20:	2003      	movs	r0, #3
 8001a22:	f000 f94f 	bl	8001cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a26:	200f      	movs	r0, #15
 8001a28:	f000 f808 	bl	8001a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a2c:	f7ff fd54 	bl	80014d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40023c00 	.word	0x40023c00

08001a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a44:	4b12      	ldr	r3, [pc, #72]	@ (8001a90 <HAL_InitTick+0x54>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b12      	ldr	r3, [pc, #72]	@ (8001a94 <HAL_InitTick+0x58>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f000 f967 	bl	8001d2e <HAL_SYSTICK_Config>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e00e      	b.n	8001a88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b0f      	cmp	r3, #15
 8001a6e:	d80a      	bhi.n	8001a86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a70:	2200      	movs	r2, #0
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	f04f 30ff 	mov.w	r0, #4294967295
 8001a78:	f000 f92f 	bl	8001cda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a7c:	4a06      	ldr	r2, [pc, #24]	@ (8001a98 <HAL_InitTick+0x5c>)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
 8001a84:	e000      	b.n	8001a88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20000000 	.word	0x20000000
 8001a94:	20000008 	.word	0x20000008
 8001a98:	20000004 	.word	0x20000004

08001a9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aa0:	4b06      	ldr	r3, [pc, #24]	@ (8001abc <HAL_IncTick+0x20>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <HAL_IncTick+0x24>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4413      	add	r3, r2
 8001aac:	4a04      	ldr	r2, [pc, #16]	@ (8001ac0 <HAL_IncTick+0x24>)
 8001aae:	6013      	str	r3, [r2, #0]
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	20000008 	.word	0x20000008
 8001ac0:	200001b4 	.word	0x200001b4

08001ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac8:	4b03      	ldr	r3, [pc, #12]	@ (8001ad8 <HAL_GetTick+0x14>)
 8001aca:	681b      	ldr	r3, [r3, #0]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	200001b4 	.word	0x200001b4

08001adc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ae4:	f7ff ffee 	bl	8001ac4 <HAL_GetTick>
 8001ae8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af4:	d005      	beq.n	8001b02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001af6:	4b0a      	ldr	r3, [pc, #40]	@ (8001b20 <HAL_Delay+0x44>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	461a      	mov	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4413      	add	r3, r2
 8001b00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b02:	bf00      	nop
 8001b04:	f7ff ffde 	bl	8001ac4 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d8f7      	bhi.n	8001b04 <HAL_Delay+0x28>
  {
  }
}
 8001b14:	bf00      	nop
 8001b16:	bf00      	nop
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000008 	.word	0x20000008

08001b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b34:	4b0c      	ldr	r3, [pc, #48]	@ (8001b68 <__NVIC_SetPriorityGrouping+0x44>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b40:	4013      	ands	r3, r2
 8001b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b56:	4a04      	ldr	r2, [pc, #16]	@ (8001b68 <__NVIC_SetPriorityGrouping+0x44>)
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	60d3      	str	r3, [r2, #12]
}
 8001b5c:	bf00      	nop
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b70:	4b04      	ldr	r3, [pc, #16]	@ (8001b84 <__NVIC_GetPriorityGrouping+0x18>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	0a1b      	lsrs	r3, r3, #8
 8001b76:	f003 0307 	and.w	r3, r3, #7
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	db0b      	blt.n	8001bb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	f003 021f 	and.w	r2, r3, #31
 8001ba0:	4907      	ldr	r1, [pc, #28]	@ (8001bc0 <__NVIC_EnableIRQ+0x38>)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	095b      	lsrs	r3, r3, #5
 8001ba8:	2001      	movs	r0, #1
 8001baa:	fa00 f202 	lsl.w	r2, r0, r2
 8001bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	e000e100 	.word	0xe000e100

08001bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	6039      	str	r1, [r7, #0]
 8001bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	db0a      	blt.n	8001bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	490c      	ldr	r1, [pc, #48]	@ (8001c10 <__NVIC_SetPriority+0x4c>)
 8001bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be2:	0112      	lsls	r2, r2, #4
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	440b      	add	r3, r1
 8001be8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bec:	e00a      	b.n	8001c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4908      	ldr	r1, [pc, #32]	@ (8001c14 <__NVIC_SetPriority+0x50>)
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	3b04      	subs	r3, #4
 8001bfc:	0112      	lsls	r2, r2, #4
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	440b      	add	r3, r1
 8001c02:	761a      	strb	r2, [r3, #24]
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	e000e100 	.word	0xe000e100
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b089      	sub	sp, #36	@ 0x24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f1c3 0307 	rsb	r3, r3, #7
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	bf28      	it	cs
 8001c36:	2304      	movcs	r3, #4
 8001c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	2b06      	cmp	r3, #6
 8001c40:	d902      	bls.n	8001c48 <NVIC_EncodePriority+0x30>
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3b03      	subs	r3, #3
 8001c46:	e000      	b.n	8001c4a <NVIC_EncodePriority+0x32>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43da      	mvns	r2, r3
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c60:	f04f 31ff 	mov.w	r1, #4294967295
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6a:	43d9      	mvns	r1, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c70:	4313      	orrs	r3, r2
         );
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3724      	adds	r7, #36	@ 0x24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
	...

08001c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c90:	d301      	bcc.n	8001c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c92:	2301      	movs	r3, #1
 8001c94:	e00f      	b.n	8001cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c96:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc0 <SysTick_Config+0x40>)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c9e:	210f      	movs	r1, #15
 8001ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca4:	f7ff ff8e 	bl	8001bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca8:	4b05      	ldr	r3, [pc, #20]	@ (8001cc0 <SysTick_Config+0x40>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cae:	4b04      	ldr	r3, [pc, #16]	@ (8001cc0 <SysTick_Config+0x40>)
 8001cb0:	2207      	movs	r2, #7
 8001cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	e000e010 	.word	0xe000e010

08001cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff ff29 	bl	8001b24 <__NVIC_SetPriorityGrouping>
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b086      	sub	sp, #24
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	60b9      	str	r1, [r7, #8]
 8001ce4:	607a      	str	r2, [r7, #4]
 8001ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cec:	f7ff ff3e 	bl	8001b6c <__NVIC_GetPriorityGrouping>
 8001cf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	68b9      	ldr	r1, [r7, #8]
 8001cf6:	6978      	ldr	r0, [r7, #20]
 8001cf8:	f7ff ff8e 	bl	8001c18 <NVIC_EncodePriority>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d02:	4611      	mov	r1, r2
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff ff5d 	bl	8001bc4 <__NVIC_SetPriority>
}
 8001d0a:	bf00      	nop
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	4603      	mov	r3, r0
 8001d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ff31 	bl	8001b88 <__NVIC_EnableIRQ>
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff ffa2 	bl	8001c80 <SysTick_Config>
 8001d3c:	4603      	mov	r3, r0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b084      	sub	sp, #16
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d52:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d54:	f7ff feb6 	bl	8001ac4 <HAL_GetTick>
 8001d58:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d008      	beq.n	8001d78 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2280      	movs	r2, #128	@ 0x80
 8001d6a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e052      	b.n	8001e1e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0216 	bic.w	r2, r2, #22
 8001d86:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	695a      	ldr	r2, [r3, #20]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d96:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d103      	bne.n	8001da8 <HAL_DMA_Abort+0x62>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d007      	beq.n	8001db8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 0208 	bic.w	r2, r2, #8
 8001db6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f022 0201 	bic.w	r2, r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dc8:	e013      	b.n	8001df2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dca:	f7ff fe7b 	bl	8001ac4 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b05      	cmp	r3, #5
 8001dd6:	d90c      	bls.n	8001df2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2220      	movs	r2, #32
 8001ddc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2203      	movs	r2, #3
 8001de2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e015      	b.n	8001e1e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1e4      	bne.n	8001dca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e04:	223f      	movs	r2, #63	@ 0x3f
 8001e06:	409a      	lsls	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d004      	beq.n	8001e44 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2280      	movs	r2, #128	@ 0x80
 8001e3e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e00c      	b.n	8001e5e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2205      	movs	r2, #5
 8001e48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 0201 	bic.w	r2, r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
	...

08001e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b089      	sub	sp, #36	@ 0x24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
 8001e86:	e159      	b.n	800213c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e88:	2201      	movs	r2, #1
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	f040 8148 	bne.w	8002136 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d005      	beq.n	8001ebe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d130      	bne.n	8001f20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	2203      	movs	r2, #3
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	68da      	ldr	r2, [r3, #12]
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4013      	ands	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	091b      	lsrs	r3, r3, #4
 8001f0a:	f003 0201 	and.w	r2, r3, #1
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 0303 	and.w	r3, r3, #3
 8001f28:	2b03      	cmp	r3, #3
 8001f2a:	d017      	beq.n	8001f5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	2203      	movs	r2, #3
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d123      	bne.n	8001fb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	08da      	lsrs	r2, r3, #3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3208      	adds	r2, #8
 8001f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	220f      	movs	r2, #15
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	691a      	ldr	r2, [r3, #16]
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	08da      	lsrs	r2, r3, #3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3208      	adds	r2, #8
 8001faa:	69b9      	ldr	r1, [r7, #24]
 8001fac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	2203      	movs	r2, #3
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 0203 	and.w	r2, r3, #3
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 80a2 	beq.w	8002136 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	4b57      	ldr	r3, [pc, #348]	@ (8002154 <HAL_GPIO_Init+0x2e8>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffa:	4a56      	ldr	r2, [pc, #344]	@ (8002154 <HAL_GPIO_Init+0x2e8>)
 8001ffc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002000:	6453      	str	r3, [r2, #68]	@ 0x44
 8002002:	4b54      	ldr	r3, [pc, #336]	@ (8002154 <HAL_GPIO_Init+0x2e8>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002006:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800200e:	4a52      	ldr	r2, [pc, #328]	@ (8002158 <HAL_GPIO_Init+0x2ec>)
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	089b      	lsrs	r3, r3, #2
 8002014:	3302      	adds	r3, #2
 8002016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800201a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	220f      	movs	r2, #15
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4013      	ands	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a49      	ldr	r2, [pc, #292]	@ (800215c <HAL_GPIO_Init+0x2f0>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d019      	beq.n	800206e <HAL_GPIO_Init+0x202>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a48      	ldr	r2, [pc, #288]	@ (8002160 <HAL_GPIO_Init+0x2f4>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d013      	beq.n	800206a <HAL_GPIO_Init+0x1fe>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a47      	ldr	r2, [pc, #284]	@ (8002164 <HAL_GPIO_Init+0x2f8>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d00d      	beq.n	8002066 <HAL_GPIO_Init+0x1fa>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a46      	ldr	r2, [pc, #280]	@ (8002168 <HAL_GPIO_Init+0x2fc>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d007      	beq.n	8002062 <HAL_GPIO_Init+0x1f6>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a45      	ldr	r2, [pc, #276]	@ (800216c <HAL_GPIO_Init+0x300>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d101      	bne.n	800205e <HAL_GPIO_Init+0x1f2>
 800205a:	2304      	movs	r3, #4
 800205c:	e008      	b.n	8002070 <HAL_GPIO_Init+0x204>
 800205e:	2307      	movs	r3, #7
 8002060:	e006      	b.n	8002070 <HAL_GPIO_Init+0x204>
 8002062:	2303      	movs	r3, #3
 8002064:	e004      	b.n	8002070 <HAL_GPIO_Init+0x204>
 8002066:	2302      	movs	r3, #2
 8002068:	e002      	b.n	8002070 <HAL_GPIO_Init+0x204>
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <HAL_GPIO_Init+0x204>
 800206e:	2300      	movs	r3, #0
 8002070:	69fa      	ldr	r2, [r7, #28]
 8002072:	f002 0203 	and.w	r2, r2, #3
 8002076:	0092      	lsls	r2, r2, #2
 8002078:	4093      	lsls	r3, r2
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4313      	orrs	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002080:	4935      	ldr	r1, [pc, #212]	@ (8002158 <HAL_GPIO_Init+0x2ec>)
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	089b      	lsrs	r3, r3, #2
 8002086:	3302      	adds	r3, #2
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800208e:	4b38      	ldr	r3, [pc, #224]	@ (8002170 <HAL_GPIO_Init+0x304>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020b2:	4a2f      	ldr	r2, [pc, #188]	@ (8002170 <HAL_GPIO_Init+0x304>)
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002170 <HAL_GPIO_Init+0x304>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020dc:	4a24      	ldr	r2, [pc, #144]	@ (8002170 <HAL_GPIO_Init+0x304>)
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020e2:	4b23      	ldr	r3, [pc, #140]	@ (8002170 <HAL_GPIO_Init+0x304>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	43db      	mvns	r3, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4013      	ands	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	4313      	orrs	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002106:	4a1a      	ldr	r2, [pc, #104]	@ (8002170 <HAL_GPIO_Init+0x304>)
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800210c:	4b18      	ldr	r3, [pc, #96]	@ (8002170 <HAL_GPIO_Init+0x304>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4313      	orrs	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002130:	4a0f      	ldr	r2, [pc, #60]	@ (8002170 <HAL_GPIO_Init+0x304>)
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3301      	adds	r3, #1
 800213a:	61fb      	str	r3, [r7, #28]
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	2b0f      	cmp	r3, #15
 8002140:	f67f aea2 	bls.w	8001e88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002144:	bf00      	nop
 8002146:	bf00      	nop
 8002148:	3724      	adds	r7, #36	@ 0x24
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	40023800 	.word	0x40023800
 8002158:	40013800 	.word	0x40013800
 800215c:	40020000 	.word	0x40020000
 8002160:	40020400 	.word	0x40020400
 8002164:	40020800 	.word	0x40020800
 8002168:	40020c00 	.word	0x40020c00
 800216c:	40021000 	.word	0x40021000
 8002170:	40013c00 	.word	0x40013c00

08002174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	807b      	strh	r3, [r7, #2]
 8002180:	4613      	mov	r3, r2
 8002182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002184:	787b      	ldrb	r3, [r7, #1]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800218a:	887a      	ldrh	r2, [r7, #2]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002190:	e003      	b.n	800219a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002192:	887b      	ldrh	r3, [r7, #2]
 8002194:	041a      	lsls	r2, r3, #16
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	619a      	str	r2, [r3, #24]
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
	...

080021a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80021b2:	4b08      	ldr	r3, [pc, #32]	@ (80021d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021b4:	695a      	ldr	r2, [r3, #20]
 80021b6:	88fb      	ldrh	r3, [r7, #6]
 80021b8:	4013      	ands	r3, r2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d006      	beq.n	80021cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021be:	4a05      	ldr	r2, [pc, #20]	@ (80021d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021c0:	88fb      	ldrh	r3, [r7, #6]
 80021c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021c4:	88fb      	ldrh	r3, [r7, #6]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f000 f806 	bl	80021d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80021cc:	bf00      	nop
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40013c00 	.word	0x40013c00

080021d8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	4603      	mov	r3, r0
 80021e0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
	...

080021f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e267      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d075      	beq.n	80022fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800220e:	4b88      	ldr	r3, [pc, #544]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 030c 	and.w	r3, r3, #12
 8002216:	2b04      	cmp	r3, #4
 8002218:	d00c      	beq.n	8002234 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800221a:	4b85      	ldr	r3, [pc, #532]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002222:	2b08      	cmp	r3, #8
 8002224:	d112      	bne.n	800224c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002226:	4b82      	ldr	r3, [pc, #520]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800222e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002232:	d10b      	bne.n	800224c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002234:	4b7e      	ldr	r3, [pc, #504]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d05b      	beq.n	80022f8 <HAL_RCC_OscConfig+0x108>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d157      	bne.n	80022f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e242      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002254:	d106      	bne.n	8002264 <HAL_RCC_OscConfig+0x74>
 8002256:	4b76      	ldr	r3, [pc, #472]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a75      	ldr	r2, [pc, #468]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 800225c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	e01d      	b.n	80022a0 <HAL_RCC_OscConfig+0xb0>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800226c:	d10c      	bne.n	8002288 <HAL_RCC_OscConfig+0x98>
 800226e:	4b70      	ldr	r3, [pc, #448]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a6f      	ldr	r2, [pc, #444]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 8002274:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	4b6d      	ldr	r3, [pc, #436]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a6c      	ldr	r2, [pc, #432]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 8002280:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	e00b      	b.n	80022a0 <HAL_RCC_OscConfig+0xb0>
 8002288:	4b69      	ldr	r3, [pc, #420]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a68      	ldr	r2, [pc, #416]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 800228e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002292:	6013      	str	r3, [r2, #0]
 8002294:	4b66      	ldr	r3, [pc, #408]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a65      	ldr	r2, [pc, #404]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 800229a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800229e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d013      	beq.n	80022d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a8:	f7ff fc0c 	bl	8001ac4 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022b0:	f7ff fc08 	bl	8001ac4 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b64      	cmp	r3, #100	@ 0x64
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e207      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c2:	4b5b      	ldr	r3, [pc, #364]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0f0      	beq.n	80022b0 <HAL_RCC_OscConfig+0xc0>
 80022ce:	e014      	b.n	80022fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d0:	f7ff fbf8 	bl	8001ac4 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022d8:	f7ff fbf4 	bl	8001ac4 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b64      	cmp	r3, #100	@ 0x64
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e1f3      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ea:	4b51      	ldr	r3, [pc, #324]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f0      	bne.n	80022d8 <HAL_RCC_OscConfig+0xe8>
 80022f6:	e000      	b.n	80022fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d063      	beq.n	80023ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002306:	4b4a      	ldr	r3, [pc, #296]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 030c 	and.w	r3, r3, #12
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00b      	beq.n	800232a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002312:	4b47      	ldr	r3, [pc, #284]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800231a:	2b08      	cmp	r3, #8
 800231c:	d11c      	bne.n	8002358 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800231e:	4b44      	ldr	r3, [pc, #272]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d116      	bne.n	8002358 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800232a:	4b41      	ldr	r3, [pc, #260]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d005      	beq.n	8002342 <HAL_RCC_OscConfig+0x152>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d001      	beq.n	8002342 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e1c7      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002342:	4b3b      	ldr	r3, [pc, #236]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	4937      	ldr	r1, [pc, #220]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 8002352:	4313      	orrs	r3, r2
 8002354:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002356:	e03a      	b.n	80023ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d020      	beq.n	80023a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002360:	4b34      	ldr	r3, [pc, #208]	@ (8002434 <HAL_RCC_OscConfig+0x244>)
 8002362:	2201      	movs	r2, #1
 8002364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002366:	f7ff fbad 	bl	8001ac4 <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800236e:	f7ff fba9 	bl	8001ac4 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e1a8      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002380:	4b2b      	ldr	r3, [pc, #172]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0f0      	beq.n	800236e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800238c:	4b28      	ldr	r3, [pc, #160]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	4925      	ldr	r1, [pc, #148]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 800239c:	4313      	orrs	r3, r2
 800239e:	600b      	str	r3, [r1, #0]
 80023a0:	e015      	b.n	80023ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023a2:	4b24      	ldr	r3, [pc, #144]	@ (8002434 <HAL_RCC_OscConfig+0x244>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a8:	f7ff fb8c 	bl	8001ac4 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023b0:	f7ff fb88 	bl	8001ac4 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e187      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1f0      	bne.n	80023b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0308 	and.w	r3, r3, #8
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d036      	beq.n	8002448 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d016      	beq.n	8002410 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023e2:	4b15      	ldr	r3, [pc, #84]	@ (8002438 <HAL_RCC_OscConfig+0x248>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e8:	f7ff fb6c 	bl	8001ac4 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023f0:	f7ff fb68 	bl	8001ac4 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e167      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002402:	4b0b      	ldr	r3, [pc, #44]	@ (8002430 <HAL_RCC_OscConfig+0x240>)
 8002404:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0f0      	beq.n	80023f0 <HAL_RCC_OscConfig+0x200>
 800240e:	e01b      	b.n	8002448 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002410:	4b09      	ldr	r3, [pc, #36]	@ (8002438 <HAL_RCC_OscConfig+0x248>)
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002416:	f7ff fb55 	bl	8001ac4 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800241c:	e00e      	b.n	800243c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800241e:	f7ff fb51 	bl	8001ac4 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d907      	bls.n	800243c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e150      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
 8002430:	40023800 	.word	0x40023800
 8002434:	42470000 	.word	0x42470000
 8002438:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800243c:	4b88      	ldr	r3, [pc, #544]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 800243e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1ea      	bne.n	800241e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 8097 	beq.w	8002584 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002456:	2300      	movs	r3, #0
 8002458:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800245a:	4b81      	ldr	r3, [pc, #516]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10f      	bne.n	8002486 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	60bb      	str	r3, [r7, #8]
 800246a:	4b7d      	ldr	r3, [pc, #500]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246e:	4a7c      	ldr	r2, [pc, #496]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 8002470:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002474:	6413      	str	r3, [r2, #64]	@ 0x40
 8002476:	4b7a      	ldr	r3, [pc, #488]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800247e:	60bb      	str	r3, [r7, #8]
 8002480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002482:	2301      	movs	r3, #1
 8002484:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002486:	4b77      	ldr	r3, [pc, #476]	@ (8002664 <HAL_RCC_OscConfig+0x474>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800248e:	2b00      	cmp	r3, #0
 8002490:	d118      	bne.n	80024c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002492:	4b74      	ldr	r3, [pc, #464]	@ (8002664 <HAL_RCC_OscConfig+0x474>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a73      	ldr	r2, [pc, #460]	@ (8002664 <HAL_RCC_OscConfig+0x474>)
 8002498:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800249c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800249e:	f7ff fb11 	bl	8001ac4 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a6:	f7ff fb0d 	bl	8001ac4 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e10c      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b8:	4b6a      	ldr	r3, [pc, #424]	@ (8002664 <HAL_RCC_OscConfig+0x474>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0f0      	beq.n	80024a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d106      	bne.n	80024da <HAL_RCC_OscConfig+0x2ea>
 80024cc:	4b64      	ldr	r3, [pc, #400]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 80024ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024d0:	4a63      	ldr	r2, [pc, #396]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80024d8:	e01c      	b.n	8002514 <HAL_RCC_OscConfig+0x324>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	2b05      	cmp	r3, #5
 80024e0:	d10c      	bne.n	80024fc <HAL_RCC_OscConfig+0x30c>
 80024e2:	4b5f      	ldr	r3, [pc, #380]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 80024e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024e6:	4a5e      	ldr	r2, [pc, #376]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 80024e8:	f043 0304 	orr.w	r3, r3, #4
 80024ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80024ee:	4b5c      	ldr	r3, [pc, #368]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 80024f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80024fa:	e00b      	b.n	8002514 <HAL_RCC_OscConfig+0x324>
 80024fc:	4b58      	ldr	r3, [pc, #352]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 80024fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002500:	4a57      	ldr	r2, [pc, #348]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 8002502:	f023 0301 	bic.w	r3, r3, #1
 8002506:	6713      	str	r3, [r2, #112]	@ 0x70
 8002508:	4b55      	ldr	r3, [pc, #340]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 800250a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800250c:	4a54      	ldr	r2, [pc, #336]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 800250e:	f023 0304 	bic.w	r3, r3, #4
 8002512:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d015      	beq.n	8002548 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251c:	f7ff fad2 	bl	8001ac4 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002522:	e00a      	b.n	800253a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002524:	f7ff face 	bl	8001ac4 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002532:	4293      	cmp	r3, r2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e0cb      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800253a:	4b49      	ldr	r3, [pc, #292]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 800253c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0ee      	beq.n	8002524 <HAL_RCC_OscConfig+0x334>
 8002546:	e014      	b.n	8002572 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002548:	f7ff fabc 	bl	8001ac4 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800254e:	e00a      	b.n	8002566 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002550:	f7ff fab8 	bl	8001ac4 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800255e:	4293      	cmp	r3, r2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e0b5      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002566:	4b3e      	ldr	r3, [pc, #248]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 8002568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1ee      	bne.n	8002550 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002572:	7dfb      	ldrb	r3, [r7, #23]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d105      	bne.n	8002584 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002578:	4b39      	ldr	r3, [pc, #228]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 800257a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257c:	4a38      	ldr	r2, [pc, #224]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 800257e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002582:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 80a1 	beq.w	80026d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800258e:	4b34      	ldr	r3, [pc, #208]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 030c 	and.w	r3, r3, #12
 8002596:	2b08      	cmp	r3, #8
 8002598:	d05c      	beq.n	8002654 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d141      	bne.n	8002626 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a2:	4b31      	ldr	r3, [pc, #196]	@ (8002668 <HAL_RCC_OscConfig+0x478>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a8:	f7ff fa8c 	bl	8001ac4 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b0:	f7ff fa88 	bl	8001ac4 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e087      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c2:	4b27      	ldr	r3, [pc, #156]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f0      	bne.n	80025b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69da      	ldr	r2, [r3, #28]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025dc:	019b      	lsls	r3, r3, #6
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e4:	085b      	lsrs	r3, r3, #1
 80025e6:	3b01      	subs	r3, #1
 80025e8:	041b      	lsls	r3, r3, #16
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f0:	061b      	lsls	r3, r3, #24
 80025f2:	491b      	ldr	r1, [pc, #108]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002668 <HAL_RCC_OscConfig+0x478>)
 80025fa:	2201      	movs	r2, #1
 80025fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fe:	f7ff fa61 	bl	8001ac4 <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002606:	f7ff fa5d 	bl	8001ac4 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e05c      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002618:	4b11      	ldr	r3, [pc, #68]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0f0      	beq.n	8002606 <HAL_RCC_OscConfig+0x416>
 8002624:	e054      	b.n	80026d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002626:	4b10      	ldr	r3, [pc, #64]	@ (8002668 <HAL_RCC_OscConfig+0x478>)
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262c:	f7ff fa4a 	bl	8001ac4 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002634:	f7ff fa46 	bl	8001ac4 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e045      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002646:	4b06      	ldr	r3, [pc, #24]	@ (8002660 <HAL_RCC_OscConfig+0x470>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f0      	bne.n	8002634 <HAL_RCC_OscConfig+0x444>
 8002652:	e03d      	b.n	80026d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d107      	bne.n	800266c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e038      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
 8002660:	40023800 	.word	0x40023800
 8002664:	40007000 	.word	0x40007000
 8002668:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800266c:	4b1b      	ldr	r3, [pc, #108]	@ (80026dc <HAL_RCC_OscConfig+0x4ec>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d028      	beq.n	80026cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002684:	429a      	cmp	r2, r3
 8002686:	d121      	bne.n	80026cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002692:	429a      	cmp	r2, r3
 8002694:	d11a      	bne.n	80026cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800269c:	4013      	ands	r3, r2
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80026a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d111      	bne.n	80026cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b2:	085b      	lsrs	r3, r3, #1
 80026b4:	3b01      	subs	r3, #1
 80026b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d107      	bne.n	80026cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d001      	beq.n	80026d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e000      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3718      	adds	r7, #24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40023800 	.word	0x40023800

080026e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e0cc      	b.n	800288e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026f4:	4b68      	ldr	r3, [pc, #416]	@ (8002898 <HAL_RCC_ClockConfig+0x1b8>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d90c      	bls.n	800271c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002702:	4b65      	ldr	r3, [pc, #404]	@ (8002898 <HAL_RCC_ClockConfig+0x1b8>)
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800270a:	4b63      	ldr	r3, [pc, #396]	@ (8002898 <HAL_RCC_ClockConfig+0x1b8>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d001      	beq.n	800271c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e0b8      	b.n	800288e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d020      	beq.n	800276a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002734:	4b59      	ldr	r3, [pc, #356]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	4a58      	ldr	r2, [pc, #352]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 800273a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800273e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0308 	and.w	r3, r3, #8
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800274c:	4b53      	ldr	r3, [pc, #332]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	4a52      	ldr	r2, [pc, #328]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002756:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002758:	4b50      	ldr	r3, [pc, #320]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	494d      	ldr	r1, [pc, #308]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	4313      	orrs	r3, r2
 8002768:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d044      	beq.n	8002800 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d107      	bne.n	800278e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277e:	4b47      	ldr	r3, [pc, #284]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d119      	bne.n	80027be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e07f      	b.n	800288e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b02      	cmp	r3, #2
 8002794:	d003      	beq.n	800279e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800279a:	2b03      	cmp	r3, #3
 800279c:	d107      	bne.n	80027ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800279e:	4b3f      	ldr	r3, [pc, #252]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d109      	bne.n	80027be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e06f      	b.n	800288e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ae:	4b3b      	ldr	r3, [pc, #236]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e067      	b.n	800288e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027be:	4b37      	ldr	r3, [pc, #220]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f023 0203 	bic.w	r2, r3, #3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	4934      	ldr	r1, [pc, #208]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027d0:	f7ff f978 	bl	8001ac4 <HAL_GetTick>
 80027d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d6:	e00a      	b.n	80027ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d8:	f7ff f974 	bl	8001ac4 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e04f      	b.n	800288e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ee:	4b2b      	ldr	r3, [pc, #172]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 020c 	and.w	r2, r3, #12
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d1eb      	bne.n	80027d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002800:	4b25      	ldr	r3, [pc, #148]	@ (8002898 <HAL_RCC_ClockConfig+0x1b8>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	429a      	cmp	r2, r3
 800280c:	d20c      	bcs.n	8002828 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280e:	4b22      	ldr	r3, [pc, #136]	@ (8002898 <HAL_RCC_ClockConfig+0x1b8>)
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002816:	4b20      	ldr	r3, [pc, #128]	@ (8002898 <HAL_RCC_ClockConfig+0x1b8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	429a      	cmp	r2, r3
 8002822:	d001      	beq.n	8002828 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e032      	b.n	800288e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b00      	cmp	r3, #0
 8002832:	d008      	beq.n	8002846 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002834:	4b19      	ldr	r3, [pc, #100]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	4916      	ldr	r1, [pc, #88]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	4313      	orrs	r3, r2
 8002844:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b00      	cmp	r3, #0
 8002850:	d009      	beq.n	8002866 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002852:	4b12      	ldr	r3, [pc, #72]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	490e      	ldr	r1, [pc, #56]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002862:	4313      	orrs	r3, r2
 8002864:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002866:	f000 f821 	bl	80028ac <HAL_RCC_GetSysClockFreq>
 800286a:	4602      	mov	r2, r0
 800286c:	4b0b      	ldr	r3, [pc, #44]	@ (800289c <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	091b      	lsrs	r3, r3, #4
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	490a      	ldr	r1, [pc, #40]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002878:	5ccb      	ldrb	r3, [r1, r3]
 800287a:	fa22 f303 	lsr.w	r3, r2, r3
 800287e:	4a09      	ldr	r2, [pc, #36]	@ (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002880:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002882:	4b09      	ldr	r3, [pc, #36]	@ (80028a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff f8d8 	bl	8001a3c <HAL_InitTick>

  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40023c00 	.word	0x40023c00
 800289c:	40023800 	.word	0x40023800
 80028a0:	08005ba4 	.word	0x08005ba4
 80028a4:	20000000 	.word	0x20000000
 80028a8:	20000004 	.word	0x20000004

080028ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028b0:	b090      	sub	sp, #64	@ 0x40
 80028b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80028b8:	2300      	movs	r3, #0
 80028ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028bc:	2300      	movs	r3, #0
 80028be:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80028c0:	2300      	movs	r3, #0
 80028c2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028c4:	4b59      	ldr	r3, [pc, #356]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0x180>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f003 030c 	and.w	r3, r3, #12
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d00d      	beq.n	80028ec <HAL_RCC_GetSysClockFreq+0x40>
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	f200 80a1 	bhi.w	8002a18 <HAL_RCC_GetSysClockFreq+0x16c>
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d002      	beq.n	80028e0 <HAL_RCC_GetSysClockFreq+0x34>
 80028da:	2b04      	cmp	r3, #4
 80028dc:	d003      	beq.n	80028e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80028de:	e09b      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028e0:	4b53      	ldr	r3, [pc, #332]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x184>)
 80028e2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80028e4:	e09b      	b.n	8002a1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028e6:	4b53      	ldr	r3, [pc, #332]	@ (8002a34 <HAL_RCC_GetSysClockFreq+0x188>)
 80028e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80028ea:	e098      	b.n	8002a1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028ec:	4b4f      	ldr	r3, [pc, #316]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0x180>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028f6:	4b4d      	ldr	r3, [pc, #308]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0x180>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d028      	beq.n	8002954 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002902:	4b4a      	ldr	r3, [pc, #296]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0x180>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	099b      	lsrs	r3, r3, #6
 8002908:	2200      	movs	r2, #0
 800290a:	623b      	str	r3, [r7, #32]
 800290c:	627a      	str	r2, [r7, #36]	@ 0x24
 800290e:	6a3b      	ldr	r3, [r7, #32]
 8002910:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002914:	2100      	movs	r1, #0
 8002916:	4b47      	ldr	r3, [pc, #284]	@ (8002a34 <HAL_RCC_GetSysClockFreq+0x188>)
 8002918:	fb03 f201 	mul.w	r2, r3, r1
 800291c:	2300      	movs	r3, #0
 800291e:	fb00 f303 	mul.w	r3, r0, r3
 8002922:	4413      	add	r3, r2
 8002924:	4a43      	ldr	r2, [pc, #268]	@ (8002a34 <HAL_RCC_GetSysClockFreq+0x188>)
 8002926:	fba0 1202 	umull	r1, r2, r0, r2
 800292a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800292c:	460a      	mov	r2, r1
 800292e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002930:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002932:	4413      	add	r3, r2
 8002934:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002938:	2200      	movs	r2, #0
 800293a:	61bb      	str	r3, [r7, #24]
 800293c:	61fa      	str	r2, [r7, #28]
 800293e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002942:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002946:	f7fd fc9b 	bl	8000280 <__aeabi_uldivmod>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	4613      	mov	r3, r2
 8002950:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002952:	e053      	b.n	80029fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002954:	4b35      	ldr	r3, [pc, #212]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0x180>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	099b      	lsrs	r3, r3, #6
 800295a:	2200      	movs	r2, #0
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	617a      	str	r2, [r7, #20]
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002966:	f04f 0b00 	mov.w	fp, #0
 800296a:	4652      	mov	r2, sl
 800296c:	465b      	mov	r3, fp
 800296e:	f04f 0000 	mov.w	r0, #0
 8002972:	f04f 0100 	mov.w	r1, #0
 8002976:	0159      	lsls	r1, r3, #5
 8002978:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800297c:	0150      	lsls	r0, r2, #5
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	ebb2 080a 	subs.w	r8, r2, sl
 8002986:	eb63 090b 	sbc.w	r9, r3, fp
 800298a:	f04f 0200 	mov.w	r2, #0
 800298e:	f04f 0300 	mov.w	r3, #0
 8002992:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002996:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800299a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800299e:	ebb2 0408 	subs.w	r4, r2, r8
 80029a2:	eb63 0509 	sbc.w	r5, r3, r9
 80029a6:	f04f 0200 	mov.w	r2, #0
 80029aa:	f04f 0300 	mov.w	r3, #0
 80029ae:	00eb      	lsls	r3, r5, #3
 80029b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029b4:	00e2      	lsls	r2, r4, #3
 80029b6:	4614      	mov	r4, r2
 80029b8:	461d      	mov	r5, r3
 80029ba:	eb14 030a 	adds.w	r3, r4, sl
 80029be:	603b      	str	r3, [r7, #0]
 80029c0:	eb45 030b 	adc.w	r3, r5, fp
 80029c4:	607b      	str	r3, [r7, #4]
 80029c6:	f04f 0200 	mov.w	r2, #0
 80029ca:	f04f 0300 	mov.w	r3, #0
 80029ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029d2:	4629      	mov	r1, r5
 80029d4:	028b      	lsls	r3, r1, #10
 80029d6:	4621      	mov	r1, r4
 80029d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029dc:	4621      	mov	r1, r4
 80029de:	028a      	lsls	r2, r1, #10
 80029e0:	4610      	mov	r0, r2
 80029e2:	4619      	mov	r1, r3
 80029e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029e6:	2200      	movs	r2, #0
 80029e8:	60bb      	str	r3, [r7, #8]
 80029ea:	60fa      	str	r2, [r7, #12]
 80029ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029f0:	f7fd fc46 	bl	8000280 <__aeabi_uldivmod>
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	4613      	mov	r3, r2
 80029fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029fc:	4b0b      	ldr	r3, [pc, #44]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0x180>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	0c1b      	lsrs	r3, r3, #16
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	3301      	adds	r3, #1
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002a0c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a14:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a16:	e002      	b.n	8002a1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a18:	4b05      	ldr	r3, [pc, #20]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a1a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3740      	adds	r7, #64	@ 0x40
 8002a24:	46bd      	mov	sp, r7
 8002a26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	00f42400 	.word	0x00f42400
 8002a34:	017d7840 	.word	0x017d7840

08002a38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a3c:	4b03      	ldr	r3, [pc, #12]	@ (8002a4c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	20000000 	.word	0x20000000

08002a50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a54:	f7ff fff0 	bl	8002a38 <HAL_RCC_GetHCLKFreq>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	4b05      	ldr	r3, [pc, #20]	@ (8002a70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	0a9b      	lsrs	r3, r3, #10
 8002a60:	f003 0307 	and.w	r3, r3, #7
 8002a64:	4903      	ldr	r1, [pc, #12]	@ (8002a74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a66:	5ccb      	ldrb	r3, [r1, r3]
 8002a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	40023800 	.word	0x40023800
 8002a74:	08005bb4 	.word	0x08005bb4

08002a78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a7c:	f7ff ffdc 	bl	8002a38 <HAL_RCC_GetHCLKFreq>
 8002a80:	4602      	mov	r2, r0
 8002a82:	4b05      	ldr	r3, [pc, #20]	@ (8002a98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	0b5b      	lsrs	r3, r3, #13
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	4903      	ldr	r1, [pc, #12]	@ (8002a9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a8e:	5ccb      	ldrb	r3, [r1, r3]
 8002a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	08005bb4 	.word	0x08005bb4

08002aa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e041      	b.n	8002b36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d106      	bne.n	8002acc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7fe fd96 	bl	80015f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2202      	movs	r2, #2
 8002ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3304      	adds	r3, #4
 8002adc:	4619      	mov	r1, r3
 8002ade:	4610      	mov	r0, r2
 8002ae0:	f000 fe86 	bl	80037f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b082      	sub	sp, #8
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e041      	b.n	8002bd4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d106      	bne.n	8002b6a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f839 	bl	8002bdc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	3304      	adds	r3, #4
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	4610      	mov	r0, r2
 8002b7e:	f000 fe37 	bl	80037f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d109      	bne.n	8002c14 <HAL_TIM_PWM_Start+0x24>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	bf14      	ite	ne
 8002c0c:	2301      	movne	r3, #1
 8002c0e:	2300      	moveq	r3, #0
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	e022      	b.n	8002c5a <HAL_TIM_PWM_Start+0x6a>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d109      	bne.n	8002c2e <HAL_TIM_PWM_Start+0x3e>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	bf14      	ite	ne
 8002c26:	2301      	movne	r3, #1
 8002c28:	2300      	moveq	r3, #0
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	e015      	b.n	8002c5a <HAL_TIM_PWM_Start+0x6a>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d109      	bne.n	8002c48 <HAL_TIM_PWM_Start+0x58>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	bf14      	ite	ne
 8002c40:	2301      	movne	r3, #1
 8002c42:	2300      	moveq	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	e008      	b.n	8002c5a <HAL_TIM_PWM_Start+0x6a>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	bf14      	ite	ne
 8002c54:	2301      	movne	r3, #1
 8002c56:	2300      	moveq	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e068      	b.n	8002d34 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d104      	bne.n	8002c72 <HAL_TIM_PWM_Start+0x82>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c70:	e013      	b.n	8002c9a <HAL_TIM_PWM_Start+0xaa>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d104      	bne.n	8002c82 <HAL_TIM_PWM_Start+0x92>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c80:	e00b      	b.n	8002c9a <HAL_TIM_PWM_Start+0xaa>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	d104      	bne.n	8002c92 <HAL_TIM_PWM_Start+0xa2>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c90:	e003      	b.n	8002c9a <HAL_TIM_PWM_Start+0xaa>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2202      	movs	r2, #2
 8002c96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	6839      	ldr	r1, [r7, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f001 f974 	bl	8003f90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a23      	ldr	r2, [pc, #140]	@ (8002d3c <HAL_TIM_PWM_Start+0x14c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d107      	bne.n	8002cc2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cc0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a1d      	ldr	r2, [pc, #116]	@ (8002d3c <HAL_TIM_PWM_Start+0x14c>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d018      	beq.n	8002cfe <HAL_TIM_PWM_Start+0x10e>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cd4:	d013      	beq.n	8002cfe <HAL_TIM_PWM_Start+0x10e>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a19      	ldr	r2, [pc, #100]	@ (8002d40 <HAL_TIM_PWM_Start+0x150>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d00e      	beq.n	8002cfe <HAL_TIM_PWM_Start+0x10e>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a17      	ldr	r2, [pc, #92]	@ (8002d44 <HAL_TIM_PWM_Start+0x154>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d009      	beq.n	8002cfe <HAL_TIM_PWM_Start+0x10e>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a16      	ldr	r2, [pc, #88]	@ (8002d48 <HAL_TIM_PWM_Start+0x158>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d004      	beq.n	8002cfe <HAL_TIM_PWM_Start+0x10e>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a14      	ldr	r2, [pc, #80]	@ (8002d4c <HAL_TIM_PWM_Start+0x15c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d111      	bne.n	8002d22 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2b06      	cmp	r3, #6
 8002d0e:	d010      	beq.n	8002d32 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f042 0201 	orr.w	r2, r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d20:	e007      	b.n	8002d32 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f042 0201 	orr.w	r2, r2, #1
 8002d30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40010000 	.word	0x40010000
 8002d40:	40000400 	.word	0x40000400
 8002d44:	40000800 	.word	0x40000800
 8002d48:	40000c00 	.word	0x40000c00
 8002d4c:	40014000 	.word	0x40014000

08002d50 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	6839      	ldr	r1, [r7, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f001 f914 	bl	8003f90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a29      	ldr	r2, [pc, #164]	@ (8002e14 <HAL_TIM_PWM_Stop+0xc4>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d117      	bne.n	8002da2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6a1a      	ldr	r2, [r3, #32]
 8002d78:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10f      	bne.n	8002da2 <HAL_TIM_PWM_Stop+0x52>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6a1a      	ldr	r2, [r3, #32]
 8002d88:	f240 4344 	movw	r3, #1092	@ 0x444
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d107      	bne.n	8002da2 <HAL_TIM_PWM_Stop+0x52>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002da0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6a1a      	ldr	r2, [r3, #32]
 8002da8:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002dac:	4013      	ands	r3, r2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10f      	bne.n	8002dd2 <HAL_TIM_PWM_Stop+0x82>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6a1a      	ldr	r2, [r3, #32]
 8002db8:	f240 4344 	movw	r3, #1092	@ 0x444
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d107      	bne.n	8002dd2 <HAL_TIM_PWM_Stop+0x82>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 0201 	bic.w	r2, r2, #1
 8002dd0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d104      	bne.n	8002de2 <HAL_TIM_PWM_Stop+0x92>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002de0:	e013      	b.n	8002e0a <HAL_TIM_PWM_Stop+0xba>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	2b04      	cmp	r3, #4
 8002de6:	d104      	bne.n	8002df2 <HAL_TIM_PWM_Stop+0xa2>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002df0:	e00b      	b.n	8002e0a <HAL_TIM_PWM_Stop+0xba>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	d104      	bne.n	8002e02 <HAL_TIM_PWM_Stop+0xb2>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e00:	e003      	b.n	8002e0a <HAL_TIM_PWM_Stop+0xba>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40010000 	.word	0x40010000

08002e18 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e041      	b.n	8002eae <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d106      	bne.n	8002e44 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7fe fb72 	bl	8001528 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2202      	movs	r2, #2
 8002e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3304      	adds	r3, #4
 8002e54:	4619      	mov	r1, r3
 8002e56:	4610      	mov	r0, r2
 8002e58:	f000 fcca 	bl	80037f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
	...

08002eb8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d104      	bne.n	8002ed6 <HAL_TIM_IC_Start_IT+0x1e>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	e013      	b.n	8002efe <HAL_TIM_IC_Start_IT+0x46>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d104      	bne.n	8002ee6 <HAL_TIM_IC_Start_IT+0x2e>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	e00b      	b.n	8002efe <HAL_TIM_IC_Start_IT+0x46>
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	d104      	bne.n	8002ef6 <HAL_TIM_IC_Start_IT+0x3e>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	e003      	b.n	8002efe <HAL_TIM_IC_Start_IT+0x46>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d104      	bne.n	8002f10 <HAL_TIM_IC_Start_IT+0x58>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	e013      	b.n	8002f38 <HAL_TIM_IC_Start_IT+0x80>
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d104      	bne.n	8002f20 <HAL_TIM_IC_Start_IT+0x68>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	e00b      	b.n	8002f38 <HAL_TIM_IC_Start_IT+0x80>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d104      	bne.n	8002f30 <HAL_TIM_IC_Start_IT+0x78>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	e003      	b.n	8002f38 <HAL_TIM_IC_Start_IT+0x80>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f3a:	7bbb      	ldrb	r3, [r7, #14]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d102      	bne.n	8002f46 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002f40:	7b7b      	ldrb	r3, [r7, #13]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d001      	beq.n	8002f4a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e0c2      	b.n	80030d0 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d104      	bne.n	8002f5a <HAL_TIM_IC_Start_IT+0xa2>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2202      	movs	r2, #2
 8002f54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f58:	e013      	b.n	8002f82 <HAL_TIM_IC_Start_IT+0xca>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b04      	cmp	r3, #4
 8002f5e:	d104      	bne.n	8002f6a <HAL_TIM_IC_Start_IT+0xb2>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2202      	movs	r2, #2
 8002f64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f68:	e00b      	b.n	8002f82 <HAL_TIM_IC_Start_IT+0xca>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d104      	bne.n	8002f7a <HAL_TIM_IC_Start_IT+0xc2>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2202      	movs	r2, #2
 8002f74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f78:	e003      	b.n	8002f82 <HAL_TIM_IC_Start_IT+0xca>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d104      	bne.n	8002f92 <HAL_TIM_IC_Start_IT+0xda>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f90:	e013      	b.n	8002fba <HAL_TIM_IC_Start_IT+0x102>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	2b04      	cmp	r3, #4
 8002f96:	d104      	bne.n	8002fa2 <HAL_TIM_IC_Start_IT+0xea>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002fa0:	e00b      	b.n	8002fba <HAL_TIM_IC_Start_IT+0x102>
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d104      	bne.n	8002fb2 <HAL_TIM_IC_Start_IT+0xfa>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2202      	movs	r2, #2
 8002fac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fb0:	e003      	b.n	8002fba <HAL_TIM_IC_Start_IT+0x102>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	2b0c      	cmp	r3, #12
 8002fbe:	d841      	bhi.n	8003044 <HAL_TIM_IC_Start_IT+0x18c>
 8002fc0:	a201      	add	r2, pc, #4	@ (adr r2, 8002fc8 <HAL_TIM_IC_Start_IT+0x110>)
 8002fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc6:	bf00      	nop
 8002fc8:	08002ffd 	.word	0x08002ffd
 8002fcc:	08003045 	.word	0x08003045
 8002fd0:	08003045 	.word	0x08003045
 8002fd4:	08003045 	.word	0x08003045
 8002fd8:	0800300f 	.word	0x0800300f
 8002fdc:	08003045 	.word	0x08003045
 8002fe0:	08003045 	.word	0x08003045
 8002fe4:	08003045 	.word	0x08003045
 8002fe8:	08003021 	.word	0x08003021
 8002fec:	08003045 	.word	0x08003045
 8002ff0:	08003045 	.word	0x08003045
 8002ff4:	08003045 	.word	0x08003045
 8002ff8:	08003033 	.word	0x08003033
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0202 	orr.w	r2, r2, #2
 800300a:	60da      	str	r2, [r3, #12]
      break;
 800300c:	e01d      	b.n	800304a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68da      	ldr	r2, [r3, #12]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f042 0204 	orr.w	r2, r2, #4
 800301c:	60da      	str	r2, [r3, #12]
      break;
 800301e:	e014      	b.n	800304a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0208 	orr.w	r2, r2, #8
 800302e:	60da      	str	r2, [r3, #12]
      break;
 8003030:	e00b      	b.n	800304a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68da      	ldr	r2, [r3, #12]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f042 0210 	orr.w	r2, r2, #16
 8003040:	60da      	str	r2, [r3, #12]
      break;
 8003042:	e002      	b.n	800304a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	73fb      	strb	r3, [r7, #15]
      break;
 8003048:	bf00      	nop
  }

  if (status == HAL_OK)
 800304a:	7bfb      	ldrb	r3, [r7, #15]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d13e      	bne.n	80030ce <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2201      	movs	r2, #1
 8003056:	6839      	ldr	r1, [r7, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f000 ff99 	bl	8003f90 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a1d      	ldr	r2, [pc, #116]	@ (80030d8 <HAL_TIM_IC_Start_IT+0x220>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d018      	beq.n	800309a <HAL_TIM_IC_Start_IT+0x1e2>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003070:	d013      	beq.n	800309a <HAL_TIM_IC_Start_IT+0x1e2>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a19      	ldr	r2, [pc, #100]	@ (80030dc <HAL_TIM_IC_Start_IT+0x224>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d00e      	beq.n	800309a <HAL_TIM_IC_Start_IT+0x1e2>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a17      	ldr	r2, [pc, #92]	@ (80030e0 <HAL_TIM_IC_Start_IT+0x228>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d009      	beq.n	800309a <HAL_TIM_IC_Start_IT+0x1e2>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a16      	ldr	r2, [pc, #88]	@ (80030e4 <HAL_TIM_IC_Start_IT+0x22c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d004      	beq.n	800309a <HAL_TIM_IC_Start_IT+0x1e2>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a14      	ldr	r2, [pc, #80]	@ (80030e8 <HAL_TIM_IC_Start_IT+0x230>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d111      	bne.n	80030be <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2b06      	cmp	r3, #6
 80030aa:	d010      	beq.n	80030ce <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0201 	orr.w	r2, r2, #1
 80030ba:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030bc:	e007      	b.n	80030ce <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f042 0201 	orr.w	r2, r2, #1
 80030cc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80030ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40010000 	.word	0x40010000
 80030dc:	40000400 	.word	0x40000400
 80030e0:	40000800 	.word	0x40000800
 80030e4:	40000c00 	.word	0x40000c00
 80030e8:	40014000 	.word	0x40014000

080030ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d020      	beq.n	8003150 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d01b      	beq.n	8003150 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f06f 0202 	mvn.w	r2, #2
 8003120:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7fd fe30 	bl	8000d9c <HAL_TIM_IC_CaptureCallback>
 800313c:	e005      	b.n	800314a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 fb38 	bl	80037b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 fb3f 	bl	80037c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	f003 0304 	and.w	r3, r3, #4
 8003156:	2b00      	cmp	r3, #0
 8003158:	d020      	beq.n	800319c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b00      	cmp	r3, #0
 8003162:	d01b      	beq.n	800319c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f06f 0204 	mvn.w	r2, #4
 800316c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2202      	movs	r2, #2
 8003172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7fd fe0a 	bl	8000d9c <HAL_TIM_IC_CaptureCallback>
 8003188:	e005      	b.n	8003196 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 fb12 	bl	80037b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 fb19 	bl	80037c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	f003 0308 	and.w	r3, r3, #8
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d020      	beq.n	80031e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f003 0308 	and.w	r3, r3, #8
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d01b      	beq.n	80031e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f06f 0208 	mvn.w	r2, #8
 80031b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2204      	movs	r2, #4
 80031be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7fd fde4 	bl	8000d9c <HAL_TIM_IC_CaptureCallback>
 80031d4:	e005      	b.n	80031e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 faec 	bl	80037b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 faf3 	bl	80037c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	f003 0310 	and.w	r3, r3, #16
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d020      	beq.n	8003234 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f003 0310 	and.w	r3, r3, #16
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d01b      	beq.n	8003234 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f06f 0210 	mvn.w	r2, #16
 8003204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2208      	movs	r2, #8
 800320a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7fd fdbe 	bl	8000d9c <HAL_TIM_IC_CaptureCallback>
 8003220:	e005      	b.n	800322e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 fac6 	bl	80037b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 facd 	bl	80037c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00c      	beq.n	8003258 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b00      	cmp	r3, #0
 8003246:	d007      	beq.n	8003258 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f06f 0201 	mvn.w	r2, #1
 8003250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 faa4 	bl	80037a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00c      	beq.n	800327c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003268:	2b00      	cmp	r3, #0
 800326a:	d007      	beq.n	800327c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 ff28 	bl	80040cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00c      	beq.n	80032a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800328c:	2b00      	cmp	r3, #0
 800328e:	d007      	beq.n	80032a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 fa9e 	bl	80037dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	f003 0320 	and.w	r3, r3, #32
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00c      	beq.n	80032c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f003 0320 	and.w	r3, r3, #32
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d007      	beq.n	80032c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f06f 0220 	mvn.w	r2, #32
 80032bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 fefa 	bl	80040b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032c4:	bf00      	nop
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032d8:	2300      	movs	r3, #0
 80032da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d101      	bne.n	80032ea <HAL_TIM_IC_ConfigChannel+0x1e>
 80032e6:	2302      	movs	r3, #2
 80032e8:	e088      	b.n	80033fc <HAL_TIM_IC_ConfigChannel+0x130>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d11b      	bne.n	8003330 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003308:	f000 fc8a 	bl	8003c20 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699a      	ldr	r2, [r3, #24]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 020c 	bic.w	r2, r2, #12
 800331a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6999      	ldr	r1, [r3, #24]
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	689a      	ldr	r2, [r3, #8]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	619a      	str	r2, [r3, #24]
 800332e:	e060      	b.n	80033f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b04      	cmp	r3, #4
 8003334:	d11c      	bne.n	8003370 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003346:	f000 fd02 	bl	8003d4e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	699a      	ldr	r2, [r3, #24]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003358:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6999      	ldr	r1, [r3, #24]
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	021a      	lsls	r2, r3, #8
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	619a      	str	r2, [r3, #24]
 800336e:	e040      	b.n	80033f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b08      	cmp	r3, #8
 8003374:	d11b      	bne.n	80033ae <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003386:	f000 fd4f 	bl	8003e28 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	69da      	ldr	r2, [r3, #28]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 020c 	bic.w	r2, r2, #12
 8003398:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	69d9      	ldr	r1, [r3, #28]
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	61da      	str	r2, [r3, #28]
 80033ac:	e021      	b.n	80033f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2b0c      	cmp	r3, #12
 80033b2:	d11c      	bne.n	80033ee <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80033c4:	f000 fd6c 	bl	8003ea0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	69da      	ldr	r2, [r3, #28]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80033d6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	69d9      	ldr	r1, [r3, #28]
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	021a      	lsls	r2, r3, #8
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	61da      	str	r2, [r3, #28]
 80033ec:	e001      	b.n	80033f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80033fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003410:	2300      	movs	r3, #0
 8003412:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800341a:	2b01      	cmp	r3, #1
 800341c:	d101      	bne.n	8003422 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800341e:	2302      	movs	r3, #2
 8003420:	e0ae      	b.n	8003580 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b0c      	cmp	r3, #12
 800342e:	f200 809f 	bhi.w	8003570 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003432:	a201      	add	r2, pc, #4	@ (adr r2, 8003438 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003438:	0800346d 	.word	0x0800346d
 800343c:	08003571 	.word	0x08003571
 8003440:	08003571 	.word	0x08003571
 8003444:	08003571 	.word	0x08003571
 8003448:	080034ad 	.word	0x080034ad
 800344c:	08003571 	.word	0x08003571
 8003450:	08003571 	.word	0x08003571
 8003454:	08003571 	.word	0x08003571
 8003458:	080034ef 	.word	0x080034ef
 800345c:	08003571 	.word	0x08003571
 8003460:	08003571 	.word	0x08003571
 8003464:	08003571 	.word	0x08003571
 8003468:	0800352f 	.word	0x0800352f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68b9      	ldr	r1, [r7, #8]
 8003472:	4618      	mov	r0, r3
 8003474:	f000 fa48 	bl	8003908 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	699a      	ldr	r2, [r3, #24]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0208 	orr.w	r2, r2, #8
 8003486:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699a      	ldr	r2, [r3, #24]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0204 	bic.w	r2, r2, #4
 8003496:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6999      	ldr	r1, [r3, #24]
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	691a      	ldr	r2, [r3, #16]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	619a      	str	r2, [r3, #24]
      break;
 80034aa:	e064      	b.n	8003576 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68b9      	ldr	r1, [r7, #8]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 fa8e 	bl	80039d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699a      	ldr	r2, [r3, #24]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	699a      	ldr	r2, [r3, #24]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6999      	ldr	r1, [r3, #24]
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	021a      	lsls	r2, r3, #8
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	619a      	str	r2, [r3, #24]
      break;
 80034ec:	e043      	b.n	8003576 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68b9      	ldr	r1, [r7, #8]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 fad9 	bl	8003aac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	69da      	ldr	r2, [r3, #28]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f042 0208 	orr.w	r2, r2, #8
 8003508:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	69da      	ldr	r2, [r3, #28]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0204 	bic.w	r2, r2, #4
 8003518:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	69d9      	ldr	r1, [r3, #28]
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	691a      	ldr	r2, [r3, #16]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	430a      	orrs	r2, r1
 800352a:	61da      	str	r2, [r3, #28]
      break;
 800352c:	e023      	b.n	8003576 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68b9      	ldr	r1, [r7, #8]
 8003534:	4618      	mov	r0, r3
 8003536:	f000 fb23 	bl	8003b80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	69da      	ldr	r2, [r3, #28]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003548:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	69da      	ldr	r2, [r3, #28]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003558:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	69d9      	ldr	r1, [r3, #28]
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	021a      	lsls	r2, r3, #8
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	61da      	str	r2, [r3, #28]
      break;
 800356e:	e002      	b.n	8003576 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	75fb      	strb	r3, [r7, #23]
      break;
 8003574:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800357e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3718      	adds	r7, #24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003592:	2300      	movs	r3, #0
 8003594:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800359c:	2b01      	cmp	r3, #1
 800359e:	d101      	bne.n	80035a4 <HAL_TIM_ConfigClockSource+0x1c>
 80035a0:	2302      	movs	r3, #2
 80035a2:	e0b4      	b.n	800370e <HAL_TIM_ConfigClockSource+0x186>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80035c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80035ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035dc:	d03e      	beq.n	800365c <HAL_TIM_ConfigClockSource+0xd4>
 80035de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035e2:	f200 8087 	bhi.w	80036f4 <HAL_TIM_ConfigClockSource+0x16c>
 80035e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035ea:	f000 8086 	beq.w	80036fa <HAL_TIM_ConfigClockSource+0x172>
 80035ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035f2:	d87f      	bhi.n	80036f4 <HAL_TIM_ConfigClockSource+0x16c>
 80035f4:	2b70      	cmp	r3, #112	@ 0x70
 80035f6:	d01a      	beq.n	800362e <HAL_TIM_ConfigClockSource+0xa6>
 80035f8:	2b70      	cmp	r3, #112	@ 0x70
 80035fa:	d87b      	bhi.n	80036f4 <HAL_TIM_ConfigClockSource+0x16c>
 80035fc:	2b60      	cmp	r3, #96	@ 0x60
 80035fe:	d050      	beq.n	80036a2 <HAL_TIM_ConfigClockSource+0x11a>
 8003600:	2b60      	cmp	r3, #96	@ 0x60
 8003602:	d877      	bhi.n	80036f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003604:	2b50      	cmp	r3, #80	@ 0x50
 8003606:	d03c      	beq.n	8003682 <HAL_TIM_ConfigClockSource+0xfa>
 8003608:	2b50      	cmp	r3, #80	@ 0x50
 800360a:	d873      	bhi.n	80036f4 <HAL_TIM_ConfigClockSource+0x16c>
 800360c:	2b40      	cmp	r3, #64	@ 0x40
 800360e:	d058      	beq.n	80036c2 <HAL_TIM_ConfigClockSource+0x13a>
 8003610:	2b40      	cmp	r3, #64	@ 0x40
 8003612:	d86f      	bhi.n	80036f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003614:	2b30      	cmp	r3, #48	@ 0x30
 8003616:	d064      	beq.n	80036e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003618:	2b30      	cmp	r3, #48	@ 0x30
 800361a:	d86b      	bhi.n	80036f4 <HAL_TIM_ConfigClockSource+0x16c>
 800361c:	2b20      	cmp	r3, #32
 800361e:	d060      	beq.n	80036e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003620:	2b20      	cmp	r3, #32
 8003622:	d867      	bhi.n	80036f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003624:	2b00      	cmp	r3, #0
 8003626:	d05c      	beq.n	80036e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003628:	2b10      	cmp	r3, #16
 800362a:	d05a      	beq.n	80036e2 <HAL_TIM_ConfigClockSource+0x15a>
 800362c:	e062      	b.n	80036f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800363e:	f000 fc87 	bl	8003f50 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003650:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	609a      	str	r2, [r3, #8]
      break;
 800365a:	e04f      	b.n	80036fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800366c:	f000 fc70 	bl	8003f50 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689a      	ldr	r2, [r3, #8]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800367e:	609a      	str	r2, [r3, #8]
      break;
 8003680:	e03c      	b.n	80036fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800368e:	461a      	mov	r2, r3
 8003690:	f000 fb2e 	bl	8003cf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2150      	movs	r1, #80	@ 0x50
 800369a:	4618      	mov	r0, r3
 800369c:	f000 fc3d 	bl	8003f1a <TIM_ITRx_SetConfig>
      break;
 80036a0:	e02c      	b.n	80036fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036ae:	461a      	mov	r2, r3
 80036b0:	f000 fb8a 	bl	8003dc8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2160      	movs	r1, #96	@ 0x60
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 fc2d 	bl	8003f1a <TIM_ITRx_SetConfig>
      break;
 80036c0:	e01c      	b.n	80036fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036ce:	461a      	mov	r2, r3
 80036d0:	f000 fb0e 	bl	8003cf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2140      	movs	r1, #64	@ 0x40
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 fc1d 	bl	8003f1a <TIM_ITRx_SetConfig>
      break;
 80036e0:	e00c      	b.n	80036fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4619      	mov	r1, r3
 80036ec:	4610      	mov	r0, r2
 80036ee:	f000 fc14 	bl	8003f1a <TIM_ITRx_SetConfig>
      break;
 80036f2:	e003      	b.n	80036fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	73fb      	strb	r3, [r7, #15]
      break;
 80036f8:	e000      	b.n	80036fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80036fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800370c:	7bfb      	ldrb	r3, [r7, #15]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
	...

08003718 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003722:	2300      	movs	r3, #0
 8003724:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	2b0c      	cmp	r3, #12
 800372a:	d831      	bhi.n	8003790 <HAL_TIM_ReadCapturedValue+0x78>
 800372c:	a201      	add	r2, pc, #4	@ (adr r2, 8003734 <HAL_TIM_ReadCapturedValue+0x1c>)
 800372e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003732:	bf00      	nop
 8003734:	08003769 	.word	0x08003769
 8003738:	08003791 	.word	0x08003791
 800373c:	08003791 	.word	0x08003791
 8003740:	08003791 	.word	0x08003791
 8003744:	08003773 	.word	0x08003773
 8003748:	08003791 	.word	0x08003791
 800374c:	08003791 	.word	0x08003791
 8003750:	08003791 	.word	0x08003791
 8003754:	0800377d 	.word	0x0800377d
 8003758:	08003791 	.word	0x08003791
 800375c:	08003791 	.word	0x08003791
 8003760:	08003791 	.word	0x08003791
 8003764:	08003787 	.word	0x08003787
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800376e:	60fb      	str	r3, [r7, #12]

      break;
 8003770:	e00f      	b.n	8003792 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003778:	60fb      	str	r3, [r7, #12]

      break;
 800377a:	e00a      	b.n	8003792 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003782:	60fb      	str	r3, [r7, #12]

      break;
 8003784:	e005      	b.n	8003792 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378c:	60fb      	str	r3, [r7, #12]

      break;
 800378e:	e000      	b.n	8003792 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003790:	bf00      	nop
  }

  return tmpreg;
 8003792:	68fb      	ldr	r3, [r7, #12]
}
 8003794:	4618      	mov	r0, r3
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a3a      	ldr	r2, [pc, #232]	@ (80038ec <TIM_Base_SetConfig+0xfc>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d00f      	beq.n	8003828 <TIM_Base_SetConfig+0x38>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800380e:	d00b      	beq.n	8003828 <TIM_Base_SetConfig+0x38>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a37      	ldr	r2, [pc, #220]	@ (80038f0 <TIM_Base_SetConfig+0x100>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d007      	beq.n	8003828 <TIM_Base_SetConfig+0x38>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a36      	ldr	r2, [pc, #216]	@ (80038f4 <TIM_Base_SetConfig+0x104>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d003      	beq.n	8003828 <TIM_Base_SetConfig+0x38>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a35      	ldr	r2, [pc, #212]	@ (80038f8 <TIM_Base_SetConfig+0x108>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d108      	bne.n	800383a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800382e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	4313      	orrs	r3, r2
 8003838:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a2b      	ldr	r2, [pc, #172]	@ (80038ec <TIM_Base_SetConfig+0xfc>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d01b      	beq.n	800387a <TIM_Base_SetConfig+0x8a>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003848:	d017      	beq.n	800387a <TIM_Base_SetConfig+0x8a>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a28      	ldr	r2, [pc, #160]	@ (80038f0 <TIM_Base_SetConfig+0x100>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d013      	beq.n	800387a <TIM_Base_SetConfig+0x8a>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a27      	ldr	r2, [pc, #156]	@ (80038f4 <TIM_Base_SetConfig+0x104>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d00f      	beq.n	800387a <TIM_Base_SetConfig+0x8a>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a26      	ldr	r2, [pc, #152]	@ (80038f8 <TIM_Base_SetConfig+0x108>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d00b      	beq.n	800387a <TIM_Base_SetConfig+0x8a>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a25      	ldr	r2, [pc, #148]	@ (80038fc <TIM_Base_SetConfig+0x10c>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d007      	beq.n	800387a <TIM_Base_SetConfig+0x8a>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a24      	ldr	r2, [pc, #144]	@ (8003900 <TIM_Base_SetConfig+0x110>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d003      	beq.n	800387a <TIM_Base_SetConfig+0x8a>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a23      	ldr	r2, [pc, #140]	@ (8003904 <TIM_Base_SetConfig+0x114>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d108      	bne.n	800388c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003880:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	4313      	orrs	r3, r2
 800388a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	4313      	orrs	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a0e      	ldr	r2, [pc, #56]	@ (80038ec <TIM_Base_SetConfig+0xfc>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d103      	bne.n	80038c0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	691a      	ldr	r2, [r3, #16]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d105      	bne.n	80038de <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	f023 0201 	bic.w	r2, r3, #1
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	611a      	str	r2, [r3, #16]
  }
}
 80038de:	bf00      	nop
 80038e0:	3714      	adds	r7, #20
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	40010000 	.word	0x40010000
 80038f0:	40000400 	.word	0x40000400
 80038f4:	40000800 	.word	0x40000800
 80038f8:	40000c00 	.word	0x40000c00
 80038fc:	40014000 	.word	0x40014000
 8003900:	40014400 	.word	0x40014400
 8003904:	40014800 	.word	0x40014800

08003908 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003908:	b480      	push	{r7}
 800390a:	b087      	sub	sp, #28
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	f023 0201 	bic.w	r2, r3, #1
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f023 0303 	bic.w	r3, r3, #3
 800393e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	4313      	orrs	r3, r2
 8003948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f023 0302 	bic.w	r3, r3, #2
 8003950:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	4313      	orrs	r3, r2
 800395a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a1c      	ldr	r2, [pc, #112]	@ (80039d0 <TIM_OC1_SetConfig+0xc8>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d10c      	bne.n	800397e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	f023 0308 	bic.w	r3, r3, #8
 800396a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	4313      	orrs	r3, r2
 8003974:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f023 0304 	bic.w	r3, r3, #4
 800397c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a13      	ldr	r2, [pc, #76]	@ (80039d0 <TIM_OC1_SetConfig+0xc8>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d111      	bne.n	80039aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800398c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003994:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	4313      	orrs	r3, r2
 800399e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	621a      	str	r2, [r3, #32]
}
 80039c4:	bf00      	nop
 80039c6:	371c      	adds	r7, #28
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr
 80039d0:	40010000 	.word	0x40010000

080039d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b087      	sub	sp, #28
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	f023 0210 	bic.w	r2, r3, #16
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	021b      	lsls	r3, r3, #8
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f023 0320 	bic.w	r3, r3, #32
 8003a1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	011b      	lsls	r3, r3, #4
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a1e      	ldr	r2, [pc, #120]	@ (8003aa8 <TIM_OC2_SetConfig+0xd4>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d10d      	bne.n	8003a50 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	011b      	lsls	r3, r3, #4
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a15      	ldr	r2, [pc, #84]	@ (8003aa8 <TIM_OC2_SetConfig+0xd4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d113      	bne.n	8003a80 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	621a      	str	r2, [r3, #32]
}
 8003a9a:	bf00      	nop
 8003a9c:	371c      	adds	r7, #28
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	40010000 	.word	0x40010000

08003aac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b087      	sub	sp, #28
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f023 0303 	bic.w	r3, r3, #3
 8003ae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003af4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	021b      	lsls	r3, r3, #8
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a1d      	ldr	r2, [pc, #116]	@ (8003b7c <TIM_OC3_SetConfig+0xd0>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d10d      	bne.n	8003b26 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	021b      	lsls	r3, r3, #8
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a14      	ldr	r2, [pc, #80]	@ (8003b7c <TIM_OC3_SetConfig+0xd0>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d113      	bne.n	8003b56 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	011b      	lsls	r3, r3, #4
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	621a      	str	r2, [r3, #32]
}
 8003b70:	bf00      	nop
 8003b72:	371c      	adds	r7, #28
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	40010000 	.word	0x40010000

08003b80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b087      	sub	sp, #28
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	021b      	lsls	r3, r3, #8
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003bca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	031b      	lsls	r3, r3, #12
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a10      	ldr	r2, [pc, #64]	@ (8003c1c <TIM_OC4_SetConfig+0x9c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d109      	bne.n	8003bf4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003be6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	019b      	lsls	r3, r3, #6
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	621a      	str	r2, [r3, #32]
}
 8003c0e:	bf00      	nop
 8003c10:	371c      	adds	r7, #28
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	40010000 	.word	0x40010000

08003c20 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b087      	sub	sp, #28
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
 8003c2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	f023 0201 	bic.w	r2, r3, #1
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	4a24      	ldr	r2, [pc, #144]	@ (8003cdc <TIM_TI1_SetConfig+0xbc>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d013      	beq.n	8003c76 <TIM_TI1_SetConfig+0x56>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c54:	d00f      	beq.n	8003c76 <TIM_TI1_SetConfig+0x56>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	4a21      	ldr	r2, [pc, #132]	@ (8003ce0 <TIM_TI1_SetConfig+0xc0>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d00b      	beq.n	8003c76 <TIM_TI1_SetConfig+0x56>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	4a20      	ldr	r2, [pc, #128]	@ (8003ce4 <TIM_TI1_SetConfig+0xc4>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d007      	beq.n	8003c76 <TIM_TI1_SetConfig+0x56>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	4a1f      	ldr	r2, [pc, #124]	@ (8003ce8 <TIM_TI1_SetConfig+0xc8>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d003      	beq.n	8003c76 <TIM_TI1_SetConfig+0x56>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	4a1e      	ldr	r2, [pc, #120]	@ (8003cec <TIM_TI1_SetConfig+0xcc>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d101      	bne.n	8003c7a <TIM_TI1_SetConfig+0x5a>
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <TIM_TI1_SetConfig+0x5c>
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d008      	beq.n	8003c92 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	f023 0303 	bic.w	r3, r3, #3
 8003c86:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	e003      	b.n	8003c9a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f043 0301 	orr.w	r3, r3, #1
 8003c98:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ca0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	011b      	lsls	r3, r3, #4
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f023 030a 	bic.w	r3, r3, #10
 8003cb4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	f003 030a 	and.w	r3, r3, #10
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	621a      	str	r2, [r3, #32]
}
 8003cce:	bf00      	nop
 8003cd0:	371c      	adds	r7, #28
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	40010000 	.word	0x40010000
 8003ce0:	40000400 	.word	0x40000400
 8003ce4:	40000800 	.word	0x40000800
 8003ce8:	40000c00 	.word	0x40000c00
 8003cec:	40014000 	.word	0x40014000

08003cf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b087      	sub	sp, #28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	f023 0201 	bic.w	r2, r3, #1
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	011b      	lsls	r3, r3, #4
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	f023 030a 	bic.w	r3, r3, #10
 8003d2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	621a      	str	r2, [r3, #32]
}
 8003d42:	bf00      	nop
 8003d44:	371c      	adds	r7, #28
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b087      	sub	sp, #28
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	60f8      	str	r0, [r7, #12]
 8003d56:	60b9      	str	r1, [r7, #8]
 8003d58:	607a      	str	r2, [r7, #4]
 8003d5a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	f023 0210 	bic.w	r2, r3, #16
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	021b      	lsls	r3, r3, #8
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	031b      	lsls	r3, r3, #12
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003da0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	011b      	lsls	r3, r3, #4
 8003da6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	621a      	str	r2, [r3, #32]
}
 8003dbc:	bf00      	nop
 8003dbe:	371c      	adds	r7, #28
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b087      	sub	sp, #28
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	f023 0210 	bic.w	r2, r3, #16
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003df2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	031b      	lsls	r3, r3, #12
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003e04:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	011b      	lsls	r3, r3, #4
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	621a      	str	r2, [r3, #32]
}
 8003e1c:	bf00      	nop
 8003e1e:	371c      	adds	r7, #28
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
 8003e34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	69db      	ldr	r3, [r3, #28]
 8003e4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	f023 0303 	bic.w	r3, r3, #3
 8003e54:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e64:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	011b      	lsls	r3, r3, #4
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003e78:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	021b      	lsls	r3, r3, #8
 8003e7e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	621a      	str	r2, [r3, #32]
}
 8003e94:	bf00      	nop
 8003e96:	371c      	adds	r7, #28
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
 8003eac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	69db      	ldr	r3, [r3, #28]
 8003ec4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ecc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	021b      	lsls	r3, r3, #8
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ede:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	031b      	lsls	r3, r3, #12
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003ef2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	031b      	lsls	r3, r3, #12
 8003ef8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	621a      	str	r2, [r3, #32]
}
 8003f0e:	bf00      	nop
 8003f10:	371c      	adds	r7, #28
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b085      	sub	sp, #20
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
 8003f22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	f043 0307 	orr.w	r3, r3, #7
 8003f3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	609a      	str	r2, [r3, #8]
}
 8003f44:	bf00      	nop
 8003f46:	3714      	adds	r7, #20
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b087      	sub	sp, #28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
 8003f5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	021a      	lsls	r2, r3, #8
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	431a      	orrs	r2, r3
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	609a      	str	r2, [r3, #8]
}
 8003f84:	bf00      	nop
 8003f86:	371c      	adds	r7, #28
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b087      	sub	sp, #28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f003 031f 	and.w	r3, r3, #31
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6a1a      	ldr	r2, [r3, #32]
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	401a      	ands	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6a1a      	ldr	r2, [r3, #32]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	f003 031f 	and.w	r3, r3, #31
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	621a      	str	r2, [r3, #32]
}
 8003fce:	bf00      	nop
 8003fd0:	371c      	adds	r7, #28
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
	...

08003fdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d101      	bne.n	8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	e050      	b.n	8004096 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2202      	movs	r2, #2
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800401a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	4313      	orrs	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a1c      	ldr	r2, [pc, #112]	@ (80040a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d018      	beq.n	800406a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004040:	d013      	beq.n	800406a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a18      	ldr	r2, [pc, #96]	@ (80040a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d00e      	beq.n	800406a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a16      	ldr	r2, [pc, #88]	@ (80040ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d009      	beq.n	800406a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a15      	ldr	r2, [pc, #84]	@ (80040b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d004      	beq.n	800406a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a13      	ldr	r2, [pc, #76]	@ (80040b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d10c      	bne.n	8004084 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004070:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	68ba      	ldr	r2, [r7, #8]
 8004078:	4313      	orrs	r3, r2
 800407a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	40010000 	.word	0x40010000
 80040a8:	40000400 	.word	0x40000400
 80040ac:	40000800 	.word	0x40000800
 80040b0:	40000c00 	.word	0x40000c00
 80040b4:	40014000 	.word	0x40014000

080040b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e042      	b.n	8004178 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d106      	bne.n	800410c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7fd faf2 	bl	80016f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2224      	movs	r2, #36	@ 0x24
 8004110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004122:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 fd69 	bl	8004bfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	691a      	ldr	r2, [r3, #16]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004138:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	695a      	ldr	r2, [r3, #20]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004148:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68da      	ldr	r2, [r3, #12]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004158:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2220      	movs	r2, #32
 8004164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2220      	movs	r2, #32
 800416c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b08a      	sub	sp, #40	@ 0x28
 8004184:	af02      	add	r7, sp, #8
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	603b      	str	r3, [r7, #0]
 800418c:	4613      	mov	r3, r2
 800418e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004190:	2300      	movs	r3, #0
 8004192:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b20      	cmp	r3, #32
 800419e:	d175      	bne.n	800428c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <HAL_UART_Transmit+0x2c>
 80041a6:	88fb      	ldrh	r3, [r7, #6]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e06e      	b.n	800428e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2221      	movs	r2, #33	@ 0x21
 80041ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041be:	f7fd fc81 	bl	8001ac4 <HAL_GetTick>
 80041c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	88fa      	ldrh	r2, [r7, #6]
 80041c8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	88fa      	ldrh	r2, [r7, #6]
 80041ce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041d8:	d108      	bne.n	80041ec <HAL_UART_Transmit+0x6c>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d104      	bne.n	80041ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80041e2:	2300      	movs	r3, #0
 80041e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	61bb      	str	r3, [r7, #24]
 80041ea:	e003      	b.n	80041f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041f0:	2300      	movs	r3, #0
 80041f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80041f4:	e02e      	b.n	8004254 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	2200      	movs	r2, #0
 80041fe:	2180      	movs	r1, #128	@ 0x80
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f000 fb05 	bl	8004810 <UART_WaitOnFlagUntilTimeout>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d005      	beq.n	8004218 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2220      	movs	r2, #32
 8004210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e03a      	b.n	800428e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10b      	bne.n	8004236 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	881b      	ldrh	r3, [r3, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800422c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	3302      	adds	r3, #2
 8004232:	61bb      	str	r3, [r7, #24]
 8004234:	e007      	b.n	8004246 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	781a      	ldrb	r2, [r3, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	3301      	adds	r3, #1
 8004244:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800424a:	b29b      	uxth	r3, r3
 800424c:	3b01      	subs	r3, #1
 800424e:	b29a      	uxth	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004258:	b29b      	uxth	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1cb      	bne.n	80041f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2200      	movs	r2, #0
 8004266:	2140      	movs	r1, #64	@ 0x40
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 fad1 	bl	8004810 <UART_WaitOnFlagUntilTimeout>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d005      	beq.n	8004280 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2220      	movs	r2, #32
 8004278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e006      	b.n	800428e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2220      	movs	r2, #32
 8004284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004288:	2300      	movs	r3, #0
 800428a:	e000      	b.n	800428e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800428c:	2302      	movs	r3, #2
  }
}
 800428e:	4618      	mov	r0, r3
 8004290:	3720      	adds	r7, #32
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
	...

08004298 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b0ba      	sub	sp, #232	@ 0xe8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80042be:	2300      	movs	r3, #0
 80042c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80042c4:	2300      	movs	r3, #0
 80042c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80042ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042ce:	f003 030f 	and.w	r3, r3, #15
 80042d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80042d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10f      	bne.n	80042fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042e2:	f003 0320 	and.w	r3, r3, #32
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d009      	beq.n	80042fe <HAL_UART_IRQHandler+0x66>
 80042ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042ee:	f003 0320 	and.w	r3, r3, #32
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 fbc2 	bl	8004a80 <UART_Receive_IT>
      return;
 80042fc:	e25b      	b.n	80047b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80042fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004302:	2b00      	cmp	r3, #0
 8004304:	f000 80de 	beq.w	80044c4 <HAL_UART_IRQHandler+0x22c>
 8004308:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	2b00      	cmp	r3, #0
 8004312:	d106      	bne.n	8004322 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004318:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 80d1 	beq.w	80044c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00b      	beq.n	8004346 <HAL_UART_IRQHandler+0xae>
 800432e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004332:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004336:	2b00      	cmp	r3, #0
 8004338:	d005      	beq.n	8004346 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800433e:	f043 0201 	orr.w	r2, r3, #1
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800434a:	f003 0304 	and.w	r3, r3, #4
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00b      	beq.n	800436a <HAL_UART_IRQHandler+0xd2>
 8004352:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d005      	beq.n	800436a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004362:	f043 0202 	orr.w	r2, r3, #2
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800436a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00b      	beq.n	800438e <HAL_UART_IRQHandler+0xf6>
 8004376:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d005      	beq.n	800438e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004386:	f043 0204 	orr.w	r2, r3, #4
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800438e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004392:	f003 0308 	and.w	r3, r3, #8
 8004396:	2b00      	cmp	r3, #0
 8004398:	d011      	beq.n	80043be <HAL_UART_IRQHandler+0x126>
 800439a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800439e:	f003 0320 	and.w	r3, r3, #32
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d105      	bne.n	80043b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80043a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d005      	beq.n	80043be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043b6:	f043 0208 	orr.w	r2, r3, #8
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f000 81f2 	beq.w	80047ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043cc:	f003 0320 	and.w	r3, r3, #32
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d008      	beq.n	80043e6 <HAL_UART_IRQHandler+0x14e>
 80043d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043d8:	f003 0320 	and.w	r3, r3, #32
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d002      	beq.n	80043e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 fb4d 	bl	8004a80 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043f0:	2b40      	cmp	r3, #64	@ 0x40
 80043f2:	bf0c      	ite	eq
 80043f4:	2301      	moveq	r3, #1
 80043f6:	2300      	movne	r3, #0
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004402:	f003 0308 	and.w	r3, r3, #8
 8004406:	2b00      	cmp	r3, #0
 8004408:	d103      	bne.n	8004412 <HAL_UART_IRQHandler+0x17a>
 800440a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800440e:	2b00      	cmp	r3, #0
 8004410:	d04f      	beq.n	80044b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 fa55 	bl	80048c2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004422:	2b40      	cmp	r3, #64	@ 0x40
 8004424:	d141      	bne.n	80044aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	3314      	adds	r3, #20
 800442c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004430:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004434:	e853 3f00 	ldrex	r3, [r3]
 8004438:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800443c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004440:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004444:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	3314      	adds	r3, #20
 800444e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004452:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004456:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800445e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004462:	e841 2300 	strex	r3, r2, [r1]
 8004466:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800446a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1d9      	bne.n	8004426 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004476:	2b00      	cmp	r3, #0
 8004478:	d013      	beq.n	80044a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800447e:	4a7e      	ldr	r2, [pc, #504]	@ (8004678 <HAL_UART_IRQHandler+0x3e0>)
 8004480:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004486:	4618      	mov	r0, r3
 8004488:	f7fd fccd 	bl	8001e26 <HAL_DMA_Abort_IT>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d016      	beq.n	80044c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004496:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800449c:	4610      	mov	r0, r2
 800449e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044a0:	e00e      	b.n	80044c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f99e 	bl	80047e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044a8:	e00a      	b.n	80044c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f99a 	bl	80047e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044b0:	e006      	b.n	80044c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 f996 	bl	80047e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80044be:	e175      	b.n	80047ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044c0:	bf00      	nop
    return;
 80044c2:	e173      	b.n	80047ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	f040 814f 	bne.w	800476c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80044ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044d2:	f003 0310 	and.w	r3, r3, #16
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 8148 	beq.w	800476c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80044dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044e0:	f003 0310 	and.w	r3, r3, #16
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 8141 	beq.w	800476c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044ea:	2300      	movs	r3, #0
 80044ec:	60bb      	str	r3, [r7, #8]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	60bb      	str	r3, [r7, #8]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	60bb      	str	r3, [r7, #8]
 80044fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800450a:	2b40      	cmp	r3, #64	@ 0x40
 800450c:	f040 80b6 	bne.w	800467c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800451c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 8145 	beq.w	80047b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800452a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800452e:	429a      	cmp	r2, r3
 8004530:	f080 813e 	bcs.w	80047b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800453a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004546:	f000 8088 	beq.w	800465a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	330c      	adds	r3, #12
 8004550:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004554:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004558:	e853 3f00 	ldrex	r3, [r3]
 800455c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004560:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004564:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004568:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	330c      	adds	r3, #12
 8004572:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004576:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800457a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004582:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004586:	e841 2300 	strex	r3, r2, [r1]
 800458a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800458e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1d9      	bne.n	800454a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	3314      	adds	r3, #20
 800459c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045a0:	e853 3f00 	ldrex	r3, [r3]
 80045a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80045a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045a8:	f023 0301 	bic.w	r3, r3, #1
 80045ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	3314      	adds	r3, #20
 80045b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80045ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80045be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80045c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80045c6:	e841 2300 	strex	r3, r2, [r1]
 80045ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80045cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1e1      	bne.n	8004596 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	3314      	adds	r3, #20
 80045d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045dc:	e853 3f00 	ldrex	r3, [r3]
 80045e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80045e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	3314      	adds	r3, #20
 80045f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80045f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80045f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80045fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80045fe:	e841 2300 	strex	r3, r2, [r1]
 8004602:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004604:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1e3      	bne.n	80045d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2220      	movs	r2, #32
 800460e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	330c      	adds	r3, #12
 800461e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004620:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004622:	e853 3f00 	ldrex	r3, [r3]
 8004626:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004628:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800462a:	f023 0310 	bic.w	r3, r3, #16
 800462e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	330c      	adds	r3, #12
 8004638:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800463c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800463e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004640:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004642:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004644:	e841 2300 	strex	r3, r2, [r1]
 8004648:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800464a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1e3      	bne.n	8004618 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004654:	4618      	mov	r0, r3
 8004656:	f7fd fb76 	bl	8001d46 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2202      	movs	r2, #2
 800465e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004668:	b29b      	uxth	r3, r3
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	b29b      	uxth	r3, r3
 800466e:	4619      	mov	r1, r3
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 f8c1 	bl	80047f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004676:	e09b      	b.n	80047b0 <HAL_UART_IRQHandler+0x518>
 8004678:	08004989 	.word	0x08004989
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004684:	b29b      	uxth	r3, r3
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004690:	b29b      	uxth	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	f000 808e 	beq.w	80047b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004698:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 8089 	beq.w	80047b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	330c      	adds	r3, #12
 80046a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ac:	e853 3f00 	ldrex	r3, [r3]
 80046b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80046b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	330c      	adds	r3, #12
 80046c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80046c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80046c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046ce:	e841 2300 	strex	r3, r2, [r1]
 80046d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1e3      	bne.n	80046a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	3314      	adds	r3, #20
 80046e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e4:	e853 3f00 	ldrex	r3, [r3]
 80046e8:	623b      	str	r3, [r7, #32]
   return(result);
 80046ea:	6a3b      	ldr	r3, [r7, #32]
 80046ec:	f023 0301 	bic.w	r3, r3, #1
 80046f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	3314      	adds	r3, #20
 80046fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80046fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8004700:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004702:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004704:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004706:	e841 2300 	strex	r3, r2, [r1]
 800470a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800470c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1e3      	bne.n	80046da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2220      	movs	r2, #32
 8004716:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	330c      	adds	r3, #12
 8004726:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	e853 3f00 	ldrex	r3, [r3]
 800472e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f023 0310 	bic.w	r3, r3, #16
 8004736:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	330c      	adds	r3, #12
 8004740:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004744:	61fa      	str	r2, [r7, #28]
 8004746:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004748:	69b9      	ldr	r1, [r7, #24]
 800474a:	69fa      	ldr	r2, [r7, #28]
 800474c:	e841 2300 	strex	r3, r2, [r1]
 8004750:	617b      	str	r3, [r7, #20]
   return(result);
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1e3      	bne.n	8004720 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2202      	movs	r2, #2
 800475c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800475e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004762:	4619      	mov	r1, r3
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 f847 	bl	80047f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800476a:	e023      	b.n	80047b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800476c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004770:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004774:	2b00      	cmp	r3, #0
 8004776:	d009      	beq.n	800478c <HAL_UART_IRQHandler+0x4f4>
 8004778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800477c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004780:	2b00      	cmp	r3, #0
 8004782:	d003      	beq.n	800478c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 f913 	bl	80049b0 <UART_Transmit_IT>
    return;
 800478a:	e014      	b.n	80047b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800478c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004790:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00e      	beq.n	80047b6 <HAL_UART_IRQHandler+0x51e>
 8004798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800479c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d008      	beq.n	80047b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 f953 	bl	8004a50 <UART_EndTransmit_IT>
    return;
 80047aa:	e004      	b.n	80047b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80047ac:	bf00      	nop
 80047ae:	e002      	b.n	80047b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80047b0:	bf00      	nop
 80047b2:	e000      	b.n	80047b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80047b4:	bf00      	nop
  }
}
 80047b6:	37e8      	adds	r7, #232	@ 0xe8
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	460b      	mov	r3, r1
 8004802:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	603b      	str	r3, [r7, #0]
 800481c:	4613      	mov	r3, r2
 800481e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004820:	e03b      	b.n	800489a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004822:	6a3b      	ldr	r3, [r7, #32]
 8004824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004828:	d037      	beq.n	800489a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800482a:	f7fd f94b 	bl	8001ac4 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	6a3a      	ldr	r2, [r7, #32]
 8004836:	429a      	cmp	r2, r3
 8004838:	d302      	bcc.n	8004840 <UART_WaitOnFlagUntilTimeout+0x30>
 800483a:	6a3b      	ldr	r3, [r7, #32]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e03a      	b.n	80048ba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	f003 0304 	and.w	r3, r3, #4
 800484e:	2b00      	cmp	r3, #0
 8004850:	d023      	beq.n	800489a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	2b80      	cmp	r3, #128	@ 0x80
 8004856:	d020      	beq.n	800489a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	2b40      	cmp	r3, #64	@ 0x40
 800485c:	d01d      	beq.n	800489a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0308 	and.w	r3, r3, #8
 8004868:	2b08      	cmp	r3, #8
 800486a:	d116      	bne.n	800489a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800486c:	2300      	movs	r3, #0
 800486e:	617b      	str	r3, [r7, #20]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	617b      	str	r3, [r7, #20]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	617b      	str	r3, [r7, #20]
 8004880:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f000 f81d 	bl	80048c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2208      	movs	r2, #8
 800488c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e00f      	b.n	80048ba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	4013      	ands	r3, r2
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	bf0c      	ite	eq
 80048aa:	2301      	moveq	r3, #1
 80048ac:	2300      	movne	r3, #0
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	461a      	mov	r2, r3
 80048b2:	79fb      	ldrb	r3, [r7, #7]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d0b4      	beq.n	8004822 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3718      	adds	r7, #24
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b095      	sub	sp, #84	@ 0x54
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	330c      	adds	r3, #12
 80048d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048d4:	e853 3f00 	ldrex	r3, [r3]
 80048d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80048da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	330c      	adds	r3, #12
 80048e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80048ea:	643a      	str	r2, [r7, #64]	@ 0x40
 80048ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80048f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80048f2:	e841 2300 	strex	r3, r2, [r1]
 80048f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80048f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1e5      	bne.n	80048ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	3314      	adds	r3, #20
 8004904:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004906:	6a3b      	ldr	r3, [r7, #32]
 8004908:	e853 3f00 	ldrex	r3, [r3]
 800490c:	61fb      	str	r3, [r7, #28]
   return(result);
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	f023 0301 	bic.w	r3, r3, #1
 8004914:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	3314      	adds	r3, #20
 800491c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800491e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004920:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004922:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004924:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004926:	e841 2300 	strex	r3, r2, [r1]
 800492a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800492c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1e5      	bne.n	80048fe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004936:	2b01      	cmp	r3, #1
 8004938:	d119      	bne.n	800496e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	330c      	adds	r3, #12
 8004940:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	e853 3f00 	ldrex	r3, [r3]
 8004948:	60bb      	str	r3, [r7, #8]
   return(result);
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	f023 0310 	bic.w	r3, r3, #16
 8004950:	647b      	str	r3, [r7, #68]	@ 0x44
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	330c      	adds	r3, #12
 8004958:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800495a:	61ba      	str	r2, [r7, #24]
 800495c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495e:	6979      	ldr	r1, [r7, #20]
 8004960:	69ba      	ldr	r2, [r7, #24]
 8004962:	e841 2300 	strex	r3, r2, [r1]
 8004966:	613b      	str	r3, [r7, #16]
   return(result);
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1e5      	bne.n	800493a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2220      	movs	r2, #32
 8004972:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800497c:	bf00      	nop
 800497e:	3754      	adds	r7, #84	@ 0x54
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004994:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f7ff ff1e 	bl	80047e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049a8:	bf00      	nop
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b21      	cmp	r3, #33	@ 0x21
 80049c2:	d13e      	bne.n	8004a42 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049cc:	d114      	bne.n	80049f8 <UART_Transmit_IT+0x48>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d110      	bne.n	80049f8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	881b      	ldrh	r3, [r3, #0]
 80049e0:	461a      	mov	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049ea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a1b      	ldr	r3, [r3, #32]
 80049f0:	1c9a      	adds	r2, r3, #2
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	621a      	str	r2, [r3, #32]
 80049f6:	e008      	b.n	8004a0a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	1c59      	adds	r1, r3, #1
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	6211      	str	r1, [r2, #32]
 8004a02:	781a      	ldrb	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	3b01      	subs	r3, #1
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	4619      	mov	r1, r3
 8004a18:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10f      	bne.n	8004a3e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68da      	ldr	r2, [r3, #12]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a2c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68da      	ldr	r2, [r3, #12]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a3c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	e000      	b.n	8004a44 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a42:	2302      	movs	r3, #2
  }
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68da      	ldr	r2, [r3, #12]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a66:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7ff fea3 	bl	80047bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3708      	adds	r7, #8
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b08c      	sub	sp, #48	@ 0x30
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2b22      	cmp	r3, #34	@ 0x22
 8004a92:	f040 80ae 	bne.w	8004bf2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a9e:	d117      	bne.n	8004ad0 <UART_Receive_IT+0x50>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d113      	bne.n	8004ad0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac8:	1c9a      	adds	r2, r3, #2
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ace:	e026      	b.n	8004b1e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ae2:	d007      	beq.n	8004af4 <UART_Receive_IT+0x74>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10a      	bne.n	8004b02 <UART_Receive_IT+0x82>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d106      	bne.n	8004b02 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004afe:	701a      	strb	r2, [r3, #0]
 8004b00:	e008      	b.n	8004b14 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b12:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b18:	1c5a      	adds	r2, r3, #1
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	3b01      	subs	r3, #1
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d15d      	bne.n	8004bee <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68da      	ldr	r2, [r3, #12]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 0220 	bic.w	r2, r2, #32
 8004b40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68da      	ldr	r2, [r3, #12]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	695a      	ldr	r2, [r3, #20]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f022 0201 	bic.w	r2, r2, #1
 8004b60:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2220      	movs	r2, #32
 8004b66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d135      	bne.n	8004be4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	330c      	adds	r3, #12
 8004b84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	e853 3f00 	ldrex	r3, [r3]
 8004b8c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f023 0310 	bic.w	r3, r3, #16
 8004b94:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	330c      	adds	r3, #12
 8004b9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b9e:	623a      	str	r2, [r7, #32]
 8004ba0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba2:	69f9      	ldr	r1, [r7, #28]
 8004ba4:	6a3a      	ldr	r2, [r7, #32]
 8004ba6:	e841 2300 	strex	r3, r2, [r1]
 8004baa:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1e5      	bne.n	8004b7e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0310 	and.w	r3, r3, #16
 8004bbc:	2b10      	cmp	r3, #16
 8004bbe:	d10a      	bne.n	8004bd6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	60fb      	str	r3, [r7, #12]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	60fb      	str	r3, [r7, #12]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004bda:	4619      	mov	r1, r3
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f7ff fe0b 	bl	80047f8 <HAL_UARTEx_RxEventCallback>
 8004be2:	e002      	b.n	8004bea <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f7ff fdf3 	bl	80047d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004bea:	2300      	movs	r3, #0
 8004bec:	e002      	b.n	8004bf4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	e000      	b.n	8004bf4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004bf2:	2302      	movs	r3, #2
  }
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3730      	adds	r7, #48	@ 0x30
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c00:	b0c0      	sub	sp, #256	@ 0x100
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c18:	68d9      	ldr	r1, [r3, #12]
 8004c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	ea40 0301 	orr.w	r3, r0, r1
 8004c24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c2a:	689a      	ldr	r2, [r3, #8]
 8004c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	431a      	orrs	r2, r3
 8004c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c40:	69db      	ldr	r3, [r3, #28]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004c54:	f021 010c 	bic.w	r1, r1, #12
 8004c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004c62:	430b      	orrs	r3, r1
 8004c64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c76:	6999      	ldr	r1, [r3, #24]
 8004c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	ea40 0301 	orr.w	r3, r0, r1
 8004c82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	4b8f      	ldr	r3, [pc, #572]	@ (8004ec8 <UART_SetConfig+0x2cc>)
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d005      	beq.n	8004c9c <UART_SetConfig+0xa0>
 8004c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	4b8d      	ldr	r3, [pc, #564]	@ (8004ecc <UART_SetConfig+0x2d0>)
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d104      	bne.n	8004ca6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c9c:	f7fd feec 	bl	8002a78 <HAL_RCC_GetPCLK2Freq>
 8004ca0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004ca4:	e003      	b.n	8004cae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ca6:	f7fd fed3 	bl	8002a50 <HAL_RCC_GetPCLK1Freq>
 8004caa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cb2:	69db      	ldr	r3, [r3, #28]
 8004cb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cb8:	f040 810c 	bne.w	8004ed4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004cbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004cc6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004cca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004cce:	4622      	mov	r2, r4
 8004cd0:	462b      	mov	r3, r5
 8004cd2:	1891      	adds	r1, r2, r2
 8004cd4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004cd6:	415b      	adcs	r3, r3
 8004cd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004cda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004cde:	4621      	mov	r1, r4
 8004ce0:	eb12 0801 	adds.w	r8, r2, r1
 8004ce4:	4629      	mov	r1, r5
 8004ce6:	eb43 0901 	adc.w	r9, r3, r1
 8004cea:	f04f 0200 	mov.w	r2, #0
 8004cee:	f04f 0300 	mov.w	r3, #0
 8004cf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cfe:	4690      	mov	r8, r2
 8004d00:	4699      	mov	r9, r3
 8004d02:	4623      	mov	r3, r4
 8004d04:	eb18 0303 	adds.w	r3, r8, r3
 8004d08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004d0c:	462b      	mov	r3, r5
 8004d0e:	eb49 0303 	adc.w	r3, r9, r3
 8004d12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004d22:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004d26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	18db      	adds	r3, r3, r3
 8004d2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d30:	4613      	mov	r3, r2
 8004d32:	eb42 0303 	adc.w	r3, r2, r3
 8004d36:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004d3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004d40:	f7fb fa9e 	bl	8000280 <__aeabi_uldivmod>
 8004d44:	4602      	mov	r2, r0
 8004d46:	460b      	mov	r3, r1
 8004d48:	4b61      	ldr	r3, [pc, #388]	@ (8004ed0 <UART_SetConfig+0x2d4>)
 8004d4a:	fba3 2302 	umull	r2, r3, r3, r2
 8004d4e:	095b      	lsrs	r3, r3, #5
 8004d50:	011c      	lsls	r4, r3, #4
 8004d52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d56:	2200      	movs	r2, #0
 8004d58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d5c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004d60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004d64:	4642      	mov	r2, r8
 8004d66:	464b      	mov	r3, r9
 8004d68:	1891      	adds	r1, r2, r2
 8004d6a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004d6c:	415b      	adcs	r3, r3
 8004d6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004d74:	4641      	mov	r1, r8
 8004d76:	eb12 0a01 	adds.w	sl, r2, r1
 8004d7a:	4649      	mov	r1, r9
 8004d7c:	eb43 0b01 	adc.w	fp, r3, r1
 8004d80:	f04f 0200 	mov.w	r2, #0
 8004d84:	f04f 0300 	mov.w	r3, #0
 8004d88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d94:	4692      	mov	sl, r2
 8004d96:	469b      	mov	fp, r3
 8004d98:	4643      	mov	r3, r8
 8004d9a:	eb1a 0303 	adds.w	r3, sl, r3
 8004d9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004da2:	464b      	mov	r3, r9
 8004da4:	eb4b 0303 	adc.w	r3, fp, r3
 8004da8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004db8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004dbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	18db      	adds	r3, r3, r3
 8004dc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	eb42 0303 	adc.w	r3, r2, r3
 8004dcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004dd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004dd6:	f7fb fa53 	bl	8000280 <__aeabi_uldivmod>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	460b      	mov	r3, r1
 8004dde:	4611      	mov	r1, r2
 8004de0:	4b3b      	ldr	r3, [pc, #236]	@ (8004ed0 <UART_SetConfig+0x2d4>)
 8004de2:	fba3 2301 	umull	r2, r3, r3, r1
 8004de6:	095b      	lsrs	r3, r3, #5
 8004de8:	2264      	movs	r2, #100	@ 0x64
 8004dea:	fb02 f303 	mul.w	r3, r2, r3
 8004dee:	1acb      	subs	r3, r1, r3
 8004df0:	00db      	lsls	r3, r3, #3
 8004df2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004df6:	4b36      	ldr	r3, [pc, #216]	@ (8004ed0 <UART_SetConfig+0x2d4>)
 8004df8:	fba3 2302 	umull	r2, r3, r3, r2
 8004dfc:	095b      	lsrs	r3, r3, #5
 8004dfe:	005b      	lsls	r3, r3, #1
 8004e00:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004e04:	441c      	add	r4, r3
 8004e06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004e10:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004e14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004e18:	4642      	mov	r2, r8
 8004e1a:	464b      	mov	r3, r9
 8004e1c:	1891      	adds	r1, r2, r2
 8004e1e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004e20:	415b      	adcs	r3, r3
 8004e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004e28:	4641      	mov	r1, r8
 8004e2a:	1851      	adds	r1, r2, r1
 8004e2c:	6339      	str	r1, [r7, #48]	@ 0x30
 8004e2e:	4649      	mov	r1, r9
 8004e30:	414b      	adcs	r3, r1
 8004e32:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e34:	f04f 0200 	mov.w	r2, #0
 8004e38:	f04f 0300 	mov.w	r3, #0
 8004e3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004e40:	4659      	mov	r1, fp
 8004e42:	00cb      	lsls	r3, r1, #3
 8004e44:	4651      	mov	r1, sl
 8004e46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e4a:	4651      	mov	r1, sl
 8004e4c:	00ca      	lsls	r2, r1, #3
 8004e4e:	4610      	mov	r0, r2
 8004e50:	4619      	mov	r1, r3
 8004e52:	4603      	mov	r3, r0
 8004e54:	4642      	mov	r2, r8
 8004e56:	189b      	adds	r3, r3, r2
 8004e58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e5c:	464b      	mov	r3, r9
 8004e5e:	460a      	mov	r2, r1
 8004e60:	eb42 0303 	adc.w	r3, r2, r3
 8004e64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e74:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004e78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	18db      	adds	r3, r3, r3
 8004e80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e82:	4613      	mov	r3, r2
 8004e84:	eb42 0303 	adc.w	r3, r2, r3
 8004e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004e92:	f7fb f9f5 	bl	8000280 <__aeabi_uldivmod>
 8004e96:	4602      	mov	r2, r0
 8004e98:	460b      	mov	r3, r1
 8004e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ed0 <UART_SetConfig+0x2d4>)
 8004e9c:	fba3 1302 	umull	r1, r3, r3, r2
 8004ea0:	095b      	lsrs	r3, r3, #5
 8004ea2:	2164      	movs	r1, #100	@ 0x64
 8004ea4:	fb01 f303 	mul.w	r3, r1, r3
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	3332      	adds	r3, #50	@ 0x32
 8004eae:	4a08      	ldr	r2, [pc, #32]	@ (8004ed0 <UART_SetConfig+0x2d4>)
 8004eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb4:	095b      	lsrs	r3, r3, #5
 8004eb6:	f003 0207 	and.w	r2, r3, #7
 8004eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4422      	add	r2, r4
 8004ec2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ec4:	e106      	b.n	80050d4 <UART_SetConfig+0x4d8>
 8004ec6:	bf00      	nop
 8004ec8:	40011000 	.word	0x40011000
 8004ecc:	40011400 	.word	0x40011400
 8004ed0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ed4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004ede:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004ee2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004ee6:	4642      	mov	r2, r8
 8004ee8:	464b      	mov	r3, r9
 8004eea:	1891      	adds	r1, r2, r2
 8004eec:	6239      	str	r1, [r7, #32]
 8004eee:	415b      	adcs	r3, r3
 8004ef0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ef2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ef6:	4641      	mov	r1, r8
 8004ef8:	1854      	adds	r4, r2, r1
 8004efa:	4649      	mov	r1, r9
 8004efc:	eb43 0501 	adc.w	r5, r3, r1
 8004f00:	f04f 0200 	mov.w	r2, #0
 8004f04:	f04f 0300 	mov.w	r3, #0
 8004f08:	00eb      	lsls	r3, r5, #3
 8004f0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f0e:	00e2      	lsls	r2, r4, #3
 8004f10:	4614      	mov	r4, r2
 8004f12:	461d      	mov	r5, r3
 8004f14:	4643      	mov	r3, r8
 8004f16:	18e3      	adds	r3, r4, r3
 8004f18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f1c:	464b      	mov	r3, r9
 8004f1e:	eb45 0303 	adc.w	r3, r5, r3
 8004f22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f36:	f04f 0200 	mov.w	r2, #0
 8004f3a:	f04f 0300 	mov.w	r3, #0
 8004f3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004f42:	4629      	mov	r1, r5
 8004f44:	008b      	lsls	r3, r1, #2
 8004f46:	4621      	mov	r1, r4
 8004f48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f4c:	4621      	mov	r1, r4
 8004f4e:	008a      	lsls	r2, r1, #2
 8004f50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004f54:	f7fb f994 	bl	8000280 <__aeabi_uldivmod>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	4b60      	ldr	r3, [pc, #384]	@ (80050e0 <UART_SetConfig+0x4e4>)
 8004f5e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f62:	095b      	lsrs	r3, r3, #5
 8004f64:	011c      	lsls	r4, r3, #4
 8004f66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004f70:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004f74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004f78:	4642      	mov	r2, r8
 8004f7a:	464b      	mov	r3, r9
 8004f7c:	1891      	adds	r1, r2, r2
 8004f7e:	61b9      	str	r1, [r7, #24]
 8004f80:	415b      	adcs	r3, r3
 8004f82:	61fb      	str	r3, [r7, #28]
 8004f84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f88:	4641      	mov	r1, r8
 8004f8a:	1851      	adds	r1, r2, r1
 8004f8c:	6139      	str	r1, [r7, #16]
 8004f8e:	4649      	mov	r1, r9
 8004f90:	414b      	adcs	r3, r1
 8004f92:	617b      	str	r3, [r7, #20]
 8004f94:	f04f 0200 	mov.w	r2, #0
 8004f98:	f04f 0300 	mov.w	r3, #0
 8004f9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fa0:	4659      	mov	r1, fp
 8004fa2:	00cb      	lsls	r3, r1, #3
 8004fa4:	4651      	mov	r1, sl
 8004fa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004faa:	4651      	mov	r1, sl
 8004fac:	00ca      	lsls	r2, r1, #3
 8004fae:	4610      	mov	r0, r2
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	4642      	mov	r2, r8
 8004fb6:	189b      	adds	r3, r3, r2
 8004fb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004fbc:	464b      	mov	r3, r9
 8004fbe:	460a      	mov	r2, r1
 8004fc0:	eb42 0303 	adc.w	r3, r2, r3
 8004fc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004fd2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004fd4:	f04f 0200 	mov.w	r2, #0
 8004fd8:	f04f 0300 	mov.w	r3, #0
 8004fdc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004fe0:	4649      	mov	r1, r9
 8004fe2:	008b      	lsls	r3, r1, #2
 8004fe4:	4641      	mov	r1, r8
 8004fe6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fea:	4641      	mov	r1, r8
 8004fec:	008a      	lsls	r2, r1, #2
 8004fee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004ff2:	f7fb f945 	bl	8000280 <__aeabi_uldivmod>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	4611      	mov	r1, r2
 8004ffc:	4b38      	ldr	r3, [pc, #224]	@ (80050e0 <UART_SetConfig+0x4e4>)
 8004ffe:	fba3 2301 	umull	r2, r3, r3, r1
 8005002:	095b      	lsrs	r3, r3, #5
 8005004:	2264      	movs	r2, #100	@ 0x64
 8005006:	fb02 f303 	mul.w	r3, r2, r3
 800500a:	1acb      	subs	r3, r1, r3
 800500c:	011b      	lsls	r3, r3, #4
 800500e:	3332      	adds	r3, #50	@ 0x32
 8005010:	4a33      	ldr	r2, [pc, #204]	@ (80050e0 <UART_SetConfig+0x4e4>)
 8005012:	fba2 2303 	umull	r2, r3, r2, r3
 8005016:	095b      	lsrs	r3, r3, #5
 8005018:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800501c:	441c      	add	r4, r3
 800501e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005022:	2200      	movs	r2, #0
 8005024:	673b      	str	r3, [r7, #112]	@ 0x70
 8005026:	677a      	str	r2, [r7, #116]	@ 0x74
 8005028:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800502c:	4642      	mov	r2, r8
 800502e:	464b      	mov	r3, r9
 8005030:	1891      	adds	r1, r2, r2
 8005032:	60b9      	str	r1, [r7, #8]
 8005034:	415b      	adcs	r3, r3
 8005036:	60fb      	str	r3, [r7, #12]
 8005038:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800503c:	4641      	mov	r1, r8
 800503e:	1851      	adds	r1, r2, r1
 8005040:	6039      	str	r1, [r7, #0]
 8005042:	4649      	mov	r1, r9
 8005044:	414b      	adcs	r3, r1
 8005046:	607b      	str	r3, [r7, #4]
 8005048:	f04f 0200 	mov.w	r2, #0
 800504c:	f04f 0300 	mov.w	r3, #0
 8005050:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005054:	4659      	mov	r1, fp
 8005056:	00cb      	lsls	r3, r1, #3
 8005058:	4651      	mov	r1, sl
 800505a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800505e:	4651      	mov	r1, sl
 8005060:	00ca      	lsls	r2, r1, #3
 8005062:	4610      	mov	r0, r2
 8005064:	4619      	mov	r1, r3
 8005066:	4603      	mov	r3, r0
 8005068:	4642      	mov	r2, r8
 800506a:	189b      	adds	r3, r3, r2
 800506c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800506e:	464b      	mov	r3, r9
 8005070:	460a      	mov	r2, r1
 8005072:	eb42 0303 	adc.w	r3, r2, r3
 8005076:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	663b      	str	r3, [r7, #96]	@ 0x60
 8005082:	667a      	str	r2, [r7, #100]	@ 0x64
 8005084:	f04f 0200 	mov.w	r2, #0
 8005088:	f04f 0300 	mov.w	r3, #0
 800508c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005090:	4649      	mov	r1, r9
 8005092:	008b      	lsls	r3, r1, #2
 8005094:	4641      	mov	r1, r8
 8005096:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800509a:	4641      	mov	r1, r8
 800509c:	008a      	lsls	r2, r1, #2
 800509e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80050a2:	f7fb f8ed 	bl	8000280 <__aeabi_uldivmod>
 80050a6:	4602      	mov	r2, r0
 80050a8:	460b      	mov	r3, r1
 80050aa:	4b0d      	ldr	r3, [pc, #52]	@ (80050e0 <UART_SetConfig+0x4e4>)
 80050ac:	fba3 1302 	umull	r1, r3, r3, r2
 80050b0:	095b      	lsrs	r3, r3, #5
 80050b2:	2164      	movs	r1, #100	@ 0x64
 80050b4:	fb01 f303 	mul.w	r3, r1, r3
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	011b      	lsls	r3, r3, #4
 80050bc:	3332      	adds	r3, #50	@ 0x32
 80050be:	4a08      	ldr	r2, [pc, #32]	@ (80050e0 <UART_SetConfig+0x4e4>)
 80050c0:	fba2 2303 	umull	r2, r3, r2, r3
 80050c4:	095b      	lsrs	r3, r3, #5
 80050c6:	f003 020f 	and.w	r2, r3, #15
 80050ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4422      	add	r2, r4
 80050d2:	609a      	str	r2, [r3, #8]
}
 80050d4:	bf00      	nop
 80050d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80050da:	46bd      	mov	sp, r7
 80050dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050e0:	51eb851f 	.word	0x51eb851f

080050e4 <_ZdlPvj>:
 80050e4:	f000 b811 	b.w	800510a <_ZdlPv>

080050e8 <_Znwj>:
 80050e8:	2801      	cmp	r0, #1
 80050ea:	bf38      	it	cc
 80050ec:	2001      	movcc	r0, #1
 80050ee:	b510      	push	{r4, lr}
 80050f0:	4604      	mov	r4, r0
 80050f2:	4620      	mov	r0, r4
 80050f4:	f000 f81c 	bl	8005130 <malloc>
 80050f8:	b100      	cbz	r0, 80050fc <_Znwj+0x14>
 80050fa:	bd10      	pop	{r4, pc}
 80050fc:	f000 f808 	bl	8005110 <_ZSt15get_new_handlerv>
 8005100:	b908      	cbnz	r0, 8005106 <_Znwj+0x1e>
 8005102:	f000 f80d 	bl	8005120 <abort>
 8005106:	4780      	blx	r0
 8005108:	e7f3      	b.n	80050f2 <_Znwj+0xa>

0800510a <_ZdlPv>:
 800510a:	f000 b819 	b.w	8005140 <free>
	...

08005110 <_ZSt15get_new_handlerv>:
 8005110:	4b02      	ldr	r3, [pc, #8]	@ (800511c <_ZSt15get_new_handlerv+0xc>)
 8005112:	6818      	ldr	r0, [r3, #0]
 8005114:	f3bf 8f5b 	dmb	ish
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	200001b8 	.word	0x200001b8

08005120 <abort>:
 8005120:	b508      	push	{r3, lr}
 8005122:	2006      	movs	r0, #6
 8005124:	f000 f926 	bl	8005374 <raise>
 8005128:	2001      	movs	r0, #1
 800512a:	f7fc fbe7 	bl	80018fc <_exit>
	...

08005130 <malloc>:
 8005130:	4b02      	ldr	r3, [pc, #8]	@ (800513c <malloc+0xc>)
 8005132:	4601      	mov	r1, r0
 8005134:	6818      	ldr	r0, [r3, #0]
 8005136:	f000 b82d 	b.w	8005194 <_malloc_r>
 800513a:	bf00      	nop
 800513c:	2000000c 	.word	0x2000000c

08005140 <free>:
 8005140:	4b02      	ldr	r3, [pc, #8]	@ (800514c <free+0xc>)
 8005142:	4601      	mov	r1, r0
 8005144:	6818      	ldr	r0, [r3, #0]
 8005146:	f000 b96d 	b.w	8005424 <_free_r>
 800514a:	bf00      	nop
 800514c:	2000000c 	.word	0x2000000c

08005150 <sbrk_aligned>:
 8005150:	b570      	push	{r4, r5, r6, lr}
 8005152:	4e0f      	ldr	r6, [pc, #60]	@ (8005190 <sbrk_aligned+0x40>)
 8005154:	460c      	mov	r4, r1
 8005156:	6831      	ldr	r1, [r6, #0]
 8005158:	4605      	mov	r5, r0
 800515a:	b911      	cbnz	r1, 8005162 <sbrk_aligned+0x12>
 800515c:	f000 f926 	bl	80053ac <_sbrk_r>
 8005160:	6030      	str	r0, [r6, #0]
 8005162:	4621      	mov	r1, r4
 8005164:	4628      	mov	r0, r5
 8005166:	f000 f921 	bl	80053ac <_sbrk_r>
 800516a:	1c43      	adds	r3, r0, #1
 800516c:	d103      	bne.n	8005176 <sbrk_aligned+0x26>
 800516e:	f04f 34ff 	mov.w	r4, #4294967295
 8005172:	4620      	mov	r0, r4
 8005174:	bd70      	pop	{r4, r5, r6, pc}
 8005176:	1cc4      	adds	r4, r0, #3
 8005178:	f024 0403 	bic.w	r4, r4, #3
 800517c:	42a0      	cmp	r0, r4
 800517e:	d0f8      	beq.n	8005172 <sbrk_aligned+0x22>
 8005180:	1a21      	subs	r1, r4, r0
 8005182:	4628      	mov	r0, r5
 8005184:	f000 f912 	bl	80053ac <_sbrk_r>
 8005188:	3001      	adds	r0, #1
 800518a:	d1f2      	bne.n	8005172 <sbrk_aligned+0x22>
 800518c:	e7ef      	b.n	800516e <sbrk_aligned+0x1e>
 800518e:	bf00      	nop
 8005190:	200001bc 	.word	0x200001bc

08005194 <_malloc_r>:
 8005194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005198:	1ccd      	adds	r5, r1, #3
 800519a:	f025 0503 	bic.w	r5, r5, #3
 800519e:	3508      	adds	r5, #8
 80051a0:	2d0c      	cmp	r5, #12
 80051a2:	bf38      	it	cc
 80051a4:	250c      	movcc	r5, #12
 80051a6:	2d00      	cmp	r5, #0
 80051a8:	4606      	mov	r6, r0
 80051aa:	db01      	blt.n	80051b0 <_malloc_r+0x1c>
 80051ac:	42a9      	cmp	r1, r5
 80051ae:	d904      	bls.n	80051ba <_malloc_r+0x26>
 80051b0:	230c      	movs	r3, #12
 80051b2:	6033      	str	r3, [r6, #0]
 80051b4:	2000      	movs	r0, #0
 80051b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005290 <_malloc_r+0xfc>
 80051be:	f000 f869 	bl	8005294 <__malloc_lock>
 80051c2:	f8d8 3000 	ldr.w	r3, [r8]
 80051c6:	461c      	mov	r4, r3
 80051c8:	bb44      	cbnz	r4, 800521c <_malloc_r+0x88>
 80051ca:	4629      	mov	r1, r5
 80051cc:	4630      	mov	r0, r6
 80051ce:	f7ff ffbf 	bl	8005150 <sbrk_aligned>
 80051d2:	1c43      	adds	r3, r0, #1
 80051d4:	4604      	mov	r4, r0
 80051d6:	d158      	bne.n	800528a <_malloc_r+0xf6>
 80051d8:	f8d8 4000 	ldr.w	r4, [r8]
 80051dc:	4627      	mov	r7, r4
 80051de:	2f00      	cmp	r7, #0
 80051e0:	d143      	bne.n	800526a <_malloc_r+0xd6>
 80051e2:	2c00      	cmp	r4, #0
 80051e4:	d04b      	beq.n	800527e <_malloc_r+0xea>
 80051e6:	6823      	ldr	r3, [r4, #0]
 80051e8:	4639      	mov	r1, r7
 80051ea:	4630      	mov	r0, r6
 80051ec:	eb04 0903 	add.w	r9, r4, r3
 80051f0:	f000 f8dc 	bl	80053ac <_sbrk_r>
 80051f4:	4581      	cmp	r9, r0
 80051f6:	d142      	bne.n	800527e <_malloc_r+0xea>
 80051f8:	6821      	ldr	r1, [r4, #0]
 80051fa:	1a6d      	subs	r5, r5, r1
 80051fc:	4629      	mov	r1, r5
 80051fe:	4630      	mov	r0, r6
 8005200:	f7ff ffa6 	bl	8005150 <sbrk_aligned>
 8005204:	3001      	adds	r0, #1
 8005206:	d03a      	beq.n	800527e <_malloc_r+0xea>
 8005208:	6823      	ldr	r3, [r4, #0]
 800520a:	442b      	add	r3, r5
 800520c:	6023      	str	r3, [r4, #0]
 800520e:	f8d8 3000 	ldr.w	r3, [r8]
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	bb62      	cbnz	r2, 8005270 <_malloc_r+0xdc>
 8005216:	f8c8 7000 	str.w	r7, [r8]
 800521a:	e00f      	b.n	800523c <_malloc_r+0xa8>
 800521c:	6822      	ldr	r2, [r4, #0]
 800521e:	1b52      	subs	r2, r2, r5
 8005220:	d420      	bmi.n	8005264 <_malloc_r+0xd0>
 8005222:	2a0b      	cmp	r2, #11
 8005224:	d917      	bls.n	8005256 <_malloc_r+0xc2>
 8005226:	1961      	adds	r1, r4, r5
 8005228:	42a3      	cmp	r3, r4
 800522a:	6025      	str	r5, [r4, #0]
 800522c:	bf18      	it	ne
 800522e:	6059      	strne	r1, [r3, #4]
 8005230:	6863      	ldr	r3, [r4, #4]
 8005232:	bf08      	it	eq
 8005234:	f8c8 1000 	streq.w	r1, [r8]
 8005238:	5162      	str	r2, [r4, r5]
 800523a:	604b      	str	r3, [r1, #4]
 800523c:	4630      	mov	r0, r6
 800523e:	f000 f82f 	bl	80052a0 <__malloc_unlock>
 8005242:	f104 000b 	add.w	r0, r4, #11
 8005246:	1d23      	adds	r3, r4, #4
 8005248:	f020 0007 	bic.w	r0, r0, #7
 800524c:	1ac2      	subs	r2, r0, r3
 800524e:	bf1c      	itt	ne
 8005250:	1a1b      	subne	r3, r3, r0
 8005252:	50a3      	strne	r3, [r4, r2]
 8005254:	e7af      	b.n	80051b6 <_malloc_r+0x22>
 8005256:	6862      	ldr	r2, [r4, #4]
 8005258:	42a3      	cmp	r3, r4
 800525a:	bf0c      	ite	eq
 800525c:	f8c8 2000 	streq.w	r2, [r8]
 8005260:	605a      	strne	r2, [r3, #4]
 8005262:	e7eb      	b.n	800523c <_malloc_r+0xa8>
 8005264:	4623      	mov	r3, r4
 8005266:	6864      	ldr	r4, [r4, #4]
 8005268:	e7ae      	b.n	80051c8 <_malloc_r+0x34>
 800526a:	463c      	mov	r4, r7
 800526c:	687f      	ldr	r7, [r7, #4]
 800526e:	e7b6      	b.n	80051de <_malloc_r+0x4a>
 8005270:	461a      	mov	r2, r3
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	42a3      	cmp	r3, r4
 8005276:	d1fb      	bne.n	8005270 <_malloc_r+0xdc>
 8005278:	2300      	movs	r3, #0
 800527a:	6053      	str	r3, [r2, #4]
 800527c:	e7de      	b.n	800523c <_malloc_r+0xa8>
 800527e:	230c      	movs	r3, #12
 8005280:	6033      	str	r3, [r6, #0]
 8005282:	4630      	mov	r0, r6
 8005284:	f000 f80c 	bl	80052a0 <__malloc_unlock>
 8005288:	e794      	b.n	80051b4 <_malloc_r+0x20>
 800528a:	6005      	str	r5, [r0, #0]
 800528c:	e7d6      	b.n	800523c <_malloc_r+0xa8>
 800528e:	bf00      	nop
 8005290:	200001c0 	.word	0x200001c0

08005294 <__malloc_lock>:
 8005294:	4801      	ldr	r0, [pc, #4]	@ (800529c <__malloc_lock+0x8>)
 8005296:	f000 b8c3 	b.w	8005420 <__retarget_lock_acquire_recursive>
 800529a:	bf00      	nop
 800529c:	20000300 	.word	0x20000300

080052a0 <__malloc_unlock>:
 80052a0:	4801      	ldr	r0, [pc, #4]	@ (80052a8 <__malloc_unlock+0x8>)
 80052a2:	f000 b8be 	b.w	8005422 <__retarget_lock_release_recursive>
 80052a6:	bf00      	nop
 80052a8:	20000300 	.word	0x20000300

080052ac <sniprintf>:
 80052ac:	b40c      	push	{r2, r3}
 80052ae:	b530      	push	{r4, r5, lr}
 80052b0:	4b17      	ldr	r3, [pc, #92]	@ (8005310 <sniprintf+0x64>)
 80052b2:	1e0c      	subs	r4, r1, #0
 80052b4:	681d      	ldr	r5, [r3, #0]
 80052b6:	b09d      	sub	sp, #116	@ 0x74
 80052b8:	da08      	bge.n	80052cc <sniprintf+0x20>
 80052ba:	238b      	movs	r3, #139	@ 0x8b
 80052bc:	602b      	str	r3, [r5, #0]
 80052be:	f04f 30ff 	mov.w	r0, #4294967295
 80052c2:	b01d      	add	sp, #116	@ 0x74
 80052c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052c8:	b002      	add	sp, #8
 80052ca:	4770      	bx	lr
 80052cc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80052d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80052d4:	bf14      	ite	ne
 80052d6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80052da:	4623      	moveq	r3, r4
 80052dc:	9304      	str	r3, [sp, #16]
 80052de:	9307      	str	r3, [sp, #28]
 80052e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80052e4:	9002      	str	r0, [sp, #8]
 80052e6:	9006      	str	r0, [sp, #24]
 80052e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80052ec:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80052ee:	ab21      	add	r3, sp, #132	@ 0x84
 80052f0:	a902      	add	r1, sp, #8
 80052f2:	4628      	mov	r0, r5
 80052f4:	9301      	str	r3, [sp, #4]
 80052f6:	f000 f93b 	bl	8005570 <_svfiprintf_r>
 80052fa:	1c43      	adds	r3, r0, #1
 80052fc:	bfbc      	itt	lt
 80052fe:	238b      	movlt	r3, #139	@ 0x8b
 8005300:	602b      	strlt	r3, [r5, #0]
 8005302:	2c00      	cmp	r4, #0
 8005304:	d0dd      	beq.n	80052c2 <sniprintf+0x16>
 8005306:	9b02      	ldr	r3, [sp, #8]
 8005308:	2200      	movs	r2, #0
 800530a:	701a      	strb	r2, [r3, #0]
 800530c:	e7d9      	b.n	80052c2 <sniprintf+0x16>
 800530e:	bf00      	nop
 8005310:	2000000c 	.word	0x2000000c

08005314 <memset>:
 8005314:	4402      	add	r2, r0
 8005316:	4603      	mov	r3, r0
 8005318:	4293      	cmp	r3, r2
 800531a:	d100      	bne.n	800531e <memset+0xa>
 800531c:	4770      	bx	lr
 800531e:	f803 1b01 	strb.w	r1, [r3], #1
 8005322:	e7f9      	b.n	8005318 <memset+0x4>

08005324 <_raise_r>:
 8005324:	291f      	cmp	r1, #31
 8005326:	b538      	push	{r3, r4, r5, lr}
 8005328:	4605      	mov	r5, r0
 800532a:	460c      	mov	r4, r1
 800532c:	d904      	bls.n	8005338 <_raise_r+0x14>
 800532e:	2316      	movs	r3, #22
 8005330:	6003      	str	r3, [r0, #0]
 8005332:	f04f 30ff 	mov.w	r0, #4294967295
 8005336:	bd38      	pop	{r3, r4, r5, pc}
 8005338:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800533a:	b112      	cbz	r2, 8005342 <_raise_r+0x1e>
 800533c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005340:	b94b      	cbnz	r3, 8005356 <_raise_r+0x32>
 8005342:	4628      	mov	r0, r5
 8005344:	f000 f830 	bl	80053a8 <_getpid_r>
 8005348:	4622      	mov	r2, r4
 800534a:	4601      	mov	r1, r0
 800534c:	4628      	mov	r0, r5
 800534e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005352:	f000 b817 	b.w	8005384 <_kill_r>
 8005356:	2b01      	cmp	r3, #1
 8005358:	d00a      	beq.n	8005370 <_raise_r+0x4c>
 800535a:	1c59      	adds	r1, r3, #1
 800535c:	d103      	bne.n	8005366 <_raise_r+0x42>
 800535e:	2316      	movs	r3, #22
 8005360:	6003      	str	r3, [r0, #0]
 8005362:	2001      	movs	r0, #1
 8005364:	e7e7      	b.n	8005336 <_raise_r+0x12>
 8005366:	2100      	movs	r1, #0
 8005368:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800536c:	4620      	mov	r0, r4
 800536e:	4798      	blx	r3
 8005370:	2000      	movs	r0, #0
 8005372:	e7e0      	b.n	8005336 <_raise_r+0x12>

08005374 <raise>:
 8005374:	4b02      	ldr	r3, [pc, #8]	@ (8005380 <raise+0xc>)
 8005376:	4601      	mov	r1, r0
 8005378:	6818      	ldr	r0, [r3, #0]
 800537a:	f7ff bfd3 	b.w	8005324 <_raise_r>
 800537e:	bf00      	nop
 8005380:	2000000c 	.word	0x2000000c

08005384 <_kill_r>:
 8005384:	b538      	push	{r3, r4, r5, lr}
 8005386:	4d07      	ldr	r5, [pc, #28]	@ (80053a4 <_kill_r+0x20>)
 8005388:	2300      	movs	r3, #0
 800538a:	4604      	mov	r4, r0
 800538c:	4608      	mov	r0, r1
 800538e:	4611      	mov	r1, r2
 8005390:	602b      	str	r3, [r5, #0]
 8005392:	f7fc faa3 	bl	80018dc <_kill>
 8005396:	1c43      	adds	r3, r0, #1
 8005398:	d102      	bne.n	80053a0 <_kill_r+0x1c>
 800539a:	682b      	ldr	r3, [r5, #0]
 800539c:	b103      	cbz	r3, 80053a0 <_kill_r+0x1c>
 800539e:	6023      	str	r3, [r4, #0]
 80053a0:	bd38      	pop	{r3, r4, r5, pc}
 80053a2:	bf00      	nop
 80053a4:	200002fc 	.word	0x200002fc

080053a8 <_getpid_r>:
 80053a8:	f7fc ba90 	b.w	80018cc <_getpid>

080053ac <_sbrk_r>:
 80053ac:	b538      	push	{r3, r4, r5, lr}
 80053ae:	4d06      	ldr	r5, [pc, #24]	@ (80053c8 <_sbrk_r+0x1c>)
 80053b0:	2300      	movs	r3, #0
 80053b2:	4604      	mov	r4, r0
 80053b4:	4608      	mov	r0, r1
 80053b6:	602b      	str	r3, [r5, #0]
 80053b8:	f7fc faac 	bl	8001914 <_sbrk>
 80053bc:	1c43      	adds	r3, r0, #1
 80053be:	d102      	bne.n	80053c6 <_sbrk_r+0x1a>
 80053c0:	682b      	ldr	r3, [r5, #0]
 80053c2:	b103      	cbz	r3, 80053c6 <_sbrk_r+0x1a>
 80053c4:	6023      	str	r3, [r4, #0]
 80053c6:	bd38      	pop	{r3, r4, r5, pc}
 80053c8:	200002fc 	.word	0x200002fc

080053cc <__errno>:
 80053cc:	4b01      	ldr	r3, [pc, #4]	@ (80053d4 <__errno+0x8>)
 80053ce:	6818      	ldr	r0, [r3, #0]
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	2000000c 	.word	0x2000000c

080053d8 <__libc_init_array>:
 80053d8:	b570      	push	{r4, r5, r6, lr}
 80053da:	4d0d      	ldr	r5, [pc, #52]	@ (8005410 <__libc_init_array+0x38>)
 80053dc:	4c0d      	ldr	r4, [pc, #52]	@ (8005414 <__libc_init_array+0x3c>)
 80053de:	1b64      	subs	r4, r4, r5
 80053e0:	10a4      	asrs	r4, r4, #2
 80053e2:	2600      	movs	r6, #0
 80053e4:	42a6      	cmp	r6, r4
 80053e6:	d109      	bne.n	80053fc <__libc_init_array+0x24>
 80053e8:	4d0b      	ldr	r5, [pc, #44]	@ (8005418 <__libc_init_array+0x40>)
 80053ea:	4c0c      	ldr	r4, [pc, #48]	@ (800541c <__libc_init_array+0x44>)
 80053ec:	f000 fba8 	bl	8005b40 <_init>
 80053f0:	1b64      	subs	r4, r4, r5
 80053f2:	10a4      	asrs	r4, r4, #2
 80053f4:	2600      	movs	r6, #0
 80053f6:	42a6      	cmp	r6, r4
 80053f8:	d105      	bne.n	8005406 <__libc_init_array+0x2e>
 80053fa:	bd70      	pop	{r4, r5, r6, pc}
 80053fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005400:	4798      	blx	r3
 8005402:	3601      	adds	r6, #1
 8005404:	e7ee      	b.n	80053e4 <__libc_init_array+0xc>
 8005406:	f855 3b04 	ldr.w	r3, [r5], #4
 800540a:	4798      	blx	r3
 800540c:	3601      	adds	r6, #1
 800540e:	e7f2      	b.n	80053f6 <__libc_init_array+0x1e>
 8005410:	08005bf8 	.word	0x08005bf8
 8005414:	08005bf8 	.word	0x08005bf8
 8005418:	08005bf8 	.word	0x08005bf8
 800541c:	08005bfc 	.word	0x08005bfc

08005420 <__retarget_lock_acquire_recursive>:
 8005420:	4770      	bx	lr

08005422 <__retarget_lock_release_recursive>:
 8005422:	4770      	bx	lr

08005424 <_free_r>:
 8005424:	b538      	push	{r3, r4, r5, lr}
 8005426:	4605      	mov	r5, r0
 8005428:	2900      	cmp	r1, #0
 800542a:	d041      	beq.n	80054b0 <_free_r+0x8c>
 800542c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005430:	1f0c      	subs	r4, r1, #4
 8005432:	2b00      	cmp	r3, #0
 8005434:	bfb8      	it	lt
 8005436:	18e4      	addlt	r4, r4, r3
 8005438:	f7ff ff2c 	bl	8005294 <__malloc_lock>
 800543c:	4a1d      	ldr	r2, [pc, #116]	@ (80054b4 <_free_r+0x90>)
 800543e:	6813      	ldr	r3, [r2, #0]
 8005440:	b933      	cbnz	r3, 8005450 <_free_r+0x2c>
 8005442:	6063      	str	r3, [r4, #4]
 8005444:	6014      	str	r4, [r2, #0]
 8005446:	4628      	mov	r0, r5
 8005448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800544c:	f7ff bf28 	b.w	80052a0 <__malloc_unlock>
 8005450:	42a3      	cmp	r3, r4
 8005452:	d908      	bls.n	8005466 <_free_r+0x42>
 8005454:	6820      	ldr	r0, [r4, #0]
 8005456:	1821      	adds	r1, r4, r0
 8005458:	428b      	cmp	r3, r1
 800545a:	bf01      	itttt	eq
 800545c:	6819      	ldreq	r1, [r3, #0]
 800545e:	685b      	ldreq	r3, [r3, #4]
 8005460:	1809      	addeq	r1, r1, r0
 8005462:	6021      	streq	r1, [r4, #0]
 8005464:	e7ed      	b.n	8005442 <_free_r+0x1e>
 8005466:	461a      	mov	r2, r3
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	b10b      	cbz	r3, 8005470 <_free_r+0x4c>
 800546c:	42a3      	cmp	r3, r4
 800546e:	d9fa      	bls.n	8005466 <_free_r+0x42>
 8005470:	6811      	ldr	r1, [r2, #0]
 8005472:	1850      	adds	r0, r2, r1
 8005474:	42a0      	cmp	r0, r4
 8005476:	d10b      	bne.n	8005490 <_free_r+0x6c>
 8005478:	6820      	ldr	r0, [r4, #0]
 800547a:	4401      	add	r1, r0
 800547c:	1850      	adds	r0, r2, r1
 800547e:	4283      	cmp	r3, r0
 8005480:	6011      	str	r1, [r2, #0]
 8005482:	d1e0      	bne.n	8005446 <_free_r+0x22>
 8005484:	6818      	ldr	r0, [r3, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	6053      	str	r3, [r2, #4]
 800548a:	4408      	add	r0, r1
 800548c:	6010      	str	r0, [r2, #0]
 800548e:	e7da      	b.n	8005446 <_free_r+0x22>
 8005490:	d902      	bls.n	8005498 <_free_r+0x74>
 8005492:	230c      	movs	r3, #12
 8005494:	602b      	str	r3, [r5, #0]
 8005496:	e7d6      	b.n	8005446 <_free_r+0x22>
 8005498:	6820      	ldr	r0, [r4, #0]
 800549a:	1821      	adds	r1, r4, r0
 800549c:	428b      	cmp	r3, r1
 800549e:	bf04      	itt	eq
 80054a0:	6819      	ldreq	r1, [r3, #0]
 80054a2:	685b      	ldreq	r3, [r3, #4]
 80054a4:	6063      	str	r3, [r4, #4]
 80054a6:	bf04      	itt	eq
 80054a8:	1809      	addeq	r1, r1, r0
 80054aa:	6021      	streq	r1, [r4, #0]
 80054ac:	6054      	str	r4, [r2, #4]
 80054ae:	e7ca      	b.n	8005446 <_free_r+0x22>
 80054b0:	bd38      	pop	{r3, r4, r5, pc}
 80054b2:	bf00      	nop
 80054b4:	200001c0 	.word	0x200001c0

080054b8 <__ssputs_r>:
 80054b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054bc:	688e      	ldr	r6, [r1, #8]
 80054be:	461f      	mov	r7, r3
 80054c0:	42be      	cmp	r6, r7
 80054c2:	680b      	ldr	r3, [r1, #0]
 80054c4:	4682      	mov	sl, r0
 80054c6:	460c      	mov	r4, r1
 80054c8:	4690      	mov	r8, r2
 80054ca:	d82d      	bhi.n	8005528 <__ssputs_r+0x70>
 80054cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80054d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80054d4:	d026      	beq.n	8005524 <__ssputs_r+0x6c>
 80054d6:	6965      	ldr	r5, [r4, #20]
 80054d8:	6909      	ldr	r1, [r1, #16]
 80054da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054de:	eba3 0901 	sub.w	r9, r3, r1
 80054e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80054e6:	1c7b      	adds	r3, r7, #1
 80054e8:	444b      	add	r3, r9
 80054ea:	106d      	asrs	r5, r5, #1
 80054ec:	429d      	cmp	r5, r3
 80054ee:	bf38      	it	cc
 80054f0:	461d      	movcc	r5, r3
 80054f2:	0553      	lsls	r3, r2, #21
 80054f4:	d527      	bpl.n	8005546 <__ssputs_r+0x8e>
 80054f6:	4629      	mov	r1, r5
 80054f8:	f7ff fe4c 	bl	8005194 <_malloc_r>
 80054fc:	4606      	mov	r6, r0
 80054fe:	b360      	cbz	r0, 800555a <__ssputs_r+0xa2>
 8005500:	6921      	ldr	r1, [r4, #16]
 8005502:	464a      	mov	r2, r9
 8005504:	f000 fad8 	bl	8005ab8 <memcpy>
 8005508:	89a3      	ldrh	r3, [r4, #12]
 800550a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800550e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005512:	81a3      	strh	r3, [r4, #12]
 8005514:	6126      	str	r6, [r4, #16]
 8005516:	6165      	str	r5, [r4, #20]
 8005518:	444e      	add	r6, r9
 800551a:	eba5 0509 	sub.w	r5, r5, r9
 800551e:	6026      	str	r6, [r4, #0]
 8005520:	60a5      	str	r5, [r4, #8]
 8005522:	463e      	mov	r6, r7
 8005524:	42be      	cmp	r6, r7
 8005526:	d900      	bls.n	800552a <__ssputs_r+0x72>
 8005528:	463e      	mov	r6, r7
 800552a:	6820      	ldr	r0, [r4, #0]
 800552c:	4632      	mov	r2, r6
 800552e:	4641      	mov	r1, r8
 8005530:	f000 faa8 	bl	8005a84 <memmove>
 8005534:	68a3      	ldr	r3, [r4, #8]
 8005536:	1b9b      	subs	r3, r3, r6
 8005538:	60a3      	str	r3, [r4, #8]
 800553a:	6823      	ldr	r3, [r4, #0]
 800553c:	4433      	add	r3, r6
 800553e:	6023      	str	r3, [r4, #0]
 8005540:	2000      	movs	r0, #0
 8005542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005546:	462a      	mov	r2, r5
 8005548:	f000 fac4 	bl	8005ad4 <_realloc_r>
 800554c:	4606      	mov	r6, r0
 800554e:	2800      	cmp	r0, #0
 8005550:	d1e0      	bne.n	8005514 <__ssputs_r+0x5c>
 8005552:	6921      	ldr	r1, [r4, #16]
 8005554:	4650      	mov	r0, sl
 8005556:	f7ff ff65 	bl	8005424 <_free_r>
 800555a:	230c      	movs	r3, #12
 800555c:	f8ca 3000 	str.w	r3, [sl]
 8005560:	89a3      	ldrh	r3, [r4, #12]
 8005562:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005566:	81a3      	strh	r3, [r4, #12]
 8005568:	f04f 30ff 	mov.w	r0, #4294967295
 800556c:	e7e9      	b.n	8005542 <__ssputs_r+0x8a>
	...

08005570 <_svfiprintf_r>:
 8005570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005574:	4698      	mov	r8, r3
 8005576:	898b      	ldrh	r3, [r1, #12]
 8005578:	061b      	lsls	r3, r3, #24
 800557a:	b09d      	sub	sp, #116	@ 0x74
 800557c:	4607      	mov	r7, r0
 800557e:	460d      	mov	r5, r1
 8005580:	4614      	mov	r4, r2
 8005582:	d510      	bpl.n	80055a6 <_svfiprintf_r+0x36>
 8005584:	690b      	ldr	r3, [r1, #16]
 8005586:	b973      	cbnz	r3, 80055a6 <_svfiprintf_r+0x36>
 8005588:	2140      	movs	r1, #64	@ 0x40
 800558a:	f7ff fe03 	bl	8005194 <_malloc_r>
 800558e:	6028      	str	r0, [r5, #0]
 8005590:	6128      	str	r0, [r5, #16]
 8005592:	b930      	cbnz	r0, 80055a2 <_svfiprintf_r+0x32>
 8005594:	230c      	movs	r3, #12
 8005596:	603b      	str	r3, [r7, #0]
 8005598:	f04f 30ff 	mov.w	r0, #4294967295
 800559c:	b01d      	add	sp, #116	@ 0x74
 800559e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055a2:	2340      	movs	r3, #64	@ 0x40
 80055a4:	616b      	str	r3, [r5, #20]
 80055a6:	2300      	movs	r3, #0
 80055a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80055aa:	2320      	movs	r3, #32
 80055ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80055b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80055b4:	2330      	movs	r3, #48	@ 0x30
 80055b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005754 <_svfiprintf_r+0x1e4>
 80055ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80055be:	f04f 0901 	mov.w	r9, #1
 80055c2:	4623      	mov	r3, r4
 80055c4:	469a      	mov	sl, r3
 80055c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055ca:	b10a      	cbz	r2, 80055d0 <_svfiprintf_r+0x60>
 80055cc:	2a25      	cmp	r2, #37	@ 0x25
 80055ce:	d1f9      	bne.n	80055c4 <_svfiprintf_r+0x54>
 80055d0:	ebba 0b04 	subs.w	fp, sl, r4
 80055d4:	d00b      	beq.n	80055ee <_svfiprintf_r+0x7e>
 80055d6:	465b      	mov	r3, fp
 80055d8:	4622      	mov	r2, r4
 80055da:	4629      	mov	r1, r5
 80055dc:	4638      	mov	r0, r7
 80055de:	f7ff ff6b 	bl	80054b8 <__ssputs_r>
 80055e2:	3001      	adds	r0, #1
 80055e4:	f000 80a7 	beq.w	8005736 <_svfiprintf_r+0x1c6>
 80055e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055ea:	445a      	add	r2, fp
 80055ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80055ee:	f89a 3000 	ldrb.w	r3, [sl]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f000 809f 	beq.w	8005736 <_svfiprintf_r+0x1c6>
 80055f8:	2300      	movs	r3, #0
 80055fa:	f04f 32ff 	mov.w	r2, #4294967295
 80055fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005602:	f10a 0a01 	add.w	sl, sl, #1
 8005606:	9304      	str	r3, [sp, #16]
 8005608:	9307      	str	r3, [sp, #28]
 800560a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800560e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005610:	4654      	mov	r4, sl
 8005612:	2205      	movs	r2, #5
 8005614:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005618:	484e      	ldr	r0, [pc, #312]	@ (8005754 <_svfiprintf_r+0x1e4>)
 800561a:	f7fa fde1 	bl	80001e0 <memchr>
 800561e:	9a04      	ldr	r2, [sp, #16]
 8005620:	b9d8      	cbnz	r0, 800565a <_svfiprintf_r+0xea>
 8005622:	06d0      	lsls	r0, r2, #27
 8005624:	bf44      	itt	mi
 8005626:	2320      	movmi	r3, #32
 8005628:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800562c:	0711      	lsls	r1, r2, #28
 800562e:	bf44      	itt	mi
 8005630:	232b      	movmi	r3, #43	@ 0x2b
 8005632:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005636:	f89a 3000 	ldrb.w	r3, [sl]
 800563a:	2b2a      	cmp	r3, #42	@ 0x2a
 800563c:	d015      	beq.n	800566a <_svfiprintf_r+0xfa>
 800563e:	9a07      	ldr	r2, [sp, #28]
 8005640:	4654      	mov	r4, sl
 8005642:	2000      	movs	r0, #0
 8005644:	f04f 0c0a 	mov.w	ip, #10
 8005648:	4621      	mov	r1, r4
 800564a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800564e:	3b30      	subs	r3, #48	@ 0x30
 8005650:	2b09      	cmp	r3, #9
 8005652:	d94b      	bls.n	80056ec <_svfiprintf_r+0x17c>
 8005654:	b1b0      	cbz	r0, 8005684 <_svfiprintf_r+0x114>
 8005656:	9207      	str	r2, [sp, #28]
 8005658:	e014      	b.n	8005684 <_svfiprintf_r+0x114>
 800565a:	eba0 0308 	sub.w	r3, r0, r8
 800565e:	fa09 f303 	lsl.w	r3, r9, r3
 8005662:	4313      	orrs	r3, r2
 8005664:	9304      	str	r3, [sp, #16]
 8005666:	46a2      	mov	sl, r4
 8005668:	e7d2      	b.n	8005610 <_svfiprintf_r+0xa0>
 800566a:	9b03      	ldr	r3, [sp, #12]
 800566c:	1d19      	adds	r1, r3, #4
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	9103      	str	r1, [sp, #12]
 8005672:	2b00      	cmp	r3, #0
 8005674:	bfbb      	ittet	lt
 8005676:	425b      	neglt	r3, r3
 8005678:	f042 0202 	orrlt.w	r2, r2, #2
 800567c:	9307      	strge	r3, [sp, #28]
 800567e:	9307      	strlt	r3, [sp, #28]
 8005680:	bfb8      	it	lt
 8005682:	9204      	strlt	r2, [sp, #16]
 8005684:	7823      	ldrb	r3, [r4, #0]
 8005686:	2b2e      	cmp	r3, #46	@ 0x2e
 8005688:	d10a      	bne.n	80056a0 <_svfiprintf_r+0x130>
 800568a:	7863      	ldrb	r3, [r4, #1]
 800568c:	2b2a      	cmp	r3, #42	@ 0x2a
 800568e:	d132      	bne.n	80056f6 <_svfiprintf_r+0x186>
 8005690:	9b03      	ldr	r3, [sp, #12]
 8005692:	1d1a      	adds	r2, r3, #4
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	9203      	str	r2, [sp, #12]
 8005698:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800569c:	3402      	adds	r4, #2
 800569e:	9305      	str	r3, [sp, #20]
 80056a0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005764 <_svfiprintf_r+0x1f4>
 80056a4:	7821      	ldrb	r1, [r4, #0]
 80056a6:	2203      	movs	r2, #3
 80056a8:	4650      	mov	r0, sl
 80056aa:	f7fa fd99 	bl	80001e0 <memchr>
 80056ae:	b138      	cbz	r0, 80056c0 <_svfiprintf_r+0x150>
 80056b0:	9b04      	ldr	r3, [sp, #16]
 80056b2:	eba0 000a 	sub.w	r0, r0, sl
 80056b6:	2240      	movs	r2, #64	@ 0x40
 80056b8:	4082      	lsls	r2, r0
 80056ba:	4313      	orrs	r3, r2
 80056bc:	3401      	adds	r4, #1
 80056be:	9304      	str	r3, [sp, #16]
 80056c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056c4:	4824      	ldr	r0, [pc, #144]	@ (8005758 <_svfiprintf_r+0x1e8>)
 80056c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80056ca:	2206      	movs	r2, #6
 80056cc:	f7fa fd88 	bl	80001e0 <memchr>
 80056d0:	2800      	cmp	r0, #0
 80056d2:	d036      	beq.n	8005742 <_svfiprintf_r+0x1d2>
 80056d4:	4b21      	ldr	r3, [pc, #132]	@ (800575c <_svfiprintf_r+0x1ec>)
 80056d6:	bb1b      	cbnz	r3, 8005720 <_svfiprintf_r+0x1b0>
 80056d8:	9b03      	ldr	r3, [sp, #12]
 80056da:	3307      	adds	r3, #7
 80056dc:	f023 0307 	bic.w	r3, r3, #7
 80056e0:	3308      	adds	r3, #8
 80056e2:	9303      	str	r3, [sp, #12]
 80056e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056e6:	4433      	add	r3, r6
 80056e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80056ea:	e76a      	b.n	80055c2 <_svfiprintf_r+0x52>
 80056ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80056f0:	460c      	mov	r4, r1
 80056f2:	2001      	movs	r0, #1
 80056f4:	e7a8      	b.n	8005648 <_svfiprintf_r+0xd8>
 80056f6:	2300      	movs	r3, #0
 80056f8:	3401      	adds	r4, #1
 80056fa:	9305      	str	r3, [sp, #20]
 80056fc:	4619      	mov	r1, r3
 80056fe:	f04f 0c0a 	mov.w	ip, #10
 8005702:	4620      	mov	r0, r4
 8005704:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005708:	3a30      	subs	r2, #48	@ 0x30
 800570a:	2a09      	cmp	r2, #9
 800570c:	d903      	bls.n	8005716 <_svfiprintf_r+0x1a6>
 800570e:	2b00      	cmp	r3, #0
 8005710:	d0c6      	beq.n	80056a0 <_svfiprintf_r+0x130>
 8005712:	9105      	str	r1, [sp, #20]
 8005714:	e7c4      	b.n	80056a0 <_svfiprintf_r+0x130>
 8005716:	fb0c 2101 	mla	r1, ip, r1, r2
 800571a:	4604      	mov	r4, r0
 800571c:	2301      	movs	r3, #1
 800571e:	e7f0      	b.n	8005702 <_svfiprintf_r+0x192>
 8005720:	ab03      	add	r3, sp, #12
 8005722:	9300      	str	r3, [sp, #0]
 8005724:	462a      	mov	r2, r5
 8005726:	4b0e      	ldr	r3, [pc, #56]	@ (8005760 <_svfiprintf_r+0x1f0>)
 8005728:	a904      	add	r1, sp, #16
 800572a:	4638      	mov	r0, r7
 800572c:	f3af 8000 	nop.w
 8005730:	1c42      	adds	r2, r0, #1
 8005732:	4606      	mov	r6, r0
 8005734:	d1d6      	bne.n	80056e4 <_svfiprintf_r+0x174>
 8005736:	89ab      	ldrh	r3, [r5, #12]
 8005738:	065b      	lsls	r3, r3, #25
 800573a:	f53f af2d 	bmi.w	8005598 <_svfiprintf_r+0x28>
 800573e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005740:	e72c      	b.n	800559c <_svfiprintf_r+0x2c>
 8005742:	ab03      	add	r3, sp, #12
 8005744:	9300      	str	r3, [sp, #0]
 8005746:	462a      	mov	r2, r5
 8005748:	4b05      	ldr	r3, [pc, #20]	@ (8005760 <_svfiprintf_r+0x1f0>)
 800574a:	a904      	add	r1, sp, #16
 800574c:	4638      	mov	r0, r7
 800574e:	f000 f879 	bl	8005844 <_printf_i>
 8005752:	e7ed      	b.n	8005730 <_svfiprintf_r+0x1c0>
 8005754:	08005bbc 	.word	0x08005bbc
 8005758:	08005bc6 	.word	0x08005bc6
 800575c:	00000000 	.word	0x00000000
 8005760:	080054b9 	.word	0x080054b9
 8005764:	08005bc2 	.word	0x08005bc2

08005768 <_printf_common>:
 8005768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800576c:	4616      	mov	r6, r2
 800576e:	4698      	mov	r8, r3
 8005770:	688a      	ldr	r2, [r1, #8]
 8005772:	690b      	ldr	r3, [r1, #16]
 8005774:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005778:	4293      	cmp	r3, r2
 800577a:	bfb8      	it	lt
 800577c:	4613      	movlt	r3, r2
 800577e:	6033      	str	r3, [r6, #0]
 8005780:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005784:	4607      	mov	r7, r0
 8005786:	460c      	mov	r4, r1
 8005788:	b10a      	cbz	r2, 800578e <_printf_common+0x26>
 800578a:	3301      	adds	r3, #1
 800578c:	6033      	str	r3, [r6, #0]
 800578e:	6823      	ldr	r3, [r4, #0]
 8005790:	0699      	lsls	r1, r3, #26
 8005792:	bf42      	ittt	mi
 8005794:	6833      	ldrmi	r3, [r6, #0]
 8005796:	3302      	addmi	r3, #2
 8005798:	6033      	strmi	r3, [r6, #0]
 800579a:	6825      	ldr	r5, [r4, #0]
 800579c:	f015 0506 	ands.w	r5, r5, #6
 80057a0:	d106      	bne.n	80057b0 <_printf_common+0x48>
 80057a2:	f104 0a19 	add.w	sl, r4, #25
 80057a6:	68e3      	ldr	r3, [r4, #12]
 80057a8:	6832      	ldr	r2, [r6, #0]
 80057aa:	1a9b      	subs	r3, r3, r2
 80057ac:	42ab      	cmp	r3, r5
 80057ae:	dc26      	bgt.n	80057fe <_printf_common+0x96>
 80057b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80057b4:	6822      	ldr	r2, [r4, #0]
 80057b6:	3b00      	subs	r3, #0
 80057b8:	bf18      	it	ne
 80057ba:	2301      	movne	r3, #1
 80057bc:	0692      	lsls	r2, r2, #26
 80057be:	d42b      	bmi.n	8005818 <_printf_common+0xb0>
 80057c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80057c4:	4641      	mov	r1, r8
 80057c6:	4638      	mov	r0, r7
 80057c8:	47c8      	blx	r9
 80057ca:	3001      	adds	r0, #1
 80057cc:	d01e      	beq.n	800580c <_printf_common+0xa4>
 80057ce:	6823      	ldr	r3, [r4, #0]
 80057d0:	6922      	ldr	r2, [r4, #16]
 80057d2:	f003 0306 	and.w	r3, r3, #6
 80057d6:	2b04      	cmp	r3, #4
 80057d8:	bf02      	ittt	eq
 80057da:	68e5      	ldreq	r5, [r4, #12]
 80057dc:	6833      	ldreq	r3, [r6, #0]
 80057de:	1aed      	subeq	r5, r5, r3
 80057e0:	68a3      	ldr	r3, [r4, #8]
 80057e2:	bf0c      	ite	eq
 80057e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057e8:	2500      	movne	r5, #0
 80057ea:	4293      	cmp	r3, r2
 80057ec:	bfc4      	itt	gt
 80057ee:	1a9b      	subgt	r3, r3, r2
 80057f0:	18ed      	addgt	r5, r5, r3
 80057f2:	2600      	movs	r6, #0
 80057f4:	341a      	adds	r4, #26
 80057f6:	42b5      	cmp	r5, r6
 80057f8:	d11a      	bne.n	8005830 <_printf_common+0xc8>
 80057fa:	2000      	movs	r0, #0
 80057fc:	e008      	b.n	8005810 <_printf_common+0xa8>
 80057fe:	2301      	movs	r3, #1
 8005800:	4652      	mov	r2, sl
 8005802:	4641      	mov	r1, r8
 8005804:	4638      	mov	r0, r7
 8005806:	47c8      	blx	r9
 8005808:	3001      	adds	r0, #1
 800580a:	d103      	bne.n	8005814 <_printf_common+0xac>
 800580c:	f04f 30ff 	mov.w	r0, #4294967295
 8005810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005814:	3501      	adds	r5, #1
 8005816:	e7c6      	b.n	80057a6 <_printf_common+0x3e>
 8005818:	18e1      	adds	r1, r4, r3
 800581a:	1c5a      	adds	r2, r3, #1
 800581c:	2030      	movs	r0, #48	@ 0x30
 800581e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005822:	4422      	add	r2, r4
 8005824:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005828:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800582c:	3302      	adds	r3, #2
 800582e:	e7c7      	b.n	80057c0 <_printf_common+0x58>
 8005830:	2301      	movs	r3, #1
 8005832:	4622      	mov	r2, r4
 8005834:	4641      	mov	r1, r8
 8005836:	4638      	mov	r0, r7
 8005838:	47c8      	blx	r9
 800583a:	3001      	adds	r0, #1
 800583c:	d0e6      	beq.n	800580c <_printf_common+0xa4>
 800583e:	3601      	adds	r6, #1
 8005840:	e7d9      	b.n	80057f6 <_printf_common+0x8e>
	...

08005844 <_printf_i>:
 8005844:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005848:	7e0f      	ldrb	r7, [r1, #24]
 800584a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800584c:	2f78      	cmp	r7, #120	@ 0x78
 800584e:	4691      	mov	r9, r2
 8005850:	4680      	mov	r8, r0
 8005852:	460c      	mov	r4, r1
 8005854:	469a      	mov	sl, r3
 8005856:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800585a:	d807      	bhi.n	800586c <_printf_i+0x28>
 800585c:	2f62      	cmp	r7, #98	@ 0x62
 800585e:	d80a      	bhi.n	8005876 <_printf_i+0x32>
 8005860:	2f00      	cmp	r7, #0
 8005862:	f000 80d2 	beq.w	8005a0a <_printf_i+0x1c6>
 8005866:	2f58      	cmp	r7, #88	@ 0x58
 8005868:	f000 80b9 	beq.w	80059de <_printf_i+0x19a>
 800586c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005870:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005874:	e03a      	b.n	80058ec <_printf_i+0xa8>
 8005876:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800587a:	2b15      	cmp	r3, #21
 800587c:	d8f6      	bhi.n	800586c <_printf_i+0x28>
 800587e:	a101      	add	r1, pc, #4	@ (adr r1, 8005884 <_printf_i+0x40>)
 8005880:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005884:	080058dd 	.word	0x080058dd
 8005888:	080058f1 	.word	0x080058f1
 800588c:	0800586d 	.word	0x0800586d
 8005890:	0800586d 	.word	0x0800586d
 8005894:	0800586d 	.word	0x0800586d
 8005898:	0800586d 	.word	0x0800586d
 800589c:	080058f1 	.word	0x080058f1
 80058a0:	0800586d 	.word	0x0800586d
 80058a4:	0800586d 	.word	0x0800586d
 80058a8:	0800586d 	.word	0x0800586d
 80058ac:	0800586d 	.word	0x0800586d
 80058b0:	080059f1 	.word	0x080059f1
 80058b4:	0800591b 	.word	0x0800591b
 80058b8:	080059ab 	.word	0x080059ab
 80058bc:	0800586d 	.word	0x0800586d
 80058c0:	0800586d 	.word	0x0800586d
 80058c4:	08005a13 	.word	0x08005a13
 80058c8:	0800586d 	.word	0x0800586d
 80058cc:	0800591b 	.word	0x0800591b
 80058d0:	0800586d 	.word	0x0800586d
 80058d4:	0800586d 	.word	0x0800586d
 80058d8:	080059b3 	.word	0x080059b3
 80058dc:	6833      	ldr	r3, [r6, #0]
 80058de:	1d1a      	adds	r2, r3, #4
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	6032      	str	r2, [r6, #0]
 80058e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80058ec:	2301      	movs	r3, #1
 80058ee:	e09d      	b.n	8005a2c <_printf_i+0x1e8>
 80058f0:	6833      	ldr	r3, [r6, #0]
 80058f2:	6820      	ldr	r0, [r4, #0]
 80058f4:	1d19      	adds	r1, r3, #4
 80058f6:	6031      	str	r1, [r6, #0]
 80058f8:	0606      	lsls	r6, r0, #24
 80058fa:	d501      	bpl.n	8005900 <_printf_i+0xbc>
 80058fc:	681d      	ldr	r5, [r3, #0]
 80058fe:	e003      	b.n	8005908 <_printf_i+0xc4>
 8005900:	0645      	lsls	r5, r0, #25
 8005902:	d5fb      	bpl.n	80058fc <_printf_i+0xb8>
 8005904:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005908:	2d00      	cmp	r5, #0
 800590a:	da03      	bge.n	8005914 <_printf_i+0xd0>
 800590c:	232d      	movs	r3, #45	@ 0x2d
 800590e:	426d      	negs	r5, r5
 8005910:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005914:	4859      	ldr	r0, [pc, #356]	@ (8005a7c <_printf_i+0x238>)
 8005916:	230a      	movs	r3, #10
 8005918:	e011      	b.n	800593e <_printf_i+0xfa>
 800591a:	6821      	ldr	r1, [r4, #0]
 800591c:	6833      	ldr	r3, [r6, #0]
 800591e:	0608      	lsls	r0, r1, #24
 8005920:	f853 5b04 	ldr.w	r5, [r3], #4
 8005924:	d402      	bmi.n	800592c <_printf_i+0xe8>
 8005926:	0649      	lsls	r1, r1, #25
 8005928:	bf48      	it	mi
 800592a:	b2ad      	uxthmi	r5, r5
 800592c:	2f6f      	cmp	r7, #111	@ 0x6f
 800592e:	4853      	ldr	r0, [pc, #332]	@ (8005a7c <_printf_i+0x238>)
 8005930:	6033      	str	r3, [r6, #0]
 8005932:	bf14      	ite	ne
 8005934:	230a      	movne	r3, #10
 8005936:	2308      	moveq	r3, #8
 8005938:	2100      	movs	r1, #0
 800593a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800593e:	6866      	ldr	r6, [r4, #4]
 8005940:	60a6      	str	r6, [r4, #8]
 8005942:	2e00      	cmp	r6, #0
 8005944:	bfa2      	ittt	ge
 8005946:	6821      	ldrge	r1, [r4, #0]
 8005948:	f021 0104 	bicge.w	r1, r1, #4
 800594c:	6021      	strge	r1, [r4, #0]
 800594e:	b90d      	cbnz	r5, 8005954 <_printf_i+0x110>
 8005950:	2e00      	cmp	r6, #0
 8005952:	d04b      	beq.n	80059ec <_printf_i+0x1a8>
 8005954:	4616      	mov	r6, r2
 8005956:	fbb5 f1f3 	udiv	r1, r5, r3
 800595a:	fb03 5711 	mls	r7, r3, r1, r5
 800595e:	5dc7      	ldrb	r7, [r0, r7]
 8005960:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005964:	462f      	mov	r7, r5
 8005966:	42bb      	cmp	r3, r7
 8005968:	460d      	mov	r5, r1
 800596a:	d9f4      	bls.n	8005956 <_printf_i+0x112>
 800596c:	2b08      	cmp	r3, #8
 800596e:	d10b      	bne.n	8005988 <_printf_i+0x144>
 8005970:	6823      	ldr	r3, [r4, #0]
 8005972:	07df      	lsls	r7, r3, #31
 8005974:	d508      	bpl.n	8005988 <_printf_i+0x144>
 8005976:	6923      	ldr	r3, [r4, #16]
 8005978:	6861      	ldr	r1, [r4, #4]
 800597a:	4299      	cmp	r1, r3
 800597c:	bfde      	ittt	le
 800597e:	2330      	movle	r3, #48	@ 0x30
 8005980:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005984:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005988:	1b92      	subs	r2, r2, r6
 800598a:	6122      	str	r2, [r4, #16]
 800598c:	f8cd a000 	str.w	sl, [sp]
 8005990:	464b      	mov	r3, r9
 8005992:	aa03      	add	r2, sp, #12
 8005994:	4621      	mov	r1, r4
 8005996:	4640      	mov	r0, r8
 8005998:	f7ff fee6 	bl	8005768 <_printf_common>
 800599c:	3001      	adds	r0, #1
 800599e:	d14a      	bne.n	8005a36 <_printf_i+0x1f2>
 80059a0:	f04f 30ff 	mov.w	r0, #4294967295
 80059a4:	b004      	add	sp, #16
 80059a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059aa:	6823      	ldr	r3, [r4, #0]
 80059ac:	f043 0320 	orr.w	r3, r3, #32
 80059b0:	6023      	str	r3, [r4, #0]
 80059b2:	4833      	ldr	r0, [pc, #204]	@ (8005a80 <_printf_i+0x23c>)
 80059b4:	2778      	movs	r7, #120	@ 0x78
 80059b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80059ba:	6823      	ldr	r3, [r4, #0]
 80059bc:	6831      	ldr	r1, [r6, #0]
 80059be:	061f      	lsls	r7, r3, #24
 80059c0:	f851 5b04 	ldr.w	r5, [r1], #4
 80059c4:	d402      	bmi.n	80059cc <_printf_i+0x188>
 80059c6:	065f      	lsls	r7, r3, #25
 80059c8:	bf48      	it	mi
 80059ca:	b2ad      	uxthmi	r5, r5
 80059cc:	6031      	str	r1, [r6, #0]
 80059ce:	07d9      	lsls	r1, r3, #31
 80059d0:	bf44      	itt	mi
 80059d2:	f043 0320 	orrmi.w	r3, r3, #32
 80059d6:	6023      	strmi	r3, [r4, #0]
 80059d8:	b11d      	cbz	r5, 80059e2 <_printf_i+0x19e>
 80059da:	2310      	movs	r3, #16
 80059dc:	e7ac      	b.n	8005938 <_printf_i+0xf4>
 80059de:	4827      	ldr	r0, [pc, #156]	@ (8005a7c <_printf_i+0x238>)
 80059e0:	e7e9      	b.n	80059b6 <_printf_i+0x172>
 80059e2:	6823      	ldr	r3, [r4, #0]
 80059e4:	f023 0320 	bic.w	r3, r3, #32
 80059e8:	6023      	str	r3, [r4, #0]
 80059ea:	e7f6      	b.n	80059da <_printf_i+0x196>
 80059ec:	4616      	mov	r6, r2
 80059ee:	e7bd      	b.n	800596c <_printf_i+0x128>
 80059f0:	6833      	ldr	r3, [r6, #0]
 80059f2:	6825      	ldr	r5, [r4, #0]
 80059f4:	6961      	ldr	r1, [r4, #20]
 80059f6:	1d18      	adds	r0, r3, #4
 80059f8:	6030      	str	r0, [r6, #0]
 80059fa:	062e      	lsls	r6, r5, #24
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	d501      	bpl.n	8005a04 <_printf_i+0x1c0>
 8005a00:	6019      	str	r1, [r3, #0]
 8005a02:	e002      	b.n	8005a0a <_printf_i+0x1c6>
 8005a04:	0668      	lsls	r0, r5, #25
 8005a06:	d5fb      	bpl.n	8005a00 <_printf_i+0x1bc>
 8005a08:	8019      	strh	r1, [r3, #0]
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	6123      	str	r3, [r4, #16]
 8005a0e:	4616      	mov	r6, r2
 8005a10:	e7bc      	b.n	800598c <_printf_i+0x148>
 8005a12:	6833      	ldr	r3, [r6, #0]
 8005a14:	1d1a      	adds	r2, r3, #4
 8005a16:	6032      	str	r2, [r6, #0]
 8005a18:	681e      	ldr	r6, [r3, #0]
 8005a1a:	6862      	ldr	r2, [r4, #4]
 8005a1c:	2100      	movs	r1, #0
 8005a1e:	4630      	mov	r0, r6
 8005a20:	f7fa fbde 	bl	80001e0 <memchr>
 8005a24:	b108      	cbz	r0, 8005a2a <_printf_i+0x1e6>
 8005a26:	1b80      	subs	r0, r0, r6
 8005a28:	6060      	str	r0, [r4, #4]
 8005a2a:	6863      	ldr	r3, [r4, #4]
 8005a2c:	6123      	str	r3, [r4, #16]
 8005a2e:	2300      	movs	r3, #0
 8005a30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a34:	e7aa      	b.n	800598c <_printf_i+0x148>
 8005a36:	6923      	ldr	r3, [r4, #16]
 8005a38:	4632      	mov	r2, r6
 8005a3a:	4649      	mov	r1, r9
 8005a3c:	4640      	mov	r0, r8
 8005a3e:	47d0      	blx	sl
 8005a40:	3001      	adds	r0, #1
 8005a42:	d0ad      	beq.n	80059a0 <_printf_i+0x15c>
 8005a44:	6823      	ldr	r3, [r4, #0]
 8005a46:	079b      	lsls	r3, r3, #30
 8005a48:	d413      	bmi.n	8005a72 <_printf_i+0x22e>
 8005a4a:	68e0      	ldr	r0, [r4, #12]
 8005a4c:	9b03      	ldr	r3, [sp, #12]
 8005a4e:	4298      	cmp	r0, r3
 8005a50:	bfb8      	it	lt
 8005a52:	4618      	movlt	r0, r3
 8005a54:	e7a6      	b.n	80059a4 <_printf_i+0x160>
 8005a56:	2301      	movs	r3, #1
 8005a58:	4632      	mov	r2, r6
 8005a5a:	4649      	mov	r1, r9
 8005a5c:	4640      	mov	r0, r8
 8005a5e:	47d0      	blx	sl
 8005a60:	3001      	adds	r0, #1
 8005a62:	d09d      	beq.n	80059a0 <_printf_i+0x15c>
 8005a64:	3501      	adds	r5, #1
 8005a66:	68e3      	ldr	r3, [r4, #12]
 8005a68:	9903      	ldr	r1, [sp, #12]
 8005a6a:	1a5b      	subs	r3, r3, r1
 8005a6c:	42ab      	cmp	r3, r5
 8005a6e:	dcf2      	bgt.n	8005a56 <_printf_i+0x212>
 8005a70:	e7eb      	b.n	8005a4a <_printf_i+0x206>
 8005a72:	2500      	movs	r5, #0
 8005a74:	f104 0619 	add.w	r6, r4, #25
 8005a78:	e7f5      	b.n	8005a66 <_printf_i+0x222>
 8005a7a:	bf00      	nop
 8005a7c:	08005bcd 	.word	0x08005bcd
 8005a80:	08005bde 	.word	0x08005bde

08005a84 <memmove>:
 8005a84:	4288      	cmp	r0, r1
 8005a86:	b510      	push	{r4, lr}
 8005a88:	eb01 0402 	add.w	r4, r1, r2
 8005a8c:	d902      	bls.n	8005a94 <memmove+0x10>
 8005a8e:	4284      	cmp	r4, r0
 8005a90:	4623      	mov	r3, r4
 8005a92:	d807      	bhi.n	8005aa4 <memmove+0x20>
 8005a94:	1e43      	subs	r3, r0, #1
 8005a96:	42a1      	cmp	r1, r4
 8005a98:	d008      	beq.n	8005aac <memmove+0x28>
 8005a9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005aa2:	e7f8      	b.n	8005a96 <memmove+0x12>
 8005aa4:	4402      	add	r2, r0
 8005aa6:	4601      	mov	r1, r0
 8005aa8:	428a      	cmp	r2, r1
 8005aaa:	d100      	bne.n	8005aae <memmove+0x2a>
 8005aac:	bd10      	pop	{r4, pc}
 8005aae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ab2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ab6:	e7f7      	b.n	8005aa8 <memmove+0x24>

08005ab8 <memcpy>:
 8005ab8:	440a      	add	r2, r1
 8005aba:	4291      	cmp	r1, r2
 8005abc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ac0:	d100      	bne.n	8005ac4 <memcpy+0xc>
 8005ac2:	4770      	bx	lr
 8005ac4:	b510      	push	{r4, lr}
 8005ac6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005aca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ace:	4291      	cmp	r1, r2
 8005ad0:	d1f9      	bne.n	8005ac6 <memcpy+0xe>
 8005ad2:	bd10      	pop	{r4, pc}

08005ad4 <_realloc_r>:
 8005ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ad8:	4680      	mov	r8, r0
 8005ada:	4615      	mov	r5, r2
 8005adc:	460c      	mov	r4, r1
 8005ade:	b921      	cbnz	r1, 8005aea <_realloc_r+0x16>
 8005ae0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ae4:	4611      	mov	r1, r2
 8005ae6:	f7ff bb55 	b.w	8005194 <_malloc_r>
 8005aea:	b92a      	cbnz	r2, 8005af8 <_realloc_r+0x24>
 8005aec:	f7ff fc9a 	bl	8005424 <_free_r>
 8005af0:	2400      	movs	r4, #0
 8005af2:	4620      	mov	r0, r4
 8005af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005af8:	f000 f81a 	bl	8005b30 <_malloc_usable_size_r>
 8005afc:	4285      	cmp	r5, r0
 8005afe:	4606      	mov	r6, r0
 8005b00:	d802      	bhi.n	8005b08 <_realloc_r+0x34>
 8005b02:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005b06:	d8f4      	bhi.n	8005af2 <_realloc_r+0x1e>
 8005b08:	4629      	mov	r1, r5
 8005b0a:	4640      	mov	r0, r8
 8005b0c:	f7ff fb42 	bl	8005194 <_malloc_r>
 8005b10:	4607      	mov	r7, r0
 8005b12:	2800      	cmp	r0, #0
 8005b14:	d0ec      	beq.n	8005af0 <_realloc_r+0x1c>
 8005b16:	42b5      	cmp	r5, r6
 8005b18:	462a      	mov	r2, r5
 8005b1a:	4621      	mov	r1, r4
 8005b1c:	bf28      	it	cs
 8005b1e:	4632      	movcs	r2, r6
 8005b20:	f7ff ffca 	bl	8005ab8 <memcpy>
 8005b24:	4621      	mov	r1, r4
 8005b26:	4640      	mov	r0, r8
 8005b28:	f7ff fc7c 	bl	8005424 <_free_r>
 8005b2c:	463c      	mov	r4, r7
 8005b2e:	e7e0      	b.n	8005af2 <_realloc_r+0x1e>

08005b30 <_malloc_usable_size_r>:
 8005b30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b34:	1f18      	subs	r0, r3, #4
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	bfbc      	itt	lt
 8005b3a:	580b      	ldrlt	r3, [r1, r0]
 8005b3c:	18c0      	addlt	r0, r0, r3
 8005b3e:	4770      	bx	lr

08005b40 <_init>:
 8005b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b42:	bf00      	nop
 8005b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b46:	bc08      	pop	{r3}
 8005b48:	469e      	mov	lr, r3
 8005b4a:	4770      	bx	lr

08005b4c <_fini>:
 8005b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b4e:	bf00      	nop
 8005b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b52:	bc08      	pop	{r3}
 8005b54:	469e      	mov	lr, r3
 8005b56:	4770      	bx	lr
