
lab-03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049dc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004b7c  08004b7c  00005b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bf4  08004bf4  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004bf4  08004bf4  00005bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bfc  08004bfc  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bfc  08004bfc  00005bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c00  08004c00  00005c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004c04  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  2000005c  08004c60  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  08004c60  000062f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e64f  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002291  00000000  00000000  000146db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  00016970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a61  00000000  00000000  000176c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000054dc  00000000  00000000  00018121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f66b  00000000  00000000  0001d5fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092676  00000000  00000000  0002cc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bf2de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ec0  00000000  00000000  000bf324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  000c31e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004b64 	.word	0x08004b64

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08004b64 	.word	0x08004b64

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll>:
 *      Author: Max
 */

#include "RCChannel.h"

RCChannel::RCChannel(
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
 800057c:	603b      	str	r3, [r7, #0]
    CPU_clock_speed_MHz(CPU_clock_speed_MHz),
    full_reverse_us_width(full_reverse_us_width),
    neutral_us_width(neutral_us_width),
    full_forward_us_width(full_forward_us_width),
    rescale_forward_magnitude(rescale_forward_magnitude),
	rescale_reverse_magnitude(rescale_reverse_magnitude)
 800057e:	4a37      	ldr	r2, [pc, #220]	@ (800065c <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll+0xec>)
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	2200      	movs	r2, #0
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	2200      	movs	r2, #0
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	2200      	movs	r2, #0
 80005a0:	615a      	str	r2, [r3, #20]
    rescale_forward_magnitude(rescale_forward_magnitude),
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80005a6:	619a      	str	r2, [r3, #24]
	rescale_reverse_magnitude(rescale_reverse_magnitude)
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80005ac:	61da      	str	r2, [r3, #28]
    timer_handle(timer_handle),
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	68ba      	ldr	r2, [r7, #8]
 80005b2:	621a      	str	r2, [r3, #32]
    timer_channel(timer_channel),
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	625a      	str	r2, [r3, #36]	@ 0x24
    RC_signal_period_us(RC_signal_period_us),
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	683a      	ldr	r2, [r7, #0]
 80005be:	629a      	str	r2, [r3, #40]	@ 0x28
    CPU_clock_speed_MHz(CPU_clock_speed_MHz),
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	6a3a      	ldr	r2, [r7, #32]
 80005c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    full_reverse_us_width(full_reverse_us_width),
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80005ca:	631a      	str	r2, [r3, #48]	@ 0x30
    neutral_us_width(neutral_us_width),
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80005d0:	635a      	str	r2, [r3, #52]	@ 0x34
    full_forward_us_width(full_forward_us_width),
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80005d6:	639a      	str	r2, [r3, #56]	@ 0x38
	rescale_reverse_magnitude(rescale_reverse_magnitude)
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	2201      	movs	r2, #1
 80005dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
{
	// Critical. Starts the first interrupt.
	HAL_TIM_IC_Start_IT(timer_handle, timer_channel);
 80005e0:	6879      	ldr	r1, [r7, #4]
 80005e2:	68b8      	ldr	r0, [r7, #8]
 80005e4:	f001 fec8 	bl	8002378 <HAL_TIM_IC_Start_IT>

	// Set minuend depending on whether it's a 16-bit or 32-bit timer.
	// This is specific to the STM32F411CUE6!!
	if(( (timer_handle->Instance) == TIM2 ) or ( (timer_handle->Instance) == TIM5 ))
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80005f0:	d004      	beq.n	80005fc <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll+0x8c>
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a1a      	ldr	r2, [pc, #104]	@ (8000660 <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll+0xf0>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d104      	bne.n	8000606 <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll+0x96>
	{
		minuend = 0xffffffff;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	f04f 32ff 	mov.w	r2, #4294967295
 8000602:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000604:	e003      	b.n	800060e <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll+0x9e>
	}
	else
	{
		minuend = 0xffff;
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800060c:	63da      	str	r2, [r3, #60]	@ 0x3c
	}

	// For later scaling
	uint32_t prescalar = timer_handle->Instance->PSC + 1;
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000614:	3301      	adds	r3, #1
 8000616:	617b      	str	r3, [r7, #20]
	float refClock = CPU_clock_speed_MHz/prescalar;
 8000618:	6a3a      	ldr	r2, [r7, #32]
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000620:	ee07 3a90 	vmov	s15, r3
 8000624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000628:	edc7 7a04 	vstr	s15, [r7, #16]
	mFactor = 1000000/refClock;
 800062c:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8000664 <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll+0xf4>
 8000630:	ed97 7a04 	vldr	s14, [r7, #16]
 8000634:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

	// Needed later
	forward_range = full_forward_us_width - neutral_us_width;
 800063e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000642:	1ad2      	subs	r2, r2, r3
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	64da      	str	r2, [r3, #76]	@ 0x4c
	reverse_range = neutral_us_width - full_reverse_us_width;
 8000648:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800064a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800064c:	1ad2      	subs	r2, r2, r3
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	649a      	str	r2, [r3, #72]	@ 0x48

}
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	4618      	mov	r0, r3
 8000656:	3718      	adds	r7, #24
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	08004ba0 	.word	0x08004ba0
 8000660:	40000c00 	.word	0x40000c00
 8000664:	49742400 	.word	0x49742400

08000668 <_ZN9RCChannel22TIM_IC_CaptureCallbackEv>:


void RCChannel::TIM_IC_CaptureCallback(){
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	if(first_capture)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000676:	2b00      	cmp	r3, #0
 8000678:	d010      	beq.n	800069c <_ZN9RCChannel22TIM_IC_CaptureCallbackEv+0x34>
 	{
 		first_value = HAL_TIM_ReadCapturedValue(timer_handle, timer_channel);
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	6a1a      	ldr	r2, [r3, #32]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000682:	4619      	mov	r1, r3
 8000684:	4610      	mov	r0, r2
 8000686:	f002 f9e5 	bl	8002a54 <HAL_TIM_ReadCapturedValue>
 800068a:	4603      	mov	r3, r0
 800068c:	461a      	mov	r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	605a      	str	r2, [r3, #4]
 		first_capture = false;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	2200      	movs	r2, #0
 8000696:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 		// Make sure it never exceeds the magnitude.

 	// Finally
 	first_capture = true;
 	}
}
 800069a:	e07f      	b.n	800079c <_ZN9RCChannel22TIM_IC_CaptureCallbackEv+0x134>
 		second_value = HAL_TIM_ReadCapturedValue(timer_handle, timer_channel);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	6a1a      	ldr	r2, [r3, #32]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006a4:	4619      	mov	r1, r3
 80006a6:	4610      	mov	r0, r2
 80006a8:	f002 f9d4 	bl	8002a54 <HAL_TIM_ReadCapturedValue>
 80006ac:	4603      	mov	r3, r0
 80006ae:	461a      	mov	r2, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 		if(first_value > second_value)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	685a      	ldr	r2, [r3, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	689b      	ldr	r3, [r3, #8]
 80006bc:	429a      	cmp	r2, r3
 80006be:	dd0b      	ble.n	80006d8 <_ZN9RCChannel22TIM_IC_CaptureCallbackEv+0x70>
 			difference = minuend - first_value + second_value;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	6852      	ldr	r2, [r2, #4]
 80006c8:	1a9b      	subs	r3, r3, r2
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	6892      	ldr	r2, [r2, #8]
 80006ce:	4413      	add	r3, r2
 80006d0:	461a      	mov	r2, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	e006      	b.n	80006e6 <_ZN9RCChannel22TIM_IC_CaptureCallbackEv+0x7e>
 			difference = second_value - first_value;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	689a      	ldr	r2, [r3, #8]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	1ad2      	subs	r2, r2, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	60da      	str	r2, [r3, #12]
 		us_width = difference*mFactor;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	68db      	ldr	r3, [r3, #12]
 80006ea:	ee07 3a90 	vmov	s15, r3
 80006ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80006f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000700:	ee17 2a90 	vmov	r2, s15
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	611a      	str	r2, [r3, #16]
		if(us_width > RC_signal_period_us/2)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	691a      	ldr	r2, [r3, #16]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000710:	0fd9      	lsrs	r1, r3, #31
 8000712:	440b      	add	r3, r1
 8000714:	105b      	asrs	r3, r3, #1
 8000716:	429a      	cmp	r2, r3
 8000718:	dd06      	ble.n	8000728 <_ZN9RCChannel22TIM_IC_CaptureCallbackEv+0xc0>
			us_width = RC_signal_period_us - us_width;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	691b      	ldr	r3, [r3, #16]
 8000722:	1ad2      	subs	r2, r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	611a      	str	r2, [r3, #16]
		int32_t centered_value = us_width - neutral_us_width;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	691a      	ldr	r2, [r3, #16]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	60fb      	str	r3, [r7, #12]
 		if(centered_value >= 0)
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	2b00      	cmp	r3, #0
 8000738:	db15      	blt.n	8000766 <_ZN9RCChannel22TIM_IC_CaptureCallbackEv+0xfe>
 			value = centered_value*rescale_forward_magnitude/forward_range;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	68fa      	ldr	r2, [r7, #12]
 8000740:	fb03 f202 	mul.w	r2, r3, r2
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000748:	fb92 f2f3 	sdiv	r2, r2, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	615a      	str	r2, [r3, #20]
 	 		if(value>rescale_forward_magnitude)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	695a      	ldr	r2, [r3, #20]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	429a      	cmp	r2, r3
 800075a:	dd1b      	ble.n	8000794 <_ZN9RCChannel22TIM_IC_CaptureCallbackEv+0x12c>
 	 			value = rescale_forward_magnitude;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	699a      	ldr	r2, [r3, #24]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	615a      	str	r2, [r3, #20]
 8000764:	e016      	b.n	8000794 <_ZN9RCChannel22TIM_IC_CaptureCallbackEv+0x12c>
			value =  centered_value*rescale_reverse_magnitude/reverse_range;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	68fa      	ldr	r2, [r7, #12]
 800076c:	fb03 f202 	mul.w	r2, r3, r2
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000774:	fb92 f2f3 	sdiv	r2, r2, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	615a      	str	r2, [r3, #20]
	 		if(value<-rescale_reverse_magnitude)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	695a      	ldr	r2, [r3, #20]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	69db      	ldr	r3, [r3, #28]
 8000784:	425b      	negs	r3, r3
 8000786:	429a      	cmp	r2, r3
 8000788:	da04      	bge.n	8000794 <_ZN9RCChannel22TIM_IC_CaptureCallbackEv+0x12c>
	 			value = -rescale_reverse_magnitude;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	69db      	ldr	r3, [r3, #28]
 800078e:	425a      	negs	r2, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	615a      	str	r2, [r3, #20]
 	first_capture = true;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2201      	movs	r2, #1
 8000798:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
}
 800079c:	bf00      	nop
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <_ZN9RCChannelD1Ev>:

RCChannel::~RCChannel() {
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	4a04      	ldr	r2, [pc, #16]	@ (80007c0 <_ZN9RCChannelD1Ev+0x1c>)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4618      	mov	r0, r3
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	08004ba0 	.word	0x08004ba0

080007c4 <_ZN9RCChannelD0Ev>:
RCChannel::~RCChannel() {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
}
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f7ff ffe9 	bl	80007a4 <_ZN9RCChannelD1Ev>
 80007d2:	2150      	movs	r1, #80	@ 0x50
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f003 fc97 	bl	8004108 <_ZdlPvj>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4618      	mov	r0, r3
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <HAL_TIM_IC_CaptureCallback>:
RCChannel* ThrottleChannel;
RCChannel* SteeringChannel;


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]

	if((htim->Instance = TIM1))
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4a11      	ldr	r2, [pc, #68]	@ (8000834 <HAL_TIM_IC_CaptureCallback+0x50>)
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	bf14      	ite	ne
 80007fa:	2301      	movne	r3, #1
 80007fc:	2300      	moveq	r3, #0
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	2b00      	cmp	r3, #0
 8000802:	d012      	beq.n	800082a <HAL_TIM_IC_CaptureCallback+0x46>
	{
		switch (htim->Channel)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	7f1b      	ldrb	r3, [r3, #28]
 8000808:	2b01      	cmp	r3, #1
 800080a:	d002      	beq.n	8000812 <HAL_TIM_IC_CaptureCallback+0x2e>
 800080c:	2b02      	cmp	r3, #2
 800080e:	d006      	beq.n	800081e <HAL_TIM_IC_CaptureCallback+0x3a>
		        // Handle channel
		    	ThrottleChannel->TIM_IC_CaptureCallback();

		        break;
		    default:
		        break;
 8000810:	e00b      	b.n	800082a <HAL_TIM_IC_CaptureCallback+0x46>
		    	SteeringChannel->TIM_IC_CaptureCallback();
 8000812:	4b09      	ldr	r3, [pc, #36]	@ (8000838 <HAL_TIM_IC_CaptureCallback+0x54>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff ff26 	bl	8000668 <_ZN9RCChannel22TIM_IC_CaptureCallbackEv>
		        break;
 800081c:	e005      	b.n	800082a <HAL_TIM_IC_CaptureCallback+0x46>
		    	ThrottleChannel->TIM_IC_CaptureCallback();
 800081e:	4b07      	ldr	r3, [pc, #28]	@ (800083c <HAL_TIM_IC_CaptureCallback+0x58>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff ff20 	bl	8000668 <_ZN9RCChannel22TIM_IC_CaptureCallbackEv>
		        break;
 8000828:	bf00      	nop
		}
	}
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40010000 	.word	0x40010000
 8000838:	2000019c 	.word	0x2000019c
 800083c:	20000198 	.word	0x20000198

08000840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000840:	b590      	push	{r4, r7, lr}
 8000842:	b095      	sub	sp, #84	@ 0x54
 8000844:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000846:	f000 fcc9 	bl	80011dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084a:	f000 f873 	bl	8000934 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084e:	f000 fa11 	bl	8000c74 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000852:	f000 f9e1 	bl	8000c18 <_ZL19MX_USART2_UART_Initv>
  MX_TIM1_Init();
 8000856:	f000 f8df 	bl	8000a18 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 800085a:	f000 f953 	bl	8000b04 <_ZL12MX_TIM3_Initv>
  MX_USART1_UART_Init();
 800085e:	f000 f9ad 	bl	8000bbc <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
  char my_message[MESSAGE_LENGTH] = "";
 8000862:	2300      	movs	r3, #0
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	222e      	movs	r2, #46	@ 0x2e
 800086a:	2100      	movs	r1, #0
 800086c:	4618      	mov	r0, r3
 800086e:	f003 fd63 	bl	8004338 <memset>
		  		  1040,  // Calibrated full reverse
		  		  1507,  // Calibrated neutral
		  		  1998,  // Calibrated full speed
		  		  100,   // New max positive
				  100    // New max negative (magnitude)
		  	  	  );
 8000872:	2050      	movs	r0, #80	@ 0x50
 8000874:	f003 fc4a 	bl	800410c <_Znwj>
 8000878:	4603      	mov	r3, r0
 800087a:	461c      	mov	r4, r3
 800087c:	2364      	movs	r3, #100	@ 0x64
 800087e:	9305      	str	r3, [sp, #20]
 8000880:	2364      	movs	r3, #100	@ 0x64
 8000882:	9304      	str	r3, [sp, #16]
 8000884:	f240 73ce 	movw	r3, #1998	@ 0x7ce
 8000888:	9303      	str	r3, [sp, #12]
 800088a:	f240 53e3 	movw	r3, #1507	@ 0x5e3
 800088e:	9302      	str	r3, [sp, #8]
 8000890:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8000894:	9301      	str	r3, [sp, #4]
 8000896:	4b21      	ldr	r3, [pc, #132]	@ (800091c <main+0xdc>)
 8000898:	9300      	str	r3, [sp, #0]
 800089a:	f244 435c 	movw	r3, #17500	@ 0x445c
 800089e:	2204      	movs	r2, #4
 80008a0:	491f      	ldr	r1, [pc, #124]	@ (8000920 <main+0xe0>)
 80008a2:	4620      	mov	r0, r4
 80008a4:	f7ff fe64 	bl	8000570 <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll>
  ThrottleChannel = new RCChannel
 80008a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000924 <main+0xe4>)
 80008aa:	601c      	str	r4, [r3, #0]
  		  992,       // Calibrated full left
  		  1515,      // Calibrated neutral
  		  2017,      // Calibrated full right
  		  100,       // New max positive
		  100        // New max negative (magnitude)
		  );
 80008ac:	2050      	movs	r0, #80	@ 0x50
 80008ae:	f003 fc2d 	bl	800410c <_Znwj>
 80008b2:	4603      	mov	r3, r0
 80008b4:	461c      	mov	r4, r3
 80008b6:	2364      	movs	r3, #100	@ 0x64
 80008b8:	9305      	str	r3, [sp, #20]
 80008ba:	2364      	movs	r3, #100	@ 0x64
 80008bc:	9304      	str	r3, [sp, #16]
 80008be:	f240 73e1 	movw	r3, #2017	@ 0x7e1
 80008c2:	9303      	str	r3, [sp, #12]
 80008c4:	f240 53eb 	movw	r3, #1515	@ 0x5eb
 80008c8:	9302      	str	r3, [sp, #8]
 80008ca:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 80008ce:	9301      	str	r3, [sp, #4]
 80008d0:	4b12      	ldr	r3, [pc, #72]	@ (800091c <main+0xdc>)
 80008d2:	9300      	str	r3, [sp, #0]
 80008d4:	f244 435c 	movw	r3, #17500	@ 0x445c
 80008d8:	2200      	movs	r2, #0
 80008da:	4911      	ldr	r1, [pc, #68]	@ (8000920 <main+0xe0>)
 80008dc:	4620      	mov	r0, r4
 80008de:	f7ff fe47 	bl	8000570 <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll>
  SteeringChannel = new RCChannel
 80008e2:	4b11      	ldr	r3, [pc, #68]	@ (8000928 <main+0xe8>)
 80008e4:	601c      	str	r4, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  string_length = snprintf(my_message, MESSAGE_LENGTH, "CH1: %*li%%, CH2: %*li%%.\r\n",
 80008e6:	4b10      	ldr	r3, [pc, #64]	@ (8000928 <main+0xe8>)
 80008e8:	681b      	ldr	r3, [r3, #0]
	                             VALUE_WIDTH, (long signed int)SteeringChannel->value,
 80008ea:	695b      	ldr	r3, [r3, #20]
	  string_length = snprintf(my_message, MESSAGE_LENGTH, "CH1: %*li%%, CH2: %*li%%.\r\n",
 80008ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000924 <main+0xe4>)
 80008ee:	6812      	ldr	r2, [r2, #0]
	                             VALUE_WIDTH, (long signed int)ThrottleChannel->value);
 80008f0:	6952      	ldr	r2, [r2, #20]
	  string_length = snprintf(my_message, MESSAGE_LENGTH, "CH1: %*li%%, CH2: %*li%%.\r\n",
 80008f2:	4638      	mov	r0, r7
 80008f4:	9202      	str	r2, [sp, #8]
 80008f6:	2205      	movs	r2, #5
 80008f8:	9201      	str	r2, [sp, #4]
 80008fa:	9300      	str	r3, [sp, #0]
 80008fc:	2305      	movs	r3, #5
 80008fe:	4a0b      	ldr	r2, [pc, #44]	@ (800092c <main+0xec>)
 8000900:	2132      	movs	r1, #50	@ 0x32
 8000902:	f003 fce5 	bl	80042d0 <sniprintf>
 8000906:	6378      	str	r0, [r7, #52]	@ 0x34
	  HAL_UART_Transmit(&huart2, (uint8_t*)my_message, string_length, HAL_MAX_DELAY);
 8000908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800090a:	b29a      	uxth	r2, r3
 800090c:	4639      	mov	r1, r7
 800090e:	f04f 33ff 	mov.w	r3, #4294967295
 8000912:	4807      	ldr	r0, [pc, #28]	@ (8000930 <main+0xf0>)
 8000914:	f002 fc46 	bl	80031a4 <HAL_UART_Transmit>
	  string_length = snprintf(my_message, MESSAGE_LENGTH, "CH1: %*li%%, CH2: %*li%%.\r\n",
 8000918:	bf00      	nop
 800091a:	e7e4      	b.n	80008e6 <main+0xa6>
 800091c:	05b8d800 	.word	0x05b8d800
 8000920:	20000078 	.word	0x20000078
 8000924:	20000198 	.word	0x20000198
 8000928:	2000019c 	.word	0x2000019c
 800092c:	08004b7c 	.word	0x08004b7c
 8000930:	20000150 	.word	0x20000150

08000934 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b094      	sub	sp, #80	@ 0x50
 8000938:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093a:	f107 0320 	add.w	r3, r7, #32
 800093e:	2230      	movs	r2, #48	@ 0x30
 8000940:	2100      	movs	r1, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f003 fcf8 	bl	8004338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000958:	2300      	movs	r3, #0
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	4b2c      	ldr	r3, [pc, #176]	@ (8000a10 <_Z18SystemClock_Configv+0xdc>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000960:	4a2b      	ldr	r2, [pc, #172]	@ (8000a10 <_Z18SystemClock_Configv+0xdc>)
 8000962:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000966:	6413      	str	r3, [r2, #64]	@ 0x40
 8000968:	4b29      	ldr	r3, [pc, #164]	@ (8000a10 <_Z18SystemClock_Configv+0xdc>)
 800096a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000974:	2300      	movs	r3, #0
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	4b26      	ldr	r3, [pc, #152]	@ (8000a14 <_Z18SystemClock_Configv+0xe0>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a25      	ldr	r2, [pc, #148]	@ (8000a14 <_Z18SystemClock_Configv+0xe0>)
 800097e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000982:	6013      	str	r3, [r2, #0]
 8000984:	4b23      	ldr	r3, [pc, #140]	@ (8000a14 <_Z18SystemClock_Configv+0xe0>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000990:	2301      	movs	r3, #1
 8000992:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000994:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000998:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099a:	2302      	movs	r3, #2
 800099c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800099e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80009a4:	2319      	movs	r3, #25
 80009a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80009a8:	23c0      	movs	r3, #192	@ 0xc0
 80009aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009ac:	2302      	movs	r3, #2
 80009ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009b0:	2304      	movs	r3, #4
 80009b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b4:	f107 0320 	add.w	r3, r7, #32
 80009b8:	4618      	mov	r0, r3
 80009ba:	f000 ffe7 	bl	800198c <HAL_RCC_OscConfig>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	bf14      	ite	ne
 80009c4:	2301      	movne	r3, #1
 80009c6:	2300      	moveq	r3, #0
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80009ce:	f000 f9c9 	bl	8000d64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d2:	230f      	movs	r3, #15
 80009d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d6:	2302      	movs	r3, #2
 80009d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009e8:	f107 030c 	add.w	r3, r7, #12
 80009ec:	2103      	movs	r1, #3
 80009ee:	4618      	mov	r0, r3
 80009f0:	f001 fa44 	bl	8001e7c <HAL_RCC_ClockConfig>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	bf14      	ite	ne
 80009fa:	2301      	movne	r3, #1
 80009fc:	2300      	moveq	r3, #0
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8000a04:	f000 f9ae 	bl	8000d64 <Error_Handler>
  }
}
 8000a08:	bf00      	nop
 8000a0a:	3750      	adds	r7, #80	@ 0x50
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40007000 	.word	0x40007000

08000a18 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a1e:	f107 0310 	add.w	r3, r7, #16
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a28:	463b      	mov	r3, r7
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a34:	4b31      	ldr	r3, [pc, #196]	@ (8000afc <_ZL12MX_TIM1_Initv+0xe4>)
 8000a36:	4a32      	ldr	r2, [pc, #200]	@ (8000b00 <_ZL12MX_TIM1_Initv+0xe8>)
 8000a38:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 8000a3a:	4b30      	ldr	r3, [pc, #192]	@ (8000afc <_ZL12MX_TIM1_Initv+0xe4>)
 8000a3c:	225f      	movs	r2, #95	@ 0x5f
 8000a3e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a40:	4b2e      	ldr	r3, [pc, #184]	@ (8000afc <_ZL12MX_TIM1_Initv+0xe4>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a46:	4b2d      	ldr	r3, [pc, #180]	@ (8000afc <_ZL12MX_TIM1_Initv+0xe4>)
 8000a48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a4c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a4e:	4b2b      	ldr	r3, [pc, #172]	@ (8000afc <_ZL12MX_TIM1_Initv+0xe4>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a54:	4b29      	ldr	r3, [pc, #164]	@ (8000afc <_ZL12MX_TIM1_Initv+0xe4>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a5a:	4b28      	ldr	r3, [pc, #160]	@ (8000afc <_ZL12MX_TIM1_Initv+0xe4>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000a60:	4826      	ldr	r0, [pc, #152]	@ (8000afc <_ZL12MX_TIM1_Initv+0xe4>)
 8000a62:	f001 fc3a 	bl	80022da <HAL_TIM_IC_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	bf14      	ite	ne
 8000a6c:	2301      	movne	r3, #1
 8000a6e:	2300      	moveq	r3, #0
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <_ZL12MX_TIM1_Initv+0x62>
  {
    Error_Handler();
 8000a76:	f000 f975 	bl	8000d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a82:	f107 0310 	add.w	r3, r7, #16
 8000a86:	4619      	mov	r1, r3
 8000a88:	481c      	ldr	r0, [pc, #112]	@ (8000afc <_ZL12MX_TIM1_Initv+0xe4>)
 8000a8a:	f002 fab9 	bl	8003000 <HAL_TIMEx_MasterConfigSynchronization>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	bf14      	ite	ne
 8000a94:	2301      	movne	r3, #1
 8000a96:	2300      	moveq	r3, #0
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <_ZL12MX_TIM1_Initv+0x8a>
  {
    Error_Handler();
 8000a9e:	f000 f961 	bl	8000d64 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000aa2:	230a      	movs	r3, #10
 8000aa4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4810      	ldr	r0, [pc, #64]	@ (8000afc <_ZL12MX_TIM1_Initv+0xe4>)
 8000aba:	f001 fe67 	bl	800278c <HAL_TIM_IC_ConfigChannel>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	bf14      	ite	ne
 8000ac4:	2301      	movne	r3, #1
 8000ac6:	2300      	moveq	r3, #0
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <_ZL12MX_TIM1_Initv+0xba>
  {
    Error_Handler();
 8000ace:	f000 f949 	bl	8000d64 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000ad2:	463b      	mov	r3, r7
 8000ad4:	2204      	movs	r2, #4
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4808      	ldr	r0, [pc, #32]	@ (8000afc <_ZL12MX_TIM1_Initv+0xe4>)
 8000ada:	f001 fe57 	bl	800278c <HAL_TIM_IC_ConfigChannel>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	bf14      	ite	ne
 8000ae4:	2301      	movne	r3, #1
 8000ae6:	2300      	moveq	r3, #0
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <_ZL12MX_TIM1_Initv+0xda>
  {
    Error_Handler();
 8000aee:	f000 f939 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000078 	.word	0x20000078
 8000b00:	40010000 	.word	0x40010000

08000b04 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b0a:	f107 0308 	add.w	r3, r7, #8
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b18:	463b      	mov	r3, r7
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b20:	4b24      	ldr	r3, [pc, #144]	@ (8000bb4 <_ZL12MX_TIM3_Initv+0xb0>)
 8000b22:	4a25      	ldr	r2, [pc, #148]	@ (8000bb8 <_ZL12MX_TIM3_Initv+0xb4>)
 8000b24:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b26:	4b23      	ldr	r3, [pc, #140]	@ (8000bb4 <_ZL12MX_TIM3_Initv+0xb0>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2c:	4b21      	ldr	r3, [pc, #132]	@ (8000bb4 <_ZL12MX_TIM3_Initv+0xb0>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4799;
 8000b32:	4b20      	ldr	r3, [pc, #128]	@ (8000bb4 <_ZL12MX_TIM3_Initv+0xb0>)
 8000b34:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 8000b38:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb4 <_ZL12MX_TIM3_Initv+0xb0>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b40:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb4 <_ZL12MX_TIM3_Initv+0xb0>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b46:	481b      	ldr	r0, [pc, #108]	@ (8000bb4 <_ZL12MX_TIM3_Initv+0xb0>)
 8000b48:	f001 fb78 	bl	800223c <HAL_TIM_Base_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	bf14      	ite	ne
 8000b52:	2301      	movne	r3, #1
 8000b54:	2300      	moveq	r3, #0
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <_ZL12MX_TIM3_Initv+0x5c>
  {
    Error_Handler();
 8000b5c:	f000 f902 	bl	8000d64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b66:	f107 0308 	add.w	r3, r7, #8
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4811      	ldr	r0, [pc, #68]	@ (8000bb4 <_ZL12MX_TIM3_Initv+0xb0>)
 8000b6e:	f001 fea9 	bl	80028c4 <HAL_TIM_ConfigClockSource>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	bf14      	ite	ne
 8000b78:	2301      	movne	r3, #1
 8000b7a:	2300      	moveq	r3, #0
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <_ZL12MX_TIM3_Initv+0x82>
  {
    Error_Handler();
 8000b82:	f000 f8ef 	bl	8000d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b86:	2300      	movs	r3, #0
 8000b88:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b8e:	463b      	mov	r3, r7
 8000b90:	4619      	mov	r1, r3
 8000b92:	4808      	ldr	r0, [pc, #32]	@ (8000bb4 <_ZL12MX_TIM3_Initv+0xb0>)
 8000b94:	f002 fa34 	bl	8003000 <HAL_TIMEx_MasterConfigSynchronization>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	bf14      	ite	ne
 8000b9e:	2301      	movne	r3, #1
 8000ba0:	2300      	moveq	r3, #0
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <_ZL12MX_TIM3_Initv+0xa8>
  {
    Error_Handler();
 8000ba8:	f000 f8dc 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000bac:	bf00      	nop
 8000bae:	3718      	adds	r7, #24
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	200000c0 	.word	0x200000c0
 8000bb8:	40000400 	.word	0x40000400

08000bbc <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bc0:	4b13      	ldr	r3, [pc, #76]	@ (8000c10 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000bc2:	4a14      	ldr	r2, [pc, #80]	@ (8000c14 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000bc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bc6:	4b12      	ldr	r3, [pc, #72]	@ (8000c10 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000bc8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bcc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bce:	4b10      	ldr	r3, [pc, #64]	@ (8000c10 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bd4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c10 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bda:	4b0d      	ldr	r3, [pc, #52]	@ (8000c10 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000be0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c10 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000be2:	220c      	movs	r2, #12
 8000be4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c10 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bec:	4b08      	ldr	r3, [pc, #32]	@ (8000c10 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bf2:	4807      	ldr	r0, [pc, #28]	@ (8000c10 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000bf4:	f002 fa86 	bl	8003104 <HAL_UART_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	bf14      	ite	ne
 8000bfe:	2301      	movne	r3, #1
 8000c00:	2300      	moveq	r3, #0
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8000c08:	f000 f8ac 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000108 	.word	0x20000108
 8000c14:	40011000 	.word	0x40011000

08000c18 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c1c:	4b13      	ldr	r3, [pc, #76]	@ (8000c6c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000c1e:	4a14      	ldr	r2, [pc, #80]	@ (8000c70 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000c20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c22:	4b12      	ldr	r3, [pc, #72]	@ (8000c6c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000c24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c2a:	4b10      	ldr	r3, [pc, #64]	@ (8000c6c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c30:	4b0e      	ldr	r3, [pc, #56]	@ (8000c6c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c36:	4b0d      	ldr	r3, [pc, #52]	@ (8000c6c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c6c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000c3e:	220c      	movs	r2, #12
 8000c40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c42:	4b0a      	ldr	r3, [pc, #40]	@ (8000c6c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c48:	4b08      	ldr	r3, [pc, #32]	@ (8000c6c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c4e:	4807      	ldr	r0, [pc, #28]	@ (8000c6c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000c50:	f002 fa58 	bl	8003104 <HAL_UART_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	bf14      	ite	ne
 8000c5a:	2301      	movne	r3, #1
 8000c5c:	2300      	moveq	r3, #0
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000c64:	f000 f87e 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000150 	.word	0x20000150
 8000c70:	40004400 	.word	0x40004400

08000c74 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	@ 0x28
 8000c78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
 8000c88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	4b32      	ldr	r3, [pc, #200]	@ (8000d58 <_ZL12MX_GPIO_Initv+0xe4>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	4a31      	ldr	r2, [pc, #196]	@ (8000d58 <_ZL12MX_GPIO_Initv+0xe4>)
 8000c94:	f043 0304 	orr.w	r3, r3, #4
 8000c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9a:	4b2f      	ldr	r3, [pc, #188]	@ (8000d58 <_ZL12MX_GPIO_Initv+0xe4>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	f003 0304 	and.w	r3, r3, #4
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	4b2b      	ldr	r3, [pc, #172]	@ (8000d58 <_ZL12MX_GPIO_Initv+0xe4>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cae:	4a2a      	ldr	r2, [pc, #168]	@ (8000d58 <_ZL12MX_GPIO_Initv+0xe4>)
 8000cb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb6:	4b28      	ldr	r3, [pc, #160]	@ (8000d58 <_ZL12MX_GPIO_Initv+0xe4>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	4b24      	ldr	r3, [pc, #144]	@ (8000d58 <_ZL12MX_GPIO_Initv+0xe4>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	4a23      	ldr	r2, [pc, #140]	@ (8000d58 <_ZL12MX_GPIO_Initv+0xe4>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd2:	4b21      	ldr	r3, [pc, #132]	@ (8000d58 <_ZL12MX_GPIO_Initv+0xe4>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d58 <_ZL12MX_GPIO_Initv+0xe4>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	4a1c      	ldr	r2, [pc, #112]	@ (8000d58 <_ZL12MX_GPIO_Initv+0xe4>)
 8000ce8:	f043 0302 	orr.w	r3, r3, #2
 8000cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cee:	4b1a      	ldr	r3, [pc, #104]	@ (8000d58 <_ZL12MX_GPIO_Initv+0xe4>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d00:	4816      	ldr	r0, [pc, #88]	@ (8000d5c <_ZL12MX_GPIO_Initv+0xe8>)
 8000d02:	f000 fe05 	bl	8001910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d06:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d14:	2300      	movs	r3, #0
 8000d16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	480f      	ldr	r0, [pc, #60]	@ (8000d5c <_ZL12MX_GPIO_Initv+0xe8>)
 8000d20:	f000 fc72 	bl	8001608 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d24:	2301      	movs	r3, #1
 8000d26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d28:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4619      	mov	r1, r3
 8000d38:	4809      	ldr	r0, [pc, #36]	@ (8000d60 <_ZL12MX_GPIO_Initv+0xec>)
 8000d3a:	f000 fc65 	bl	8001608 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2100      	movs	r1, #0
 8000d42:	2006      	movs	r0, #6
 8000d44:	f000 fb97 	bl	8001476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000d48:	2006      	movs	r0, #6
 8000d4a:	f000 fbb0 	bl	80014ae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d4e:	bf00      	nop
 8000d50:	3728      	adds	r7, #40	@ 0x28
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40020800 	.word	0x40020800
 8000d60:	40020000 	.word	0x40020000

08000d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d68:	b672      	cpsid	i
}
 8000d6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <Error_Handler+0x8>

08000d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	4b10      	ldr	r3, [pc, #64]	@ (8000dbc <HAL_MspInit+0x4c>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d7e:	4a0f      	ldr	r2, [pc, #60]	@ (8000dbc <HAL_MspInit+0x4c>)
 8000d80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d86:	4b0d      	ldr	r3, [pc, #52]	@ (8000dbc <HAL_MspInit+0x4c>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	603b      	str	r3, [r7, #0]
 8000d96:	4b09      	ldr	r3, [pc, #36]	@ (8000dbc <HAL_MspInit+0x4c>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9a:	4a08      	ldr	r2, [pc, #32]	@ (8000dbc <HAL_MspInit+0x4c>)
 8000d9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000da0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000da2:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <HAL_MspInit+0x4c>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000daa:	603b      	str	r3, [r7, #0]
 8000dac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	40023800 	.word	0x40023800

08000dc0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	@ 0x28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a29      	ldr	r2, [pc, #164]	@ (8000e84 <HAL_TIM_IC_MspInit+0xc4>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d14c      	bne.n	8000e7c <HAL_TIM_IC_MspInit+0xbc>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	4b28      	ldr	r3, [pc, #160]	@ (8000e88 <HAL_TIM_IC_MspInit+0xc8>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dea:	4a27      	ldr	r2, [pc, #156]	@ (8000e88 <HAL_TIM_IC_MspInit+0xc8>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000df2:	4b25      	ldr	r3, [pc, #148]	@ (8000e88 <HAL_TIM_IC_MspInit+0xc8>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	4b21      	ldr	r3, [pc, #132]	@ (8000e88 <HAL_TIM_IC_MspInit+0xc8>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	4a20      	ldr	r2, [pc, #128]	@ (8000e88 <HAL_TIM_IC_MspInit+0xc8>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000e88 <HAL_TIM_IC_MspInit+0xc8>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 8000e1a:	f44f 6330 	mov.w	r3, #2816	@ 0xb00
 8000e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	4619      	mov	r1, r3
 8000e36:	4815      	ldr	r0, [pc, #84]	@ (8000e8c <HAL_TIM_IC_MspInit+0xcc>)
 8000e38:	f000 fbe6 	bl	8001608 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2100      	movs	r1, #0
 8000e40:	2018      	movs	r0, #24
 8000e42:	f000 fb18 	bl	8001476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000e46:	2018      	movs	r0, #24
 8000e48:	f000 fb31 	bl	80014ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2019      	movs	r0, #25
 8000e52:	f000 fb10 	bl	8001476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e56:	2019      	movs	r0, #25
 8000e58:	f000 fb29 	bl	80014ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2100      	movs	r1, #0
 8000e60:	201a      	movs	r0, #26
 8000e62:	f000 fb08 	bl	8001476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000e66:	201a      	movs	r0, #26
 8000e68:	f000 fb21 	bl	80014ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2100      	movs	r1, #0
 8000e70:	201b      	movs	r0, #27
 8000e72:	f000 fb00 	bl	8001476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000e76:	201b      	movs	r0, #27
 8000e78:	f000 fb19 	bl	80014ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e7c:	bf00      	nop
 8000e7e:	3728      	adds	r7, #40	@ 0x28
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40010000 	.word	0x40010000
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40020000 	.word	0x40020000

08000e90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0b      	ldr	r2, [pc, #44]	@ (8000ecc <HAL_TIM_Base_MspInit+0x3c>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d10d      	bne.n	8000ebe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed0 <HAL_TIM_Base_MspInit+0x40>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eaa:	4a09      	ldr	r2, [pc, #36]	@ (8000ed0 <HAL_TIM_Base_MspInit+0x40>)
 8000eac:	f043 0302 	orr.w	r3, r3, #2
 8000eb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eb2:	4b07      	ldr	r3, [pc, #28]	@ (8000ed0 <HAL_TIM_Base_MspInit+0x40>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ebe:	bf00      	nop
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	40000400 	.word	0x40000400
 8000ed0:	40023800 	.word	0x40023800

08000ed4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08c      	sub	sp, #48	@ 0x30
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 031c 	add.w	r3, r7, #28
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a36      	ldr	r2, [pc, #216]	@ (8000fcc <HAL_UART_MspInit+0xf8>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d12c      	bne.n	8000f50 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61bb      	str	r3, [r7, #24]
 8000efa:	4b35      	ldr	r3, [pc, #212]	@ (8000fd0 <HAL_UART_MspInit+0xfc>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000efe:	4a34      	ldr	r2, [pc, #208]	@ (8000fd0 <HAL_UART_MspInit+0xfc>)
 8000f00:	f043 0310 	orr.w	r3, r3, #16
 8000f04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f06:	4b32      	ldr	r3, [pc, #200]	@ (8000fd0 <HAL_UART_MspInit+0xfc>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0a:	f003 0310 	and.w	r3, r3, #16
 8000f0e:	61bb      	str	r3, [r7, #24]
 8000f10:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	4b2e      	ldr	r3, [pc, #184]	@ (8000fd0 <HAL_UART_MspInit+0xfc>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	4a2d      	ldr	r2, [pc, #180]	@ (8000fd0 <HAL_UART_MspInit+0xfc>)
 8000f1c:	f043 0302 	orr.w	r3, r3, #2
 8000f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f22:	4b2b      	ldr	r3, [pc, #172]	@ (8000fd0 <HAL_UART_MspInit+0xfc>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f2e:	23c0      	movs	r3, #192	@ 0xc0
 8000f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f3e:	2307      	movs	r3, #7
 8000f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f42:	f107 031c 	add.w	r3, r7, #28
 8000f46:	4619      	mov	r1, r3
 8000f48:	4822      	ldr	r0, [pc, #136]	@ (8000fd4 <HAL_UART_MspInit+0x100>)
 8000f4a:	f000 fb5d 	bl	8001608 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f4e:	e038      	b.n	8000fc2 <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART2)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a20      	ldr	r2, [pc, #128]	@ (8000fd8 <HAL_UART_MspInit+0x104>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d133      	bne.n	8000fc2 <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <HAL_UART_MspInit+0xfc>)
 8000f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f62:	4a1b      	ldr	r2, [pc, #108]	@ (8000fd0 <HAL_UART_MspInit+0xfc>)
 8000f64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f6a:	4b19      	ldr	r3, [pc, #100]	@ (8000fd0 <HAL_UART_MspInit+0xfc>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	4b15      	ldr	r3, [pc, #84]	@ (8000fd0 <HAL_UART_MspInit+0xfc>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	4a14      	ldr	r2, [pc, #80]	@ (8000fd0 <HAL_UART_MspInit+0xfc>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f86:	4b12      	ldr	r3, [pc, #72]	@ (8000fd0 <HAL_UART_MspInit+0xfc>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f92:	230c      	movs	r3, #12
 8000f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	2302      	movs	r3, #2
 8000f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fa2:	2307      	movs	r3, #7
 8000fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa6:	f107 031c 	add.w	r3, r7, #28
 8000faa:	4619      	mov	r1, r3
 8000fac:	480b      	ldr	r0, [pc, #44]	@ (8000fdc <HAL_UART_MspInit+0x108>)
 8000fae:	f000 fb2b 	bl	8001608 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2026      	movs	r0, #38	@ 0x26
 8000fb8:	f000 fa5d 	bl	8001476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fbc:	2026      	movs	r0, #38	@ 0x26
 8000fbe:	f000 fa76 	bl	80014ae <HAL_NVIC_EnableIRQ>
}
 8000fc2:	bf00      	nop
 8000fc4:	3730      	adds	r7, #48	@ 0x30
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40011000 	.word	0x40011000
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40020400 	.word	0x40020400
 8000fd8:	40004400 	.word	0x40004400
 8000fdc:	40020000 	.word	0x40020000

08000fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <NMI_Handler+0x4>

08000fe8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <HardFault_Handler+0x4>

08000ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <MemManage_Handler+0x4>

08000ff8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <BusFault_Handler+0x4>

08001000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001004:	bf00      	nop
 8001006:	e7fd      	b.n	8001004 <UsageFault_Handler+0x4>

08001008 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001036:	f000 f923 	bl	8001280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}

0800103e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001042:	2001      	movs	r0, #1
 8001044:	f000 fc7e 	bl	8001944 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}

0800104c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001050:	4802      	ldr	r0, [pc, #8]	@ (800105c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001052:	f001 faab 	bl	80025ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000078 	.word	0x20000078

08001060 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001064:	4802      	ldr	r0, [pc, #8]	@ (8001070 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001066:	f001 faa1 	bl	80025ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000078 	.word	0x20000078

08001074 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001078:	4802      	ldr	r0, [pc, #8]	@ (8001084 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800107a:	f001 fa97 	bl	80025ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000078 	.word	0x20000078

08001088 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800108c:	4802      	ldr	r0, [pc, #8]	@ (8001098 <TIM1_CC_IRQHandler+0x10>)
 800108e:	f001 fa8d 	bl	80025ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000078 	.word	0x20000078

0800109c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010a0:	4802      	ldr	r0, [pc, #8]	@ (80010ac <USART2_IRQHandler+0x10>)
 80010a2:	f002 f90b 	bl	80032bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000150 	.word	0x20000150

080010b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return 1;
 80010b4:	2301      	movs	r3, #1
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <_kill>:

int _kill(int pid, int sig)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010ca:	f003 f991 	bl	80043f0 <__errno>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2216      	movs	r2, #22
 80010d2:	601a      	str	r2, [r3, #0]
  return -1;
 80010d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <_exit>:

void _exit (int status)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80010e8:	f04f 31ff 	mov.w	r1, #4294967295
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff ffe7 	bl	80010c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80010f2:	bf00      	nop
 80010f4:	e7fd      	b.n	80010f2 <_exit+0x12>
	...

080010f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001100:	4a14      	ldr	r2, [pc, #80]	@ (8001154 <_sbrk+0x5c>)
 8001102:	4b15      	ldr	r3, [pc, #84]	@ (8001158 <_sbrk+0x60>)
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800110c:	4b13      	ldr	r3, [pc, #76]	@ (800115c <_sbrk+0x64>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d102      	bne.n	800111a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001114:	4b11      	ldr	r3, [pc, #68]	@ (800115c <_sbrk+0x64>)
 8001116:	4a12      	ldr	r2, [pc, #72]	@ (8001160 <_sbrk+0x68>)
 8001118:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800111a:	4b10      	ldr	r3, [pc, #64]	@ (800115c <_sbrk+0x64>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4413      	add	r3, r2
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	429a      	cmp	r2, r3
 8001126:	d207      	bcs.n	8001138 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001128:	f003 f962 	bl	80043f0 <__errno>
 800112c:	4603      	mov	r3, r0
 800112e:	220c      	movs	r2, #12
 8001130:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001132:	f04f 33ff 	mov.w	r3, #4294967295
 8001136:	e009      	b.n	800114c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001138:	4b08      	ldr	r3, [pc, #32]	@ (800115c <_sbrk+0x64>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800113e:	4b07      	ldr	r3, [pc, #28]	@ (800115c <_sbrk+0x64>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	4a05      	ldr	r2, [pc, #20]	@ (800115c <_sbrk+0x64>)
 8001148:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800114a:	68fb      	ldr	r3, [r7, #12]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20020000 	.word	0x20020000
 8001158:	00000400 	.word	0x00000400
 800115c:	200001a0 	.word	0x200001a0
 8001160:	200002f8 	.word	0x200002f8

08001164 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001168:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <SystemInit+0x20>)
 800116a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800116e:	4a05      	ldr	r2, [pc, #20]	@ (8001184 <SystemInit+0x20>)
 8001170:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001174:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <Reset_Handler>:
 8001188:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011c0 <LoopFillZerobss+0xe>
 800118c:	f7ff ffea 	bl	8001164 <SystemInit>
 8001190:	480c      	ldr	r0, [pc, #48]	@ (80011c4 <LoopFillZerobss+0x12>)
 8001192:	490d      	ldr	r1, [pc, #52]	@ (80011c8 <LoopFillZerobss+0x16>)
 8001194:	4a0d      	ldr	r2, [pc, #52]	@ (80011cc <LoopFillZerobss+0x1a>)
 8001196:	2300      	movs	r3, #0
 8001198:	e002      	b.n	80011a0 <LoopCopyDataInit>

0800119a <CopyDataInit>:
 800119a:	58d4      	ldr	r4, [r2, r3]
 800119c:	50c4      	str	r4, [r0, r3]
 800119e:	3304      	adds	r3, #4

080011a0 <LoopCopyDataInit>:
 80011a0:	18c4      	adds	r4, r0, r3
 80011a2:	428c      	cmp	r4, r1
 80011a4:	d3f9      	bcc.n	800119a <CopyDataInit>
 80011a6:	4a0a      	ldr	r2, [pc, #40]	@ (80011d0 <LoopFillZerobss+0x1e>)
 80011a8:	4c0a      	ldr	r4, [pc, #40]	@ (80011d4 <LoopFillZerobss+0x22>)
 80011aa:	2300      	movs	r3, #0
 80011ac:	e001      	b.n	80011b2 <LoopFillZerobss>

080011ae <FillZerobss>:
 80011ae:	6013      	str	r3, [r2, #0]
 80011b0:	3204      	adds	r2, #4

080011b2 <LoopFillZerobss>:
 80011b2:	42a2      	cmp	r2, r4
 80011b4:	d3fb      	bcc.n	80011ae <FillZerobss>
 80011b6:	f003 f921 	bl	80043fc <__libc_init_array>
 80011ba:	f7ff fb41 	bl	8000840 <main>
 80011be:	4770      	bx	lr
 80011c0:	20020000 	.word	0x20020000
 80011c4:	20000000 	.word	0x20000000
 80011c8:	2000005c 	.word	0x2000005c
 80011cc:	08004c04 	.word	0x08004c04
 80011d0:	2000005c 	.word	0x2000005c
 80011d4:	200002f4 	.word	0x200002f4

080011d8 <ADC_IRQHandler>:
 80011d8:	e7fe      	b.n	80011d8 <ADC_IRQHandler>
	...

080011dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011e0:	4b0e      	ldr	r3, [pc, #56]	@ (800121c <HAL_Init+0x40>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a0d      	ldr	r2, [pc, #52]	@ (800121c <HAL_Init+0x40>)
 80011e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011ec:	4b0b      	ldr	r3, [pc, #44]	@ (800121c <HAL_Init+0x40>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a0a      	ldr	r2, [pc, #40]	@ (800121c <HAL_Init+0x40>)
 80011f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f8:	4b08      	ldr	r3, [pc, #32]	@ (800121c <HAL_Init+0x40>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a07      	ldr	r2, [pc, #28]	@ (800121c <HAL_Init+0x40>)
 80011fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001202:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001204:	2003      	movs	r0, #3
 8001206:	f000 f92b 	bl	8001460 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800120a:	200f      	movs	r0, #15
 800120c:	f000 f808 	bl	8001220 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001210:	f7ff fdae 	bl	8000d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40023c00 	.word	0x40023c00

08001220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001228:	4b12      	ldr	r3, [pc, #72]	@ (8001274 <HAL_InitTick+0x54>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b12      	ldr	r3, [pc, #72]	@ (8001278 <HAL_InitTick+0x58>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	4619      	mov	r1, r3
 8001232:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001236:	fbb3 f3f1 	udiv	r3, r3, r1
 800123a:	fbb2 f3f3 	udiv	r3, r2, r3
 800123e:	4618      	mov	r0, r3
 8001240:	f000 f943 	bl	80014ca <HAL_SYSTICK_Config>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e00e      	b.n	800126c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2b0f      	cmp	r3, #15
 8001252:	d80a      	bhi.n	800126a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001254:	2200      	movs	r2, #0
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	f04f 30ff 	mov.w	r0, #4294967295
 800125c:	f000 f90b 	bl	8001476 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001260:	4a06      	ldr	r2, [pc, #24]	@ (800127c <HAL_InitTick+0x5c>)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001266:	2300      	movs	r3, #0
 8001268:	e000      	b.n	800126c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
}
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000000 	.word	0x20000000
 8001278:	20000008 	.word	0x20000008
 800127c:	20000004 	.word	0x20000004

08001280 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001284:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <HAL_IncTick+0x20>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	461a      	mov	r2, r3
 800128a:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <HAL_IncTick+0x24>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4413      	add	r3, r2
 8001290:	4a04      	ldr	r2, [pc, #16]	@ (80012a4 <HAL_IncTick+0x24>)
 8001292:	6013      	str	r3, [r2, #0]
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	20000008 	.word	0x20000008
 80012a4:	200001a4 	.word	0x200001a4

080012a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return uwTick;
 80012ac:	4b03      	ldr	r3, [pc, #12]	@ (80012bc <HAL_GetTick+0x14>)
 80012ae:	681b      	ldr	r3, [r3, #0]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	200001a4 	.word	0x200001a4

080012c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012dc:	4013      	ands	r3, r2
 80012de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f2:	4a04      	ldr	r2, [pc, #16]	@ (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	60d3      	str	r3, [r2, #12]
}
 80012f8:	bf00      	nop
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800130c:	4b04      	ldr	r3, [pc, #16]	@ (8001320 <__NVIC_GetPriorityGrouping+0x18>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	0a1b      	lsrs	r3, r3, #8
 8001312:	f003 0307 	and.w	r3, r3, #7
}
 8001316:	4618      	mov	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	2b00      	cmp	r3, #0
 8001334:	db0b      	blt.n	800134e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	f003 021f 	and.w	r2, r3, #31
 800133c:	4907      	ldr	r1, [pc, #28]	@ (800135c <__NVIC_EnableIRQ+0x38>)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	095b      	lsrs	r3, r3, #5
 8001344:	2001      	movs	r0, #1
 8001346:	fa00 f202 	lsl.w	r2, r0, r2
 800134a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	e000e100 	.word	0xe000e100

08001360 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	6039      	str	r1, [r7, #0]
 800136a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001370:	2b00      	cmp	r3, #0
 8001372:	db0a      	blt.n	800138a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	b2da      	uxtb	r2, r3
 8001378:	490c      	ldr	r1, [pc, #48]	@ (80013ac <__NVIC_SetPriority+0x4c>)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	0112      	lsls	r2, r2, #4
 8001380:	b2d2      	uxtb	r2, r2
 8001382:	440b      	add	r3, r1
 8001384:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001388:	e00a      	b.n	80013a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	b2da      	uxtb	r2, r3
 800138e:	4908      	ldr	r1, [pc, #32]	@ (80013b0 <__NVIC_SetPriority+0x50>)
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	f003 030f 	and.w	r3, r3, #15
 8001396:	3b04      	subs	r3, #4
 8001398:	0112      	lsls	r2, r2, #4
 800139a:	b2d2      	uxtb	r2, r2
 800139c:	440b      	add	r3, r1
 800139e:	761a      	strb	r2, [r3, #24]
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000e100 	.word	0xe000e100
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b089      	sub	sp, #36	@ 0x24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	f1c3 0307 	rsb	r3, r3, #7
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	bf28      	it	cs
 80013d2:	2304      	movcs	r3, #4
 80013d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3304      	adds	r3, #4
 80013da:	2b06      	cmp	r3, #6
 80013dc:	d902      	bls.n	80013e4 <NVIC_EncodePriority+0x30>
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3b03      	subs	r3, #3
 80013e2:	e000      	b.n	80013e6 <NVIC_EncodePriority+0x32>
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43da      	mvns	r2, r3
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	401a      	ands	r2, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	fa01 f303 	lsl.w	r3, r1, r3
 8001406:	43d9      	mvns	r1, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800140c:	4313      	orrs	r3, r2
         );
}
 800140e:	4618      	mov	r0, r3
 8001410:	3724      	adds	r7, #36	@ 0x24
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
	...

0800141c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3b01      	subs	r3, #1
 8001428:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800142c:	d301      	bcc.n	8001432 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800142e:	2301      	movs	r3, #1
 8001430:	e00f      	b.n	8001452 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001432:	4a0a      	ldr	r2, [pc, #40]	@ (800145c <SysTick_Config+0x40>)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800143a:	210f      	movs	r1, #15
 800143c:	f04f 30ff 	mov.w	r0, #4294967295
 8001440:	f7ff ff8e 	bl	8001360 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001444:	4b05      	ldr	r3, [pc, #20]	@ (800145c <SysTick_Config+0x40>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800144a:	4b04      	ldr	r3, [pc, #16]	@ (800145c <SysTick_Config+0x40>)
 800144c:	2207      	movs	r2, #7
 800144e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	e000e010 	.word	0xe000e010

08001460 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff ff29 	bl	80012c0 <__NVIC_SetPriorityGrouping>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001476:	b580      	push	{r7, lr}
 8001478:	b086      	sub	sp, #24
 800147a:	af00      	add	r7, sp, #0
 800147c:	4603      	mov	r3, r0
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
 8001482:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001488:	f7ff ff3e 	bl	8001308 <__NVIC_GetPriorityGrouping>
 800148c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	68b9      	ldr	r1, [r7, #8]
 8001492:	6978      	ldr	r0, [r7, #20]
 8001494:	f7ff ff8e 	bl	80013b4 <NVIC_EncodePriority>
 8001498:	4602      	mov	r2, r0
 800149a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149e:	4611      	mov	r1, r2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff5d 	bl	8001360 <__NVIC_SetPriority>
}
 80014a6:	bf00      	nop
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	4603      	mov	r3, r0
 80014b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff31 	bl	8001324 <__NVIC_EnableIRQ>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff ffa2 	bl	800141c <SysTick_Config>
 80014d8:	4603      	mov	r3, r0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b084      	sub	sp, #16
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014f0:	f7ff feda 	bl	80012a8 <HAL_GetTick>
 80014f4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d008      	beq.n	8001514 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2280      	movs	r2, #128	@ 0x80
 8001506:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e052      	b.n	80015ba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f022 0216 	bic.w	r2, r2, #22
 8001522:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	695a      	ldr	r2, [r3, #20]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001532:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001538:	2b00      	cmp	r3, #0
 800153a:	d103      	bne.n	8001544 <HAL_DMA_Abort+0x62>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001540:	2b00      	cmp	r3, #0
 8001542:	d007      	beq.n	8001554 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 0208 	bic.w	r2, r2, #8
 8001552:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f022 0201 	bic.w	r2, r2, #1
 8001562:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001564:	e013      	b.n	800158e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001566:	f7ff fe9f 	bl	80012a8 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b05      	cmp	r3, #5
 8001572:	d90c      	bls.n	800158e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2220      	movs	r2, #32
 8001578:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2203      	movs	r2, #3
 800157e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e015      	b.n	80015ba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1e4      	bne.n	8001566 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015a0:	223f      	movs	r2, #63	@ 0x3f
 80015a2:	409a      	lsls	r2, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2201      	movs	r2, #1
 80015ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d004      	beq.n	80015e0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2280      	movs	r2, #128	@ 0x80
 80015da:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e00c      	b.n	80015fa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2205      	movs	r2, #5
 80015e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f022 0201 	bic.w	r2, r2, #1
 80015f6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
	...

08001608 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001608:	b480      	push	{r7}
 800160a:	b089      	sub	sp, #36	@ 0x24
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800161a:	2300      	movs	r3, #0
 800161c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
 8001622:	e159      	b.n	80018d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001624:	2201      	movs	r2, #1
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	4013      	ands	r3, r2
 8001636:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	429a      	cmp	r2, r3
 800163e:	f040 8148 	bne.w	80018d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f003 0303 	and.w	r3, r3, #3
 800164a:	2b01      	cmp	r3, #1
 800164c:	d005      	beq.n	800165a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001656:	2b02      	cmp	r3, #2
 8001658:	d130      	bne.n	80016bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	2203      	movs	r2, #3
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43db      	mvns	r3, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4013      	ands	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	68da      	ldr	r2, [r3, #12]
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4313      	orrs	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001690:	2201      	movs	r2, #1
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	43db      	mvns	r3, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4013      	ands	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	091b      	lsrs	r3, r3, #4
 80016a6:	f003 0201 	and.w	r2, r3, #1
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 0303 	and.w	r3, r3, #3
 80016c4:	2b03      	cmp	r3, #3
 80016c6:	d017      	beq.n	80016f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	2203      	movs	r2, #3
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f003 0303 	and.w	r3, r3, #3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d123      	bne.n	800174c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	08da      	lsrs	r2, r3, #3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3208      	adds	r2, #8
 800170c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001710:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	220f      	movs	r2, #15
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4013      	ands	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	691a      	ldr	r2, [r3, #16]
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	08da      	lsrs	r2, r3, #3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	3208      	adds	r2, #8
 8001746:	69b9      	ldr	r1, [r7, #24]
 8001748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	2203      	movs	r2, #3
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4013      	ands	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 0203 	and.w	r2, r3, #3
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4313      	orrs	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001788:	2b00      	cmp	r3, #0
 800178a:	f000 80a2 	beq.w	80018d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	4b57      	ldr	r3, [pc, #348]	@ (80018f0 <HAL_GPIO_Init+0x2e8>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001796:	4a56      	ldr	r2, [pc, #344]	@ (80018f0 <HAL_GPIO_Init+0x2e8>)
 8001798:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800179c:	6453      	str	r3, [r2, #68]	@ 0x44
 800179e:	4b54      	ldr	r3, [pc, #336]	@ (80018f0 <HAL_GPIO_Init+0x2e8>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017aa:	4a52      	ldr	r2, [pc, #328]	@ (80018f4 <HAL_GPIO_Init+0x2ec>)
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	089b      	lsrs	r3, r3, #2
 80017b0:	3302      	adds	r3, #2
 80017b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	f003 0303 	and.w	r3, r3, #3
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	220f      	movs	r2, #15
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4013      	ands	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a49      	ldr	r2, [pc, #292]	@ (80018f8 <HAL_GPIO_Init+0x2f0>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d019      	beq.n	800180a <HAL_GPIO_Init+0x202>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a48      	ldr	r2, [pc, #288]	@ (80018fc <HAL_GPIO_Init+0x2f4>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d013      	beq.n	8001806 <HAL_GPIO_Init+0x1fe>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a47      	ldr	r2, [pc, #284]	@ (8001900 <HAL_GPIO_Init+0x2f8>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d00d      	beq.n	8001802 <HAL_GPIO_Init+0x1fa>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a46      	ldr	r2, [pc, #280]	@ (8001904 <HAL_GPIO_Init+0x2fc>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d007      	beq.n	80017fe <HAL_GPIO_Init+0x1f6>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a45      	ldr	r2, [pc, #276]	@ (8001908 <HAL_GPIO_Init+0x300>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d101      	bne.n	80017fa <HAL_GPIO_Init+0x1f2>
 80017f6:	2304      	movs	r3, #4
 80017f8:	e008      	b.n	800180c <HAL_GPIO_Init+0x204>
 80017fa:	2307      	movs	r3, #7
 80017fc:	e006      	b.n	800180c <HAL_GPIO_Init+0x204>
 80017fe:	2303      	movs	r3, #3
 8001800:	e004      	b.n	800180c <HAL_GPIO_Init+0x204>
 8001802:	2302      	movs	r3, #2
 8001804:	e002      	b.n	800180c <HAL_GPIO_Init+0x204>
 8001806:	2301      	movs	r3, #1
 8001808:	e000      	b.n	800180c <HAL_GPIO_Init+0x204>
 800180a:	2300      	movs	r3, #0
 800180c:	69fa      	ldr	r2, [r7, #28]
 800180e:	f002 0203 	and.w	r2, r2, #3
 8001812:	0092      	lsls	r2, r2, #2
 8001814:	4093      	lsls	r3, r2
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4313      	orrs	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800181c:	4935      	ldr	r1, [pc, #212]	@ (80018f4 <HAL_GPIO_Init+0x2ec>)
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	089b      	lsrs	r3, r3, #2
 8001822:	3302      	adds	r3, #2
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800182a:	4b38      	ldr	r3, [pc, #224]	@ (800190c <HAL_GPIO_Init+0x304>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	43db      	mvns	r3, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4013      	ands	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800184e:	4a2f      	ldr	r2, [pc, #188]	@ (800190c <HAL_GPIO_Init+0x304>)
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001854:	4b2d      	ldr	r3, [pc, #180]	@ (800190c <HAL_GPIO_Init+0x304>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	43db      	mvns	r3, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d003      	beq.n	8001878 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001878:	4a24      	ldr	r2, [pc, #144]	@ (800190c <HAL_GPIO_Init+0x304>)
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800187e:	4b23      	ldr	r3, [pc, #140]	@ (800190c <HAL_GPIO_Init+0x304>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	43db      	mvns	r3, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4013      	ands	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	4313      	orrs	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018a2:	4a1a      	ldr	r2, [pc, #104]	@ (800190c <HAL_GPIO_Init+0x304>)
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018a8:	4b18      	ldr	r3, [pc, #96]	@ (800190c <HAL_GPIO_Init+0x304>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	43db      	mvns	r3, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d003      	beq.n	80018cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018cc:	4a0f      	ldr	r2, [pc, #60]	@ (800190c <HAL_GPIO_Init+0x304>)
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3301      	adds	r3, #1
 80018d6:	61fb      	str	r3, [r7, #28]
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	2b0f      	cmp	r3, #15
 80018dc:	f67f aea2 	bls.w	8001624 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018e0:	bf00      	nop
 80018e2:	bf00      	nop
 80018e4:	3724      	adds	r7, #36	@ 0x24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40013800 	.word	0x40013800
 80018f8:	40020000 	.word	0x40020000
 80018fc:	40020400 	.word	0x40020400
 8001900:	40020800 	.word	0x40020800
 8001904:	40020c00 	.word	0x40020c00
 8001908:	40021000 	.word	0x40021000
 800190c:	40013c00 	.word	0x40013c00

08001910 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	460b      	mov	r3, r1
 800191a:	807b      	strh	r3, [r7, #2]
 800191c:	4613      	mov	r3, r2
 800191e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001920:	787b      	ldrb	r3, [r7, #1]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001926:	887a      	ldrh	r2, [r7, #2]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800192c:	e003      	b.n	8001936 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800192e:	887b      	ldrh	r3, [r7, #2]
 8001930:	041a      	lsls	r2, r3, #16
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	619a      	str	r2, [r3, #24]
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
	...

08001944 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800194e:	4b08      	ldr	r3, [pc, #32]	@ (8001970 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001950:	695a      	ldr	r2, [r3, #20]
 8001952:	88fb      	ldrh	r3, [r7, #6]
 8001954:	4013      	ands	r3, r2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d006      	beq.n	8001968 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800195a:	4a05      	ldr	r2, [pc, #20]	@ (8001970 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800195c:	88fb      	ldrh	r3, [r7, #6]
 800195e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001960:	88fb      	ldrh	r3, [r7, #6]
 8001962:	4618      	mov	r0, r3
 8001964:	f000 f806 	bl	8001974 <HAL_GPIO_EXTI_Callback>
  }
}
 8001968:	bf00      	nop
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40013c00 	.word	0x40013c00

08001974 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
	...

0800198c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e267      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d075      	beq.n	8001a96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019aa:	4b88      	ldr	r3, [pc, #544]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 030c 	and.w	r3, r3, #12
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	d00c      	beq.n	80019d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019b6:	4b85      	ldr	r3, [pc, #532]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019be:	2b08      	cmp	r3, #8
 80019c0:	d112      	bne.n	80019e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019c2:	4b82      	ldr	r3, [pc, #520]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019ce:	d10b      	bne.n	80019e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d0:	4b7e      	ldr	r3, [pc, #504]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d05b      	beq.n	8001a94 <HAL_RCC_OscConfig+0x108>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d157      	bne.n	8001a94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e242      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019f0:	d106      	bne.n	8001a00 <HAL_RCC_OscConfig+0x74>
 80019f2:	4b76      	ldr	r3, [pc, #472]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a75      	ldr	r2, [pc, #468]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 80019f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	e01d      	b.n	8001a3c <HAL_RCC_OscConfig+0xb0>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a08:	d10c      	bne.n	8001a24 <HAL_RCC_OscConfig+0x98>
 8001a0a:	4b70      	ldr	r3, [pc, #448]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a6f      	ldr	r2, [pc, #444]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001a10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	4b6d      	ldr	r3, [pc, #436]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a6c      	ldr	r2, [pc, #432]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001a1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	e00b      	b.n	8001a3c <HAL_RCC_OscConfig+0xb0>
 8001a24:	4b69      	ldr	r3, [pc, #420]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a68      	ldr	r2, [pc, #416]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001a2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	4b66      	ldr	r3, [pc, #408]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a65      	ldr	r2, [pc, #404]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001a36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d013      	beq.n	8001a6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a44:	f7ff fc30 	bl	80012a8 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a4c:	f7ff fc2c 	bl	80012a8 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b64      	cmp	r3, #100	@ 0x64
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e207      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5e:	4b5b      	ldr	r3, [pc, #364]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0f0      	beq.n	8001a4c <HAL_RCC_OscConfig+0xc0>
 8001a6a:	e014      	b.n	8001a96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6c:	f7ff fc1c 	bl	80012a8 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a74:	f7ff fc18 	bl	80012a8 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b64      	cmp	r3, #100	@ 0x64
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e1f3      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a86:	4b51      	ldr	r3, [pc, #324]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f0      	bne.n	8001a74 <HAL_RCC_OscConfig+0xe8>
 8001a92:	e000      	b.n	8001a96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d063      	beq.n	8001b6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001aa2:	4b4a      	ldr	r3, [pc, #296]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d00b      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aae:	4b47      	ldr	r3, [pc, #284]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ab6:	2b08      	cmp	r3, #8
 8001ab8:	d11c      	bne.n	8001af4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aba:	4b44      	ldr	r3, [pc, #272]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d116      	bne.n	8001af4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac6:	4b41      	ldr	r3, [pc, #260]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d005      	beq.n	8001ade <HAL_RCC_OscConfig+0x152>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d001      	beq.n	8001ade <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e1c7      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ade:	4b3b      	ldr	r3, [pc, #236]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	4937      	ldr	r1, [pc, #220]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001af2:	e03a      	b.n	8001b6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d020      	beq.n	8001b3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001afc:	4b34      	ldr	r3, [pc, #208]	@ (8001bd0 <HAL_RCC_OscConfig+0x244>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b02:	f7ff fbd1 	bl	80012a8 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b0a:	f7ff fbcd 	bl	80012a8 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e1a8      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1c:	4b2b      	ldr	r3, [pc, #172]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0f0      	beq.n	8001b0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b28:	4b28      	ldr	r3, [pc, #160]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	4925      	ldr	r1, [pc, #148]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	600b      	str	r3, [r1, #0]
 8001b3c:	e015      	b.n	8001b6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b3e:	4b24      	ldr	r3, [pc, #144]	@ (8001bd0 <HAL_RCC_OscConfig+0x244>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b44:	f7ff fbb0 	bl	80012a8 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b4c:	f7ff fbac 	bl	80012a8 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e187      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1f0      	bne.n	8001b4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d036      	beq.n	8001be4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d016      	beq.n	8001bac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b7e:	4b15      	ldr	r3, [pc, #84]	@ (8001bd4 <HAL_RCC_OscConfig+0x248>)
 8001b80:	2201      	movs	r2, #1
 8001b82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b84:	f7ff fb90 	bl	80012a8 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b8c:	f7ff fb8c 	bl	80012a8 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e167      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001bcc <HAL_RCC_OscConfig+0x240>)
 8001ba0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0f0      	beq.n	8001b8c <HAL_RCC_OscConfig+0x200>
 8001baa:	e01b      	b.n	8001be4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bac:	4b09      	ldr	r3, [pc, #36]	@ (8001bd4 <HAL_RCC_OscConfig+0x248>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb2:	f7ff fb79 	bl	80012a8 <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb8:	e00e      	b.n	8001bd8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bba:	f7ff fb75 	bl	80012a8 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d907      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e150      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	42470000 	.word	0x42470000
 8001bd4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd8:	4b88      	ldr	r3, [pc, #544]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001bda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1ea      	bne.n	8001bba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 8097 	beq.w	8001d20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bf6:	4b81      	ldr	r3, [pc, #516]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10f      	bne.n	8001c22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	4b7d      	ldr	r3, [pc, #500]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0a:	4a7c      	ldr	r2, [pc, #496]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001c0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c12:	4b7a      	ldr	r3, [pc, #488]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c22:	4b77      	ldr	r3, [pc, #476]	@ (8001e00 <HAL_RCC_OscConfig+0x474>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d118      	bne.n	8001c60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c2e:	4b74      	ldr	r3, [pc, #464]	@ (8001e00 <HAL_RCC_OscConfig+0x474>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a73      	ldr	r2, [pc, #460]	@ (8001e00 <HAL_RCC_OscConfig+0x474>)
 8001c34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3a:	f7ff fb35 	bl	80012a8 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c42:	f7ff fb31 	bl	80012a8 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e10c      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c54:	4b6a      	ldr	r3, [pc, #424]	@ (8001e00 <HAL_RCC_OscConfig+0x474>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d106      	bne.n	8001c76 <HAL_RCC_OscConfig+0x2ea>
 8001c68:	4b64      	ldr	r3, [pc, #400]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c6c:	4a63      	ldr	r2, [pc, #396]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c74:	e01c      	b.n	8001cb0 <HAL_RCC_OscConfig+0x324>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	2b05      	cmp	r3, #5
 8001c7c:	d10c      	bne.n	8001c98 <HAL_RCC_OscConfig+0x30c>
 8001c7e:	4b5f      	ldr	r3, [pc, #380]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c82:	4a5e      	ldr	r2, [pc, #376]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001c84:	f043 0304 	orr.w	r3, r3, #4
 8001c88:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c8a:	4b5c      	ldr	r3, [pc, #368]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c8e:	4a5b      	ldr	r2, [pc, #364]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c96:	e00b      	b.n	8001cb0 <HAL_RCC_OscConfig+0x324>
 8001c98:	4b58      	ldr	r3, [pc, #352]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001c9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c9c:	4a57      	ldr	r2, [pc, #348]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001c9e:	f023 0301 	bic.w	r3, r3, #1
 8001ca2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ca4:	4b55      	ldr	r3, [pc, #340]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001ca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ca8:	4a54      	ldr	r2, [pc, #336]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001caa:	f023 0304 	bic.w	r3, r3, #4
 8001cae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d015      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb8:	f7ff faf6 	bl	80012a8 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cbe:	e00a      	b.n	8001cd6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cc0:	f7ff faf2 	bl	80012a8 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e0cb      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd6:	4b49      	ldr	r3, [pc, #292]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0ee      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x334>
 8001ce2:	e014      	b.n	8001d0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce4:	f7ff fae0 	bl	80012a8 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cea:	e00a      	b.n	8001d02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cec:	f7ff fadc 	bl	80012a8 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e0b5      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d02:	4b3e      	ldr	r3, [pc, #248]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001d04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1ee      	bne.n	8001cec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d0e:	7dfb      	ldrb	r3, [r7, #23]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d105      	bne.n	8001d20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d14:	4b39      	ldr	r3, [pc, #228]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d18:	4a38      	ldr	r2, [pc, #224]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001d1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d1e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f000 80a1 	beq.w	8001e6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d2a:	4b34      	ldr	r3, [pc, #208]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 030c 	and.w	r3, r3, #12
 8001d32:	2b08      	cmp	r3, #8
 8001d34:	d05c      	beq.n	8001df0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d141      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3e:	4b31      	ldr	r3, [pc, #196]	@ (8001e04 <HAL_RCC_OscConfig+0x478>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d44:	f7ff fab0 	bl	80012a8 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d4c:	f7ff faac 	bl	80012a8 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e087      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d5e:	4b27      	ldr	r3, [pc, #156]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69da      	ldr	r2, [r3, #28]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	431a      	orrs	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d78:	019b      	lsls	r3, r3, #6
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d80:	085b      	lsrs	r3, r3, #1
 8001d82:	3b01      	subs	r3, #1
 8001d84:	041b      	lsls	r3, r3, #16
 8001d86:	431a      	orrs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d8c:	061b      	lsls	r3, r3, #24
 8001d8e:	491b      	ldr	r1, [pc, #108]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d94:	4b1b      	ldr	r3, [pc, #108]	@ (8001e04 <HAL_RCC_OscConfig+0x478>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9a:	f7ff fa85 	bl	80012a8 <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da2:	f7ff fa81 	bl	80012a8 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e05c      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db4:	4b11      	ldr	r3, [pc, #68]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0f0      	beq.n	8001da2 <HAL_RCC_OscConfig+0x416>
 8001dc0:	e054      	b.n	8001e6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc2:	4b10      	ldr	r3, [pc, #64]	@ (8001e04 <HAL_RCC_OscConfig+0x478>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc8:	f7ff fa6e 	bl	80012a8 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd0:	f7ff fa6a 	bl	80012a8 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e045      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001de2:	4b06      	ldr	r3, [pc, #24]	@ (8001dfc <HAL_RCC_OscConfig+0x470>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f0      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x444>
 8001dee:	e03d      	b.n	8001e6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d107      	bne.n	8001e08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e038      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	40007000 	.word	0x40007000
 8001e04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e08:	4b1b      	ldr	r3, [pc, #108]	@ (8001e78 <HAL_RCC_OscConfig+0x4ec>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d028      	beq.n	8001e68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d121      	bne.n	8001e68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d11a      	bne.n	8001e68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e38:	4013      	ands	r3, r2
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d111      	bne.n	8001e68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e4e:	085b      	lsrs	r3, r3, #1
 8001e50:	3b01      	subs	r3, #1
 8001e52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d107      	bne.n	8001e68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d001      	beq.n	8001e6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e000      	b.n	8001e6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40023800 	.word	0x40023800

08001e7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e0cc      	b.n	800202a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e90:	4b68      	ldr	r3, [pc, #416]	@ (8002034 <HAL_RCC_ClockConfig+0x1b8>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d90c      	bls.n	8001eb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9e:	4b65      	ldr	r3, [pc, #404]	@ (8002034 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea6:	4b63      	ldr	r3, [pc, #396]	@ (8002034 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d001      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e0b8      	b.n	800202a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d020      	beq.n	8001f06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d005      	beq.n	8001edc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ed0:	4b59      	ldr	r3, [pc, #356]	@ (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	4a58      	ldr	r2, [pc, #352]	@ (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001eda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0308 	and.w	r3, r3, #8
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ee8:	4b53      	ldr	r3, [pc, #332]	@ (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	4a52      	ldr	r2, [pc, #328]	@ (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001eee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001ef2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ef4:	4b50      	ldr	r3, [pc, #320]	@ (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	494d      	ldr	r1, [pc, #308]	@ (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d044      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d107      	bne.n	8001f2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1a:	4b47      	ldr	r3, [pc, #284]	@ (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d119      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e07f      	b.n	800202a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d003      	beq.n	8001f3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f36:	2b03      	cmp	r3, #3
 8001f38:	d107      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f3a:	4b3f      	ldr	r3, [pc, #252]	@ (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d109      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e06f      	b.n	800202a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f4a:	4b3b      	ldr	r3, [pc, #236]	@ (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e067      	b.n	800202a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f5a:	4b37      	ldr	r3, [pc, #220]	@ (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f023 0203 	bic.w	r2, r3, #3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	4934      	ldr	r1, [pc, #208]	@ (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f6c:	f7ff f99c 	bl	80012a8 <HAL_GetTick>
 8001f70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f72:	e00a      	b.n	8001f8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f74:	f7ff f998 	bl	80012a8 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e04f      	b.n	800202a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8a:	4b2b      	ldr	r3, [pc, #172]	@ (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 020c 	and.w	r2, r3, #12
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d1eb      	bne.n	8001f74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f9c:	4b25      	ldr	r3, [pc, #148]	@ (8002034 <HAL_RCC_ClockConfig+0x1b8>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d20c      	bcs.n	8001fc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001faa:	4b22      	ldr	r3, [pc, #136]	@ (8002034 <HAL_RCC_ClockConfig+0x1b8>)
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b20      	ldr	r3, [pc, #128]	@ (8002034 <HAL_RCC_ClockConfig+0x1b8>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e032      	b.n	800202a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d008      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fd0:	4b19      	ldr	r3, [pc, #100]	@ (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	4916      	ldr	r1, [pc, #88]	@ (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d009      	beq.n	8002002 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fee:	4b12      	ldr	r3, [pc, #72]	@ (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	490e      	ldr	r1, [pc, #56]	@ (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002002:	f000 f821 	bl	8002048 <HAL_RCC_GetSysClockFreq>
 8002006:	4602      	mov	r2, r0
 8002008:	4b0b      	ldr	r3, [pc, #44]	@ (8002038 <HAL_RCC_ClockConfig+0x1bc>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	091b      	lsrs	r3, r3, #4
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	490a      	ldr	r1, [pc, #40]	@ (800203c <HAL_RCC_ClockConfig+0x1c0>)
 8002014:	5ccb      	ldrb	r3, [r1, r3]
 8002016:	fa22 f303 	lsr.w	r3, r2, r3
 800201a:	4a09      	ldr	r2, [pc, #36]	@ (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 800201c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800201e:	4b09      	ldr	r3, [pc, #36]	@ (8002044 <HAL_RCC_ClockConfig+0x1c8>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff f8fc 	bl	8001220 <HAL_InitTick>

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40023c00 	.word	0x40023c00
 8002038:	40023800 	.word	0x40023800
 800203c:	08004ba8 	.word	0x08004ba8
 8002040:	20000000 	.word	0x20000000
 8002044:	20000004 	.word	0x20000004

08002048 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002048:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800204c:	b090      	sub	sp, #64	@ 0x40
 800204e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002050:	2300      	movs	r3, #0
 8002052:	637b      	str	r3, [r7, #52]	@ 0x34
 8002054:	2300      	movs	r3, #0
 8002056:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002058:	2300      	movs	r3, #0
 800205a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800205c:	2300      	movs	r3, #0
 800205e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002060:	4b59      	ldr	r3, [pc, #356]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 030c 	and.w	r3, r3, #12
 8002068:	2b08      	cmp	r3, #8
 800206a:	d00d      	beq.n	8002088 <HAL_RCC_GetSysClockFreq+0x40>
 800206c:	2b08      	cmp	r3, #8
 800206e:	f200 80a1 	bhi.w	80021b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002072:	2b00      	cmp	r3, #0
 8002074:	d002      	beq.n	800207c <HAL_RCC_GetSysClockFreq+0x34>
 8002076:	2b04      	cmp	r3, #4
 8002078:	d003      	beq.n	8002082 <HAL_RCC_GetSysClockFreq+0x3a>
 800207a:	e09b      	b.n	80021b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800207c:	4b53      	ldr	r3, [pc, #332]	@ (80021cc <HAL_RCC_GetSysClockFreq+0x184>)
 800207e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002080:	e09b      	b.n	80021ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002082:	4b53      	ldr	r3, [pc, #332]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002084:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002086:	e098      	b.n	80021ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002088:	4b4f      	ldr	r3, [pc, #316]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002090:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002092:	4b4d      	ldr	r3, [pc, #308]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d028      	beq.n	80020f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800209e:	4b4a      	ldr	r3, [pc, #296]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	099b      	lsrs	r3, r3, #6
 80020a4:	2200      	movs	r2, #0
 80020a6:	623b      	str	r3, [r7, #32]
 80020a8:	627a      	str	r2, [r7, #36]	@ 0x24
 80020aa:	6a3b      	ldr	r3, [r7, #32]
 80020ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80020b0:	2100      	movs	r1, #0
 80020b2:	4b47      	ldr	r3, [pc, #284]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80020b4:	fb03 f201 	mul.w	r2, r3, r1
 80020b8:	2300      	movs	r3, #0
 80020ba:	fb00 f303 	mul.w	r3, r0, r3
 80020be:	4413      	add	r3, r2
 80020c0:	4a43      	ldr	r2, [pc, #268]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80020c2:	fba0 1202 	umull	r1, r2, r0, r2
 80020c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80020c8:	460a      	mov	r2, r1
 80020ca:	62ba      	str	r2, [r7, #40]	@ 0x28
 80020cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020ce:	4413      	add	r3, r2
 80020d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020d4:	2200      	movs	r2, #0
 80020d6:	61bb      	str	r3, [r7, #24]
 80020d8:	61fa      	str	r2, [r7, #28]
 80020da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80020e2:	f7fe f8cd 	bl	8000280 <__aeabi_uldivmod>
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	4613      	mov	r3, r2
 80020ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020ee:	e053      	b.n	8002198 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020f0:	4b35      	ldr	r3, [pc, #212]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	099b      	lsrs	r3, r3, #6
 80020f6:	2200      	movs	r2, #0
 80020f8:	613b      	str	r3, [r7, #16]
 80020fa:	617a      	str	r2, [r7, #20]
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002102:	f04f 0b00 	mov.w	fp, #0
 8002106:	4652      	mov	r2, sl
 8002108:	465b      	mov	r3, fp
 800210a:	f04f 0000 	mov.w	r0, #0
 800210e:	f04f 0100 	mov.w	r1, #0
 8002112:	0159      	lsls	r1, r3, #5
 8002114:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002118:	0150      	lsls	r0, r2, #5
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	ebb2 080a 	subs.w	r8, r2, sl
 8002122:	eb63 090b 	sbc.w	r9, r3, fp
 8002126:	f04f 0200 	mov.w	r2, #0
 800212a:	f04f 0300 	mov.w	r3, #0
 800212e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002132:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002136:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800213a:	ebb2 0408 	subs.w	r4, r2, r8
 800213e:	eb63 0509 	sbc.w	r5, r3, r9
 8002142:	f04f 0200 	mov.w	r2, #0
 8002146:	f04f 0300 	mov.w	r3, #0
 800214a:	00eb      	lsls	r3, r5, #3
 800214c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002150:	00e2      	lsls	r2, r4, #3
 8002152:	4614      	mov	r4, r2
 8002154:	461d      	mov	r5, r3
 8002156:	eb14 030a 	adds.w	r3, r4, sl
 800215a:	603b      	str	r3, [r7, #0]
 800215c:	eb45 030b 	adc.w	r3, r5, fp
 8002160:	607b      	str	r3, [r7, #4]
 8002162:	f04f 0200 	mov.w	r2, #0
 8002166:	f04f 0300 	mov.w	r3, #0
 800216a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800216e:	4629      	mov	r1, r5
 8002170:	028b      	lsls	r3, r1, #10
 8002172:	4621      	mov	r1, r4
 8002174:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002178:	4621      	mov	r1, r4
 800217a:	028a      	lsls	r2, r1, #10
 800217c:	4610      	mov	r0, r2
 800217e:	4619      	mov	r1, r3
 8002180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002182:	2200      	movs	r2, #0
 8002184:	60bb      	str	r3, [r7, #8]
 8002186:	60fa      	str	r2, [r7, #12]
 8002188:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800218c:	f7fe f878 	bl	8000280 <__aeabi_uldivmod>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4613      	mov	r3, r2
 8002196:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002198:	4b0b      	ldr	r3, [pc, #44]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	0c1b      	lsrs	r3, r3, #16
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	3301      	adds	r3, #1
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80021a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80021aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021b2:	e002      	b.n	80021ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021b4:	4b05      	ldr	r3, [pc, #20]	@ (80021cc <HAL_RCC_GetSysClockFreq+0x184>)
 80021b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3740      	adds	r7, #64	@ 0x40
 80021c0:	46bd      	mov	sp, r7
 80021c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021c6:	bf00      	nop
 80021c8:	40023800 	.word	0x40023800
 80021cc:	00f42400 	.word	0x00f42400
 80021d0:	017d7840 	.word	0x017d7840

080021d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021d8:	4b03      	ldr	r3, [pc, #12]	@ (80021e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80021da:	681b      	ldr	r3, [r3, #0]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	20000000 	.word	0x20000000

080021ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80021f0:	f7ff fff0 	bl	80021d4 <HAL_RCC_GetHCLKFreq>
 80021f4:	4602      	mov	r2, r0
 80021f6:	4b05      	ldr	r3, [pc, #20]	@ (800220c <HAL_RCC_GetPCLK1Freq+0x20>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	0a9b      	lsrs	r3, r3, #10
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	4903      	ldr	r1, [pc, #12]	@ (8002210 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002202:	5ccb      	ldrb	r3, [r1, r3]
 8002204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002208:	4618      	mov	r0, r3
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40023800 	.word	0x40023800
 8002210:	08004bb8 	.word	0x08004bb8

08002214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002218:	f7ff ffdc 	bl	80021d4 <HAL_RCC_GetHCLKFreq>
 800221c:	4602      	mov	r2, r0
 800221e:	4b05      	ldr	r3, [pc, #20]	@ (8002234 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	0b5b      	lsrs	r3, r3, #13
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	4903      	ldr	r1, [pc, #12]	@ (8002238 <HAL_RCC_GetPCLK2Freq+0x24>)
 800222a:	5ccb      	ldrb	r3, [r1, r3]
 800222c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002230:	4618      	mov	r0, r3
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40023800 	.word	0x40023800
 8002238:	08004bb8 	.word	0x08004bb8

0800223c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e041      	b.n	80022d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d106      	bne.n	8002268 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7fe fe14 	bl	8000e90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2202      	movs	r2, #2
 800226c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3304      	adds	r3, #4
 8002278:	4619      	mov	r1, r3
 800227a:	4610      	mov	r0, r2
 800227c:	f000 fc56 	bl	8002b2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e041      	b.n	8002370 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d106      	bne.n	8002306 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7fe fd5d 	bl	8000dc0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2202      	movs	r2, #2
 800230a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3304      	adds	r3, #4
 8002316:	4619      	mov	r1, r3
 8002318:	4610      	mov	r0, r2
 800231a:	f000 fc07 	bl	8002b2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2201      	movs	r2, #1
 8002352:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002382:	2300      	movs	r3, #0
 8002384:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d104      	bne.n	8002396 <HAL_TIM_IC_Start_IT+0x1e>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002392:	b2db      	uxtb	r3, r3
 8002394:	e013      	b.n	80023be <HAL_TIM_IC_Start_IT+0x46>
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	2b04      	cmp	r3, #4
 800239a:	d104      	bne.n	80023a6 <HAL_TIM_IC_Start_IT+0x2e>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	e00b      	b.n	80023be <HAL_TIM_IC_Start_IT+0x46>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	2b08      	cmp	r3, #8
 80023aa:	d104      	bne.n	80023b6 <HAL_TIM_IC_Start_IT+0x3e>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	e003      	b.n	80023be <HAL_TIM_IC_Start_IT+0x46>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d104      	bne.n	80023d0 <HAL_TIM_IC_Start_IT+0x58>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	e013      	b.n	80023f8 <HAL_TIM_IC_Start_IT+0x80>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	d104      	bne.n	80023e0 <HAL_TIM_IC_Start_IT+0x68>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	e00b      	b.n	80023f8 <HAL_TIM_IC_Start_IT+0x80>
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	2b08      	cmp	r3, #8
 80023e4:	d104      	bne.n	80023f0 <HAL_TIM_IC_Start_IT+0x78>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	e003      	b.n	80023f8 <HAL_TIM_IC_Start_IT+0x80>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80023fa:	7bbb      	ldrb	r3, [r7, #14]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d102      	bne.n	8002406 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002400:	7b7b      	ldrb	r3, [r7, #13]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d001      	beq.n	800240a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e0c2      	b.n	8002590 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d104      	bne.n	800241a <HAL_TIM_IC_Start_IT+0xa2>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2202      	movs	r2, #2
 8002414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002418:	e013      	b.n	8002442 <HAL_TIM_IC_Start_IT+0xca>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	2b04      	cmp	r3, #4
 800241e:	d104      	bne.n	800242a <HAL_TIM_IC_Start_IT+0xb2>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2202      	movs	r2, #2
 8002424:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002428:	e00b      	b.n	8002442 <HAL_TIM_IC_Start_IT+0xca>
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	2b08      	cmp	r3, #8
 800242e:	d104      	bne.n	800243a <HAL_TIM_IC_Start_IT+0xc2>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2202      	movs	r2, #2
 8002434:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002438:	e003      	b.n	8002442 <HAL_TIM_IC_Start_IT+0xca>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2202      	movs	r2, #2
 800243e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d104      	bne.n	8002452 <HAL_TIM_IC_Start_IT+0xda>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2202      	movs	r2, #2
 800244c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002450:	e013      	b.n	800247a <HAL_TIM_IC_Start_IT+0x102>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	2b04      	cmp	r3, #4
 8002456:	d104      	bne.n	8002462 <HAL_TIM_IC_Start_IT+0xea>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2202      	movs	r2, #2
 800245c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002460:	e00b      	b.n	800247a <HAL_TIM_IC_Start_IT+0x102>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	2b08      	cmp	r3, #8
 8002466:	d104      	bne.n	8002472 <HAL_TIM_IC_Start_IT+0xfa>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2202      	movs	r2, #2
 800246c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002470:	e003      	b.n	800247a <HAL_TIM_IC_Start_IT+0x102>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2202      	movs	r2, #2
 8002476:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	2b0c      	cmp	r3, #12
 800247e:	d841      	bhi.n	8002504 <HAL_TIM_IC_Start_IT+0x18c>
 8002480:	a201      	add	r2, pc, #4	@ (adr r2, 8002488 <HAL_TIM_IC_Start_IT+0x110>)
 8002482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002486:	bf00      	nop
 8002488:	080024bd 	.word	0x080024bd
 800248c:	08002505 	.word	0x08002505
 8002490:	08002505 	.word	0x08002505
 8002494:	08002505 	.word	0x08002505
 8002498:	080024cf 	.word	0x080024cf
 800249c:	08002505 	.word	0x08002505
 80024a0:	08002505 	.word	0x08002505
 80024a4:	08002505 	.word	0x08002505
 80024a8:	080024e1 	.word	0x080024e1
 80024ac:	08002505 	.word	0x08002505
 80024b0:	08002505 	.word	0x08002505
 80024b4:	08002505 	.word	0x08002505
 80024b8:	080024f3 	.word	0x080024f3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 0202 	orr.w	r2, r2, #2
 80024ca:	60da      	str	r2, [r3, #12]
      break;
 80024cc:	e01d      	b.n	800250a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f042 0204 	orr.w	r2, r2, #4
 80024dc:	60da      	str	r2, [r3, #12]
      break;
 80024de:	e014      	b.n	800250a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68da      	ldr	r2, [r3, #12]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0208 	orr.w	r2, r2, #8
 80024ee:	60da      	str	r2, [r3, #12]
      break;
 80024f0:	e00b      	b.n	800250a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68da      	ldr	r2, [r3, #12]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 0210 	orr.w	r2, r2, #16
 8002500:	60da      	str	r2, [r3, #12]
      break;
 8002502:	e002      	b.n	800250a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	73fb      	strb	r3, [r7, #15]
      break;
 8002508:	bf00      	nop
  }

  if (status == HAL_OK)
 800250a:	7bfb      	ldrb	r3, [r7, #15]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d13e      	bne.n	800258e <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2201      	movs	r2, #1
 8002516:	6839      	ldr	r1, [r7, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f000 fd4b 	bl	8002fb4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a1d      	ldr	r2, [pc, #116]	@ (8002598 <HAL_TIM_IC_Start_IT+0x220>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d018      	beq.n	800255a <HAL_TIM_IC_Start_IT+0x1e2>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002530:	d013      	beq.n	800255a <HAL_TIM_IC_Start_IT+0x1e2>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a19      	ldr	r2, [pc, #100]	@ (800259c <HAL_TIM_IC_Start_IT+0x224>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d00e      	beq.n	800255a <HAL_TIM_IC_Start_IT+0x1e2>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a17      	ldr	r2, [pc, #92]	@ (80025a0 <HAL_TIM_IC_Start_IT+0x228>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d009      	beq.n	800255a <HAL_TIM_IC_Start_IT+0x1e2>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a16      	ldr	r2, [pc, #88]	@ (80025a4 <HAL_TIM_IC_Start_IT+0x22c>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d004      	beq.n	800255a <HAL_TIM_IC_Start_IT+0x1e2>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a14      	ldr	r2, [pc, #80]	@ (80025a8 <HAL_TIM_IC_Start_IT+0x230>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d111      	bne.n	800257e <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	2b06      	cmp	r3, #6
 800256a:	d010      	beq.n	800258e <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0201 	orr.w	r2, r2, #1
 800257a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800257c:	e007      	b.n	800258e <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f042 0201 	orr.w	r2, r2, #1
 800258c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800258e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40010000 	.word	0x40010000
 800259c:	40000400 	.word	0x40000400
 80025a0:	40000800 	.word	0x40000800
 80025a4:	40000c00 	.word	0x40000c00
 80025a8:	40014000 	.word	0x40014000

080025ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d020      	beq.n	8002610 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d01b      	beq.n	8002610 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f06f 0202 	mvn.w	r2, #2
 80025e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7fe f8f4 	bl	80007e4 <HAL_TIM_IC_CaptureCallback>
 80025fc:	e005      	b.n	800260a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 fa76 	bl	8002af0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 fa7d 	bl	8002b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	f003 0304 	and.w	r3, r3, #4
 8002616:	2b00      	cmp	r3, #0
 8002618:	d020      	beq.n	800265c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	2b00      	cmp	r3, #0
 8002622:	d01b      	beq.n	800265c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f06f 0204 	mvn.w	r2, #4
 800262c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2202      	movs	r2, #2
 8002632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7fe f8ce 	bl	80007e4 <HAL_TIM_IC_CaptureCallback>
 8002648:	e005      	b.n	8002656 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 fa50 	bl	8002af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 fa57 	bl	8002b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	f003 0308 	and.w	r3, r3, #8
 8002662:	2b00      	cmp	r3, #0
 8002664:	d020      	beq.n	80026a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f003 0308 	and.w	r3, r3, #8
 800266c:	2b00      	cmp	r3, #0
 800266e:	d01b      	beq.n	80026a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f06f 0208 	mvn.w	r2, #8
 8002678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2204      	movs	r2, #4
 800267e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7fe f8a8 	bl	80007e4 <HAL_TIM_IC_CaptureCallback>
 8002694:	e005      	b.n	80026a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 fa2a 	bl	8002af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 fa31 	bl	8002b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	f003 0310 	and.w	r3, r3, #16
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d020      	beq.n	80026f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f003 0310 	and.w	r3, r3, #16
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d01b      	beq.n	80026f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f06f 0210 	mvn.w	r2, #16
 80026c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2208      	movs	r2, #8
 80026ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7fe f882 	bl	80007e4 <HAL_TIM_IC_CaptureCallback>
 80026e0:	e005      	b.n	80026ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 fa04 	bl	8002af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 fa0b 	bl	8002b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00c      	beq.n	8002718 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b00      	cmp	r3, #0
 8002706:	d007      	beq.n	8002718 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f06f 0201 	mvn.w	r2, #1
 8002710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f9e2 	bl	8002adc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00c      	beq.n	800273c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002728:	2b00      	cmp	r3, #0
 800272a:	d007      	beq.n	800273c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 fcda 	bl	80030f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00c      	beq.n	8002760 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800274c:	2b00      	cmp	r3, #0
 800274e:	d007      	beq.n	8002760 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f9dc 	bl	8002b18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	f003 0320 	and.w	r3, r3, #32
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00c      	beq.n	8002784 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f003 0320 	and.w	r3, r3, #32
 8002770:	2b00      	cmp	r3, #0
 8002772:	d007      	beq.n	8002784 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f06f 0220 	mvn.w	r2, #32
 800277c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 fcac 	bl	80030dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002784:	bf00      	nop
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002798:	2300      	movs	r3, #0
 800279a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d101      	bne.n	80027aa <HAL_TIM_IC_ConfigChannel+0x1e>
 80027a6:	2302      	movs	r3, #2
 80027a8:	e088      	b.n	80028bc <HAL_TIM_IC_ConfigChannel+0x130>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d11b      	bne.n	80027f0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80027c8:	f000 fa3c 	bl	8002c44 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	699a      	ldr	r2, [r3, #24]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 020c 	bic.w	r2, r2, #12
 80027da:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6999      	ldr	r1, [r3, #24]
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	619a      	str	r2, [r3, #24]
 80027ee:	e060      	b.n	80028b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d11c      	bne.n	8002830 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002806:	f000 fab4 	bl	8002d72 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	699a      	ldr	r2, [r3, #24]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002818:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6999      	ldr	r1, [r3, #24]
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	021a      	lsls	r2, r3, #8
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	430a      	orrs	r2, r1
 800282c:	619a      	str	r2, [r3, #24]
 800282e:	e040      	b.n	80028b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b08      	cmp	r3, #8
 8002834:	d11b      	bne.n	800286e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002846:	f000 fb01 	bl	8002e4c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	69da      	ldr	r2, [r3, #28]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 020c 	bic.w	r2, r2, #12
 8002858:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	69d9      	ldr	r1, [r3, #28]
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	430a      	orrs	r2, r1
 800286a:	61da      	str	r2, [r3, #28]
 800286c:	e021      	b.n	80028b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b0c      	cmp	r3, #12
 8002872:	d11c      	bne.n	80028ae <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002884:	f000 fb1e 	bl	8002ec4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	69da      	ldr	r2, [r3, #28]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002896:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	69d9      	ldr	r1, [r3, #28]
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	021a      	lsls	r2, r3, #8
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	61da      	str	r2, [r3, #28]
 80028ac:	e001      	b.n	80028b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80028ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028ce:	2300      	movs	r3, #0
 80028d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d101      	bne.n	80028e0 <HAL_TIM_ConfigClockSource+0x1c>
 80028dc:	2302      	movs	r3, #2
 80028de:	e0b4      	b.n	8002a4a <HAL_TIM_ConfigClockSource+0x186>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80028fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002906:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002918:	d03e      	beq.n	8002998 <HAL_TIM_ConfigClockSource+0xd4>
 800291a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800291e:	f200 8087 	bhi.w	8002a30 <HAL_TIM_ConfigClockSource+0x16c>
 8002922:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002926:	f000 8086 	beq.w	8002a36 <HAL_TIM_ConfigClockSource+0x172>
 800292a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800292e:	d87f      	bhi.n	8002a30 <HAL_TIM_ConfigClockSource+0x16c>
 8002930:	2b70      	cmp	r3, #112	@ 0x70
 8002932:	d01a      	beq.n	800296a <HAL_TIM_ConfigClockSource+0xa6>
 8002934:	2b70      	cmp	r3, #112	@ 0x70
 8002936:	d87b      	bhi.n	8002a30 <HAL_TIM_ConfigClockSource+0x16c>
 8002938:	2b60      	cmp	r3, #96	@ 0x60
 800293a:	d050      	beq.n	80029de <HAL_TIM_ConfigClockSource+0x11a>
 800293c:	2b60      	cmp	r3, #96	@ 0x60
 800293e:	d877      	bhi.n	8002a30 <HAL_TIM_ConfigClockSource+0x16c>
 8002940:	2b50      	cmp	r3, #80	@ 0x50
 8002942:	d03c      	beq.n	80029be <HAL_TIM_ConfigClockSource+0xfa>
 8002944:	2b50      	cmp	r3, #80	@ 0x50
 8002946:	d873      	bhi.n	8002a30 <HAL_TIM_ConfigClockSource+0x16c>
 8002948:	2b40      	cmp	r3, #64	@ 0x40
 800294a:	d058      	beq.n	80029fe <HAL_TIM_ConfigClockSource+0x13a>
 800294c:	2b40      	cmp	r3, #64	@ 0x40
 800294e:	d86f      	bhi.n	8002a30 <HAL_TIM_ConfigClockSource+0x16c>
 8002950:	2b30      	cmp	r3, #48	@ 0x30
 8002952:	d064      	beq.n	8002a1e <HAL_TIM_ConfigClockSource+0x15a>
 8002954:	2b30      	cmp	r3, #48	@ 0x30
 8002956:	d86b      	bhi.n	8002a30 <HAL_TIM_ConfigClockSource+0x16c>
 8002958:	2b20      	cmp	r3, #32
 800295a:	d060      	beq.n	8002a1e <HAL_TIM_ConfigClockSource+0x15a>
 800295c:	2b20      	cmp	r3, #32
 800295e:	d867      	bhi.n	8002a30 <HAL_TIM_ConfigClockSource+0x16c>
 8002960:	2b00      	cmp	r3, #0
 8002962:	d05c      	beq.n	8002a1e <HAL_TIM_ConfigClockSource+0x15a>
 8002964:	2b10      	cmp	r3, #16
 8002966:	d05a      	beq.n	8002a1e <HAL_TIM_ConfigClockSource+0x15a>
 8002968:	e062      	b.n	8002a30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800297a:	f000 fafb 	bl	8002f74 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800298c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	609a      	str	r2, [r3, #8]
      break;
 8002996:	e04f      	b.n	8002a38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029a8:	f000 fae4 	bl	8002f74 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80029ba:	609a      	str	r2, [r3, #8]
      break;
 80029bc:	e03c      	b.n	8002a38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ca:	461a      	mov	r2, r3
 80029cc:	f000 f9a2 	bl	8002d14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2150      	movs	r1, #80	@ 0x50
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 fab1 	bl	8002f3e <TIM_ITRx_SetConfig>
      break;
 80029dc:	e02c      	b.n	8002a38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029ea:	461a      	mov	r2, r3
 80029ec:	f000 f9fe 	bl	8002dec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2160      	movs	r1, #96	@ 0x60
 80029f6:	4618      	mov	r0, r3
 80029f8:	f000 faa1 	bl	8002f3e <TIM_ITRx_SetConfig>
      break;
 80029fc:	e01c      	b.n	8002a38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	f000 f982 	bl	8002d14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2140      	movs	r1, #64	@ 0x40
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 fa91 	bl	8002f3e <TIM_ITRx_SetConfig>
      break;
 8002a1c:	e00c      	b.n	8002a38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4619      	mov	r1, r3
 8002a28:	4610      	mov	r0, r2
 8002a2a:	f000 fa88 	bl	8002f3e <TIM_ITRx_SetConfig>
      break;
 8002a2e:	e003      	b.n	8002a38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	73fb      	strb	r3, [r7, #15]
      break;
 8002a34:	e000      	b.n	8002a38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
	...

08002a54 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	2b0c      	cmp	r3, #12
 8002a66:	d831      	bhi.n	8002acc <HAL_TIM_ReadCapturedValue+0x78>
 8002a68:	a201      	add	r2, pc, #4	@ (adr r2, 8002a70 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a6e:	bf00      	nop
 8002a70:	08002aa5 	.word	0x08002aa5
 8002a74:	08002acd 	.word	0x08002acd
 8002a78:	08002acd 	.word	0x08002acd
 8002a7c:	08002acd 	.word	0x08002acd
 8002a80:	08002aaf 	.word	0x08002aaf
 8002a84:	08002acd 	.word	0x08002acd
 8002a88:	08002acd 	.word	0x08002acd
 8002a8c:	08002acd 	.word	0x08002acd
 8002a90:	08002ab9 	.word	0x08002ab9
 8002a94:	08002acd 	.word	0x08002acd
 8002a98:	08002acd 	.word	0x08002acd
 8002a9c:	08002acd 	.word	0x08002acd
 8002aa0:	08002ac3 	.word	0x08002ac3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aaa:	60fb      	str	r3, [r7, #12]

      break;
 8002aac:	e00f      	b.n	8002ace <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab4:	60fb      	str	r3, [r7, #12]

      break;
 8002ab6:	e00a      	b.n	8002ace <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002abe:	60fb      	str	r3, [r7, #12]

      break;
 8002ac0:	e005      	b.n	8002ace <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac8:	60fb      	str	r3, [r7, #12]

      break;
 8002aca:	e000      	b.n	8002ace <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002acc:	bf00      	nop
  }

  return tmpreg;
 8002ace:	68fb      	ldr	r3, [r7, #12]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a3a      	ldr	r2, [pc, #232]	@ (8002c28 <TIM_Base_SetConfig+0xfc>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d00f      	beq.n	8002b64 <TIM_Base_SetConfig+0x38>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b4a:	d00b      	beq.n	8002b64 <TIM_Base_SetConfig+0x38>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a37      	ldr	r2, [pc, #220]	@ (8002c2c <TIM_Base_SetConfig+0x100>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d007      	beq.n	8002b64 <TIM_Base_SetConfig+0x38>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a36      	ldr	r2, [pc, #216]	@ (8002c30 <TIM_Base_SetConfig+0x104>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d003      	beq.n	8002b64 <TIM_Base_SetConfig+0x38>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a35      	ldr	r2, [pc, #212]	@ (8002c34 <TIM_Base_SetConfig+0x108>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d108      	bne.n	8002b76 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a2b      	ldr	r2, [pc, #172]	@ (8002c28 <TIM_Base_SetConfig+0xfc>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d01b      	beq.n	8002bb6 <TIM_Base_SetConfig+0x8a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b84:	d017      	beq.n	8002bb6 <TIM_Base_SetConfig+0x8a>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a28      	ldr	r2, [pc, #160]	@ (8002c2c <TIM_Base_SetConfig+0x100>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d013      	beq.n	8002bb6 <TIM_Base_SetConfig+0x8a>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a27      	ldr	r2, [pc, #156]	@ (8002c30 <TIM_Base_SetConfig+0x104>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d00f      	beq.n	8002bb6 <TIM_Base_SetConfig+0x8a>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a26      	ldr	r2, [pc, #152]	@ (8002c34 <TIM_Base_SetConfig+0x108>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d00b      	beq.n	8002bb6 <TIM_Base_SetConfig+0x8a>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a25      	ldr	r2, [pc, #148]	@ (8002c38 <TIM_Base_SetConfig+0x10c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d007      	beq.n	8002bb6 <TIM_Base_SetConfig+0x8a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a24      	ldr	r2, [pc, #144]	@ (8002c3c <TIM_Base_SetConfig+0x110>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d003      	beq.n	8002bb6 <TIM_Base_SetConfig+0x8a>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a23      	ldr	r2, [pc, #140]	@ (8002c40 <TIM_Base_SetConfig+0x114>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d108      	bne.n	8002bc8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a0e      	ldr	r2, [pc, #56]	@ (8002c28 <TIM_Base_SetConfig+0xfc>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d103      	bne.n	8002bfc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	691a      	ldr	r2, [r3, #16]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d105      	bne.n	8002c1a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	f023 0201 	bic.w	r2, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	611a      	str	r2, [r3, #16]
  }
}
 8002c1a:	bf00      	nop
 8002c1c:	3714      	adds	r7, #20
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	40010000 	.word	0x40010000
 8002c2c:	40000400 	.word	0x40000400
 8002c30:	40000800 	.word	0x40000800
 8002c34:	40000c00 	.word	0x40000c00
 8002c38:	40014000 	.word	0x40014000
 8002c3c:	40014400 	.word	0x40014400
 8002c40:	40014800 	.word	0x40014800

08002c44 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b087      	sub	sp, #28
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
 8002c50:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	f023 0201 	bic.w	r2, r3, #1
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	4a24      	ldr	r2, [pc, #144]	@ (8002d00 <TIM_TI1_SetConfig+0xbc>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d013      	beq.n	8002c9a <TIM_TI1_SetConfig+0x56>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c78:	d00f      	beq.n	8002c9a <TIM_TI1_SetConfig+0x56>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	4a21      	ldr	r2, [pc, #132]	@ (8002d04 <TIM_TI1_SetConfig+0xc0>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d00b      	beq.n	8002c9a <TIM_TI1_SetConfig+0x56>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	4a20      	ldr	r2, [pc, #128]	@ (8002d08 <TIM_TI1_SetConfig+0xc4>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d007      	beq.n	8002c9a <TIM_TI1_SetConfig+0x56>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	4a1f      	ldr	r2, [pc, #124]	@ (8002d0c <TIM_TI1_SetConfig+0xc8>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d003      	beq.n	8002c9a <TIM_TI1_SetConfig+0x56>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4a1e      	ldr	r2, [pc, #120]	@ (8002d10 <TIM_TI1_SetConfig+0xcc>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d101      	bne.n	8002c9e <TIM_TI1_SetConfig+0x5a>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e000      	b.n	8002ca0 <TIM_TI1_SetConfig+0x5c>
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d008      	beq.n	8002cb6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	f023 0303 	bic.w	r3, r3, #3
 8002caa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	617b      	str	r3, [r7, #20]
 8002cb4:	e003      	b.n	8002cbe <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	f043 0301 	orr.w	r3, r3, #1
 8002cbc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002cc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	011b      	lsls	r3, r3, #4
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	697a      	ldr	r2, [r7, #20]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	f023 030a 	bic.w	r3, r3, #10
 8002cd8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	f003 030a 	and.w	r3, r3, #10
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	621a      	str	r2, [r3, #32]
}
 8002cf2:	bf00      	nop
 8002cf4:	371c      	adds	r7, #28
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40010000 	.word	0x40010000
 8002d04:	40000400 	.word	0x40000400
 8002d08:	40000800 	.word	0x40000800
 8002d0c:	40000c00 	.word	0x40000c00
 8002d10:	40014000 	.word	0x40014000

08002d14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b087      	sub	sp, #28
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	f023 0201 	bic.w	r2, r3, #1
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	011b      	lsls	r3, r3, #4
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	f023 030a 	bic.w	r3, r3, #10
 8002d50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	621a      	str	r2, [r3, #32]
}
 8002d66:	bf00      	nop
 8002d68:	371c      	adds	r7, #28
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b087      	sub	sp, #28
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	60f8      	str	r0, [r7, #12]
 8002d7a:	60b9      	str	r1, [r7, #8]
 8002d7c:	607a      	str	r2, [r7, #4]
 8002d7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	f023 0210 	bic.w	r2, r3, #16
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	021b      	lsls	r3, r3, #8
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002db0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	031b      	lsls	r3, r3, #12
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002dc4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	621a      	str	r2, [r3, #32]
}
 8002de0:	bf00      	nop
 8002de2:	371c      	adds	r7, #28
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b087      	sub	sp, #28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	f023 0210 	bic.w	r2, r3, #16
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002e16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	031b      	lsls	r3, r3, #12
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002e28:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	011b      	lsls	r3, r3, #4
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	621a      	str	r2, [r3, #32]
}
 8002e40:	bf00      	nop
 8002e42:	371c      	adds	r7, #28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b087      	sub	sp, #28
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
 8002e58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	69db      	ldr	r3, [r3, #28]
 8002e70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	f023 0303 	bic.w	r3, r3, #3
 8002e78:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e88:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	011b      	lsls	r3, r3, #4
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8002e9c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	021b      	lsls	r3, r3, #8
 8002ea2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	621a      	str	r2, [r3, #32]
}
 8002eb8:	bf00      	nop
 8002eba:	371c      	adds	r7, #28
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b087      	sub	sp, #28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
 8002ed0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	69db      	ldr	r3, [r3, #28]
 8002ee8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ef0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	021b      	lsls	r3, r3, #8
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002f02:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	031b      	lsls	r3, r3, #12
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8002f16:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	031b      	lsls	r3, r3, #12
 8002f1c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	621a      	str	r2, [r3, #32]
}
 8002f32:	bf00      	nop
 8002f34:	371c      	adds	r7, #28
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b085      	sub	sp, #20
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
 8002f46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	f043 0307 	orr.w	r3, r3, #7
 8002f60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	609a      	str	r2, [r3, #8]
}
 8002f68:	bf00      	nop
 8002f6a:	3714      	adds	r7, #20
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b087      	sub	sp, #28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
 8002f80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	021a      	lsls	r2, r3, #8
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	431a      	orrs	r2, r3
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	609a      	str	r2, [r3, #8]
}
 8002fa8:	bf00      	nop
 8002faa:	371c      	adds	r7, #28
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b087      	sub	sp, #28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	f003 031f 	and.w	r3, r3, #31
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6a1a      	ldr	r2, [r3, #32]
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	401a      	ands	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6a1a      	ldr	r2, [r3, #32]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	f003 031f 	and.w	r3, r3, #31
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fec:	431a      	orrs	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	621a      	str	r2, [r3, #32]
}
 8002ff2:	bf00      	nop
 8002ff4:	371c      	adds	r7, #28
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
	...

08003000 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003010:	2b01      	cmp	r3, #1
 8003012:	d101      	bne.n	8003018 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003014:	2302      	movs	r3, #2
 8003016:	e050      	b.n	80030ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2202      	movs	r2, #2
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800303e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	4313      	orrs	r3, r2
 8003048:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a1c      	ldr	r2, [pc, #112]	@ (80030c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d018      	beq.n	800308e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003064:	d013      	beq.n	800308e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a18      	ldr	r2, [pc, #96]	@ (80030cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d00e      	beq.n	800308e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a16      	ldr	r2, [pc, #88]	@ (80030d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d009      	beq.n	800308e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a15      	ldr	r2, [pc, #84]	@ (80030d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d004      	beq.n	800308e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a13      	ldr	r2, [pc, #76]	@ (80030d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d10c      	bne.n	80030a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003094:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	4313      	orrs	r3, r2
 800309e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68ba      	ldr	r2, [r7, #8]
 80030a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3714      	adds	r7, #20
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	40010000 	.word	0x40010000
 80030cc:	40000400 	.word	0x40000400
 80030d0:	40000800 	.word	0x40000800
 80030d4:	40000c00 	.word	0x40000c00
 80030d8:	40014000 	.word	0x40014000

080030dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e042      	b.n	800319c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d106      	bne.n	8003130 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f7fd fed2 	bl	8000ed4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2224      	movs	r2, #36	@ 0x24
 8003134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68da      	ldr	r2, [r3, #12]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003146:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 fd69 	bl	8003c20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	691a      	ldr	r2, [r3, #16]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800315c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	695a      	ldr	r2, [r3, #20]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800316c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68da      	ldr	r2, [r3, #12]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800317c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2220      	movs	r2, #32
 8003188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2220      	movs	r2, #32
 8003190:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b08a      	sub	sp, #40	@ 0x28
 80031a8:	af02      	add	r7, sp, #8
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	603b      	str	r3, [r7, #0]
 80031b0:	4613      	mov	r3, r2
 80031b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b20      	cmp	r3, #32
 80031c2:	d175      	bne.n	80032b0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d002      	beq.n	80031d0 <HAL_UART_Transmit+0x2c>
 80031ca:	88fb      	ldrh	r3, [r7, #6]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d101      	bne.n	80031d4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e06e      	b.n	80032b2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2221      	movs	r2, #33	@ 0x21
 80031de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031e2:	f7fe f861 	bl	80012a8 <HAL_GetTick>
 80031e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	88fa      	ldrh	r2, [r7, #6]
 80031ec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	88fa      	ldrh	r2, [r7, #6]
 80031f2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031fc:	d108      	bne.n	8003210 <HAL_UART_Transmit+0x6c>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d104      	bne.n	8003210 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003206:	2300      	movs	r3, #0
 8003208:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	61bb      	str	r3, [r7, #24]
 800320e:	e003      	b.n	8003218 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003214:	2300      	movs	r3, #0
 8003216:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003218:	e02e      	b.n	8003278 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	2200      	movs	r2, #0
 8003222:	2180      	movs	r1, #128	@ 0x80
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f000 fb05 	bl	8003834 <UART_WaitOnFlagUntilTimeout>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d005      	beq.n	800323c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2220      	movs	r2, #32
 8003234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e03a      	b.n	80032b2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10b      	bne.n	800325a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	881b      	ldrh	r3, [r3, #0]
 8003246:	461a      	mov	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003250:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	3302      	adds	r3, #2
 8003256:	61bb      	str	r3, [r7, #24]
 8003258:	e007      	b.n	800326a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	781a      	ldrb	r2, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	3301      	adds	r3, #1
 8003268:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800326e:	b29b      	uxth	r3, r3
 8003270:	3b01      	subs	r3, #1
 8003272:	b29a      	uxth	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800327c:	b29b      	uxth	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1cb      	bne.n	800321a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2200      	movs	r2, #0
 800328a:	2140      	movs	r1, #64	@ 0x40
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 fad1 	bl	8003834 <UART_WaitOnFlagUntilTimeout>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d005      	beq.n	80032a4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2220      	movs	r2, #32
 800329c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e006      	b.n	80032b2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80032ac:	2300      	movs	r3, #0
 80032ae:	e000      	b.n	80032b2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80032b0:	2302      	movs	r3, #2
  }
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3720      	adds	r7, #32
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
	...

080032bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b0ba      	sub	sp, #232	@ 0xe8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80032ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032f2:	f003 030f 	and.w	r3, r3, #15
 80032f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80032fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10f      	bne.n	8003322 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003306:	f003 0320 	and.w	r3, r3, #32
 800330a:	2b00      	cmp	r3, #0
 800330c:	d009      	beq.n	8003322 <HAL_UART_IRQHandler+0x66>
 800330e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003312:	f003 0320 	and.w	r3, r3, #32
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 fbc2 	bl	8003aa4 <UART_Receive_IT>
      return;
 8003320:	e25b      	b.n	80037da <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003322:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 80de 	beq.w	80034e8 <HAL_UART_IRQHandler+0x22c>
 800332c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	2b00      	cmp	r3, #0
 8003336:	d106      	bne.n	8003346 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800333c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 80d1 	beq.w	80034e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00b      	beq.n	800336a <HAL_UART_IRQHandler+0xae>
 8003352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800335a:	2b00      	cmp	r3, #0
 800335c:	d005      	beq.n	800336a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003362:	f043 0201 	orr.w	r2, r3, #1
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800336a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800336e:	f003 0304 	and.w	r3, r3, #4
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00b      	beq.n	800338e <HAL_UART_IRQHandler+0xd2>
 8003376:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d005      	beq.n	800338e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003386:	f043 0202 	orr.w	r2, r3, #2
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800338e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00b      	beq.n	80033b2 <HAL_UART_IRQHandler+0xf6>
 800339a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d005      	beq.n	80033b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033aa:	f043 0204 	orr.w	r2, r3, #4
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80033b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033b6:	f003 0308 	and.w	r3, r3, #8
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d011      	beq.n	80033e2 <HAL_UART_IRQHandler+0x126>
 80033be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033c2:	f003 0320 	and.w	r3, r3, #32
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d105      	bne.n	80033d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80033ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d005      	beq.n	80033e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033da:	f043 0208 	orr.w	r2, r3, #8
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 81f2 	beq.w	80037d0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033f0:	f003 0320 	and.w	r3, r3, #32
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d008      	beq.n	800340a <HAL_UART_IRQHandler+0x14e>
 80033f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033fc:	f003 0320 	and.w	r3, r3, #32
 8003400:	2b00      	cmp	r3, #0
 8003402:	d002      	beq.n	800340a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 fb4d 	bl	8003aa4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003414:	2b40      	cmp	r3, #64	@ 0x40
 8003416:	bf0c      	ite	eq
 8003418:	2301      	moveq	r3, #1
 800341a:	2300      	movne	r3, #0
 800341c:	b2db      	uxtb	r3, r3
 800341e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	2b00      	cmp	r3, #0
 800342c:	d103      	bne.n	8003436 <HAL_UART_IRQHandler+0x17a>
 800342e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003432:	2b00      	cmp	r3, #0
 8003434:	d04f      	beq.n	80034d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 fa55 	bl	80038e6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003446:	2b40      	cmp	r3, #64	@ 0x40
 8003448:	d141      	bne.n	80034ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	3314      	adds	r3, #20
 8003450:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003454:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003458:	e853 3f00 	ldrex	r3, [r3]
 800345c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003460:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003464:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003468:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	3314      	adds	r3, #20
 8003472:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003476:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800347a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003482:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003486:	e841 2300 	strex	r3, r2, [r1]
 800348a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800348e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1d9      	bne.n	800344a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800349a:	2b00      	cmp	r3, #0
 800349c:	d013      	beq.n	80034c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034a2:	4a7e      	ldr	r2, [pc, #504]	@ (800369c <HAL_UART_IRQHandler+0x3e0>)
 80034a4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fe f889 	bl	80015c2 <HAL_DMA_Abort_IT>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d016      	beq.n	80034e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80034c0:	4610      	mov	r0, r2
 80034c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034c4:	e00e      	b.n	80034e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f99e 	bl	8003808 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034cc:	e00a      	b.n	80034e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f99a 	bl	8003808 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034d4:	e006      	b.n	80034e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f996 	bl	8003808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80034e2:	e175      	b.n	80037d0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034e4:	bf00      	nop
    return;
 80034e6:	e173      	b.n	80037d0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	f040 814f 	bne.w	8003790 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80034f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034f6:	f003 0310 	and.w	r3, r3, #16
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 8148 	beq.w	8003790 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003504:	f003 0310 	and.w	r3, r3, #16
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 8141 	beq.w	8003790 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800350e:	2300      	movs	r3, #0
 8003510:	60bb      	str	r3, [r7, #8]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	60bb      	str	r3, [r7, #8]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	60bb      	str	r3, [r7, #8]
 8003522:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800352e:	2b40      	cmp	r3, #64	@ 0x40
 8003530:	f040 80b6 	bne.w	80036a0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003540:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 8145 	beq.w	80037d4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800354e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003552:	429a      	cmp	r2, r3
 8003554:	f080 813e 	bcs.w	80037d4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800355e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800356a:	f000 8088 	beq.w	800367e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	330c      	adds	r3, #12
 8003574:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003578:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800357c:	e853 3f00 	ldrex	r3, [r3]
 8003580:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003584:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003588:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800358c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	330c      	adds	r3, #12
 8003596:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800359a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800359e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80035a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80035aa:	e841 2300 	strex	r3, r2, [r1]
 80035ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80035b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1d9      	bne.n	800356e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	3314      	adds	r3, #20
 80035c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035c4:	e853 3f00 	ldrex	r3, [r3]
 80035c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80035ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80035cc:	f023 0301 	bic.w	r3, r3, #1
 80035d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	3314      	adds	r3, #20
 80035da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80035de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80035e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80035e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80035ea:	e841 2300 	strex	r3, r2, [r1]
 80035ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80035f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1e1      	bne.n	80035ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	3314      	adds	r3, #20
 80035fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003600:	e853 3f00 	ldrex	r3, [r3]
 8003604:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003606:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003608:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800360c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	3314      	adds	r3, #20
 8003616:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800361a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800361c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800361e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003620:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003622:	e841 2300 	strex	r3, r2, [r1]
 8003626:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003628:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1e3      	bne.n	80035f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2220      	movs	r2, #32
 8003632:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	330c      	adds	r3, #12
 8003642:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003644:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003646:	e853 3f00 	ldrex	r3, [r3]
 800364a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800364c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800364e:	f023 0310 	bic.w	r3, r3, #16
 8003652:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	330c      	adds	r3, #12
 800365c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003660:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003662:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003664:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003666:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003668:	e841 2300 	strex	r3, r2, [r1]
 800366c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800366e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1e3      	bne.n	800363c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003678:	4618      	mov	r0, r3
 800367a:	f7fd ff32 	bl	80014e2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2202      	movs	r2, #2
 8003682:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800368c:	b29b      	uxth	r3, r3
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	b29b      	uxth	r3, r3
 8003692:	4619      	mov	r1, r3
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f8c1 	bl	800381c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800369a:	e09b      	b.n	80037d4 <HAL_UART_IRQHandler+0x518>
 800369c:	080039ad 	.word	0x080039ad
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 808e 	beq.w	80037d8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80036bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 8089 	beq.w	80037d8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	330c      	adds	r3, #12
 80036cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036d0:	e853 3f00 	ldrex	r3, [r3]
 80036d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80036d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	330c      	adds	r3, #12
 80036e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80036ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80036ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80036f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036f2:	e841 2300 	strex	r3, r2, [r1]
 80036f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80036f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1e3      	bne.n	80036c6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	3314      	adds	r3, #20
 8003704:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003708:	e853 3f00 	ldrex	r3, [r3]
 800370c:	623b      	str	r3, [r7, #32]
   return(result);
 800370e:	6a3b      	ldr	r3, [r7, #32]
 8003710:	f023 0301 	bic.w	r3, r3, #1
 8003714:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	3314      	adds	r3, #20
 800371e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003722:	633a      	str	r2, [r7, #48]	@ 0x30
 8003724:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003726:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003728:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800372a:	e841 2300 	strex	r3, r2, [r1]
 800372e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1e3      	bne.n	80036fe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2220      	movs	r2, #32
 800373a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	330c      	adds	r3, #12
 800374a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	e853 3f00 	ldrex	r3, [r3]
 8003752:	60fb      	str	r3, [r7, #12]
   return(result);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f023 0310 	bic.w	r3, r3, #16
 800375a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	330c      	adds	r3, #12
 8003764:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003768:	61fa      	str	r2, [r7, #28]
 800376a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376c:	69b9      	ldr	r1, [r7, #24]
 800376e:	69fa      	ldr	r2, [r7, #28]
 8003770:	e841 2300 	strex	r3, r2, [r1]
 8003774:	617b      	str	r3, [r7, #20]
   return(result);
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1e3      	bne.n	8003744 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2202      	movs	r2, #2
 8003780:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003782:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003786:	4619      	mov	r1, r3
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f847 	bl	800381c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800378e:	e023      	b.n	80037d8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003794:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003798:	2b00      	cmp	r3, #0
 800379a:	d009      	beq.n	80037b0 <HAL_UART_IRQHandler+0x4f4>
 800379c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d003      	beq.n	80037b0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 f913 	bl	80039d4 <UART_Transmit_IT>
    return;
 80037ae:	e014      	b.n	80037da <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80037b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00e      	beq.n	80037da <HAL_UART_IRQHandler+0x51e>
 80037bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d008      	beq.n	80037da <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f953 	bl	8003a74 <UART_EndTransmit_IT>
    return;
 80037ce:	e004      	b.n	80037da <HAL_UART_IRQHandler+0x51e>
    return;
 80037d0:	bf00      	nop
 80037d2:	e002      	b.n	80037da <HAL_UART_IRQHandler+0x51e>
      return;
 80037d4:	bf00      	nop
 80037d6:	e000      	b.n	80037da <HAL_UART_IRQHandler+0x51e>
      return;
 80037d8:	bf00      	nop
  }
}
 80037da:	37e8      	adds	r7, #232	@ 0xe8
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	460b      	mov	r3, r1
 8003826:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	603b      	str	r3, [r7, #0]
 8003840:	4613      	mov	r3, r2
 8003842:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003844:	e03b      	b.n	80038be <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003846:	6a3b      	ldr	r3, [r7, #32]
 8003848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384c:	d037      	beq.n	80038be <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800384e:	f7fd fd2b 	bl	80012a8 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	6a3a      	ldr	r2, [r7, #32]
 800385a:	429a      	cmp	r2, r3
 800385c:	d302      	bcc.n	8003864 <UART_WaitOnFlagUntilTimeout+0x30>
 800385e:	6a3b      	ldr	r3, [r7, #32]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e03a      	b.n	80038de <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	f003 0304 	and.w	r3, r3, #4
 8003872:	2b00      	cmp	r3, #0
 8003874:	d023      	beq.n	80038be <UART_WaitOnFlagUntilTimeout+0x8a>
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	2b80      	cmp	r3, #128	@ 0x80
 800387a:	d020      	beq.n	80038be <UART_WaitOnFlagUntilTimeout+0x8a>
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	2b40      	cmp	r3, #64	@ 0x40
 8003880:	d01d      	beq.n	80038be <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0308 	and.w	r3, r3, #8
 800388c:	2b08      	cmp	r3, #8
 800388e:	d116      	bne.n	80038be <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003890:	2300      	movs	r3, #0
 8003892:	617b      	str	r3, [r7, #20]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	617b      	str	r3, [r7, #20]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	617b      	str	r3, [r7, #20]
 80038a4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 f81d 	bl	80038e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2208      	movs	r2, #8
 80038b0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e00f      	b.n	80038de <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	4013      	ands	r3, r2
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	bf0c      	ite	eq
 80038ce:	2301      	moveq	r3, #1
 80038d0:	2300      	movne	r3, #0
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	461a      	mov	r2, r3
 80038d6:	79fb      	ldrb	r3, [r7, #7]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d0b4      	beq.n	8003846 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b095      	sub	sp, #84	@ 0x54
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	330c      	adds	r3, #12
 80038f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038f8:	e853 3f00 	ldrex	r3, [r3]
 80038fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80038fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003900:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003904:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	330c      	adds	r3, #12
 800390c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800390e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003910:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003912:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003914:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003916:	e841 2300 	strex	r3, r2, [r1]
 800391a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800391c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1e5      	bne.n	80038ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	3314      	adds	r3, #20
 8003928:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392a:	6a3b      	ldr	r3, [r7, #32]
 800392c:	e853 3f00 	ldrex	r3, [r3]
 8003930:	61fb      	str	r3, [r7, #28]
   return(result);
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	f023 0301 	bic.w	r3, r3, #1
 8003938:	64bb      	str	r3, [r7, #72]	@ 0x48
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	3314      	adds	r3, #20
 8003940:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003942:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003944:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003946:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003948:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800394a:	e841 2300 	strex	r3, r2, [r1]
 800394e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1e5      	bne.n	8003922 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395a:	2b01      	cmp	r3, #1
 800395c:	d119      	bne.n	8003992 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	330c      	adds	r3, #12
 8003964:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	e853 3f00 	ldrex	r3, [r3]
 800396c:	60bb      	str	r3, [r7, #8]
   return(result);
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	f023 0310 	bic.w	r3, r3, #16
 8003974:	647b      	str	r3, [r7, #68]	@ 0x44
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	330c      	adds	r3, #12
 800397c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800397e:	61ba      	str	r2, [r7, #24]
 8003980:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003982:	6979      	ldr	r1, [r7, #20]
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	e841 2300 	strex	r3, r2, [r1]
 800398a:	613b      	str	r3, [r7, #16]
   return(result);
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1e5      	bne.n	800395e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2220      	movs	r2, #32
 8003996:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80039a0:	bf00      	nop
 80039a2:	3754      	adds	r7, #84	@ 0x54
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f7ff ff1e 	bl	8003808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039cc:	bf00      	nop
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b21      	cmp	r3, #33	@ 0x21
 80039e6:	d13e      	bne.n	8003a66 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039f0:	d114      	bne.n	8003a1c <UART_Transmit_IT+0x48>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d110      	bne.n	8003a1c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	881b      	ldrh	r3, [r3, #0]
 8003a04:	461a      	mov	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a0e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	1c9a      	adds	r2, r3, #2
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	621a      	str	r2, [r3, #32]
 8003a1a:	e008      	b.n	8003a2e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	1c59      	adds	r1, r3, #1
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	6211      	str	r1, [r2, #32]
 8003a26:	781a      	ldrb	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10f      	bne.n	8003a62 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68da      	ldr	r2, [r3, #12]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a50:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68da      	ldr	r2, [r3, #12]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a60:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a62:	2300      	movs	r3, #0
 8003a64:	e000      	b.n	8003a68 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a66:	2302      	movs	r3, #2
  }
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3714      	adds	r7, #20
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68da      	ldr	r2, [r3, #12]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a8a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f7ff fea3 	bl	80037e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b08c      	sub	sp, #48	@ 0x30
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b22      	cmp	r3, #34	@ 0x22
 8003ab6:	f040 80ae 	bne.w	8003c16 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ac2:	d117      	bne.n	8003af4 <UART_Receive_IT+0x50>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d113      	bne.n	8003af4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003acc:	2300      	movs	r3, #0
 8003ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ae6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aec:	1c9a      	adds	r2, r3, #2
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	629a      	str	r2, [r3, #40]	@ 0x28
 8003af2:	e026      	b.n	8003b42 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003afa:	2300      	movs	r3, #0
 8003afc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b06:	d007      	beq.n	8003b18 <UART_Receive_IT+0x74>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10a      	bne.n	8003b26 <UART_Receive_IT+0x82>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d106      	bne.n	8003b26 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	b2da      	uxtb	r2, r3
 8003b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b22:	701a      	strb	r2, [r3, #0]
 8003b24:	e008      	b.n	8003b38 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b36:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b3c:	1c5a      	adds	r2, r3, #1
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	4619      	mov	r1, r3
 8003b50:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d15d      	bne.n	8003c12 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68da      	ldr	r2, [r3, #12]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 0220 	bic.w	r2, r2, #32
 8003b64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68da      	ldr	r2, [r3, #12]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b74:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	695a      	ldr	r2, [r3, #20]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0201 	bic.w	r2, r2, #1
 8003b84:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d135      	bne.n	8003c08 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	330c      	adds	r3, #12
 8003ba8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	e853 3f00 	ldrex	r3, [r3]
 8003bb0:	613b      	str	r3, [r7, #16]
   return(result);
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	f023 0310 	bic.w	r3, r3, #16
 8003bb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	330c      	adds	r3, #12
 8003bc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bc2:	623a      	str	r2, [r7, #32]
 8003bc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc6:	69f9      	ldr	r1, [r7, #28]
 8003bc8:	6a3a      	ldr	r2, [r7, #32]
 8003bca:	e841 2300 	strex	r3, r2, [r1]
 8003bce:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1e5      	bne.n	8003ba2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0310 	and.w	r3, r3, #16
 8003be0:	2b10      	cmp	r3, #16
 8003be2:	d10a      	bne.n	8003bfa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003be4:	2300      	movs	r3, #0
 8003be6:	60fb      	str	r3, [r7, #12]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	60fb      	str	r3, [r7, #12]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	60fb      	str	r3, [r7, #12]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003bfe:	4619      	mov	r1, r3
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f7ff fe0b 	bl	800381c <HAL_UARTEx_RxEventCallback>
 8003c06:	e002      	b.n	8003c0e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f7ff fdf3 	bl	80037f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	e002      	b.n	8003c18 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003c12:	2300      	movs	r3, #0
 8003c14:	e000      	b.n	8003c18 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003c16:	2302      	movs	r3, #2
  }
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3730      	adds	r7, #48	@ 0x30
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c24:	b0c0      	sub	sp, #256	@ 0x100
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c3c:	68d9      	ldr	r1, [r3, #12]
 8003c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	ea40 0301 	orr.w	r3, r0, r1
 8003c48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	431a      	orrs	r2, r3
 8003c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003c78:	f021 010c 	bic.w	r1, r1, #12
 8003c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003c86:	430b      	orrs	r3, r1
 8003c88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c9a:	6999      	ldr	r1, [r3, #24]
 8003c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	ea40 0301 	orr.w	r3, r0, r1
 8003ca6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	4b8f      	ldr	r3, [pc, #572]	@ (8003eec <UART_SetConfig+0x2cc>)
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d005      	beq.n	8003cc0 <UART_SetConfig+0xa0>
 8003cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	4b8d      	ldr	r3, [pc, #564]	@ (8003ef0 <UART_SetConfig+0x2d0>)
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d104      	bne.n	8003cca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cc0:	f7fe faa8 	bl	8002214 <HAL_RCC_GetPCLK2Freq>
 8003cc4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003cc8:	e003      	b.n	8003cd2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cca:	f7fe fa8f 	bl	80021ec <HAL_RCC_GetPCLK1Freq>
 8003cce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cdc:	f040 810c 	bne.w	8003ef8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ce0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003cea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003cee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003cf2:	4622      	mov	r2, r4
 8003cf4:	462b      	mov	r3, r5
 8003cf6:	1891      	adds	r1, r2, r2
 8003cf8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003cfa:	415b      	adcs	r3, r3
 8003cfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003cfe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d02:	4621      	mov	r1, r4
 8003d04:	eb12 0801 	adds.w	r8, r2, r1
 8003d08:	4629      	mov	r1, r5
 8003d0a:	eb43 0901 	adc.w	r9, r3, r1
 8003d0e:	f04f 0200 	mov.w	r2, #0
 8003d12:	f04f 0300 	mov.w	r3, #0
 8003d16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d22:	4690      	mov	r8, r2
 8003d24:	4699      	mov	r9, r3
 8003d26:	4623      	mov	r3, r4
 8003d28:	eb18 0303 	adds.w	r3, r8, r3
 8003d2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003d30:	462b      	mov	r3, r5
 8003d32:	eb49 0303 	adc.w	r3, r9, r3
 8003d36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003d46:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003d4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003d4e:	460b      	mov	r3, r1
 8003d50:	18db      	adds	r3, r3, r3
 8003d52:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d54:	4613      	mov	r3, r2
 8003d56:	eb42 0303 	adc.w	r3, r2, r3
 8003d5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003d60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003d64:	f7fc fa8c 	bl	8000280 <__aeabi_uldivmod>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4b61      	ldr	r3, [pc, #388]	@ (8003ef4 <UART_SetConfig+0x2d4>)
 8003d6e:	fba3 2302 	umull	r2, r3, r3, r2
 8003d72:	095b      	lsrs	r3, r3, #5
 8003d74:	011c      	lsls	r4, r3, #4
 8003d76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d80:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003d84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003d88:	4642      	mov	r2, r8
 8003d8a:	464b      	mov	r3, r9
 8003d8c:	1891      	adds	r1, r2, r2
 8003d8e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003d90:	415b      	adcs	r3, r3
 8003d92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003d98:	4641      	mov	r1, r8
 8003d9a:	eb12 0a01 	adds.w	sl, r2, r1
 8003d9e:	4649      	mov	r1, r9
 8003da0:	eb43 0b01 	adc.w	fp, r3, r1
 8003da4:	f04f 0200 	mov.w	r2, #0
 8003da8:	f04f 0300 	mov.w	r3, #0
 8003dac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003db0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003db4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003db8:	4692      	mov	sl, r2
 8003dba:	469b      	mov	fp, r3
 8003dbc:	4643      	mov	r3, r8
 8003dbe:	eb1a 0303 	adds.w	r3, sl, r3
 8003dc2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003dc6:	464b      	mov	r3, r9
 8003dc8:	eb4b 0303 	adc.w	r3, fp, r3
 8003dcc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ddc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003de0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003de4:	460b      	mov	r3, r1
 8003de6:	18db      	adds	r3, r3, r3
 8003de8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003dea:	4613      	mov	r3, r2
 8003dec:	eb42 0303 	adc.w	r3, r2, r3
 8003df0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003df2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003df6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003dfa:	f7fc fa41 	bl	8000280 <__aeabi_uldivmod>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	460b      	mov	r3, r1
 8003e02:	4611      	mov	r1, r2
 8003e04:	4b3b      	ldr	r3, [pc, #236]	@ (8003ef4 <UART_SetConfig+0x2d4>)
 8003e06:	fba3 2301 	umull	r2, r3, r3, r1
 8003e0a:	095b      	lsrs	r3, r3, #5
 8003e0c:	2264      	movs	r2, #100	@ 0x64
 8003e0e:	fb02 f303 	mul.w	r3, r2, r3
 8003e12:	1acb      	subs	r3, r1, r3
 8003e14:	00db      	lsls	r3, r3, #3
 8003e16:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003e1a:	4b36      	ldr	r3, [pc, #216]	@ (8003ef4 <UART_SetConfig+0x2d4>)
 8003e1c:	fba3 2302 	umull	r2, r3, r3, r2
 8003e20:	095b      	lsrs	r3, r3, #5
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003e28:	441c      	add	r4, r3
 8003e2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e34:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003e38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003e3c:	4642      	mov	r2, r8
 8003e3e:	464b      	mov	r3, r9
 8003e40:	1891      	adds	r1, r2, r2
 8003e42:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003e44:	415b      	adcs	r3, r3
 8003e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003e4c:	4641      	mov	r1, r8
 8003e4e:	1851      	adds	r1, r2, r1
 8003e50:	6339      	str	r1, [r7, #48]	@ 0x30
 8003e52:	4649      	mov	r1, r9
 8003e54:	414b      	adcs	r3, r1
 8003e56:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e58:	f04f 0200 	mov.w	r2, #0
 8003e5c:	f04f 0300 	mov.w	r3, #0
 8003e60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003e64:	4659      	mov	r1, fp
 8003e66:	00cb      	lsls	r3, r1, #3
 8003e68:	4651      	mov	r1, sl
 8003e6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e6e:	4651      	mov	r1, sl
 8003e70:	00ca      	lsls	r2, r1, #3
 8003e72:	4610      	mov	r0, r2
 8003e74:	4619      	mov	r1, r3
 8003e76:	4603      	mov	r3, r0
 8003e78:	4642      	mov	r2, r8
 8003e7a:	189b      	adds	r3, r3, r2
 8003e7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e80:	464b      	mov	r3, r9
 8003e82:	460a      	mov	r2, r1
 8003e84:	eb42 0303 	adc.w	r3, r2, r3
 8003e88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003e98:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003e9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	18db      	adds	r3, r3, r3
 8003ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	eb42 0303 	adc.w	r3, r2, r3
 8003eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003eae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003eb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003eb6:	f7fc f9e3 	bl	8000280 <__aeabi_uldivmod>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8003ef4 <UART_SetConfig+0x2d4>)
 8003ec0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ec4:	095b      	lsrs	r3, r3, #5
 8003ec6:	2164      	movs	r1, #100	@ 0x64
 8003ec8:	fb01 f303 	mul.w	r3, r1, r3
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	3332      	adds	r3, #50	@ 0x32
 8003ed2:	4a08      	ldr	r2, [pc, #32]	@ (8003ef4 <UART_SetConfig+0x2d4>)
 8003ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed8:	095b      	lsrs	r3, r3, #5
 8003eda:	f003 0207 	and.w	r2, r3, #7
 8003ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4422      	add	r2, r4
 8003ee6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ee8:	e106      	b.n	80040f8 <UART_SetConfig+0x4d8>
 8003eea:	bf00      	nop
 8003eec:	40011000 	.word	0x40011000
 8003ef0:	40011400 	.word	0x40011400
 8003ef4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ef8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003efc:	2200      	movs	r2, #0
 8003efe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f02:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003f06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003f0a:	4642      	mov	r2, r8
 8003f0c:	464b      	mov	r3, r9
 8003f0e:	1891      	adds	r1, r2, r2
 8003f10:	6239      	str	r1, [r7, #32]
 8003f12:	415b      	adcs	r3, r3
 8003f14:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f1a:	4641      	mov	r1, r8
 8003f1c:	1854      	adds	r4, r2, r1
 8003f1e:	4649      	mov	r1, r9
 8003f20:	eb43 0501 	adc.w	r5, r3, r1
 8003f24:	f04f 0200 	mov.w	r2, #0
 8003f28:	f04f 0300 	mov.w	r3, #0
 8003f2c:	00eb      	lsls	r3, r5, #3
 8003f2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f32:	00e2      	lsls	r2, r4, #3
 8003f34:	4614      	mov	r4, r2
 8003f36:	461d      	mov	r5, r3
 8003f38:	4643      	mov	r3, r8
 8003f3a:	18e3      	adds	r3, r4, r3
 8003f3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f40:	464b      	mov	r3, r9
 8003f42:	eb45 0303 	adc.w	r3, r5, r3
 8003f46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f56:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003f5a:	f04f 0200 	mov.w	r2, #0
 8003f5e:	f04f 0300 	mov.w	r3, #0
 8003f62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003f66:	4629      	mov	r1, r5
 8003f68:	008b      	lsls	r3, r1, #2
 8003f6a:	4621      	mov	r1, r4
 8003f6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f70:	4621      	mov	r1, r4
 8003f72:	008a      	lsls	r2, r1, #2
 8003f74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003f78:	f7fc f982 	bl	8000280 <__aeabi_uldivmod>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	460b      	mov	r3, r1
 8003f80:	4b60      	ldr	r3, [pc, #384]	@ (8004104 <UART_SetConfig+0x4e4>)
 8003f82:	fba3 2302 	umull	r2, r3, r3, r2
 8003f86:	095b      	lsrs	r3, r3, #5
 8003f88:	011c      	lsls	r4, r3, #4
 8003f8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003f94:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003f98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003f9c:	4642      	mov	r2, r8
 8003f9e:	464b      	mov	r3, r9
 8003fa0:	1891      	adds	r1, r2, r2
 8003fa2:	61b9      	str	r1, [r7, #24]
 8003fa4:	415b      	adcs	r3, r3
 8003fa6:	61fb      	str	r3, [r7, #28]
 8003fa8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fac:	4641      	mov	r1, r8
 8003fae:	1851      	adds	r1, r2, r1
 8003fb0:	6139      	str	r1, [r7, #16]
 8003fb2:	4649      	mov	r1, r9
 8003fb4:	414b      	adcs	r3, r1
 8003fb6:	617b      	str	r3, [r7, #20]
 8003fb8:	f04f 0200 	mov.w	r2, #0
 8003fbc:	f04f 0300 	mov.w	r3, #0
 8003fc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fc4:	4659      	mov	r1, fp
 8003fc6:	00cb      	lsls	r3, r1, #3
 8003fc8:	4651      	mov	r1, sl
 8003fca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fce:	4651      	mov	r1, sl
 8003fd0:	00ca      	lsls	r2, r1, #3
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	4642      	mov	r2, r8
 8003fda:	189b      	adds	r3, r3, r2
 8003fdc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003fe0:	464b      	mov	r3, r9
 8003fe2:	460a      	mov	r2, r1
 8003fe4:	eb42 0303 	adc.w	r3, r2, r3
 8003fe8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003ff6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003ff8:	f04f 0200 	mov.w	r2, #0
 8003ffc:	f04f 0300 	mov.w	r3, #0
 8004000:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004004:	4649      	mov	r1, r9
 8004006:	008b      	lsls	r3, r1, #2
 8004008:	4641      	mov	r1, r8
 800400a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800400e:	4641      	mov	r1, r8
 8004010:	008a      	lsls	r2, r1, #2
 8004012:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004016:	f7fc f933 	bl	8000280 <__aeabi_uldivmod>
 800401a:	4602      	mov	r2, r0
 800401c:	460b      	mov	r3, r1
 800401e:	4611      	mov	r1, r2
 8004020:	4b38      	ldr	r3, [pc, #224]	@ (8004104 <UART_SetConfig+0x4e4>)
 8004022:	fba3 2301 	umull	r2, r3, r3, r1
 8004026:	095b      	lsrs	r3, r3, #5
 8004028:	2264      	movs	r2, #100	@ 0x64
 800402a:	fb02 f303 	mul.w	r3, r2, r3
 800402e:	1acb      	subs	r3, r1, r3
 8004030:	011b      	lsls	r3, r3, #4
 8004032:	3332      	adds	r3, #50	@ 0x32
 8004034:	4a33      	ldr	r2, [pc, #204]	@ (8004104 <UART_SetConfig+0x4e4>)
 8004036:	fba2 2303 	umull	r2, r3, r2, r3
 800403a:	095b      	lsrs	r3, r3, #5
 800403c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004040:	441c      	add	r4, r3
 8004042:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004046:	2200      	movs	r2, #0
 8004048:	673b      	str	r3, [r7, #112]	@ 0x70
 800404a:	677a      	str	r2, [r7, #116]	@ 0x74
 800404c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004050:	4642      	mov	r2, r8
 8004052:	464b      	mov	r3, r9
 8004054:	1891      	adds	r1, r2, r2
 8004056:	60b9      	str	r1, [r7, #8]
 8004058:	415b      	adcs	r3, r3
 800405a:	60fb      	str	r3, [r7, #12]
 800405c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004060:	4641      	mov	r1, r8
 8004062:	1851      	adds	r1, r2, r1
 8004064:	6039      	str	r1, [r7, #0]
 8004066:	4649      	mov	r1, r9
 8004068:	414b      	adcs	r3, r1
 800406a:	607b      	str	r3, [r7, #4]
 800406c:	f04f 0200 	mov.w	r2, #0
 8004070:	f04f 0300 	mov.w	r3, #0
 8004074:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004078:	4659      	mov	r1, fp
 800407a:	00cb      	lsls	r3, r1, #3
 800407c:	4651      	mov	r1, sl
 800407e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004082:	4651      	mov	r1, sl
 8004084:	00ca      	lsls	r2, r1, #3
 8004086:	4610      	mov	r0, r2
 8004088:	4619      	mov	r1, r3
 800408a:	4603      	mov	r3, r0
 800408c:	4642      	mov	r2, r8
 800408e:	189b      	adds	r3, r3, r2
 8004090:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004092:	464b      	mov	r3, r9
 8004094:	460a      	mov	r2, r1
 8004096:	eb42 0303 	adc.w	r3, r2, r3
 800409a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800409c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80040a6:	667a      	str	r2, [r7, #100]	@ 0x64
 80040a8:	f04f 0200 	mov.w	r2, #0
 80040ac:	f04f 0300 	mov.w	r3, #0
 80040b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80040b4:	4649      	mov	r1, r9
 80040b6:	008b      	lsls	r3, r1, #2
 80040b8:	4641      	mov	r1, r8
 80040ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040be:	4641      	mov	r1, r8
 80040c0:	008a      	lsls	r2, r1, #2
 80040c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80040c6:	f7fc f8db 	bl	8000280 <__aeabi_uldivmod>
 80040ca:	4602      	mov	r2, r0
 80040cc:	460b      	mov	r3, r1
 80040ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004104 <UART_SetConfig+0x4e4>)
 80040d0:	fba3 1302 	umull	r1, r3, r3, r2
 80040d4:	095b      	lsrs	r3, r3, #5
 80040d6:	2164      	movs	r1, #100	@ 0x64
 80040d8:	fb01 f303 	mul.w	r3, r1, r3
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	011b      	lsls	r3, r3, #4
 80040e0:	3332      	adds	r3, #50	@ 0x32
 80040e2:	4a08      	ldr	r2, [pc, #32]	@ (8004104 <UART_SetConfig+0x4e4>)
 80040e4:	fba2 2303 	umull	r2, r3, r2, r3
 80040e8:	095b      	lsrs	r3, r3, #5
 80040ea:	f003 020f 	and.w	r2, r3, #15
 80040ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4422      	add	r2, r4
 80040f6:	609a      	str	r2, [r3, #8]
}
 80040f8:	bf00      	nop
 80040fa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80040fe:	46bd      	mov	sp, r7
 8004100:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004104:	51eb851f 	.word	0x51eb851f

08004108 <_ZdlPvj>:
 8004108:	f000 b811 	b.w	800412e <_ZdlPv>

0800410c <_Znwj>:
 800410c:	2801      	cmp	r0, #1
 800410e:	bf38      	it	cc
 8004110:	2001      	movcc	r0, #1
 8004112:	b510      	push	{r4, lr}
 8004114:	4604      	mov	r4, r0
 8004116:	4620      	mov	r0, r4
 8004118:	f000 f81c 	bl	8004154 <malloc>
 800411c:	b100      	cbz	r0, 8004120 <_Znwj+0x14>
 800411e:	bd10      	pop	{r4, pc}
 8004120:	f000 f808 	bl	8004134 <_ZSt15get_new_handlerv>
 8004124:	b908      	cbnz	r0, 800412a <_Znwj+0x1e>
 8004126:	f000 f80d 	bl	8004144 <abort>
 800412a:	4780      	blx	r0
 800412c:	e7f3      	b.n	8004116 <_Znwj+0xa>

0800412e <_ZdlPv>:
 800412e:	f000 b819 	b.w	8004164 <free>
	...

08004134 <_ZSt15get_new_handlerv>:
 8004134:	4b02      	ldr	r3, [pc, #8]	@ (8004140 <_ZSt15get_new_handlerv+0xc>)
 8004136:	6818      	ldr	r0, [r3, #0]
 8004138:	f3bf 8f5b 	dmb	ish
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	200001a8 	.word	0x200001a8

08004144 <abort>:
 8004144:	b508      	push	{r3, lr}
 8004146:	2006      	movs	r0, #6
 8004148:	f000 f926 	bl	8004398 <raise>
 800414c:	2001      	movs	r0, #1
 800414e:	f7fc ffc7 	bl	80010e0 <_exit>
	...

08004154 <malloc>:
 8004154:	4b02      	ldr	r3, [pc, #8]	@ (8004160 <malloc+0xc>)
 8004156:	4601      	mov	r1, r0
 8004158:	6818      	ldr	r0, [r3, #0]
 800415a:	f000 b82d 	b.w	80041b8 <_malloc_r>
 800415e:	bf00      	nop
 8004160:	2000000c 	.word	0x2000000c

08004164 <free>:
 8004164:	4b02      	ldr	r3, [pc, #8]	@ (8004170 <free+0xc>)
 8004166:	4601      	mov	r1, r0
 8004168:	6818      	ldr	r0, [r3, #0]
 800416a:	f000 b96d 	b.w	8004448 <_free_r>
 800416e:	bf00      	nop
 8004170:	2000000c 	.word	0x2000000c

08004174 <sbrk_aligned>:
 8004174:	b570      	push	{r4, r5, r6, lr}
 8004176:	4e0f      	ldr	r6, [pc, #60]	@ (80041b4 <sbrk_aligned+0x40>)
 8004178:	460c      	mov	r4, r1
 800417a:	6831      	ldr	r1, [r6, #0]
 800417c:	4605      	mov	r5, r0
 800417e:	b911      	cbnz	r1, 8004186 <sbrk_aligned+0x12>
 8004180:	f000 f926 	bl	80043d0 <_sbrk_r>
 8004184:	6030      	str	r0, [r6, #0]
 8004186:	4621      	mov	r1, r4
 8004188:	4628      	mov	r0, r5
 800418a:	f000 f921 	bl	80043d0 <_sbrk_r>
 800418e:	1c43      	adds	r3, r0, #1
 8004190:	d103      	bne.n	800419a <sbrk_aligned+0x26>
 8004192:	f04f 34ff 	mov.w	r4, #4294967295
 8004196:	4620      	mov	r0, r4
 8004198:	bd70      	pop	{r4, r5, r6, pc}
 800419a:	1cc4      	adds	r4, r0, #3
 800419c:	f024 0403 	bic.w	r4, r4, #3
 80041a0:	42a0      	cmp	r0, r4
 80041a2:	d0f8      	beq.n	8004196 <sbrk_aligned+0x22>
 80041a4:	1a21      	subs	r1, r4, r0
 80041a6:	4628      	mov	r0, r5
 80041a8:	f000 f912 	bl	80043d0 <_sbrk_r>
 80041ac:	3001      	adds	r0, #1
 80041ae:	d1f2      	bne.n	8004196 <sbrk_aligned+0x22>
 80041b0:	e7ef      	b.n	8004192 <sbrk_aligned+0x1e>
 80041b2:	bf00      	nop
 80041b4:	200001ac 	.word	0x200001ac

080041b8 <_malloc_r>:
 80041b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041bc:	1ccd      	adds	r5, r1, #3
 80041be:	f025 0503 	bic.w	r5, r5, #3
 80041c2:	3508      	adds	r5, #8
 80041c4:	2d0c      	cmp	r5, #12
 80041c6:	bf38      	it	cc
 80041c8:	250c      	movcc	r5, #12
 80041ca:	2d00      	cmp	r5, #0
 80041cc:	4606      	mov	r6, r0
 80041ce:	db01      	blt.n	80041d4 <_malloc_r+0x1c>
 80041d0:	42a9      	cmp	r1, r5
 80041d2:	d904      	bls.n	80041de <_malloc_r+0x26>
 80041d4:	230c      	movs	r3, #12
 80041d6:	6033      	str	r3, [r6, #0]
 80041d8:	2000      	movs	r0, #0
 80041da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80042b4 <_malloc_r+0xfc>
 80041e2:	f000 f869 	bl	80042b8 <__malloc_lock>
 80041e6:	f8d8 3000 	ldr.w	r3, [r8]
 80041ea:	461c      	mov	r4, r3
 80041ec:	bb44      	cbnz	r4, 8004240 <_malloc_r+0x88>
 80041ee:	4629      	mov	r1, r5
 80041f0:	4630      	mov	r0, r6
 80041f2:	f7ff ffbf 	bl	8004174 <sbrk_aligned>
 80041f6:	1c43      	adds	r3, r0, #1
 80041f8:	4604      	mov	r4, r0
 80041fa:	d158      	bne.n	80042ae <_malloc_r+0xf6>
 80041fc:	f8d8 4000 	ldr.w	r4, [r8]
 8004200:	4627      	mov	r7, r4
 8004202:	2f00      	cmp	r7, #0
 8004204:	d143      	bne.n	800428e <_malloc_r+0xd6>
 8004206:	2c00      	cmp	r4, #0
 8004208:	d04b      	beq.n	80042a2 <_malloc_r+0xea>
 800420a:	6823      	ldr	r3, [r4, #0]
 800420c:	4639      	mov	r1, r7
 800420e:	4630      	mov	r0, r6
 8004210:	eb04 0903 	add.w	r9, r4, r3
 8004214:	f000 f8dc 	bl	80043d0 <_sbrk_r>
 8004218:	4581      	cmp	r9, r0
 800421a:	d142      	bne.n	80042a2 <_malloc_r+0xea>
 800421c:	6821      	ldr	r1, [r4, #0]
 800421e:	1a6d      	subs	r5, r5, r1
 8004220:	4629      	mov	r1, r5
 8004222:	4630      	mov	r0, r6
 8004224:	f7ff ffa6 	bl	8004174 <sbrk_aligned>
 8004228:	3001      	adds	r0, #1
 800422a:	d03a      	beq.n	80042a2 <_malloc_r+0xea>
 800422c:	6823      	ldr	r3, [r4, #0]
 800422e:	442b      	add	r3, r5
 8004230:	6023      	str	r3, [r4, #0]
 8004232:	f8d8 3000 	ldr.w	r3, [r8]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	bb62      	cbnz	r2, 8004294 <_malloc_r+0xdc>
 800423a:	f8c8 7000 	str.w	r7, [r8]
 800423e:	e00f      	b.n	8004260 <_malloc_r+0xa8>
 8004240:	6822      	ldr	r2, [r4, #0]
 8004242:	1b52      	subs	r2, r2, r5
 8004244:	d420      	bmi.n	8004288 <_malloc_r+0xd0>
 8004246:	2a0b      	cmp	r2, #11
 8004248:	d917      	bls.n	800427a <_malloc_r+0xc2>
 800424a:	1961      	adds	r1, r4, r5
 800424c:	42a3      	cmp	r3, r4
 800424e:	6025      	str	r5, [r4, #0]
 8004250:	bf18      	it	ne
 8004252:	6059      	strne	r1, [r3, #4]
 8004254:	6863      	ldr	r3, [r4, #4]
 8004256:	bf08      	it	eq
 8004258:	f8c8 1000 	streq.w	r1, [r8]
 800425c:	5162      	str	r2, [r4, r5]
 800425e:	604b      	str	r3, [r1, #4]
 8004260:	4630      	mov	r0, r6
 8004262:	f000 f82f 	bl	80042c4 <__malloc_unlock>
 8004266:	f104 000b 	add.w	r0, r4, #11
 800426a:	1d23      	adds	r3, r4, #4
 800426c:	f020 0007 	bic.w	r0, r0, #7
 8004270:	1ac2      	subs	r2, r0, r3
 8004272:	bf1c      	itt	ne
 8004274:	1a1b      	subne	r3, r3, r0
 8004276:	50a3      	strne	r3, [r4, r2]
 8004278:	e7af      	b.n	80041da <_malloc_r+0x22>
 800427a:	6862      	ldr	r2, [r4, #4]
 800427c:	42a3      	cmp	r3, r4
 800427e:	bf0c      	ite	eq
 8004280:	f8c8 2000 	streq.w	r2, [r8]
 8004284:	605a      	strne	r2, [r3, #4]
 8004286:	e7eb      	b.n	8004260 <_malloc_r+0xa8>
 8004288:	4623      	mov	r3, r4
 800428a:	6864      	ldr	r4, [r4, #4]
 800428c:	e7ae      	b.n	80041ec <_malloc_r+0x34>
 800428e:	463c      	mov	r4, r7
 8004290:	687f      	ldr	r7, [r7, #4]
 8004292:	e7b6      	b.n	8004202 <_malloc_r+0x4a>
 8004294:	461a      	mov	r2, r3
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	42a3      	cmp	r3, r4
 800429a:	d1fb      	bne.n	8004294 <_malloc_r+0xdc>
 800429c:	2300      	movs	r3, #0
 800429e:	6053      	str	r3, [r2, #4]
 80042a0:	e7de      	b.n	8004260 <_malloc_r+0xa8>
 80042a2:	230c      	movs	r3, #12
 80042a4:	6033      	str	r3, [r6, #0]
 80042a6:	4630      	mov	r0, r6
 80042a8:	f000 f80c 	bl	80042c4 <__malloc_unlock>
 80042ac:	e794      	b.n	80041d8 <_malloc_r+0x20>
 80042ae:	6005      	str	r5, [r0, #0]
 80042b0:	e7d6      	b.n	8004260 <_malloc_r+0xa8>
 80042b2:	bf00      	nop
 80042b4:	200001b0 	.word	0x200001b0

080042b8 <__malloc_lock>:
 80042b8:	4801      	ldr	r0, [pc, #4]	@ (80042c0 <__malloc_lock+0x8>)
 80042ba:	f000 b8c3 	b.w	8004444 <__retarget_lock_acquire_recursive>
 80042be:	bf00      	nop
 80042c0:	200002f0 	.word	0x200002f0

080042c4 <__malloc_unlock>:
 80042c4:	4801      	ldr	r0, [pc, #4]	@ (80042cc <__malloc_unlock+0x8>)
 80042c6:	f000 b8be 	b.w	8004446 <__retarget_lock_release_recursive>
 80042ca:	bf00      	nop
 80042cc:	200002f0 	.word	0x200002f0

080042d0 <sniprintf>:
 80042d0:	b40c      	push	{r2, r3}
 80042d2:	b530      	push	{r4, r5, lr}
 80042d4:	4b17      	ldr	r3, [pc, #92]	@ (8004334 <sniprintf+0x64>)
 80042d6:	1e0c      	subs	r4, r1, #0
 80042d8:	681d      	ldr	r5, [r3, #0]
 80042da:	b09d      	sub	sp, #116	@ 0x74
 80042dc:	da08      	bge.n	80042f0 <sniprintf+0x20>
 80042de:	238b      	movs	r3, #139	@ 0x8b
 80042e0:	602b      	str	r3, [r5, #0]
 80042e2:	f04f 30ff 	mov.w	r0, #4294967295
 80042e6:	b01d      	add	sp, #116	@ 0x74
 80042e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80042ec:	b002      	add	sp, #8
 80042ee:	4770      	bx	lr
 80042f0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80042f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80042f8:	bf14      	ite	ne
 80042fa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80042fe:	4623      	moveq	r3, r4
 8004300:	9304      	str	r3, [sp, #16]
 8004302:	9307      	str	r3, [sp, #28]
 8004304:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004308:	9002      	str	r0, [sp, #8]
 800430a:	9006      	str	r0, [sp, #24]
 800430c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004310:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004312:	ab21      	add	r3, sp, #132	@ 0x84
 8004314:	a902      	add	r1, sp, #8
 8004316:	4628      	mov	r0, r5
 8004318:	9301      	str	r3, [sp, #4]
 800431a:	f000 f93b 	bl	8004594 <_svfiprintf_r>
 800431e:	1c43      	adds	r3, r0, #1
 8004320:	bfbc      	itt	lt
 8004322:	238b      	movlt	r3, #139	@ 0x8b
 8004324:	602b      	strlt	r3, [r5, #0]
 8004326:	2c00      	cmp	r4, #0
 8004328:	d0dd      	beq.n	80042e6 <sniprintf+0x16>
 800432a:	9b02      	ldr	r3, [sp, #8]
 800432c:	2200      	movs	r2, #0
 800432e:	701a      	strb	r2, [r3, #0]
 8004330:	e7d9      	b.n	80042e6 <sniprintf+0x16>
 8004332:	bf00      	nop
 8004334:	2000000c 	.word	0x2000000c

08004338 <memset>:
 8004338:	4402      	add	r2, r0
 800433a:	4603      	mov	r3, r0
 800433c:	4293      	cmp	r3, r2
 800433e:	d100      	bne.n	8004342 <memset+0xa>
 8004340:	4770      	bx	lr
 8004342:	f803 1b01 	strb.w	r1, [r3], #1
 8004346:	e7f9      	b.n	800433c <memset+0x4>

08004348 <_raise_r>:
 8004348:	291f      	cmp	r1, #31
 800434a:	b538      	push	{r3, r4, r5, lr}
 800434c:	4605      	mov	r5, r0
 800434e:	460c      	mov	r4, r1
 8004350:	d904      	bls.n	800435c <_raise_r+0x14>
 8004352:	2316      	movs	r3, #22
 8004354:	6003      	str	r3, [r0, #0]
 8004356:	f04f 30ff 	mov.w	r0, #4294967295
 800435a:	bd38      	pop	{r3, r4, r5, pc}
 800435c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800435e:	b112      	cbz	r2, 8004366 <_raise_r+0x1e>
 8004360:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004364:	b94b      	cbnz	r3, 800437a <_raise_r+0x32>
 8004366:	4628      	mov	r0, r5
 8004368:	f000 f830 	bl	80043cc <_getpid_r>
 800436c:	4622      	mov	r2, r4
 800436e:	4601      	mov	r1, r0
 8004370:	4628      	mov	r0, r5
 8004372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004376:	f000 b817 	b.w	80043a8 <_kill_r>
 800437a:	2b01      	cmp	r3, #1
 800437c:	d00a      	beq.n	8004394 <_raise_r+0x4c>
 800437e:	1c59      	adds	r1, r3, #1
 8004380:	d103      	bne.n	800438a <_raise_r+0x42>
 8004382:	2316      	movs	r3, #22
 8004384:	6003      	str	r3, [r0, #0]
 8004386:	2001      	movs	r0, #1
 8004388:	e7e7      	b.n	800435a <_raise_r+0x12>
 800438a:	2100      	movs	r1, #0
 800438c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004390:	4620      	mov	r0, r4
 8004392:	4798      	blx	r3
 8004394:	2000      	movs	r0, #0
 8004396:	e7e0      	b.n	800435a <_raise_r+0x12>

08004398 <raise>:
 8004398:	4b02      	ldr	r3, [pc, #8]	@ (80043a4 <raise+0xc>)
 800439a:	4601      	mov	r1, r0
 800439c:	6818      	ldr	r0, [r3, #0]
 800439e:	f7ff bfd3 	b.w	8004348 <_raise_r>
 80043a2:	bf00      	nop
 80043a4:	2000000c 	.word	0x2000000c

080043a8 <_kill_r>:
 80043a8:	b538      	push	{r3, r4, r5, lr}
 80043aa:	4d07      	ldr	r5, [pc, #28]	@ (80043c8 <_kill_r+0x20>)
 80043ac:	2300      	movs	r3, #0
 80043ae:	4604      	mov	r4, r0
 80043b0:	4608      	mov	r0, r1
 80043b2:	4611      	mov	r1, r2
 80043b4:	602b      	str	r3, [r5, #0]
 80043b6:	f7fc fe83 	bl	80010c0 <_kill>
 80043ba:	1c43      	adds	r3, r0, #1
 80043bc:	d102      	bne.n	80043c4 <_kill_r+0x1c>
 80043be:	682b      	ldr	r3, [r5, #0]
 80043c0:	b103      	cbz	r3, 80043c4 <_kill_r+0x1c>
 80043c2:	6023      	str	r3, [r4, #0]
 80043c4:	bd38      	pop	{r3, r4, r5, pc}
 80043c6:	bf00      	nop
 80043c8:	200002ec 	.word	0x200002ec

080043cc <_getpid_r>:
 80043cc:	f7fc be70 	b.w	80010b0 <_getpid>

080043d0 <_sbrk_r>:
 80043d0:	b538      	push	{r3, r4, r5, lr}
 80043d2:	4d06      	ldr	r5, [pc, #24]	@ (80043ec <_sbrk_r+0x1c>)
 80043d4:	2300      	movs	r3, #0
 80043d6:	4604      	mov	r4, r0
 80043d8:	4608      	mov	r0, r1
 80043da:	602b      	str	r3, [r5, #0]
 80043dc:	f7fc fe8c 	bl	80010f8 <_sbrk>
 80043e0:	1c43      	adds	r3, r0, #1
 80043e2:	d102      	bne.n	80043ea <_sbrk_r+0x1a>
 80043e4:	682b      	ldr	r3, [r5, #0]
 80043e6:	b103      	cbz	r3, 80043ea <_sbrk_r+0x1a>
 80043e8:	6023      	str	r3, [r4, #0]
 80043ea:	bd38      	pop	{r3, r4, r5, pc}
 80043ec:	200002ec 	.word	0x200002ec

080043f0 <__errno>:
 80043f0:	4b01      	ldr	r3, [pc, #4]	@ (80043f8 <__errno+0x8>)
 80043f2:	6818      	ldr	r0, [r3, #0]
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	2000000c 	.word	0x2000000c

080043fc <__libc_init_array>:
 80043fc:	b570      	push	{r4, r5, r6, lr}
 80043fe:	4d0d      	ldr	r5, [pc, #52]	@ (8004434 <__libc_init_array+0x38>)
 8004400:	4c0d      	ldr	r4, [pc, #52]	@ (8004438 <__libc_init_array+0x3c>)
 8004402:	1b64      	subs	r4, r4, r5
 8004404:	10a4      	asrs	r4, r4, #2
 8004406:	2600      	movs	r6, #0
 8004408:	42a6      	cmp	r6, r4
 800440a:	d109      	bne.n	8004420 <__libc_init_array+0x24>
 800440c:	4d0b      	ldr	r5, [pc, #44]	@ (800443c <__libc_init_array+0x40>)
 800440e:	4c0c      	ldr	r4, [pc, #48]	@ (8004440 <__libc_init_array+0x44>)
 8004410:	f000 fba8 	bl	8004b64 <_init>
 8004414:	1b64      	subs	r4, r4, r5
 8004416:	10a4      	asrs	r4, r4, #2
 8004418:	2600      	movs	r6, #0
 800441a:	42a6      	cmp	r6, r4
 800441c:	d105      	bne.n	800442a <__libc_init_array+0x2e>
 800441e:	bd70      	pop	{r4, r5, r6, pc}
 8004420:	f855 3b04 	ldr.w	r3, [r5], #4
 8004424:	4798      	blx	r3
 8004426:	3601      	adds	r6, #1
 8004428:	e7ee      	b.n	8004408 <__libc_init_array+0xc>
 800442a:	f855 3b04 	ldr.w	r3, [r5], #4
 800442e:	4798      	blx	r3
 8004430:	3601      	adds	r6, #1
 8004432:	e7f2      	b.n	800441a <__libc_init_array+0x1e>
 8004434:	08004bfc 	.word	0x08004bfc
 8004438:	08004bfc 	.word	0x08004bfc
 800443c:	08004bfc 	.word	0x08004bfc
 8004440:	08004c00 	.word	0x08004c00

08004444 <__retarget_lock_acquire_recursive>:
 8004444:	4770      	bx	lr

08004446 <__retarget_lock_release_recursive>:
 8004446:	4770      	bx	lr

08004448 <_free_r>:
 8004448:	b538      	push	{r3, r4, r5, lr}
 800444a:	4605      	mov	r5, r0
 800444c:	2900      	cmp	r1, #0
 800444e:	d041      	beq.n	80044d4 <_free_r+0x8c>
 8004450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004454:	1f0c      	subs	r4, r1, #4
 8004456:	2b00      	cmp	r3, #0
 8004458:	bfb8      	it	lt
 800445a:	18e4      	addlt	r4, r4, r3
 800445c:	f7ff ff2c 	bl	80042b8 <__malloc_lock>
 8004460:	4a1d      	ldr	r2, [pc, #116]	@ (80044d8 <_free_r+0x90>)
 8004462:	6813      	ldr	r3, [r2, #0]
 8004464:	b933      	cbnz	r3, 8004474 <_free_r+0x2c>
 8004466:	6063      	str	r3, [r4, #4]
 8004468:	6014      	str	r4, [r2, #0]
 800446a:	4628      	mov	r0, r5
 800446c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004470:	f7ff bf28 	b.w	80042c4 <__malloc_unlock>
 8004474:	42a3      	cmp	r3, r4
 8004476:	d908      	bls.n	800448a <_free_r+0x42>
 8004478:	6820      	ldr	r0, [r4, #0]
 800447a:	1821      	adds	r1, r4, r0
 800447c:	428b      	cmp	r3, r1
 800447e:	bf01      	itttt	eq
 8004480:	6819      	ldreq	r1, [r3, #0]
 8004482:	685b      	ldreq	r3, [r3, #4]
 8004484:	1809      	addeq	r1, r1, r0
 8004486:	6021      	streq	r1, [r4, #0]
 8004488:	e7ed      	b.n	8004466 <_free_r+0x1e>
 800448a:	461a      	mov	r2, r3
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	b10b      	cbz	r3, 8004494 <_free_r+0x4c>
 8004490:	42a3      	cmp	r3, r4
 8004492:	d9fa      	bls.n	800448a <_free_r+0x42>
 8004494:	6811      	ldr	r1, [r2, #0]
 8004496:	1850      	adds	r0, r2, r1
 8004498:	42a0      	cmp	r0, r4
 800449a:	d10b      	bne.n	80044b4 <_free_r+0x6c>
 800449c:	6820      	ldr	r0, [r4, #0]
 800449e:	4401      	add	r1, r0
 80044a0:	1850      	adds	r0, r2, r1
 80044a2:	4283      	cmp	r3, r0
 80044a4:	6011      	str	r1, [r2, #0]
 80044a6:	d1e0      	bne.n	800446a <_free_r+0x22>
 80044a8:	6818      	ldr	r0, [r3, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	6053      	str	r3, [r2, #4]
 80044ae:	4408      	add	r0, r1
 80044b0:	6010      	str	r0, [r2, #0]
 80044b2:	e7da      	b.n	800446a <_free_r+0x22>
 80044b4:	d902      	bls.n	80044bc <_free_r+0x74>
 80044b6:	230c      	movs	r3, #12
 80044b8:	602b      	str	r3, [r5, #0]
 80044ba:	e7d6      	b.n	800446a <_free_r+0x22>
 80044bc:	6820      	ldr	r0, [r4, #0]
 80044be:	1821      	adds	r1, r4, r0
 80044c0:	428b      	cmp	r3, r1
 80044c2:	bf04      	itt	eq
 80044c4:	6819      	ldreq	r1, [r3, #0]
 80044c6:	685b      	ldreq	r3, [r3, #4]
 80044c8:	6063      	str	r3, [r4, #4]
 80044ca:	bf04      	itt	eq
 80044cc:	1809      	addeq	r1, r1, r0
 80044ce:	6021      	streq	r1, [r4, #0]
 80044d0:	6054      	str	r4, [r2, #4]
 80044d2:	e7ca      	b.n	800446a <_free_r+0x22>
 80044d4:	bd38      	pop	{r3, r4, r5, pc}
 80044d6:	bf00      	nop
 80044d8:	200001b0 	.word	0x200001b0

080044dc <__ssputs_r>:
 80044dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044e0:	688e      	ldr	r6, [r1, #8]
 80044e2:	461f      	mov	r7, r3
 80044e4:	42be      	cmp	r6, r7
 80044e6:	680b      	ldr	r3, [r1, #0]
 80044e8:	4682      	mov	sl, r0
 80044ea:	460c      	mov	r4, r1
 80044ec:	4690      	mov	r8, r2
 80044ee:	d82d      	bhi.n	800454c <__ssputs_r+0x70>
 80044f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80044f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80044f8:	d026      	beq.n	8004548 <__ssputs_r+0x6c>
 80044fa:	6965      	ldr	r5, [r4, #20]
 80044fc:	6909      	ldr	r1, [r1, #16]
 80044fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004502:	eba3 0901 	sub.w	r9, r3, r1
 8004506:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800450a:	1c7b      	adds	r3, r7, #1
 800450c:	444b      	add	r3, r9
 800450e:	106d      	asrs	r5, r5, #1
 8004510:	429d      	cmp	r5, r3
 8004512:	bf38      	it	cc
 8004514:	461d      	movcc	r5, r3
 8004516:	0553      	lsls	r3, r2, #21
 8004518:	d527      	bpl.n	800456a <__ssputs_r+0x8e>
 800451a:	4629      	mov	r1, r5
 800451c:	f7ff fe4c 	bl	80041b8 <_malloc_r>
 8004520:	4606      	mov	r6, r0
 8004522:	b360      	cbz	r0, 800457e <__ssputs_r+0xa2>
 8004524:	6921      	ldr	r1, [r4, #16]
 8004526:	464a      	mov	r2, r9
 8004528:	f000 fad8 	bl	8004adc <memcpy>
 800452c:	89a3      	ldrh	r3, [r4, #12]
 800452e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004536:	81a3      	strh	r3, [r4, #12]
 8004538:	6126      	str	r6, [r4, #16]
 800453a:	6165      	str	r5, [r4, #20]
 800453c:	444e      	add	r6, r9
 800453e:	eba5 0509 	sub.w	r5, r5, r9
 8004542:	6026      	str	r6, [r4, #0]
 8004544:	60a5      	str	r5, [r4, #8]
 8004546:	463e      	mov	r6, r7
 8004548:	42be      	cmp	r6, r7
 800454a:	d900      	bls.n	800454e <__ssputs_r+0x72>
 800454c:	463e      	mov	r6, r7
 800454e:	6820      	ldr	r0, [r4, #0]
 8004550:	4632      	mov	r2, r6
 8004552:	4641      	mov	r1, r8
 8004554:	f000 faa8 	bl	8004aa8 <memmove>
 8004558:	68a3      	ldr	r3, [r4, #8]
 800455a:	1b9b      	subs	r3, r3, r6
 800455c:	60a3      	str	r3, [r4, #8]
 800455e:	6823      	ldr	r3, [r4, #0]
 8004560:	4433      	add	r3, r6
 8004562:	6023      	str	r3, [r4, #0]
 8004564:	2000      	movs	r0, #0
 8004566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800456a:	462a      	mov	r2, r5
 800456c:	f000 fac4 	bl	8004af8 <_realloc_r>
 8004570:	4606      	mov	r6, r0
 8004572:	2800      	cmp	r0, #0
 8004574:	d1e0      	bne.n	8004538 <__ssputs_r+0x5c>
 8004576:	6921      	ldr	r1, [r4, #16]
 8004578:	4650      	mov	r0, sl
 800457a:	f7ff ff65 	bl	8004448 <_free_r>
 800457e:	230c      	movs	r3, #12
 8004580:	f8ca 3000 	str.w	r3, [sl]
 8004584:	89a3      	ldrh	r3, [r4, #12]
 8004586:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800458a:	81a3      	strh	r3, [r4, #12]
 800458c:	f04f 30ff 	mov.w	r0, #4294967295
 8004590:	e7e9      	b.n	8004566 <__ssputs_r+0x8a>
	...

08004594 <_svfiprintf_r>:
 8004594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004598:	4698      	mov	r8, r3
 800459a:	898b      	ldrh	r3, [r1, #12]
 800459c:	061b      	lsls	r3, r3, #24
 800459e:	b09d      	sub	sp, #116	@ 0x74
 80045a0:	4607      	mov	r7, r0
 80045a2:	460d      	mov	r5, r1
 80045a4:	4614      	mov	r4, r2
 80045a6:	d510      	bpl.n	80045ca <_svfiprintf_r+0x36>
 80045a8:	690b      	ldr	r3, [r1, #16]
 80045aa:	b973      	cbnz	r3, 80045ca <_svfiprintf_r+0x36>
 80045ac:	2140      	movs	r1, #64	@ 0x40
 80045ae:	f7ff fe03 	bl	80041b8 <_malloc_r>
 80045b2:	6028      	str	r0, [r5, #0]
 80045b4:	6128      	str	r0, [r5, #16]
 80045b6:	b930      	cbnz	r0, 80045c6 <_svfiprintf_r+0x32>
 80045b8:	230c      	movs	r3, #12
 80045ba:	603b      	str	r3, [r7, #0]
 80045bc:	f04f 30ff 	mov.w	r0, #4294967295
 80045c0:	b01d      	add	sp, #116	@ 0x74
 80045c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045c6:	2340      	movs	r3, #64	@ 0x40
 80045c8:	616b      	str	r3, [r5, #20]
 80045ca:	2300      	movs	r3, #0
 80045cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80045ce:	2320      	movs	r3, #32
 80045d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80045d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80045d8:	2330      	movs	r3, #48	@ 0x30
 80045da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004778 <_svfiprintf_r+0x1e4>
 80045de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80045e2:	f04f 0901 	mov.w	r9, #1
 80045e6:	4623      	mov	r3, r4
 80045e8:	469a      	mov	sl, r3
 80045ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045ee:	b10a      	cbz	r2, 80045f4 <_svfiprintf_r+0x60>
 80045f0:	2a25      	cmp	r2, #37	@ 0x25
 80045f2:	d1f9      	bne.n	80045e8 <_svfiprintf_r+0x54>
 80045f4:	ebba 0b04 	subs.w	fp, sl, r4
 80045f8:	d00b      	beq.n	8004612 <_svfiprintf_r+0x7e>
 80045fa:	465b      	mov	r3, fp
 80045fc:	4622      	mov	r2, r4
 80045fe:	4629      	mov	r1, r5
 8004600:	4638      	mov	r0, r7
 8004602:	f7ff ff6b 	bl	80044dc <__ssputs_r>
 8004606:	3001      	adds	r0, #1
 8004608:	f000 80a7 	beq.w	800475a <_svfiprintf_r+0x1c6>
 800460c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800460e:	445a      	add	r2, fp
 8004610:	9209      	str	r2, [sp, #36]	@ 0x24
 8004612:	f89a 3000 	ldrb.w	r3, [sl]
 8004616:	2b00      	cmp	r3, #0
 8004618:	f000 809f 	beq.w	800475a <_svfiprintf_r+0x1c6>
 800461c:	2300      	movs	r3, #0
 800461e:	f04f 32ff 	mov.w	r2, #4294967295
 8004622:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004626:	f10a 0a01 	add.w	sl, sl, #1
 800462a:	9304      	str	r3, [sp, #16]
 800462c:	9307      	str	r3, [sp, #28]
 800462e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004632:	931a      	str	r3, [sp, #104]	@ 0x68
 8004634:	4654      	mov	r4, sl
 8004636:	2205      	movs	r2, #5
 8004638:	f814 1b01 	ldrb.w	r1, [r4], #1
 800463c:	484e      	ldr	r0, [pc, #312]	@ (8004778 <_svfiprintf_r+0x1e4>)
 800463e:	f7fb fdcf 	bl	80001e0 <memchr>
 8004642:	9a04      	ldr	r2, [sp, #16]
 8004644:	b9d8      	cbnz	r0, 800467e <_svfiprintf_r+0xea>
 8004646:	06d0      	lsls	r0, r2, #27
 8004648:	bf44      	itt	mi
 800464a:	2320      	movmi	r3, #32
 800464c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004650:	0711      	lsls	r1, r2, #28
 8004652:	bf44      	itt	mi
 8004654:	232b      	movmi	r3, #43	@ 0x2b
 8004656:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800465a:	f89a 3000 	ldrb.w	r3, [sl]
 800465e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004660:	d015      	beq.n	800468e <_svfiprintf_r+0xfa>
 8004662:	9a07      	ldr	r2, [sp, #28]
 8004664:	4654      	mov	r4, sl
 8004666:	2000      	movs	r0, #0
 8004668:	f04f 0c0a 	mov.w	ip, #10
 800466c:	4621      	mov	r1, r4
 800466e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004672:	3b30      	subs	r3, #48	@ 0x30
 8004674:	2b09      	cmp	r3, #9
 8004676:	d94b      	bls.n	8004710 <_svfiprintf_r+0x17c>
 8004678:	b1b0      	cbz	r0, 80046a8 <_svfiprintf_r+0x114>
 800467a:	9207      	str	r2, [sp, #28]
 800467c:	e014      	b.n	80046a8 <_svfiprintf_r+0x114>
 800467e:	eba0 0308 	sub.w	r3, r0, r8
 8004682:	fa09 f303 	lsl.w	r3, r9, r3
 8004686:	4313      	orrs	r3, r2
 8004688:	9304      	str	r3, [sp, #16]
 800468a:	46a2      	mov	sl, r4
 800468c:	e7d2      	b.n	8004634 <_svfiprintf_r+0xa0>
 800468e:	9b03      	ldr	r3, [sp, #12]
 8004690:	1d19      	adds	r1, r3, #4
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	9103      	str	r1, [sp, #12]
 8004696:	2b00      	cmp	r3, #0
 8004698:	bfbb      	ittet	lt
 800469a:	425b      	neglt	r3, r3
 800469c:	f042 0202 	orrlt.w	r2, r2, #2
 80046a0:	9307      	strge	r3, [sp, #28]
 80046a2:	9307      	strlt	r3, [sp, #28]
 80046a4:	bfb8      	it	lt
 80046a6:	9204      	strlt	r2, [sp, #16]
 80046a8:	7823      	ldrb	r3, [r4, #0]
 80046aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80046ac:	d10a      	bne.n	80046c4 <_svfiprintf_r+0x130>
 80046ae:	7863      	ldrb	r3, [r4, #1]
 80046b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80046b2:	d132      	bne.n	800471a <_svfiprintf_r+0x186>
 80046b4:	9b03      	ldr	r3, [sp, #12]
 80046b6:	1d1a      	adds	r2, r3, #4
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	9203      	str	r2, [sp, #12]
 80046bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80046c0:	3402      	adds	r4, #2
 80046c2:	9305      	str	r3, [sp, #20]
 80046c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004788 <_svfiprintf_r+0x1f4>
 80046c8:	7821      	ldrb	r1, [r4, #0]
 80046ca:	2203      	movs	r2, #3
 80046cc:	4650      	mov	r0, sl
 80046ce:	f7fb fd87 	bl	80001e0 <memchr>
 80046d2:	b138      	cbz	r0, 80046e4 <_svfiprintf_r+0x150>
 80046d4:	9b04      	ldr	r3, [sp, #16]
 80046d6:	eba0 000a 	sub.w	r0, r0, sl
 80046da:	2240      	movs	r2, #64	@ 0x40
 80046dc:	4082      	lsls	r2, r0
 80046de:	4313      	orrs	r3, r2
 80046e0:	3401      	adds	r4, #1
 80046e2:	9304      	str	r3, [sp, #16]
 80046e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046e8:	4824      	ldr	r0, [pc, #144]	@ (800477c <_svfiprintf_r+0x1e8>)
 80046ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80046ee:	2206      	movs	r2, #6
 80046f0:	f7fb fd76 	bl	80001e0 <memchr>
 80046f4:	2800      	cmp	r0, #0
 80046f6:	d036      	beq.n	8004766 <_svfiprintf_r+0x1d2>
 80046f8:	4b21      	ldr	r3, [pc, #132]	@ (8004780 <_svfiprintf_r+0x1ec>)
 80046fa:	bb1b      	cbnz	r3, 8004744 <_svfiprintf_r+0x1b0>
 80046fc:	9b03      	ldr	r3, [sp, #12]
 80046fe:	3307      	adds	r3, #7
 8004700:	f023 0307 	bic.w	r3, r3, #7
 8004704:	3308      	adds	r3, #8
 8004706:	9303      	str	r3, [sp, #12]
 8004708:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800470a:	4433      	add	r3, r6
 800470c:	9309      	str	r3, [sp, #36]	@ 0x24
 800470e:	e76a      	b.n	80045e6 <_svfiprintf_r+0x52>
 8004710:	fb0c 3202 	mla	r2, ip, r2, r3
 8004714:	460c      	mov	r4, r1
 8004716:	2001      	movs	r0, #1
 8004718:	e7a8      	b.n	800466c <_svfiprintf_r+0xd8>
 800471a:	2300      	movs	r3, #0
 800471c:	3401      	adds	r4, #1
 800471e:	9305      	str	r3, [sp, #20]
 8004720:	4619      	mov	r1, r3
 8004722:	f04f 0c0a 	mov.w	ip, #10
 8004726:	4620      	mov	r0, r4
 8004728:	f810 2b01 	ldrb.w	r2, [r0], #1
 800472c:	3a30      	subs	r2, #48	@ 0x30
 800472e:	2a09      	cmp	r2, #9
 8004730:	d903      	bls.n	800473a <_svfiprintf_r+0x1a6>
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0c6      	beq.n	80046c4 <_svfiprintf_r+0x130>
 8004736:	9105      	str	r1, [sp, #20]
 8004738:	e7c4      	b.n	80046c4 <_svfiprintf_r+0x130>
 800473a:	fb0c 2101 	mla	r1, ip, r1, r2
 800473e:	4604      	mov	r4, r0
 8004740:	2301      	movs	r3, #1
 8004742:	e7f0      	b.n	8004726 <_svfiprintf_r+0x192>
 8004744:	ab03      	add	r3, sp, #12
 8004746:	9300      	str	r3, [sp, #0]
 8004748:	462a      	mov	r2, r5
 800474a:	4b0e      	ldr	r3, [pc, #56]	@ (8004784 <_svfiprintf_r+0x1f0>)
 800474c:	a904      	add	r1, sp, #16
 800474e:	4638      	mov	r0, r7
 8004750:	f3af 8000 	nop.w
 8004754:	1c42      	adds	r2, r0, #1
 8004756:	4606      	mov	r6, r0
 8004758:	d1d6      	bne.n	8004708 <_svfiprintf_r+0x174>
 800475a:	89ab      	ldrh	r3, [r5, #12]
 800475c:	065b      	lsls	r3, r3, #25
 800475e:	f53f af2d 	bmi.w	80045bc <_svfiprintf_r+0x28>
 8004762:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004764:	e72c      	b.n	80045c0 <_svfiprintf_r+0x2c>
 8004766:	ab03      	add	r3, sp, #12
 8004768:	9300      	str	r3, [sp, #0]
 800476a:	462a      	mov	r2, r5
 800476c:	4b05      	ldr	r3, [pc, #20]	@ (8004784 <_svfiprintf_r+0x1f0>)
 800476e:	a904      	add	r1, sp, #16
 8004770:	4638      	mov	r0, r7
 8004772:	f000 f879 	bl	8004868 <_printf_i>
 8004776:	e7ed      	b.n	8004754 <_svfiprintf_r+0x1c0>
 8004778:	08004bc0 	.word	0x08004bc0
 800477c:	08004bca 	.word	0x08004bca
 8004780:	00000000 	.word	0x00000000
 8004784:	080044dd 	.word	0x080044dd
 8004788:	08004bc6 	.word	0x08004bc6

0800478c <_printf_common>:
 800478c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004790:	4616      	mov	r6, r2
 8004792:	4698      	mov	r8, r3
 8004794:	688a      	ldr	r2, [r1, #8]
 8004796:	690b      	ldr	r3, [r1, #16]
 8004798:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800479c:	4293      	cmp	r3, r2
 800479e:	bfb8      	it	lt
 80047a0:	4613      	movlt	r3, r2
 80047a2:	6033      	str	r3, [r6, #0]
 80047a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80047a8:	4607      	mov	r7, r0
 80047aa:	460c      	mov	r4, r1
 80047ac:	b10a      	cbz	r2, 80047b2 <_printf_common+0x26>
 80047ae:	3301      	adds	r3, #1
 80047b0:	6033      	str	r3, [r6, #0]
 80047b2:	6823      	ldr	r3, [r4, #0]
 80047b4:	0699      	lsls	r1, r3, #26
 80047b6:	bf42      	ittt	mi
 80047b8:	6833      	ldrmi	r3, [r6, #0]
 80047ba:	3302      	addmi	r3, #2
 80047bc:	6033      	strmi	r3, [r6, #0]
 80047be:	6825      	ldr	r5, [r4, #0]
 80047c0:	f015 0506 	ands.w	r5, r5, #6
 80047c4:	d106      	bne.n	80047d4 <_printf_common+0x48>
 80047c6:	f104 0a19 	add.w	sl, r4, #25
 80047ca:	68e3      	ldr	r3, [r4, #12]
 80047cc:	6832      	ldr	r2, [r6, #0]
 80047ce:	1a9b      	subs	r3, r3, r2
 80047d0:	42ab      	cmp	r3, r5
 80047d2:	dc26      	bgt.n	8004822 <_printf_common+0x96>
 80047d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80047d8:	6822      	ldr	r2, [r4, #0]
 80047da:	3b00      	subs	r3, #0
 80047dc:	bf18      	it	ne
 80047de:	2301      	movne	r3, #1
 80047e0:	0692      	lsls	r2, r2, #26
 80047e2:	d42b      	bmi.n	800483c <_printf_common+0xb0>
 80047e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80047e8:	4641      	mov	r1, r8
 80047ea:	4638      	mov	r0, r7
 80047ec:	47c8      	blx	r9
 80047ee:	3001      	adds	r0, #1
 80047f0:	d01e      	beq.n	8004830 <_printf_common+0xa4>
 80047f2:	6823      	ldr	r3, [r4, #0]
 80047f4:	6922      	ldr	r2, [r4, #16]
 80047f6:	f003 0306 	and.w	r3, r3, #6
 80047fa:	2b04      	cmp	r3, #4
 80047fc:	bf02      	ittt	eq
 80047fe:	68e5      	ldreq	r5, [r4, #12]
 8004800:	6833      	ldreq	r3, [r6, #0]
 8004802:	1aed      	subeq	r5, r5, r3
 8004804:	68a3      	ldr	r3, [r4, #8]
 8004806:	bf0c      	ite	eq
 8004808:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800480c:	2500      	movne	r5, #0
 800480e:	4293      	cmp	r3, r2
 8004810:	bfc4      	itt	gt
 8004812:	1a9b      	subgt	r3, r3, r2
 8004814:	18ed      	addgt	r5, r5, r3
 8004816:	2600      	movs	r6, #0
 8004818:	341a      	adds	r4, #26
 800481a:	42b5      	cmp	r5, r6
 800481c:	d11a      	bne.n	8004854 <_printf_common+0xc8>
 800481e:	2000      	movs	r0, #0
 8004820:	e008      	b.n	8004834 <_printf_common+0xa8>
 8004822:	2301      	movs	r3, #1
 8004824:	4652      	mov	r2, sl
 8004826:	4641      	mov	r1, r8
 8004828:	4638      	mov	r0, r7
 800482a:	47c8      	blx	r9
 800482c:	3001      	adds	r0, #1
 800482e:	d103      	bne.n	8004838 <_printf_common+0xac>
 8004830:	f04f 30ff 	mov.w	r0, #4294967295
 8004834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004838:	3501      	adds	r5, #1
 800483a:	e7c6      	b.n	80047ca <_printf_common+0x3e>
 800483c:	18e1      	adds	r1, r4, r3
 800483e:	1c5a      	adds	r2, r3, #1
 8004840:	2030      	movs	r0, #48	@ 0x30
 8004842:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004846:	4422      	add	r2, r4
 8004848:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800484c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004850:	3302      	adds	r3, #2
 8004852:	e7c7      	b.n	80047e4 <_printf_common+0x58>
 8004854:	2301      	movs	r3, #1
 8004856:	4622      	mov	r2, r4
 8004858:	4641      	mov	r1, r8
 800485a:	4638      	mov	r0, r7
 800485c:	47c8      	blx	r9
 800485e:	3001      	adds	r0, #1
 8004860:	d0e6      	beq.n	8004830 <_printf_common+0xa4>
 8004862:	3601      	adds	r6, #1
 8004864:	e7d9      	b.n	800481a <_printf_common+0x8e>
	...

08004868 <_printf_i>:
 8004868:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800486c:	7e0f      	ldrb	r7, [r1, #24]
 800486e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004870:	2f78      	cmp	r7, #120	@ 0x78
 8004872:	4691      	mov	r9, r2
 8004874:	4680      	mov	r8, r0
 8004876:	460c      	mov	r4, r1
 8004878:	469a      	mov	sl, r3
 800487a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800487e:	d807      	bhi.n	8004890 <_printf_i+0x28>
 8004880:	2f62      	cmp	r7, #98	@ 0x62
 8004882:	d80a      	bhi.n	800489a <_printf_i+0x32>
 8004884:	2f00      	cmp	r7, #0
 8004886:	f000 80d2 	beq.w	8004a2e <_printf_i+0x1c6>
 800488a:	2f58      	cmp	r7, #88	@ 0x58
 800488c:	f000 80b9 	beq.w	8004a02 <_printf_i+0x19a>
 8004890:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004894:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004898:	e03a      	b.n	8004910 <_printf_i+0xa8>
 800489a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800489e:	2b15      	cmp	r3, #21
 80048a0:	d8f6      	bhi.n	8004890 <_printf_i+0x28>
 80048a2:	a101      	add	r1, pc, #4	@ (adr r1, 80048a8 <_printf_i+0x40>)
 80048a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048a8:	08004901 	.word	0x08004901
 80048ac:	08004915 	.word	0x08004915
 80048b0:	08004891 	.word	0x08004891
 80048b4:	08004891 	.word	0x08004891
 80048b8:	08004891 	.word	0x08004891
 80048bc:	08004891 	.word	0x08004891
 80048c0:	08004915 	.word	0x08004915
 80048c4:	08004891 	.word	0x08004891
 80048c8:	08004891 	.word	0x08004891
 80048cc:	08004891 	.word	0x08004891
 80048d0:	08004891 	.word	0x08004891
 80048d4:	08004a15 	.word	0x08004a15
 80048d8:	0800493f 	.word	0x0800493f
 80048dc:	080049cf 	.word	0x080049cf
 80048e0:	08004891 	.word	0x08004891
 80048e4:	08004891 	.word	0x08004891
 80048e8:	08004a37 	.word	0x08004a37
 80048ec:	08004891 	.word	0x08004891
 80048f0:	0800493f 	.word	0x0800493f
 80048f4:	08004891 	.word	0x08004891
 80048f8:	08004891 	.word	0x08004891
 80048fc:	080049d7 	.word	0x080049d7
 8004900:	6833      	ldr	r3, [r6, #0]
 8004902:	1d1a      	adds	r2, r3, #4
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	6032      	str	r2, [r6, #0]
 8004908:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800490c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004910:	2301      	movs	r3, #1
 8004912:	e09d      	b.n	8004a50 <_printf_i+0x1e8>
 8004914:	6833      	ldr	r3, [r6, #0]
 8004916:	6820      	ldr	r0, [r4, #0]
 8004918:	1d19      	adds	r1, r3, #4
 800491a:	6031      	str	r1, [r6, #0]
 800491c:	0606      	lsls	r6, r0, #24
 800491e:	d501      	bpl.n	8004924 <_printf_i+0xbc>
 8004920:	681d      	ldr	r5, [r3, #0]
 8004922:	e003      	b.n	800492c <_printf_i+0xc4>
 8004924:	0645      	lsls	r5, r0, #25
 8004926:	d5fb      	bpl.n	8004920 <_printf_i+0xb8>
 8004928:	f9b3 5000 	ldrsh.w	r5, [r3]
 800492c:	2d00      	cmp	r5, #0
 800492e:	da03      	bge.n	8004938 <_printf_i+0xd0>
 8004930:	232d      	movs	r3, #45	@ 0x2d
 8004932:	426d      	negs	r5, r5
 8004934:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004938:	4859      	ldr	r0, [pc, #356]	@ (8004aa0 <_printf_i+0x238>)
 800493a:	230a      	movs	r3, #10
 800493c:	e011      	b.n	8004962 <_printf_i+0xfa>
 800493e:	6821      	ldr	r1, [r4, #0]
 8004940:	6833      	ldr	r3, [r6, #0]
 8004942:	0608      	lsls	r0, r1, #24
 8004944:	f853 5b04 	ldr.w	r5, [r3], #4
 8004948:	d402      	bmi.n	8004950 <_printf_i+0xe8>
 800494a:	0649      	lsls	r1, r1, #25
 800494c:	bf48      	it	mi
 800494e:	b2ad      	uxthmi	r5, r5
 8004950:	2f6f      	cmp	r7, #111	@ 0x6f
 8004952:	4853      	ldr	r0, [pc, #332]	@ (8004aa0 <_printf_i+0x238>)
 8004954:	6033      	str	r3, [r6, #0]
 8004956:	bf14      	ite	ne
 8004958:	230a      	movne	r3, #10
 800495a:	2308      	moveq	r3, #8
 800495c:	2100      	movs	r1, #0
 800495e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004962:	6866      	ldr	r6, [r4, #4]
 8004964:	60a6      	str	r6, [r4, #8]
 8004966:	2e00      	cmp	r6, #0
 8004968:	bfa2      	ittt	ge
 800496a:	6821      	ldrge	r1, [r4, #0]
 800496c:	f021 0104 	bicge.w	r1, r1, #4
 8004970:	6021      	strge	r1, [r4, #0]
 8004972:	b90d      	cbnz	r5, 8004978 <_printf_i+0x110>
 8004974:	2e00      	cmp	r6, #0
 8004976:	d04b      	beq.n	8004a10 <_printf_i+0x1a8>
 8004978:	4616      	mov	r6, r2
 800497a:	fbb5 f1f3 	udiv	r1, r5, r3
 800497e:	fb03 5711 	mls	r7, r3, r1, r5
 8004982:	5dc7      	ldrb	r7, [r0, r7]
 8004984:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004988:	462f      	mov	r7, r5
 800498a:	42bb      	cmp	r3, r7
 800498c:	460d      	mov	r5, r1
 800498e:	d9f4      	bls.n	800497a <_printf_i+0x112>
 8004990:	2b08      	cmp	r3, #8
 8004992:	d10b      	bne.n	80049ac <_printf_i+0x144>
 8004994:	6823      	ldr	r3, [r4, #0]
 8004996:	07df      	lsls	r7, r3, #31
 8004998:	d508      	bpl.n	80049ac <_printf_i+0x144>
 800499a:	6923      	ldr	r3, [r4, #16]
 800499c:	6861      	ldr	r1, [r4, #4]
 800499e:	4299      	cmp	r1, r3
 80049a0:	bfde      	ittt	le
 80049a2:	2330      	movle	r3, #48	@ 0x30
 80049a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80049a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80049ac:	1b92      	subs	r2, r2, r6
 80049ae:	6122      	str	r2, [r4, #16]
 80049b0:	f8cd a000 	str.w	sl, [sp]
 80049b4:	464b      	mov	r3, r9
 80049b6:	aa03      	add	r2, sp, #12
 80049b8:	4621      	mov	r1, r4
 80049ba:	4640      	mov	r0, r8
 80049bc:	f7ff fee6 	bl	800478c <_printf_common>
 80049c0:	3001      	adds	r0, #1
 80049c2:	d14a      	bne.n	8004a5a <_printf_i+0x1f2>
 80049c4:	f04f 30ff 	mov.w	r0, #4294967295
 80049c8:	b004      	add	sp, #16
 80049ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049ce:	6823      	ldr	r3, [r4, #0]
 80049d0:	f043 0320 	orr.w	r3, r3, #32
 80049d4:	6023      	str	r3, [r4, #0]
 80049d6:	4833      	ldr	r0, [pc, #204]	@ (8004aa4 <_printf_i+0x23c>)
 80049d8:	2778      	movs	r7, #120	@ 0x78
 80049da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80049de:	6823      	ldr	r3, [r4, #0]
 80049e0:	6831      	ldr	r1, [r6, #0]
 80049e2:	061f      	lsls	r7, r3, #24
 80049e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80049e8:	d402      	bmi.n	80049f0 <_printf_i+0x188>
 80049ea:	065f      	lsls	r7, r3, #25
 80049ec:	bf48      	it	mi
 80049ee:	b2ad      	uxthmi	r5, r5
 80049f0:	6031      	str	r1, [r6, #0]
 80049f2:	07d9      	lsls	r1, r3, #31
 80049f4:	bf44      	itt	mi
 80049f6:	f043 0320 	orrmi.w	r3, r3, #32
 80049fa:	6023      	strmi	r3, [r4, #0]
 80049fc:	b11d      	cbz	r5, 8004a06 <_printf_i+0x19e>
 80049fe:	2310      	movs	r3, #16
 8004a00:	e7ac      	b.n	800495c <_printf_i+0xf4>
 8004a02:	4827      	ldr	r0, [pc, #156]	@ (8004aa0 <_printf_i+0x238>)
 8004a04:	e7e9      	b.n	80049da <_printf_i+0x172>
 8004a06:	6823      	ldr	r3, [r4, #0]
 8004a08:	f023 0320 	bic.w	r3, r3, #32
 8004a0c:	6023      	str	r3, [r4, #0]
 8004a0e:	e7f6      	b.n	80049fe <_printf_i+0x196>
 8004a10:	4616      	mov	r6, r2
 8004a12:	e7bd      	b.n	8004990 <_printf_i+0x128>
 8004a14:	6833      	ldr	r3, [r6, #0]
 8004a16:	6825      	ldr	r5, [r4, #0]
 8004a18:	6961      	ldr	r1, [r4, #20]
 8004a1a:	1d18      	adds	r0, r3, #4
 8004a1c:	6030      	str	r0, [r6, #0]
 8004a1e:	062e      	lsls	r6, r5, #24
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	d501      	bpl.n	8004a28 <_printf_i+0x1c0>
 8004a24:	6019      	str	r1, [r3, #0]
 8004a26:	e002      	b.n	8004a2e <_printf_i+0x1c6>
 8004a28:	0668      	lsls	r0, r5, #25
 8004a2a:	d5fb      	bpl.n	8004a24 <_printf_i+0x1bc>
 8004a2c:	8019      	strh	r1, [r3, #0]
 8004a2e:	2300      	movs	r3, #0
 8004a30:	6123      	str	r3, [r4, #16]
 8004a32:	4616      	mov	r6, r2
 8004a34:	e7bc      	b.n	80049b0 <_printf_i+0x148>
 8004a36:	6833      	ldr	r3, [r6, #0]
 8004a38:	1d1a      	adds	r2, r3, #4
 8004a3a:	6032      	str	r2, [r6, #0]
 8004a3c:	681e      	ldr	r6, [r3, #0]
 8004a3e:	6862      	ldr	r2, [r4, #4]
 8004a40:	2100      	movs	r1, #0
 8004a42:	4630      	mov	r0, r6
 8004a44:	f7fb fbcc 	bl	80001e0 <memchr>
 8004a48:	b108      	cbz	r0, 8004a4e <_printf_i+0x1e6>
 8004a4a:	1b80      	subs	r0, r0, r6
 8004a4c:	6060      	str	r0, [r4, #4]
 8004a4e:	6863      	ldr	r3, [r4, #4]
 8004a50:	6123      	str	r3, [r4, #16]
 8004a52:	2300      	movs	r3, #0
 8004a54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a58:	e7aa      	b.n	80049b0 <_printf_i+0x148>
 8004a5a:	6923      	ldr	r3, [r4, #16]
 8004a5c:	4632      	mov	r2, r6
 8004a5e:	4649      	mov	r1, r9
 8004a60:	4640      	mov	r0, r8
 8004a62:	47d0      	blx	sl
 8004a64:	3001      	adds	r0, #1
 8004a66:	d0ad      	beq.n	80049c4 <_printf_i+0x15c>
 8004a68:	6823      	ldr	r3, [r4, #0]
 8004a6a:	079b      	lsls	r3, r3, #30
 8004a6c:	d413      	bmi.n	8004a96 <_printf_i+0x22e>
 8004a6e:	68e0      	ldr	r0, [r4, #12]
 8004a70:	9b03      	ldr	r3, [sp, #12]
 8004a72:	4298      	cmp	r0, r3
 8004a74:	bfb8      	it	lt
 8004a76:	4618      	movlt	r0, r3
 8004a78:	e7a6      	b.n	80049c8 <_printf_i+0x160>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	4632      	mov	r2, r6
 8004a7e:	4649      	mov	r1, r9
 8004a80:	4640      	mov	r0, r8
 8004a82:	47d0      	blx	sl
 8004a84:	3001      	adds	r0, #1
 8004a86:	d09d      	beq.n	80049c4 <_printf_i+0x15c>
 8004a88:	3501      	adds	r5, #1
 8004a8a:	68e3      	ldr	r3, [r4, #12]
 8004a8c:	9903      	ldr	r1, [sp, #12]
 8004a8e:	1a5b      	subs	r3, r3, r1
 8004a90:	42ab      	cmp	r3, r5
 8004a92:	dcf2      	bgt.n	8004a7a <_printf_i+0x212>
 8004a94:	e7eb      	b.n	8004a6e <_printf_i+0x206>
 8004a96:	2500      	movs	r5, #0
 8004a98:	f104 0619 	add.w	r6, r4, #25
 8004a9c:	e7f5      	b.n	8004a8a <_printf_i+0x222>
 8004a9e:	bf00      	nop
 8004aa0:	08004bd1 	.word	0x08004bd1
 8004aa4:	08004be2 	.word	0x08004be2

08004aa8 <memmove>:
 8004aa8:	4288      	cmp	r0, r1
 8004aaa:	b510      	push	{r4, lr}
 8004aac:	eb01 0402 	add.w	r4, r1, r2
 8004ab0:	d902      	bls.n	8004ab8 <memmove+0x10>
 8004ab2:	4284      	cmp	r4, r0
 8004ab4:	4623      	mov	r3, r4
 8004ab6:	d807      	bhi.n	8004ac8 <memmove+0x20>
 8004ab8:	1e43      	subs	r3, r0, #1
 8004aba:	42a1      	cmp	r1, r4
 8004abc:	d008      	beq.n	8004ad0 <memmove+0x28>
 8004abe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ac2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ac6:	e7f8      	b.n	8004aba <memmove+0x12>
 8004ac8:	4402      	add	r2, r0
 8004aca:	4601      	mov	r1, r0
 8004acc:	428a      	cmp	r2, r1
 8004ace:	d100      	bne.n	8004ad2 <memmove+0x2a>
 8004ad0:	bd10      	pop	{r4, pc}
 8004ad2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ad6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ada:	e7f7      	b.n	8004acc <memmove+0x24>

08004adc <memcpy>:
 8004adc:	440a      	add	r2, r1
 8004ade:	4291      	cmp	r1, r2
 8004ae0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ae4:	d100      	bne.n	8004ae8 <memcpy+0xc>
 8004ae6:	4770      	bx	lr
 8004ae8:	b510      	push	{r4, lr}
 8004aea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004aee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004af2:	4291      	cmp	r1, r2
 8004af4:	d1f9      	bne.n	8004aea <memcpy+0xe>
 8004af6:	bd10      	pop	{r4, pc}

08004af8 <_realloc_r>:
 8004af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004afc:	4680      	mov	r8, r0
 8004afe:	4615      	mov	r5, r2
 8004b00:	460c      	mov	r4, r1
 8004b02:	b921      	cbnz	r1, 8004b0e <_realloc_r+0x16>
 8004b04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b08:	4611      	mov	r1, r2
 8004b0a:	f7ff bb55 	b.w	80041b8 <_malloc_r>
 8004b0e:	b92a      	cbnz	r2, 8004b1c <_realloc_r+0x24>
 8004b10:	f7ff fc9a 	bl	8004448 <_free_r>
 8004b14:	2400      	movs	r4, #0
 8004b16:	4620      	mov	r0, r4
 8004b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b1c:	f000 f81a 	bl	8004b54 <_malloc_usable_size_r>
 8004b20:	4285      	cmp	r5, r0
 8004b22:	4606      	mov	r6, r0
 8004b24:	d802      	bhi.n	8004b2c <_realloc_r+0x34>
 8004b26:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004b2a:	d8f4      	bhi.n	8004b16 <_realloc_r+0x1e>
 8004b2c:	4629      	mov	r1, r5
 8004b2e:	4640      	mov	r0, r8
 8004b30:	f7ff fb42 	bl	80041b8 <_malloc_r>
 8004b34:	4607      	mov	r7, r0
 8004b36:	2800      	cmp	r0, #0
 8004b38:	d0ec      	beq.n	8004b14 <_realloc_r+0x1c>
 8004b3a:	42b5      	cmp	r5, r6
 8004b3c:	462a      	mov	r2, r5
 8004b3e:	4621      	mov	r1, r4
 8004b40:	bf28      	it	cs
 8004b42:	4632      	movcs	r2, r6
 8004b44:	f7ff ffca 	bl	8004adc <memcpy>
 8004b48:	4621      	mov	r1, r4
 8004b4a:	4640      	mov	r0, r8
 8004b4c:	f7ff fc7c 	bl	8004448 <_free_r>
 8004b50:	463c      	mov	r4, r7
 8004b52:	e7e0      	b.n	8004b16 <_realloc_r+0x1e>

08004b54 <_malloc_usable_size_r>:
 8004b54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b58:	1f18      	subs	r0, r3, #4
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	bfbc      	itt	lt
 8004b5e:	580b      	ldrlt	r3, [r1, r0]
 8004b60:	18c0      	addlt	r0, r0, r3
 8004b62:	4770      	bx	lr

08004b64 <_init>:
 8004b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b66:	bf00      	nop
 8004b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b6a:	bc08      	pop	{r3}
 8004b6c:	469e      	mov	lr, r3
 8004b6e:	4770      	bx	lr

08004b70 <_fini>:
 8004b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b72:	bf00      	nop
 8004b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b76:	bc08      	pop	{r3}
 8004b78:	469e      	mov	lr, r3
 8004b7a:	4770      	bx	lr
