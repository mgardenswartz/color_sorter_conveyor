
lab-03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055f8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08005798  08005798  00006798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005830  08005830  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005830  08005830  00006830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005838  08005838  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005838  08005838  00006838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800583c  0800583c  0000683c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005840  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  2000005c  0800589c  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  0800589c  00007304  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd27  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027e5  00000000  00000000  00016db3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  00019598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000af9  00000000  00000000  0001a378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b43e  00000000  00000000  0001ae71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e24  00000000  00000000  000362af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093969  00000000  00000000  000470d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000daa3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040a0  00000000  00000000  000daa80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  000deb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005780 	.word	0x08005780

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08005780 	.word	0x08005780

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <_ZN11MotorDriverC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftmS3_tm>:
 *      Author: Max Gardenswartz
 */

#include "MotorDriver.h"

MotorDriver::MotorDriver(TIM_HandleTypeDef* timer,
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
 800057c:	807b      	strh	r3, [r7, #2]
	GPIO_TypeDef* pin_1_group, uint16_t pin_1, uint32_t pin_1_timer_channel,
	GPIO_TypeDef* pin_2_group, uint16_t pin_2, uint32_t pin_2_timer_channel)
		: timer(timer),
		  pin_1_group(pin_1_group), pin_1(pin_1), pin_1_timer_channel(pin_1_timer_channel),
		  pin_2_group(pin_2_group), pin_2(pin_2), pin_2_timer_channel(pin_2_timer_channel)
 800057e:	4a14      	ldr	r2, [pc, #80]	@ (80005d0 <_ZN11MotorDriverC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftmS3_tm+0x60>)
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	601a      	str	r2, [r3, #0]
		: timer(timer),
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	68ba      	ldr	r2, [r7, #8]
 8000588:	605a      	str	r2, [r3, #4]
		  pin_1_group(pin_1_group), pin_1(pin_1), pin_1_timer_channel(pin_1_timer_channel),
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	687a      	ldr	r2, [r7, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	887a      	ldrh	r2, [r7, #2]
 8000594:	819a      	strh	r2, [r3, #12]
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	69ba      	ldr	r2, [r7, #24]
 800059a:	611a      	str	r2, [r3, #16]
		  pin_2_group(pin_2_group), pin_2(pin_2), pin_2_timer_channel(pin_2_timer_channel)
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	69fa      	ldr	r2, [r7, #28]
 80005a0:	615a      	str	r2, [r3, #20]
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	8c3a      	ldrh	r2, [r7, #32]
 80005a6:	831a      	strh	r2, [r3, #24]
 80005a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	835a      	strh	r2, [r3, #26]
{
	// Motor stop
	disable();
 80005b0:	68f8      	ldr	r0, [r7, #12]
 80005b2:	f000 f8f8 	bl	80007a6 <_ZN11MotorDriver7disableEv>

	// Set the auto_reload_value
	auto_reload_value = timer->Init.Period;
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	68da      	ldr	r2, [r3, #12]
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	61da      	str	r2, [r3, #28]

	// Start the PWM generation
	enable();
 80005be:	68f8      	ldr	r0, [r7, #12]
 80005c0:	f000 f8d9 	bl	8000776 <_ZN11MotorDriver6enableEv>
}
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	4618      	mov	r0, r3
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	080057bc 	.word	0x080057bc

080005d4 <_ZN11MotorDriverD1Ev>:

MotorDriver::~MotorDriver()
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	4a04      	ldr	r2, [pc, #16]	@ (80005f0 <_ZN11MotorDriverD1Ev+0x1c>)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4618      	mov	r0, r3
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	080057bc 	.word	0x080057bc

080005f4 <_ZN11MotorDriverD0Ev>:
MotorDriver::~MotorDriver()
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
}
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f7ff ffe9 	bl	80005d4 <_ZN11MotorDriverD1Ev>
 8000602:	2120      	movs	r1, #32
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f004 fb8d 	bl	8004d24 <_ZdlPvj>
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4618      	mov	r0, r3
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <_ZN11MotorDriver26set_inverted_compare_valueElbb>:
		__HAL_TIM_SET_COMPARE(timer, pin_1_timer_channel, compare_value);
	}
}

void MotorDriver::set_inverted_compare_value(int32_t compare_value, bool direction, bool inverted)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	4611      	mov	r1, r2
 8000620:	461a      	mov	r2, r3
 8000622:	460b      	mov	r3, r1
 8000624:	71fb      	strb	r3, [r7, #7]
 8000626:	4613      	mov	r3, r2
 8000628:	71bb      	strb	r3, [r7, #6]
	// Get the auto_reload_value
	if(inverted)
 800062a:	79bb      	ldrb	r3, [r7, #6]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d004      	beq.n	800063a <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x26>
	{
		compare_value = auto_reload_value - compare_value;
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	69da      	ldr	r2, [r3, #28]
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	1ad3      	subs	r3, r2, r3
 8000638:	60bb      	str	r3, [r7, #8]
//	{
//		compare_value = auto_reload_value;
//	}

	// Direction
	if(direction)
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d04a      	beq.n	80006d6 <_ZN11MotorDriver26set_inverted_compare_valueElbb+0xc2>
	{
		// Raise pin 2
		__HAL_TIM_SET_COMPARE(timer, pin_2_timer_channel, auto_reload_value);
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	8b5b      	ldrh	r3, [r3, #26]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d106      	bne.n	8000656 <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x42>
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	68fa      	ldr	r2, [r7, #12]
 8000650:	69d2      	ldr	r2, [r2, #28]
 8000652:	635a      	str	r2, [r3, #52]	@ 0x34
 8000654:	e01b      	b.n	800068e <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x7a>
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	8b5b      	ldrh	r3, [r3, #26]
 800065a:	2b04      	cmp	r3, #4
 800065c:	d106      	bne.n	800066c <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x58>
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	685b      	ldr	r3, [r3, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	69d2      	ldr	r2, [r2, #28]
 8000668:	639a      	str	r2, [r3, #56]	@ 0x38
 800066a:	e010      	b.n	800068e <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x7a>
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	8b5b      	ldrh	r3, [r3, #26]
 8000670:	2b08      	cmp	r3, #8
 8000672:	d106      	bne.n	8000682 <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x6e>
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	685b      	ldr	r3, [r3, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	68fa      	ldr	r2, [r7, #12]
 800067c:	69d2      	ldr	r2, [r2, #28]
 800067e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000680:	e005      	b.n	800068e <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x7a>
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	68fa      	ldr	r2, [r7, #12]
 800068a:	69d2      	ldr	r2, [r2, #28]
 800068c:	641a      	str	r2, [r3, #64]	@ 0x40

		// Update duty cycle on pin 1
		__HAL_TIM_SET_COMPARE(timer, pin_1_timer_channel, compare_value);
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	691b      	ldr	r3, [r3, #16]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d105      	bne.n	80006a2 <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x8e>
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	68ba      	ldr	r2, [r7, #8]
 800069e:	635a      	str	r2, [r3, #52]	@ 0x34

		// Update duty cycle on pin 2
		__HAL_TIM_SET_COMPARE(timer, pin_2_timer_channel, compare_value);
	}

}
 80006a0:	e063      	b.n	800076a <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x156>
		__HAL_TIM_SET_COMPARE(timer, pin_1_timer_channel, compare_value);
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	691b      	ldr	r3, [r3, #16]
 80006a6:	2b04      	cmp	r3, #4
 80006a8:	d105      	bne.n	80006b6 <_ZN11MotorDriver26set_inverted_compare_valueElbb+0xa2>
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	685b      	ldr	r3, [r3, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	68ba      	ldr	r2, [r7, #8]
 80006b2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80006b4:	e059      	b.n	800076a <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x156>
		__HAL_TIM_SET_COMPARE(timer, pin_1_timer_channel, compare_value);
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	691b      	ldr	r3, [r3, #16]
 80006ba:	2b08      	cmp	r3, #8
 80006bc:	d105      	bne.n	80006ca <_ZN11MotorDriver26set_inverted_compare_valueElbb+0xb6>
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	68ba      	ldr	r2, [r7, #8]
 80006c6:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80006c8:	e04f      	b.n	800076a <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x156>
		__HAL_TIM_SET_COMPARE(timer, pin_1_timer_channel, compare_value);
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	685b      	ldr	r3, [r3, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	68ba      	ldr	r2, [r7, #8]
 80006d2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80006d4:	e049      	b.n	800076a <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x156>
		__HAL_TIM_SET_COMPARE(timer, pin_1_timer_channel, auto_reload_value);
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	691b      	ldr	r3, [r3, #16]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d106      	bne.n	80006ec <_ZN11MotorDriver26set_inverted_compare_valueElbb+0xd8>
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	68fa      	ldr	r2, [r7, #12]
 80006e6:	69d2      	ldr	r2, [r2, #28]
 80006e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80006ea:	e01b      	b.n	8000724 <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x110>
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	691b      	ldr	r3, [r3, #16]
 80006f0:	2b04      	cmp	r3, #4
 80006f2:	d106      	bne.n	8000702 <_ZN11MotorDriver26set_inverted_compare_valueElbb+0xee>
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	685b      	ldr	r3, [r3, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	68fa      	ldr	r2, [r7, #12]
 80006fc:	69d2      	ldr	r2, [r2, #28]
 80006fe:	639a      	str	r2, [r3, #56]	@ 0x38
 8000700:	e010      	b.n	8000724 <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x110>
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	691b      	ldr	r3, [r3, #16]
 8000706:	2b08      	cmp	r3, #8
 8000708:	d106      	bne.n	8000718 <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x104>
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	68fa      	ldr	r2, [r7, #12]
 8000712:	69d2      	ldr	r2, [r2, #28]
 8000714:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000716:	e005      	b.n	8000724 <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x110>
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	68fa      	ldr	r2, [r7, #12]
 8000720:	69d2      	ldr	r2, [r2, #28]
 8000722:	641a      	str	r2, [r3, #64]	@ 0x40
		__HAL_TIM_SET_COMPARE(timer, pin_2_timer_channel, compare_value);
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	8b5b      	ldrh	r3, [r3, #26]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d105      	bne.n	8000738 <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x124>
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	68ba      	ldr	r2, [r7, #8]
 8000734:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000736:	e018      	b.n	800076a <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x156>
		__HAL_TIM_SET_COMPARE(timer, pin_2_timer_channel, compare_value);
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	8b5b      	ldrh	r3, [r3, #26]
 800073c:	2b04      	cmp	r3, #4
 800073e:	d105      	bne.n	800074c <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x138>
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	68ba      	ldr	r2, [r7, #8]
 8000748:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800074a:	e00e      	b.n	800076a <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x156>
		__HAL_TIM_SET_COMPARE(timer, pin_2_timer_channel, compare_value);
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	8b5b      	ldrh	r3, [r3, #26]
 8000750:	2b08      	cmp	r3, #8
 8000752:	d105      	bne.n	8000760 <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x14c>
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	68ba      	ldr	r2, [r7, #8]
 800075c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800075e:	e004      	b.n	800076a <_ZN11MotorDriver26set_inverted_compare_valueElbb+0x156>
		__HAL_TIM_SET_COMPARE(timer, pin_2_timer_channel, compare_value);
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	68ba      	ldr	r2, [r7, #8]
 8000768:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800076a:	bf00      	nop
 800076c:	3714      	adds	r7, #20
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr

08000776 <_ZN11MotorDriver6enableEv>:

void MotorDriver::enable()
{
 8000776:	b580      	push	{r7, lr}
 8000778:	b082      	sub	sp, #8
 800077a:	af00      	add	r7, sp, #0
 800077c:	6078      	str	r0, [r7, #4]
	// Start PWM Generation
	HAL_TIM_PWM_Start(timer, pin_1_timer_channel);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	685a      	ldr	r2, [r3, #4]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	691b      	ldr	r3, [r3, #16]
 8000786:	4619      	mov	r1, r3
 8000788:	4610      	mov	r0, r2
 800078a:	f002 f895 	bl	80028b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer, pin_2_timer_channel);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	685a      	ldr	r2, [r3, #4]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	8b5b      	ldrh	r3, [r3, #26]
 8000796:	4619      	mov	r1, r3
 8000798:	4610      	mov	r0, r2
 800079a:	f002 f88d 	bl	80028b8 <HAL_TIM_PWM_Start>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <_ZN11MotorDriver7disableEv>:

void MotorDriver::disable()
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b082      	sub	sp, #8
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	6078      	str	r0, [r7, #4]
	// Motor stop
	__HAL_TIM_SET_COMPARE(timer, pin_1_timer_channel, 0);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	691b      	ldr	r3, [r3, #16]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d105      	bne.n	80007c2 <_ZN11MotorDriver7disableEv+0x1c>
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2200      	movs	r2, #0
 80007be:	635a      	str	r2, [r3, #52]	@ 0x34
 80007c0:	e018      	b.n	80007f4 <_ZN11MotorDriver7disableEv+0x4e>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	691b      	ldr	r3, [r3, #16]
 80007c6:	2b04      	cmp	r3, #4
 80007c8:	d105      	bne.n	80007d6 <_ZN11MotorDriver7disableEv+0x30>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2200      	movs	r2, #0
 80007d2:	639a      	str	r2, [r3, #56]	@ 0x38
 80007d4:	e00e      	b.n	80007f4 <_ZN11MotorDriver7disableEv+0x4e>
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	691b      	ldr	r3, [r3, #16]
 80007da:	2b08      	cmp	r3, #8
 80007dc:	d105      	bne.n	80007ea <_ZN11MotorDriver7disableEv+0x44>
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2200      	movs	r2, #0
 80007e6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80007e8:	e004      	b.n	80007f4 <_ZN11MotorDriver7disableEv+0x4e>
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2200      	movs	r2, #0
 80007f2:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(timer, pin_2_timer_channel, 0);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	8b5b      	ldrh	r3, [r3, #26]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d105      	bne.n	8000808 <_ZN11MotorDriver7disableEv+0x62>
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	2200      	movs	r2, #0
 8000804:	635a      	str	r2, [r3, #52]	@ 0x34
 8000806:	e018      	b.n	800083a <_ZN11MotorDriver7disableEv+0x94>
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	8b5b      	ldrh	r3, [r3, #26]
 800080c:	2b04      	cmp	r3, #4
 800080e:	d105      	bne.n	800081c <_ZN11MotorDriver7disableEv+0x76>
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2200      	movs	r2, #0
 8000818:	639a      	str	r2, [r3, #56]	@ 0x38
 800081a:	e00e      	b.n	800083a <_ZN11MotorDriver7disableEv+0x94>
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	8b5b      	ldrh	r3, [r3, #26]
 8000820:	2b08      	cmp	r3, #8
 8000822:	d105      	bne.n	8000830 <_ZN11MotorDriver7disableEv+0x8a>
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2200      	movs	r2, #0
 800082c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800082e:	e004      	b.n	800083a <_ZN11MotorDriver7disableEv+0x94>
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2200      	movs	r2, #0
 8000838:	641a      	str	r2, [r3, #64]	@ 0x40

	// Stop PWM Generation
	HAL_TIM_PWM_Stop(timer, pin_1_timer_channel);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	685a      	ldr	r2, [r3, #4]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	691b      	ldr	r3, [r3, #16]
 8000842:	4619      	mov	r1, r3
 8000844:	4610      	mov	r0, r2
 8000846:	f002 f8e7 	bl	8002a18 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(timer, pin_2_timer_channel);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	685a      	ldr	r2, [r3, #4]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	8b5b      	ldrh	r3, [r3, #26]
 8000852:	4619      	mov	r1, r3
 8000854:	4610      	mov	r0, r2
 8000856:	f002 f8df 	bl	8002a18 <HAL_TIM_PWM_Stop>
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll>:
 *      Author: Max
 */

#include "RCChannel.h"

RCChannel::RCChannel(
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
 8000870:	603b      	str	r3, [r7, #0]
    CPU_clock_speed_MHz(CPU_clock_speed_MHz),
    full_reverse_us_width(full_reverse_us_width),
    neutral_us_width(neutral_us_width),
    full_forward_us_width(full_forward_us_width),
    rescale_forward_magnitude(rescale_forward_magnitude),
	rescale_reverse_magnitude(rescale_reverse_magnitude)
 8000872:	4a37      	ldr	r2, [pc, #220]	@ (8000950 <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll+0xec>)
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	2200      	movs	r2, #0
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	2200      	movs	r2, #0
 8000894:	615a      	str	r2, [r3, #20]
    rescale_forward_magnitude(rescale_forward_magnitude),
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800089a:	619a      	str	r2, [r3, #24]
	rescale_reverse_magnitude(rescale_reverse_magnitude)
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80008a0:	61da      	str	r2, [r3, #28]
    timer_handle(timer_handle),
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	68ba      	ldr	r2, [r7, #8]
 80008a6:	621a      	str	r2, [r3, #32]
    timer_channel(timer_channel),
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	625a      	str	r2, [r3, #36]	@ 0x24
    RC_signal_period_us(RC_signal_period_us),
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	683a      	ldr	r2, [r7, #0]
 80008b2:	629a      	str	r2, [r3, #40]	@ 0x28
    CPU_clock_speed_MHz(CPU_clock_speed_MHz),
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	6a3a      	ldr	r2, [r7, #32]
 80008b8:	62da      	str	r2, [r3, #44]	@ 0x2c
    full_reverse_us_width(full_reverse_us_width),
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80008be:	631a      	str	r2, [r3, #48]	@ 0x30
    neutral_us_width(neutral_us_width),
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80008c4:	635a      	str	r2, [r3, #52]	@ 0x34
    full_forward_us_width(full_forward_us_width),
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80008ca:	639a      	str	r2, [r3, #56]	@ 0x38
	rescale_reverse_magnitude(rescale_reverse_magnitude)
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	2201      	movs	r2, #1
 80008d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
{
	// Critical. Starts the first interrupt.
	HAL_TIM_IC_Start_IT(timer_handle, timer_channel);
 80008d4:	6879      	ldr	r1, [r7, #4]
 80008d6:	68b8      	ldr	r0, [r7, #8]
 80008d8:	f002 f952 	bl	8002b80 <HAL_TIM_IC_Start_IT>

	// Set minuend depending on whether it's a 16-bit or 32-bit timer.
	// This is specific to the STM32F411CUE6!!
	if(( (timer_handle->Instance) == TIM2 ) or ( (timer_handle->Instance) == TIM5 ))
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80008e4:	d004      	beq.n	80008f0 <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll+0x8c>
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a1a      	ldr	r2, [pc, #104]	@ (8000954 <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll+0xf0>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d104      	bne.n	80008fa <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll+0x96>
	{
		minuend = 0xffffffff;
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	f04f 32ff 	mov.w	r2, #4294967295
 80008f6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008f8:	e003      	b.n	8000902 <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll+0x9e>
	}
	else
	{
		minuend = 0xffff;
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000900:	63da      	str	r2, [r3, #60]	@ 0x3c
	}

	// For later scaling
	uint32_t prescalar = timer_handle->Instance->PSC + 1;
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000908:	3301      	adds	r3, #1
 800090a:	617b      	str	r3, [r7, #20]
	float refClock = CPU_clock_speed_MHz/prescalar;
 800090c:	6a3a      	ldr	r2, [r7, #32]
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	fbb2 f3f3 	udiv	r3, r2, r3
 8000914:	ee07 3a90 	vmov	s15, r3
 8000918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800091c:	edc7 7a04 	vstr	s15, [r7, #16]
	mFactor = 1000000/refClock;
 8000920:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8000958 <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll+0xf4>
 8000924:	ed97 7a04 	vldr	s14, [r7, #16]
 8000928:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

	// Needed later
	forward_range = full_forward_us_width - neutral_us_width;
 8000932:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000936:	1ad2      	subs	r2, r2, r3
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	64da      	str	r2, [r3, #76]	@ 0x4c
	reverse_range = neutral_us_width - full_reverse_us_width;
 800093c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800093e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000940:	1ad2      	subs	r2, r2, r3
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	649a      	str	r2, [r3, #72]	@ 0x48

}
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	4618      	mov	r0, r3
 800094a:	3718      	adds	r7, #24
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	080057cc 	.word	0x080057cc
 8000954:	40000c00 	.word	0x40000c00
 8000958:	49742400 	.word	0x49742400

0800095c <_ZN9RCChannelD1Ev>:
 	// Finally
 	first_capture = true;
 	}
}

RCChannel::~RCChannel() {
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	4a04      	ldr	r2, [pc, #16]	@ (8000978 <_ZN9RCChannelD1Ev+0x1c>)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4618      	mov	r0, r3
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	080057cc 	.word	0x080057cc

0800097c <_ZN9RCChannelD0Ev>:
RCChannel::~RCChannel() {
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
}
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f7ff ffe9 	bl	800095c <_ZN9RCChannelD1Ev>
 800098a:	2150      	movs	r1, #80	@ 0x50
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f004 f9c9 	bl	8004d24 <_ZdlPvj>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4618      	mov	r0, r3
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <_ZN20RemoteControlControlC1EP9RCChannelP11MotorDriverb>:
 *      Author: Max
 */

#include "RemoteControlControl.h"

RemoteControlControl::RemoteControlControl(
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
 80009a8:	70fb      	strb	r3, [r7, #3]
		MotorDriver* motor,
		bool invert)
		:
		rc_channel(rc_channel),
		motor(motor),
		invert(invert)
 80009aa:	4a0e      	ldr	r2, [pc, #56]	@ (80009e4 <_ZN20RemoteControlControlC1EP9RCChannelP11MotorDriverb+0x48>)
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	601a      	str	r2, [r3, #0]
		rc_channel(rc_channel),
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	68ba      	ldr	r2, [r7, #8]
 80009b4:	605a      	str	r2, [r3, #4]
		motor(motor),
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	687a      	ldr	r2, [r7, #4]
 80009ba:	609a      	str	r2, [r3, #8]
		invert(invert)
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	78fa      	ldrb	r2, [r7, #3]
 80009c0:	731a      	strb	r2, [r3, #12]
	{
		// Reassign the magnitudes for rescaling to prevent rounding error.
		rc_channel->rescale_forward_magnitude = motor->timer->Init.Period;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	461a      	mov	r2, r3
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	619a      	str	r2, [r3, #24]
		rc_channel->rescale_reverse_magnitude = rc_channel->rescale_forward_magnitude;
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	699a      	ldr	r2, [r3, #24]
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	61da      	str	r2, [r3, #28]
	}
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	4618      	mov	r0, r3
 80009da:	3714      	adds	r7, #20
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	080057dc 	.word	0x080057dc

080009e8 <_ZN20RemoteControlControl6updateEv>:

void RemoteControlControl::update()
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	// Read from the remote control channel
	int32_t value = rc_channel->value;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	60bb      	str	r3, [r7, #8]

	// Set direction
	bool direction;
	if(value<0)
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	da02      	bge.n	8000a04 <_ZN20RemoteControlControl6updateEv+0x1c>
	{
		direction = true;
 80009fe:	2301      	movs	r3, #1
 8000a00:	73fb      	strb	r3, [r7, #15]
 8000a02:	e001      	b.n	8000a08 <_ZN20RemoteControlControl6updateEv+0x20>
	}
	else
	{
		direction = false;
 8000a04:	2300      	movs	r3, #0
 8000a06:	73fb      	strb	r3, [r7, #15]
	}

	// Update the motor
	motor->set_inverted_compare_value(value, direction);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6898      	ldr	r0, [r3, #8]
 8000a0c:	7bfa      	ldrb	r2, [r7, #15]
 8000a0e:	2301      	movs	r3, #1
 8000a10:	68b9      	ldr	r1, [r7, #8]
 8000a12:	f7ff fdff 	bl	8000614 <_ZN11MotorDriver26set_inverted_compare_valueElbb>

}
 8000a16:	bf00      	nop
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <_ZN20RemoteControlControlD1Ev>:
RemoteControlControl::~RemoteControlControl()
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	4a13      	ldr	r2, [pc, #76]	@ (8000a78 <_ZN20RemoteControlControlD1Ev+0x58>)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	601a      	str	r2, [r3, #0]
{
    // Release any dynamically allocated resources
    // Deallocate memory for rc_channel if it was dynamically allocated
    if (rc_channel != nullptr)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d00b      	beq.n	8000a4e <_ZN20RemoteControlControlD1Ev+0x2e>
    {
        delete rc_channel;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d004      	beq.n	8000a48 <_ZN20RemoteControlControlD1Ev+0x28>
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	3204      	adds	r2, #4
 8000a42:	6812      	ldr	r2, [r2, #0]
 8000a44:	4618      	mov	r0, r3
 8000a46:	4790      	blx	r2
        rc_channel = nullptr; // Optional: Set to nullptr to avoid dangling pointers
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	605a      	str	r2, [r3, #4]
    }

    // Deallocate memory for motor if it was dynamically allocated
    if (motor != nullptr)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d00b      	beq.n	8000a6e <_ZN20RemoteControlControlD1Ev+0x4e>
    {
        delete motor;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d004      	beq.n	8000a68 <_ZN20RemoteControlControlD1Ev+0x48>
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	3204      	adds	r2, #4
 8000a62:	6812      	ldr	r2, [r2, #0]
 8000a64:	4618      	mov	r0, r3
 8000a66:	4790      	blx	r2
        motor = nullptr; // Optional: Set to nullptr to avoid dangling pointers
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
    }
}
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4618      	mov	r0, r3
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	080057dc 	.word	0x080057dc

08000a7c <_ZN20RemoteControlControlD0Ev>:
RemoteControlControl::~RemoteControlControl()
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
}
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f7ff ffcb 	bl	8000a20 <_ZN20RemoteControlControlD1Ev>
 8000a8a:	2110      	movs	r1, #16
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f004 f949 	bl	8004d24 <_ZdlPvj>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4618      	mov	r0, r3
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <HAL_TIM_IC_CaptureCallback>:
RemoteControlControl* Steering;
MotorDriver* Motor_1;
MotorDriver* Motor_2;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	if((htim->Instance = TIM1))
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a10      	ldr	r2, [pc, #64]	@ (8000ae8 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	bf14      	ite	ne
 8000ab2:	2301      	movne	r3, #1
 8000ab4:	2300      	moveq	r3, #0
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d011      	beq.n	8000ae0 <HAL_TIM_IC_CaptureCallback+0x44>
	{
		    if ( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 )
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	7f1b      	ldrb	r3, [r3, #28]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d104      	bne.n	8000ace <HAL_TIM_IC_CaptureCallback+0x32>
		    {
		        // Handle channel
		    	Steering->update();
 8000ac4:	4b09      	ldr	r3, [pc, #36]	@ (8000aec <HAL_TIM_IC_CaptureCallback+0x50>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff ff8d 	bl	80009e8 <_ZN20RemoteControlControl6updateEv>
		    }

			if ( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	7f1b      	ldrb	r3, [r3, #28]
 8000ad2:	2b02      	cmp	r3, #2
 8000ad4:	d104      	bne.n	8000ae0 <HAL_TIM_IC_CaptureCallback+0x44>
			{
		        // Handle channel
				Throttle->update();
 8000ad6:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <HAL_TIM_IC_CaptureCallback+0x54>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff ff84 	bl	80009e8 <_ZN20RemoteControlControl6updateEv>
		    	//ThrottleChannel->TIM_IC_CaptureCallback();
			}
	}
}
 8000ae0:	bf00      	nop
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40010000 	.word	0x40010000
 8000aec:	200001a4 	.word	0x200001a4
 8000af0:	200001a0 	.word	0x200001a0

08000af4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af4:	b590      	push	{r4, r7, lr}
 8000af6:	b095      	sub	sp, #84	@ 0x54
 8000af8:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000afa:	f000 fde1 	bl	80016c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000afe:	f000 f8cd 	bl	8000c9c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b02:	f000 facf 	bl	80010a4 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000b06:	f000 fa9f 	bl	8001048 <_ZL19MX_USART2_UART_Initv>
  MX_TIM1_Init();
 8000b0a:	f000 f939 	bl	8000d80 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 8000b0e:	f000 f9ad 	bl	8000e6c <_ZL12MX_TIM3_Initv>
  MX_USART1_UART_Init();
 8000b12:	f000 fa6b 	bl	8000fec <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
  char my_message[MESSAGE_LENGTH] = "";
 8000b16:	2300      	movs	r3, #0
 8000b18:	603b      	str	r3, [r7, #0]
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	222e      	movs	r2, #46	@ 0x2e
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4618      	mov	r0, r3
 8000b22:	f004 fa17 	bl	8004f54 <memset>
  int string_length;

  Motor_1 = new MotorDriver(
		  &htim3,
		  GPIOA, GPIO_PIN_6, TIM_CHANNEL_1,
		  GPIOA, GPIO_PIN_7, TIM_CHANNEL_2);
 8000b26:	2020      	movs	r0, #32
 8000b28:	f004 f8fe 	bl	8004d28 <_Znwj>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	461c      	mov	r4, r3
 8000b30:	2304      	movs	r3, #4
 8000b32:	9303      	str	r3, [sp, #12]
 8000b34:	2380      	movs	r3, #128	@ 0x80
 8000b36:	9302      	str	r3, [sp, #8]
 8000b38:	4b4b      	ldr	r3, [pc, #300]	@ (8000c68 <main+0x174>)
 8000b3a:	9301      	str	r3, [sp, #4]
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	9300      	str	r3, [sp, #0]
 8000b40:	2340      	movs	r3, #64	@ 0x40
 8000b42:	4a49      	ldr	r2, [pc, #292]	@ (8000c68 <main+0x174>)
 8000b44:	4949      	ldr	r1, [pc, #292]	@ (8000c6c <main+0x178>)
 8000b46:	4620      	mov	r0, r4
 8000b48:	f7ff fd12 	bl	8000570 <_ZN11MotorDriverC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftmS3_tm>
  Motor_1 = new MotorDriver(
 8000b4c:	4b48      	ldr	r3, [pc, #288]	@ (8000c70 <main+0x17c>)
 8000b4e:	601c      	str	r4, [r3, #0]

  Motor_2 = new MotorDriver(
		  &htim3,
		  GPIOB, GPIO_PIN_0, TIM_CHANNEL_3,
		  GPIOB, GPIO_PIN_1, TIM_CHANNEL_4);
 8000b50:	2020      	movs	r0, #32
 8000b52:	f004 f8e9 	bl	8004d28 <_Znwj>
 8000b56:	4603      	mov	r3, r0
 8000b58:	461c      	mov	r4, r3
 8000b5a:	230c      	movs	r3, #12
 8000b5c:	9303      	str	r3, [sp, #12]
 8000b5e:	2302      	movs	r3, #2
 8000b60:	9302      	str	r3, [sp, #8]
 8000b62:	4b44      	ldr	r3, [pc, #272]	@ (8000c74 <main+0x180>)
 8000b64:	9301      	str	r3, [sp, #4]
 8000b66:	2308      	movs	r3, #8
 8000b68:	9300      	str	r3, [sp, #0]
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	4a41      	ldr	r2, [pc, #260]	@ (8000c74 <main+0x180>)
 8000b6e:	493f      	ldr	r1, [pc, #252]	@ (8000c6c <main+0x178>)
 8000b70:	4620      	mov	r0, r4
 8000b72:	f7ff fcfd 	bl	8000570 <_ZN11MotorDriverC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftmS3_tm>
  Motor_2 = new MotorDriver(
 8000b76:	4b40      	ldr	r3, [pc, #256]	@ (8000c78 <main+0x184>)
 8000b78:	601c      	str	r4, [r3, #0]
		  		  1040,  // Calibrated full reverse
		  		  1507,  // Calibrated neutral
		  		  1998,  // Calibrated full speed
		  		  100,   // New max positive
				  100    // New max negative (magnitude)
		  	  	  );
 8000b7a:	2050      	movs	r0, #80	@ 0x50
 8000b7c:	f004 f8d4 	bl	8004d28 <_Znwj>
 8000b80:	4603      	mov	r3, r0
 8000b82:	461c      	mov	r4, r3
 8000b84:	2364      	movs	r3, #100	@ 0x64
 8000b86:	9305      	str	r3, [sp, #20]
 8000b88:	2364      	movs	r3, #100	@ 0x64
 8000b8a:	9304      	str	r3, [sp, #16]
 8000b8c:	f240 73ce 	movw	r3, #1998	@ 0x7ce
 8000b90:	9303      	str	r3, [sp, #12]
 8000b92:	f240 53e3 	movw	r3, #1507	@ 0x5e3
 8000b96:	9302      	str	r3, [sp, #8]
 8000b98:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8000b9c:	9301      	str	r3, [sp, #4]
 8000b9e:	4b37      	ldr	r3, [pc, #220]	@ (8000c7c <main+0x188>)
 8000ba0:	9300      	str	r3, [sp, #0]
 8000ba2:	f244 435c 	movw	r3, #17500	@ 0x445c
 8000ba6:	2204      	movs	r2, #4
 8000ba8:	4935      	ldr	r1, [pc, #212]	@ (8000c80 <main+0x18c>)
 8000baa:	4620      	mov	r0, r4
 8000bac:	f7ff fe5a 	bl	8000864 <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll>
  ThrottleChannel = new RCChannel
 8000bb0:	4b34      	ldr	r3, [pc, #208]	@ (8000c84 <main+0x190>)
 8000bb2:	601c      	str	r4, [r3, #0]
  		  992,       // Calibrated full left
  		  1515,      // Calibrated neutral
  		  2017,      // Calibrated full right
  		  100,       // New max positive
		  100        // New max negative (magnitude)
		  );
 8000bb4:	2050      	movs	r0, #80	@ 0x50
 8000bb6:	f004 f8b7 	bl	8004d28 <_Znwj>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	461c      	mov	r4, r3
 8000bbe:	2364      	movs	r3, #100	@ 0x64
 8000bc0:	9305      	str	r3, [sp, #20]
 8000bc2:	2364      	movs	r3, #100	@ 0x64
 8000bc4:	9304      	str	r3, [sp, #16]
 8000bc6:	f240 73e1 	movw	r3, #2017	@ 0x7e1
 8000bca:	9303      	str	r3, [sp, #12]
 8000bcc:	f240 53eb 	movw	r3, #1515	@ 0x5eb
 8000bd0:	9302      	str	r3, [sp, #8]
 8000bd2:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 8000bd6:	9301      	str	r3, [sp, #4]
 8000bd8:	4b28      	ldr	r3, [pc, #160]	@ (8000c7c <main+0x188>)
 8000bda:	9300      	str	r3, [sp, #0]
 8000bdc:	f244 435c 	movw	r3, #17500	@ 0x445c
 8000be0:	2200      	movs	r2, #0
 8000be2:	4927      	ldr	r1, [pc, #156]	@ (8000c80 <main+0x18c>)
 8000be4:	4620      	mov	r0, r4
 8000be6:	f7ff fe3d 	bl	8000864 <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll>
  SteeringChannel = new RCChannel
 8000bea:	4b27      	ldr	r3, [pc, #156]	@ (8000c88 <main+0x194>)
 8000bec:	601c      	str	r4, [r3, #0]

  Throttle = new RemoteControlControl
		  (
		  ThrottleChannel,
		  Motor_1
		  );
 8000bee:	2010      	movs	r0, #16
 8000bf0:	f004 f89a 	bl	8004d28 <_Znwj>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	461c      	mov	r4, r3
 8000bf8:	4b22      	ldr	r3, [pc, #136]	@ (8000c84 <main+0x190>)
 8000bfa:	6819      	ldr	r1, [r3, #0]
 8000bfc:	4b1c      	ldr	r3, [pc, #112]	@ (8000c70 <main+0x17c>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	2300      	movs	r3, #0
 8000c02:	4620      	mov	r0, r4
 8000c04:	f7ff feca 	bl	800099c <_ZN20RemoteControlControlC1EP9RCChannelP11MotorDriverb>
  Throttle = new RemoteControlControl
 8000c08:	4b20      	ldr	r3, [pc, #128]	@ (8000c8c <main+0x198>)
 8000c0a:	601c      	str	r4, [r3, #0]

  Steering = new RemoteControlControl
		  (
            SteeringChannel,
		    Motor_2
			);
 8000c0c:	2010      	movs	r0, #16
 8000c0e:	f004 f88b 	bl	8004d28 <_Znwj>
 8000c12:	4603      	mov	r3, r0
 8000c14:	461c      	mov	r4, r3
 8000c16:	4b1c      	ldr	r3, [pc, #112]	@ (8000c88 <main+0x194>)
 8000c18:	6819      	ldr	r1, [r3, #0]
 8000c1a:	4b17      	ldr	r3, [pc, #92]	@ (8000c78 <main+0x184>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	2300      	movs	r3, #0
 8000c20:	4620      	mov	r0, r4
 8000c22:	f7ff febb 	bl	800099c <_ZN20RemoteControlControlC1EP9RCChannelP11MotorDriverb>
  Steering = new RemoteControlControl
 8000c26:	4b1a      	ldr	r3, [pc, #104]	@ (8000c90 <main+0x19c>)
 8000c28:	601c      	str	r4, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_Delay(200);
 8000c2a:	20c8      	movs	r0, #200	@ 0xc8
 8000c2c:	f000 fdba 	bl	80017a4 <HAL_Delay>
	  string_length = snprintf(my_message, MESSAGE_LENGTH, "CH1: %*li%%, CH2: %*li%%.\r\n",
 8000c30:	4b15      	ldr	r3, [pc, #84]	@ (8000c88 <main+0x194>)
 8000c32:	681b      	ldr	r3, [r3, #0]
	                             VALUE_WIDTH, (long signed int)SteeringChannel->value,
 8000c34:	695b      	ldr	r3, [r3, #20]
	  string_length = snprintf(my_message, MESSAGE_LENGTH, "CH1: %*li%%, CH2: %*li%%.\r\n",
 8000c36:	4a13      	ldr	r2, [pc, #76]	@ (8000c84 <main+0x190>)
 8000c38:	6812      	ldr	r2, [r2, #0]
	                             VALUE_WIDTH, (long signed int)ThrottleChannel->value);
 8000c3a:	6952      	ldr	r2, [r2, #20]
	  string_length = snprintf(my_message, MESSAGE_LENGTH, "CH1: %*li%%, CH2: %*li%%.\r\n",
 8000c3c:	4638      	mov	r0, r7
 8000c3e:	9202      	str	r2, [sp, #8]
 8000c40:	2205      	movs	r2, #5
 8000c42:	9201      	str	r2, [sp, #4]
 8000c44:	9300      	str	r3, [sp, #0]
 8000c46:	2305      	movs	r3, #5
 8000c48:	4a12      	ldr	r2, [pc, #72]	@ (8000c94 <main+0x1a0>)
 8000c4a:	2132      	movs	r1, #50	@ 0x32
 8000c4c:	f004 f94e 	bl	8004eec <sniprintf>
 8000c50:	6378      	str	r0, [r7, #52]	@ 0x34
	  HAL_UART_Transmit(&huart2, (uint8_t*)my_message, string_length, HAL_MAX_DELAY);
 8000c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c54:	b29a      	uxth	r2, r3
 8000c56:	4639      	mov	r1, r7
 8000c58:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5c:	480e      	ldr	r0, [pc, #56]	@ (8000c98 <main+0x1a4>)
 8000c5e:	f003 f8af 	bl	8003dc0 <HAL_UART_Transmit>
	  HAL_Delay(200);
 8000c62:	bf00      	nop
 8000c64:	e7e1      	b.n	8000c2a <main+0x136>
 8000c66:	bf00      	nop
 8000c68:	40020000 	.word	0x40020000
 8000c6c:	200000c0 	.word	0x200000c0
 8000c70:	200001a8 	.word	0x200001a8
 8000c74:	40020400 	.word	0x40020400
 8000c78:	200001ac 	.word	0x200001ac
 8000c7c:	05b8d800 	.word	0x05b8d800
 8000c80:	20000078 	.word	0x20000078
 8000c84:	20000198 	.word	0x20000198
 8000c88:	2000019c 	.word	0x2000019c
 8000c8c:	200001a0 	.word	0x200001a0
 8000c90:	200001a4 	.word	0x200001a4
 8000c94:	08005798 	.word	0x08005798
 8000c98:	20000150 	.word	0x20000150

08000c9c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b094      	sub	sp, #80	@ 0x50
 8000ca0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca2:	f107 0320 	add.w	r3, r7, #32
 8000ca6:	2230      	movs	r2, #48	@ 0x30
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f004 f952 	bl	8004f54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb0:	f107 030c 	add.w	r3, r7, #12
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	4b2c      	ldr	r3, [pc, #176]	@ (8000d78 <_Z18SystemClock_Configv+0xdc>)
 8000cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc8:	4a2b      	ldr	r2, [pc, #172]	@ (8000d78 <_Z18SystemClock_Configv+0xdc>)
 8000cca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cce:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cd0:	4b29      	ldr	r3, [pc, #164]	@ (8000d78 <_Z18SystemClock_Configv+0xdc>)
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cdc:	2300      	movs	r3, #0
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	4b26      	ldr	r3, [pc, #152]	@ (8000d7c <_Z18SystemClock_Configv+0xe0>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a25      	ldr	r2, [pc, #148]	@ (8000d7c <_Z18SystemClock_Configv+0xe0>)
 8000ce6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000cea:	6013      	str	r3, [r2, #0]
 8000cec:	4b23      	ldr	r3, [pc, #140]	@ (8000d7c <_Z18SystemClock_Configv+0xe0>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cfc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d00:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d02:	2302      	movs	r3, #2
 8000d04:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d06:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000d0c:	2319      	movs	r3, #25
 8000d0e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000d10:	23c0      	movs	r3, #192	@ 0xc0
 8000d12:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d14:	2302      	movs	r3, #2
 8000d16:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d18:	2304      	movs	r3, #4
 8000d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d1c:	f107 0320 	add.w	r3, r7, #32
 8000d20:	4618      	mov	r0, r3
 8000d22:	f001 f8c9 	bl	8001eb8 <HAL_RCC_OscConfig>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	bf14      	ite	ne
 8000d2c:	2301      	movne	r3, #1
 8000d2e:	2300      	moveq	r3, #0
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8000d36:	f000 fa2d 	bl	8001194 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d3a:	230f      	movs	r3, #15
 8000d3c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	2103      	movs	r1, #3
 8000d56:	4618      	mov	r0, r3
 8000d58:	f001 fb26 	bl	80023a8 <HAL_RCC_ClockConfig>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	bf14      	ite	ne
 8000d62:	2301      	movne	r3, #1
 8000d64:	2300      	moveq	r3, #0
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8000d6c:	f000 fa12 	bl	8001194 <Error_Handler>
  }
}
 8000d70:	bf00      	nop
 8000d72:	3750      	adds	r7, #80	@ 0x50
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40007000 	.word	0x40007000

08000d80 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d86:	f107 0310 	add.w	r3, r7, #16
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d90:	463b      	mov	r3, r7
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d9c:	4b31      	ldr	r3, [pc, #196]	@ (8000e64 <_ZL12MX_TIM1_Initv+0xe4>)
 8000d9e:	4a32      	ldr	r2, [pc, #200]	@ (8000e68 <_ZL12MX_TIM1_Initv+0xe8>)
 8000da0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 8000da2:	4b30      	ldr	r3, [pc, #192]	@ (8000e64 <_ZL12MX_TIM1_Initv+0xe4>)
 8000da4:	225f      	movs	r2, #95	@ 0x5f
 8000da6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da8:	4b2e      	ldr	r3, [pc, #184]	@ (8000e64 <_ZL12MX_TIM1_Initv+0xe4>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000dae:	4b2d      	ldr	r3, [pc, #180]	@ (8000e64 <_ZL12MX_TIM1_Initv+0xe4>)
 8000db0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000db4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db6:	4b2b      	ldr	r3, [pc, #172]	@ (8000e64 <_ZL12MX_TIM1_Initv+0xe4>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dbc:	4b29      	ldr	r3, [pc, #164]	@ (8000e64 <_ZL12MX_TIM1_Initv+0xe4>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc2:	4b28      	ldr	r3, [pc, #160]	@ (8000e64 <_ZL12MX_TIM1_Initv+0xe4>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000dc8:	4826      	ldr	r0, [pc, #152]	@ (8000e64 <_ZL12MX_TIM1_Initv+0xe4>)
 8000dca:	f001 fe89 	bl	8002ae0 <HAL_TIM_IC_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	bf14      	ite	ne
 8000dd4:	2301      	movne	r3, #1
 8000dd6:	2300      	moveq	r3, #0
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <_ZL12MX_TIM1_Initv+0x62>
  {
    Error_Handler();
 8000dde:	f000 f9d9 	bl	8001194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dea:	f107 0310 	add.w	r3, r7, #16
 8000dee:	4619      	mov	r1, r3
 8000df0:	481c      	ldr	r0, [pc, #112]	@ (8000e64 <_ZL12MX_TIM1_Initv+0xe4>)
 8000df2:	f002 ff13 	bl	8003c1c <HAL_TIMEx_MasterConfigSynchronization>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	bf14      	ite	ne
 8000dfc:	2301      	movne	r3, #1
 8000dfe:	2300      	moveq	r3, #0
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <_ZL12MX_TIM1_Initv+0x8a>
  {
    Error_Handler();
 8000e06:	f000 f9c5 	bl	8001194 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000e0a:	230a      	movs	r3, #10
 8000e0c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e12:	2300      	movs	r3, #0
 8000e14:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4810      	ldr	r0, [pc, #64]	@ (8000e64 <_ZL12MX_TIM1_Initv+0xe4>)
 8000e22:	f002 f8b7 	bl	8002f94 <HAL_TIM_IC_ConfigChannel>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	bf14      	ite	ne
 8000e2c:	2301      	movne	r3, #1
 8000e2e:	2300      	moveq	r3, #0
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <_ZL12MX_TIM1_Initv+0xba>
  {
    Error_Handler();
 8000e36:	f000 f9ad 	bl	8001194 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	2204      	movs	r2, #4
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4808      	ldr	r0, [pc, #32]	@ (8000e64 <_ZL12MX_TIM1_Initv+0xe4>)
 8000e42:	f002 f8a7 	bl	8002f94 <HAL_TIM_IC_ConfigChannel>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	bf14      	ite	ne
 8000e4c:	2301      	movne	r3, #1
 8000e4e:	2300      	moveq	r3, #0
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <_ZL12MX_TIM1_Initv+0xda>
  {
    Error_Handler();
 8000e56:	f000 f99d 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e5a:	bf00      	nop
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000078 	.word	0x20000078
 8000e68:	40010000 	.word	0x40010000

08000e6c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08e      	sub	sp, #56	@ 0x38
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e80:	f107 0320 	add.w	r3, r7, #32
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
 8000e98:	615a      	str	r2, [r3, #20]
 8000e9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e9c:	4b51      	ldr	r3, [pc, #324]	@ (8000fe4 <_ZL12MX_TIM3_Initv+0x178>)
 8000e9e:	4a52      	ldr	r2, [pc, #328]	@ (8000fe8 <_ZL12MX_TIM3_Initv+0x17c>)
 8000ea0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ea2:	4b50      	ldr	r3, [pc, #320]	@ (8000fe4 <_ZL12MX_TIM3_Initv+0x178>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea8:	4b4e      	ldr	r3, [pc, #312]	@ (8000fe4 <_ZL12MX_TIM3_Initv+0x178>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4799;
 8000eae:	4b4d      	ldr	r3, [pc, #308]	@ (8000fe4 <_ZL12MX_TIM3_Initv+0x178>)
 8000eb0:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 8000eb4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb6:	4b4b      	ldr	r3, [pc, #300]	@ (8000fe4 <_ZL12MX_TIM3_Initv+0x178>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ebc:	4b49      	ldr	r3, [pc, #292]	@ (8000fe4 <_ZL12MX_TIM3_Initv+0x178>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ec2:	4848      	ldr	r0, [pc, #288]	@ (8000fe4 <_ZL12MX_TIM3_Initv+0x178>)
 8000ec4:	f001 fc50 	bl	8002768 <HAL_TIM_Base_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	bf14      	ite	ne
 8000ece:	2301      	movne	r3, #1
 8000ed0:	2300      	moveq	r3, #0
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 8000ed8:	f000 f95c 	bl	8001194 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000edc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ee2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	483e      	ldr	r0, [pc, #248]	@ (8000fe4 <_ZL12MX_TIM3_Initv+0x178>)
 8000eea:	f002 f9b1 	bl	8003250 <HAL_TIM_ConfigClockSource>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	bf14      	ite	ne
 8000ef4:	2301      	movne	r3, #1
 8000ef6:	2300      	moveq	r3, #0
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 8000efe:	f000 f949 	bl	8001194 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f02:	4838      	ldr	r0, [pc, #224]	@ (8000fe4 <_ZL12MX_TIM3_Initv+0x178>)
 8000f04:	f001 fc7f 	bl	8002806 <HAL_TIM_PWM_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	bf14      	ite	ne
 8000f0e:	2301      	movne	r3, #1
 8000f10:	2300      	moveq	r3, #0
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <_ZL12MX_TIM3_Initv+0xb0>
  {
    Error_Handler();
 8000f18:	f000 f93c 	bl	8001194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f24:	f107 0320 	add.w	r3, r7, #32
 8000f28:	4619      	mov	r1, r3
 8000f2a:	482e      	ldr	r0, [pc, #184]	@ (8000fe4 <_ZL12MX_TIM3_Initv+0x178>)
 8000f2c:	f002 fe76 	bl	8003c1c <HAL_TIMEx_MasterConfigSynchronization>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	bf14      	ite	ne
 8000f36:	2301      	movne	r3, #1
 8000f38:	2300      	moveq	r3, #0
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8000f40:	f000 f928 	bl	8001194 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f44:	2360      	movs	r3, #96	@ 0x60
 8000f46:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f54:	1d3b      	adds	r3, r7, #4
 8000f56:	2200      	movs	r2, #0
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4822      	ldr	r0, [pc, #136]	@ (8000fe4 <_ZL12MX_TIM3_Initv+0x178>)
 8000f5c:	f002 f8b6 	bl	80030cc <HAL_TIM_PWM_ConfigChannel>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	bf14      	ite	ne
 8000f66:	2301      	movne	r3, #1
 8000f68:	2300      	moveq	r3, #0
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <_ZL12MX_TIM3_Initv+0x108>
  {
    Error_Handler();
 8000f70:	f000 f910 	bl	8001194 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	2204      	movs	r2, #4
 8000f78:	4619      	mov	r1, r3
 8000f7a:	481a      	ldr	r0, [pc, #104]	@ (8000fe4 <_ZL12MX_TIM3_Initv+0x178>)
 8000f7c:	f002 f8a6 	bl	80030cc <HAL_TIM_PWM_ConfigChannel>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	bf14      	ite	ne
 8000f86:	2301      	movne	r3, #1
 8000f88:	2300      	moveq	r3, #0
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <_ZL12MX_TIM3_Initv+0x128>
  {
    Error_Handler();
 8000f90:	f000 f900 	bl	8001194 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	2208      	movs	r2, #8
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4812      	ldr	r0, [pc, #72]	@ (8000fe4 <_ZL12MX_TIM3_Initv+0x178>)
 8000f9c:	f002 f896 	bl	80030cc <HAL_TIM_PWM_ConfigChannel>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	bf14      	ite	ne
 8000fa6:	2301      	movne	r3, #1
 8000fa8:	2300      	moveq	r3, #0
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <_ZL12MX_TIM3_Initv+0x148>
  {
    Error_Handler();
 8000fb0:	f000 f8f0 	bl	8001194 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	220c      	movs	r2, #12
 8000fb8:	4619      	mov	r1, r3
 8000fba:	480a      	ldr	r0, [pc, #40]	@ (8000fe4 <_ZL12MX_TIM3_Initv+0x178>)
 8000fbc:	f002 f886 	bl	80030cc <HAL_TIM_PWM_ConfigChannel>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	bf14      	ite	ne
 8000fc6:	2301      	movne	r3, #1
 8000fc8:	2300      	moveq	r3, #0
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <_ZL12MX_TIM3_Initv+0x168>
  {
    Error_Handler();
 8000fd0:	f000 f8e0 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000fd4:	4803      	ldr	r0, [pc, #12]	@ (8000fe4 <_ZL12MX_TIM3_Initv+0x178>)
 8000fd6:	f000 f995 	bl	8001304 <HAL_TIM_MspPostInit>

}
 8000fda:	bf00      	nop
 8000fdc:	3738      	adds	r7, #56	@ 0x38
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200000c0 	.word	0x200000c0
 8000fe8:	40000400 	.word	0x40000400

08000fec <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ff0:	4b13      	ldr	r3, [pc, #76]	@ (8001040 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000ff2:	4a14      	ldr	r2, [pc, #80]	@ (8001044 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000ff4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ff6:	4b12      	ldr	r3, [pc, #72]	@ (8001040 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000ff8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ffc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ffe:	4b10      	ldr	r3, [pc, #64]	@ (8001040 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001004:	4b0e      	ldr	r3, [pc, #56]	@ (8001040 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001006:	2200      	movs	r2, #0
 8001008:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800100a:	4b0d      	ldr	r3, [pc, #52]	@ (8001040 <_ZL19MX_USART1_UART_Initv+0x54>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001010:	4b0b      	ldr	r3, [pc, #44]	@ (8001040 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001012:	220c      	movs	r2, #12
 8001014:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001016:	4b0a      	ldr	r3, [pc, #40]	@ (8001040 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800101c:	4b08      	ldr	r3, [pc, #32]	@ (8001040 <_ZL19MX_USART1_UART_Initv+0x54>)
 800101e:	2200      	movs	r2, #0
 8001020:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001022:	4807      	ldr	r0, [pc, #28]	@ (8001040 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001024:	f002 fe7c 	bl	8003d20 <HAL_UART_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	bf14      	ite	ne
 800102e:	2301      	movne	r3, #1
 8001030:	2300      	moveq	r3, #0
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8001038:	f000 f8ac 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000108 	.word	0x20000108
 8001044:	40011000 	.word	0x40011000

08001048 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800104c:	4b13      	ldr	r3, [pc, #76]	@ (800109c <_ZL19MX_USART2_UART_Initv+0x54>)
 800104e:	4a14      	ldr	r2, [pc, #80]	@ (80010a0 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001050:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001052:	4b12      	ldr	r3, [pc, #72]	@ (800109c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001054:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001058:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800105a:	4b10      	ldr	r3, [pc, #64]	@ (800109c <_ZL19MX_USART2_UART_Initv+0x54>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001060:	4b0e      	ldr	r3, [pc, #56]	@ (800109c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001066:	4b0d      	ldr	r3, [pc, #52]	@ (800109c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800106c:	4b0b      	ldr	r3, [pc, #44]	@ (800109c <_ZL19MX_USART2_UART_Initv+0x54>)
 800106e:	220c      	movs	r2, #12
 8001070:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001072:	4b0a      	ldr	r3, [pc, #40]	@ (800109c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001078:	4b08      	ldr	r3, [pc, #32]	@ (800109c <_ZL19MX_USART2_UART_Initv+0x54>)
 800107a:	2200      	movs	r2, #0
 800107c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800107e:	4807      	ldr	r0, [pc, #28]	@ (800109c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001080:	f002 fe4e 	bl	8003d20 <HAL_UART_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	bf14      	ite	ne
 800108a:	2301      	movne	r3, #1
 800108c:	2300      	moveq	r3, #0
 800108e:	b2db      	uxtb	r3, r3
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001094:	f000 f87e 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000150 	.word	0x20000150
 80010a0:	40004400 	.word	0x40004400

080010a4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	@ 0x28
 80010a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]
 80010b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	4b32      	ldr	r3, [pc, #200]	@ (8001188 <_ZL12MX_GPIO_Initv+0xe4>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c2:	4a31      	ldr	r2, [pc, #196]	@ (8001188 <_ZL12MX_GPIO_Initv+0xe4>)
 80010c4:	f043 0304 	orr.w	r3, r3, #4
 80010c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001188 <_ZL12MX_GPIO_Initv+0xe4>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	f003 0304 	and.w	r3, r3, #4
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	4b2b      	ldr	r3, [pc, #172]	@ (8001188 <_ZL12MX_GPIO_Initv+0xe4>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010de:	4a2a      	ldr	r2, [pc, #168]	@ (8001188 <_ZL12MX_GPIO_Initv+0xe4>)
 80010e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e6:	4b28      	ldr	r3, [pc, #160]	@ (8001188 <_ZL12MX_GPIO_Initv+0xe4>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	4b24      	ldr	r3, [pc, #144]	@ (8001188 <_ZL12MX_GPIO_Initv+0xe4>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fa:	4a23      	ldr	r2, [pc, #140]	@ (8001188 <_ZL12MX_GPIO_Initv+0xe4>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6313      	str	r3, [r2, #48]	@ 0x30
 8001102:	4b21      	ldr	r3, [pc, #132]	@ (8001188 <_ZL12MX_GPIO_Initv+0xe4>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	4b1d      	ldr	r3, [pc, #116]	@ (8001188 <_ZL12MX_GPIO_Initv+0xe4>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	4a1c      	ldr	r2, [pc, #112]	@ (8001188 <_ZL12MX_GPIO_Initv+0xe4>)
 8001118:	f043 0302 	orr.w	r3, r3, #2
 800111c:	6313      	str	r3, [r2, #48]	@ 0x30
 800111e:	4b1a      	ldr	r3, [pc, #104]	@ (8001188 <_ZL12MX_GPIO_Initv+0xe4>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001130:	4816      	ldr	r0, [pc, #88]	@ (800118c <_ZL12MX_GPIO_Initv+0xe8>)
 8001132:	f000 fe83 	bl	8001e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001136:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800113a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113c:	2301      	movs	r3, #1
 800113e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	4619      	mov	r1, r3
 800114e:	480f      	ldr	r0, [pc, #60]	@ (800118c <_ZL12MX_GPIO_Initv+0xe8>)
 8001150:	f000 fcf0 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001154:	2301      	movs	r3, #1
 8001156:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001158:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800115c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	4809      	ldr	r0, [pc, #36]	@ (8001190 <_ZL12MX_GPIO_Initv+0xec>)
 800116a:	f000 fce3 	bl	8001b34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2100      	movs	r1, #0
 8001172:	2006      	movs	r0, #6
 8001174:	f000 fc15 	bl	80019a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001178:	2006      	movs	r0, #6
 800117a:	f000 fc2e 	bl	80019da <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800117e:	bf00      	nop
 8001180:	3728      	adds	r7, #40	@ 0x28
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800
 800118c:	40020800 	.word	0x40020800
 8001190:	40020000 	.word	0x40020000

08001194 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001198:	b672      	cpsid	i
}
 800119a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800119c:	bf00      	nop
 800119e:	e7fd      	b.n	800119c <Error_Handler+0x8>

080011a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	4b10      	ldr	r3, [pc, #64]	@ (80011ec <HAL_MspInit+0x4c>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ae:	4a0f      	ldr	r2, [pc, #60]	@ (80011ec <HAL_MspInit+0x4c>)
 80011b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011b6:	4b0d      	ldr	r3, [pc, #52]	@ (80011ec <HAL_MspInit+0x4c>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	603b      	str	r3, [r7, #0]
 80011c6:	4b09      	ldr	r3, [pc, #36]	@ (80011ec <HAL_MspInit+0x4c>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ca:	4a08      	ldr	r2, [pc, #32]	@ (80011ec <HAL_MspInit+0x4c>)
 80011cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011d2:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <HAL_MspInit+0x4c>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011da:	603b      	str	r3, [r7, #0]
 80011dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800

080011f0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	@ 0x28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a29      	ldr	r2, [pc, #164]	@ (80012b4 <HAL_TIM_IC_MspInit+0xc4>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d14c      	bne.n	80012ac <HAL_TIM_IC_MspInit+0xbc>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
 8001216:	4b28      	ldr	r3, [pc, #160]	@ (80012b8 <HAL_TIM_IC_MspInit+0xc8>)
 8001218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121a:	4a27      	ldr	r2, [pc, #156]	@ (80012b8 <HAL_TIM_IC_MspInit+0xc8>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6453      	str	r3, [r2, #68]	@ 0x44
 8001222:	4b25      	ldr	r3, [pc, #148]	@ (80012b8 <HAL_TIM_IC_MspInit+0xc8>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	4b21      	ldr	r3, [pc, #132]	@ (80012b8 <HAL_TIM_IC_MspInit+0xc8>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	4a20      	ldr	r2, [pc, #128]	@ (80012b8 <HAL_TIM_IC_MspInit+0xc8>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6313      	str	r3, [r2, #48]	@ 0x30
 800123e:	4b1e      	ldr	r3, [pc, #120]	@ (80012b8 <HAL_TIM_IC_MspInit+0xc8>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 800124a:	f44f 6330 	mov.w	r3, #2816	@ 0xb00
 800124e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001250:	2302      	movs	r3, #2
 8001252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001258:	2300      	movs	r3, #0
 800125a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800125c:	2301      	movs	r3, #1
 800125e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	4619      	mov	r1, r3
 8001266:	4815      	ldr	r0, [pc, #84]	@ (80012bc <HAL_TIM_IC_MspInit+0xcc>)
 8001268:	f000 fc64 	bl	8001b34 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800126c:	2200      	movs	r2, #0
 800126e:	2100      	movs	r1, #0
 8001270:	2018      	movs	r0, #24
 8001272:	f000 fb96 	bl	80019a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001276:	2018      	movs	r0, #24
 8001278:	f000 fbaf 	bl	80019da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800127c:	2200      	movs	r2, #0
 800127e:	2100      	movs	r1, #0
 8001280:	2019      	movs	r0, #25
 8001282:	f000 fb8e 	bl	80019a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001286:	2019      	movs	r0, #25
 8001288:	f000 fba7 	bl	80019da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800128c:	2200      	movs	r2, #0
 800128e:	2100      	movs	r1, #0
 8001290:	201a      	movs	r0, #26
 8001292:	f000 fb86 	bl	80019a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001296:	201a      	movs	r0, #26
 8001298:	f000 fb9f 	bl	80019da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800129c:	2200      	movs	r2, #0
 800129e:	2100      	movs	r1, #0
 80012a0:	201b      	movs	r0, #27
 80012a2:	f000 fb7e 	bl	80019a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80012a6:	201b      	movs	r0, #27
 80012a8:	f000 fb97 	bl	80019da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80012ac:	bf00      	nop
 80012ae:	3728      	adds	r7, #40	@ 0x28
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40010000 	.word	0x40010000
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40020000 	.word	0x40020000

080012c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a0b      	ldr	r2, [pc, #44]	@ (80012fc <HAL_TIM_Base_MspInit+0x3c>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d10d      	bne.n	80012ee <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001300 <HAL_TIM_Base_MspInit+0x40>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012da:	4a09      	ldr	r2, [pc, #36]	@ (8001300 <HAL_TIM_Base_MspInit+0x40>)
 80012dc:	f043 0302 	orr.w	r3, r3, #2
 80012e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012e2:	4b07      	ldr	r3, [pc, #28]	@ (8001300 <HAL_TIM_Base_MspInit+0x40>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80012ee:	bf00      	nop
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	40000400 	.word	0x40000400
 8001300:	40023800 	.word	0x40023800

08001304 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08a      	sub	sp, #40	@ 0x28
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a21      	ldr	r2, [pc, #132]	@ (80013a8 <HAL_TIM_MspPostInit+0xa4>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d13b      	bne.n	800139e <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	4b20      	ldr	r3, [pc, #128]	@ (80013ac <HAL_TIM_MspPostInit+0xa8>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132e:	4a1f      	ldr	r2, [pc, #124]	@ (80013ac <HAL_TIM_MspPostInit+0xa8>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6313      	str	r3, [r2, #48]	@ 0x30
 8001336:	4b1d      	ldr	r3, [pc, #116]	@ (80013ac <HAL_TIM_MspPostInit+0xa8>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	4b19      	ldr	r3, [pc, #100]	@ (80013ac <HAL_TIM_MspPostInit+0xa8>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	4a18      	ldr	r2, [pc, #96]	@ (80013ac <HAL_TIM_MspPostInit+0xa8>)
 800134c:	f043 0302 	orr.w	r3, r3, #2
 8001350:	6313      	str	r3, [r2, #48]	@ 0x30
 8001352:	4b16      	ldr	r3, [pc, #88]	@ (80013ac <HAL_TIM_MspPostInit+0xa8>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800135e:	23c0      	movs	r3, #192	@ 0xc0
 8001360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001362:	2302      	movs	r3, #2
 8001364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136a:	2300      	movs	r3, #0
 800136c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800136e:	2302      	movs	r3, #2
 8001370:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001372:	f107 0314 	add.w	r3, r7, #20
 8001376:	4619      	mov	r1, r3
 8001378:	480d      	ldr	r0, [pc, #52]	@ (80013b0 <HAL_TIM_MspPostInit+0xac>)
 800137a:	f000 fbdb 	bl	8001b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800137e:	2303      	movs	r3, #3
 8001380:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800138e:	2302      	movs	r3, #2
 8001390:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	4619      	mov	r1, r3
 8001398:	4806      	ldr	r0, [pc, #24]	@ (80013b4 <HAL_TIM_MspPostInit+0xb0>)
 800139a:	f000 fbcb 	bl	8001b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800139e:	bf00      	nop
 80013a0:	3728      	adds	r7, #40	@ 0x28
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40000400 	.word	0x40000400
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40020000 	.word	0x40020000
 80013b4:	40020400 	.word	0x40020400

080013b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08c      	sub	sp, #48	@ 0x30
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 031c 	add.w	r3, r7, #28
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a36      	ldr	r2, [pc, #216]	@ (80014b0 <HAL_UART_MspInit+0xf8>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d12c      	bne.n	8001434 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	61bb      	str	r3, [r7, #24]
 80013de:	4b35      	ldr	r3, [pc, #212]	@ (80014b4 <HAL_UART_MspInit+0xfc>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e2:	4a34      	ldr	r2, [pc, #208]	@ (80014b4 <HAL_UART_MspInit+0xfc>)
 80013e4:	f043 0310 	orr.w	r3, r3, #16
 80013e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ea:	4b32      	ldr	r3, [pc, #200]	@ (80014b4 <HAL_UART_MspInit+0xfc>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ee:	f003 0310 	and.w	r3, r3, #16
 80013f2:	61bb      	str	r3, [r7, #24]
 80013f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
 80013fa:	4b2e      	ldr	r3, [pc, #184]	@ (80014b4 <HAL_UART_MspInit+0xfc>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	4a2d      	ldr	r2, [pc, #180]	@ (80014b4 <HAL_UART_MspInit+0xfc>)
 8001400:	f043 0302 	orr.w	r3, r3, #2
 8001404:	6313      	str	r3, [r2, #48]	@ 0x30
 8001406:	4b2b      	ldr	r3, [pc, #172]	@ (80014b4 <HAL_UART_MspInit+0xfc>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	617b      	str	r3, [r7, #20]
 8001410:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001412:	23c0      	movs	r3, #192	@ 0xc0
 8001414:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001416:	2302      	movs	r3, #2
 8001418:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141e:	2303      	movs	r3, #3
 8001420:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001422:	2307      	movs	r3, #7
 8001424:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001426:	f107 031c 	add.w	r3, r7, #28
 800142a:	4619      	mov	r1, r3
 800142c:	4822      	ldr	r0, [pc, #136]	@ (80014b8 <HAL_UART_MspInit+0x100>)
 800142e:	f000 fb81 	bl	8001b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001432:	e038      	b.n	80014a6 <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART2)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a20      	ldr	r2, [pc, #128]	@ (80014bc <HAL_UART_MspInit+0x104>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d133      	bne.n	80014a6 <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART2_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	4b1c      	ldr	r3, [pc, #112]	@ (80014b4 <HAL_UART_MspInit+0xfc>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001446:	4a1b      	ldr	r2, [pc, #108]	@ (80014b4 <HAL_UART_MspInit+0xfc>)
 8001448:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800144c:	6413      	str	r3, [r2, #64]	@ 0x40
 800144e:	4b19      	ldr	r3, [pc, #100]	@ (80014b4 <HAL_UART_MspInit+0xfc>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	4b15      	ldr	r3, [pc, #84]	@ (80014b4 <HAL_UART_MspInit+0xfc>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	4a14      	ldr	r2, [pc, #80]	@ (80014b4 <HAL_UART_MspInit+0xfc>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	6313      	str	r3, [r2, #48]	@ 0x30
 800146a:	4b12      	ldr	r3, [pc, #72]	@ (80014b4 <HAL_UART_MspInit+0xfc>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001476:	230c      	movs	r3, #12
 8001478:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147a:	2302      	movs	r3, #2
 800147c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001482:	2303      	movs	r3, #3
 8001484:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001486:	2307      	movs	r3, #7
 8001488:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148a:	f107 031c 	add.w	r3, r7, #28
 800148e:	4619      	mov	r1, r3
 8001490:	480b      	ldr	r0, [pc, #44]	@ (80014c0 <HAL_UART_MspInit+0x108>)
 8001492:	f000 fb4f 	bl	8001b34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2100      	movs	r1, #0
 800149a:	2026      	movs	r0, #38	@ 0x26
 800149c:	f000 fa81 	bl	80019a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014a0:	2026      	movs	r0, #38	@ 0x26
 80014a2:	f000 fa9a 	bl	80019da <HAL_NVIC_EnableIRQ>
}
 80014a6:	bf00      	nop
 80014a8:	3730      	adds	r7, #48	@ 0x30
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40011000 	.word	0x40011000
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40020400 	.word	0x40020400
 80014bc:	40004400 	.word	0x40004400
 80014c0:	40020000 	.word	0x40020000

080014c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <NMI_Handler+0x4>

080014cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d0:	bf00      	nop
 80014d2:	e7fd      	b.n	80014d0 <HardFault_Handler+0x4>

080014d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d8:	bf00      	nop
 80014da:	e7fd      	b.n	80014d8 <MemManage_Handler+0x4>

080014dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <BusFault_Handler+0x4>

080014e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <UsageFault_Handler+0x4>

080014ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800151a:	f000 f923 	bl	8001764 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}

08001522 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001526:	2001      	movs	r0, #1
 8001528:	f000 fca2 	bl	8001e70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}

08001530 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001534:	4802      	ldr	r0, [pc, #8]	@ (8001540 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001536:	f001 fc3d 	bl	8002db4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000078 	.word	0x20000078

08001544 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001548:	4802      	ldr	r0, [pc, #8]	@ (8001554 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800154a:	f001 fc33 	bl	8002db4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000078 	.word	0x20000078

08001558 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800155c:	4802      	ldr	r0, [pc, #8]	@ (8001568 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800155e:	f001 fc29 	bl	8002db4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000078 	.word	0x20000078

0800156c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001570:	4802      	ldr	r0, [pc, #8]	@ (800157c <TIM1_CC_IRQHandler+0x10>)
 8001572:	f001 fc1f 	bl	8002db4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000078 	.word	0x20000078

08001580 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001584:	4802      	ldr	r0, [pc, #8]	@ (8001590 <USART2_IRQHandler+0x10>)
 8001586:	f002 fca7 	bl	8003ed8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000150 	.word	0x20000150

08001594 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return 1;
 8001598:	2301      	movs	r3, #1
}
 800159a:	4618      	mov	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <_kill>:

int _kill(int pid, int sig)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015ae:	f003 fd2d 	bl	800500c <__errno>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2216      	movs	r2, #22
 80015b6:	601a      	str	r2, [r3, #0]
  return -1;
 80015b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <_exit>:

void _exit (int status)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015cc:	f04f 31ff 	mov.w	r1, #4294967295
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff ffe7 	bl	80015a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015d6:	bf00      	nop
 80015d8:	e7fd      	b.n	80015d6 <_exit+0x12>
	...

080015dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015e4:	4a14      	ldr	r2, [pc, #80]	@ (8001638 <_sbrk+0x5c>)
 80015e6:	4b15      	ldr	r3, [pc, #84]	@ (800163c <_sbrk+0x60>)
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015f0:	4b13      	ldr	r3, [pc, #76]	@ (8001640 <_sbrk+0x64>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d102      	bne.n	80015fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015f8:	4b11      	ldr	r3, [pc, #68]	@ (8001640 <_sbrk+0x64>)
 80015fa:	4a12      	ldr	r2, [pc, #72]	@ (8001644 <_sbrk+0x68>)
 80015fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015fe:	4b10      	ldr	r3, [pc, #64]	@ (8001640 <_sbrk+0x64>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4413      	add	r3, r2
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	429a      	cmp	r2, r3
 800160a:	d207      	bcs.n	800161c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800160c:	f003 fcfe 	bl	800500c <__errno>
 8001610:	4603      	mov	r3, r0
 8001612:	220c      	movs	r2, #12
 8001614:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001616:	f04f 33ff 	mov.w	r3, #4294967295
 800161a:	e009      	b.n	8001630 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800161c:	4b08      	ldr	r3, [pc, #32]	@ (8001640 <_sbrk+0x64>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001622:	4b07      	ldr	r3, [pc, #28]	@ (8001640 <_sbrk+0x64>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	4a05      	ldr	r2, [pc, #20]	@ (8001640 <_sbrk+0x64>)
 800162c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800162e:	68fb      	ldr	r3, [r7, #12]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20020000 	.word	0x20020000
 800163c:	00000400 	.word	0x00000400
 8001640:	200001b0 	.word	0x200001b0
 8001644:	20000308 	.word	0x20000308

08001648 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800164c:	4b06      	ldr	r3, [pc, #24]	@ (8001668 <SystemInit+0x20>)
 800164e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001652:	4a05      	ldr	r2, [pc, #20]	@ (8001668 <SystemInit+0x20>)
 8001654:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001658:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <Reset_Handler>:
 800166c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016a4 <LoopFillZerobss+0xe>
 8001670:	f7ff ffea 	bl	8001648 <SystemInit>
 8001674:	480c      	ldr	r0, [pc, #48]	@ (80016a8 <LoopFillZerobss+0x12>)
 8001676:	490d      	ldr	r1, [pc, #52]	@ (80016ac <LoopFillZerobss+0x16>)
 8001678:	4a0d      	ldr	r2, [pc, #52]	@ (80016b0 <LoopFillZerobss+0x1a>)
 800167a:	2300      	movs	r3, #0
 800167c:	e002      	b.n	8001684 <LoopCopyDataInit>

0800167e <CopyDataInit>:
 800167e:	58d4      	ldr	r4, [r2, r3]
 8001680:	50c4      	str	r4, [r0, r3]
 8001682:	3304      	adds	r3, #4

08001684 <LoopCopyDataInit>:
 8001684:	18c4      	adds	r4, r0, r3
 8001686:	428c      	cmp	r4, r1
 8001688:	d3f9      	bcc.n	800167e <CopyDataInit>
 800168a:	4a0a      	ldr	r2, [pc, #40]	@ (80016b4 <LoopFillZerobss+0x1e>)
 800168c:	4c0a      	ldr	r4, [pc, #40]	@ (80016b8 <LoopFillZerobss+0x22>)
 800168e:	2300      	movs	r3, #0
 8001690:	e001      	b.n	8001696 <LoopFillZerobss>

08001692 <FillZerobss>:
 8001692:	6013      	str	r3, [r2, #0]
 8001694:	3204      	adds	r2, #4

08001696 <LoopFillZerobss>:
 8001696:	42a2      	cmp	r2, r4
 8001698:	d3fb      	bcc.n	8001692 <FillZerobss>
 800169a:	f003 fcbd 	bl	8005018 <__libc_init_array>
 800169e:	f7ff fa29 	bl	8000af4 <main>
 80016a2:	4770      	bx	lr
 80016a4:	20020000 	.word	0x20020000
 80016a8:	20000000 	.word	0x20000000
 80016ac:	2000005c 	.word	0x2000005c
 80016b0:	08005840 	.word	0x08005840
 80016b4:	2000005c 	.word	0x2000005c
 80016b8:	20000304 	.word	0x20000304

080016bc <ADC_IRQHandler>:
 80016bc:	e7fe      	b.n	80016bc <ADC_IRQHandler>
	...

080016c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001700 <HAL_Init+0x40>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001700 <HAL_Init+0x40>)
 80016ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001700 <HAL_Init+0x40>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001700 <HAL_Init+0x40>)
 80016d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016dc:	4b08      	ldr	r3, [pc, #32]	@ (8001700 <HAL_Init+0x40>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a07      	ldr	r2, [pc, #28]	@ (8001700 <HAL_Init+0x40>)
 80016e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e8:	2003      	movs	r0, #3
 80016ea:	f000 f94f 	bl	800198c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ee:	200f      	movs	r0, #15
 80016f0:	f000 f808 	bl	8001704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016f4:	f7ff fd54 	bl	80011a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40023c00 	.word	0x40023c00

08001704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800170c:	4b12      	ldr	r3, [pc, #72]	@ (8001758 <HAL_InitTick+0x54>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4b12      	ldr	r3, [pc, #72]	@ (800175c <HAL_InitTick+0x58>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	4619      	mov	r1, r3
 8001716:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800171a:	fbb3 f3f1 	udiv	r3, r3, r1
 800171e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001722:	4618      	mov	r0, r3
 8001724:	f000 f967 	bl	80019f6 <HAL_SYSTICK_Config>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e00e      	b.n	8001750 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b0f      	cmp	r3, #15
 8001736:	d80a      	bhi.n	800174e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001738:	2200      	movs	r2, #0
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	f04f 30ff 	mov.w	r0, #4294967295
 8001740:	f000 f92f 	bl	80019a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001744:	4a06      	ldr	r2, [pc, #24]	@ (8001760 <HAL_InitTick+0x5c>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800174a:	2300      	movs	r3, #0
 800174c:	e000      	b.n	8001750 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
}
 8001750:	4618      	mov	r0, r3
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000000 	.word	0x20000000
 800175c:	20000008 	.word	0x20000008
 8001760:	20000004 	.word	0x20000004

08001764 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001768:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <HAL_IncTick+0x20>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	461a      	mov	r2, r3
 800176e:	4b06      	ldr	r3, [pc, #24]	@ (8001788 <HAL_IncTick+0x24>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4413      	add	r3, r2
 8001774:	4a04      	ldr	r2, [pc, #16]	@ (8001788 <HAL_IncTick+0x24>)
 8001776:	6013      	str	r3, [r2, #0]
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	20000008 	.word	0x20000008
 8001788:	200001b4 	.word	0x200001b4

0800178c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return uwTick;
 8001790:	4b03      	ldr	r3, [pc, #12]	@ (80017a0 <HAL_GetTick+0x14>)
 8001792:	681b      	ldr	r3, [r3, #0]
}
 8001794:	4618      	mov	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	200001b4 	.word	0x200001b4

080017a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017ac:	f7ff ffee 	bl	800178c <HAL_GetTick>
 80017b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017bc:	d005      	beq.n	80017ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017be:	4b0a      	ldr	r3, [pc, #40]	@ (80017e8 <HAL_Delay+0x44>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	461a      	mov	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4413      	add	r3, r2
 80017c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017ca:	bf00      	nop
 80017cc:	f7ff ffde 	bl	800178c <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d8f7      	bhi.n	80017cc <HAL_Delay+0x28>
  {
  }
}
 80017dc:	bf00      	nop
 80017de:	bf00      	nop
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000008 	.word	0x20000008

080017ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001830 <__NVIC_SetPriorityGrouping+0x44>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001808:	4013      	ands	r3, r2
 800180a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001814:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001818:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800181c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181e:	4a04      	ldr	r2, [pc, #16]	@ (8001830 <__NVIC_SetPriorityGrouping+0x44>)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	60d3      	str	r3, [r2, #12]
}
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001838:	4b04      	ldr	r3, [pc, #16]	@ (800184c <__NVIC_GetPriorityGrouping+0x18>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	0a1b      	lsrs	r3, r3, #8
 800183e:	f003 0307 	and.w	r3, r3, #7
}
 8001842:	4618      	mov	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	2b00      	cmp	r3, #0
 8001860:	db0b      	blt.n	800187a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	f003 021f 	and.w	r2, r3, #31
 8001868:	4907      	ldr	r1, [pc, #28]	@ (8001888 <__NVIC_EnableIRQ+0x38>)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	095b      	lsrs	r3, r3, #5
 8001870:	2001      	movs	r0, #1
 8001872:	fa00 f202 	lsl.w	r2, r0, r2
 8001876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000e100 	.word	0xe000e100

0800188c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	6039      	str	r1, [r7, #0]
 8001896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189c:	2b00      	cmp	r3, #0
 800189e:	db0a      	blt.n	80018b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	490c      	ldr	r1, [pc, #48]	@ (80018d8 <__NVIC_SetPriority+0x4c>)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	0112      	lsls	r2, r2, #4
 80018ac:	b2d2      	uxtb	r2, r2
 80018ae:	440b      	add	r3, r1
 80018b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b4:	e00a      	b.n	80018cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	4908      	ldr	r1, [pc, #32]	@ (80018dc <__NVIC_SetPriority+0x50>)
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	3b04      	subs	r3, #4
 80018c4:	0112      	lsls	r2, r2, #4
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	440b      	add	r3, r1
 80018ca:	761a      	strb	r2, [r3, #24]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000e100 	.word	0xe000e100
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b089      	sub	sp, #36	@ 0x24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f1c3 0307 	rsb	r3, r3, #7
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	bf28      	it	cs
 80018fe:	2304      	movcs	r3, #4
 8001900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3304      	adds	r3, #4
 8001906:	2b06      	cmp	r3, #6
 8001908:	d902      	bls.n	8001910 <NVIC_EncodePriority+0x30>
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3b03      	subs	r3, #3
 800190e:	e000      	b.n	8001912 <NVIC_EncodePriority+0x32>
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001914:	f04f 32ff 	mov.w	r2, #4294967295
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43da      	mvns	r2, r3
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	401a      	ands	r2, r3
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001928:	f04f 31ff 	mov.w	r1, #4294967295
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	fa01 f303 	lsl.w	r3, r1, r3
 8001932:	43d9      	mvns	r1, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001938:	4313      	orrs	r3, r2
         );
}
 800193a:	4618      	mov	r0, r3
 800193c:	3724      	adds	r7, #36	@ 0x24
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3b01      	subs	r3, #1
 8001954:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001958:	d301      	bcc.n	800195e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800195a:	2301      	movs	r3, #1
 800195c:	e00f      	b.n	800197e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800195e:	4a0a      	ldr	r2, [pc, #40]	@ (8001988 <SysTick_Config+0x40>)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3b01      	subs	r3, #1
 8001964:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001966:	210f      	movs	r1, #15
 8001968:	f04f 30ff 	mov.w	r0, #4294967295
 800196c:	f7ff ff8e 	bl	800188c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001970:	4b05      	ldr	r3, [pc, #20]	@ (8001988 <SysTick_Config+0x40>)
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001976:	4b04      	ldr	r3, [pc, #16]	@ (8001988 <SysTick_Config+0x40>)
 8001978:	2207      	movs	r2, #7
 800197a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	e000e010 	.word	0xe000e010

0800198c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff ff29 	bl	80017ec <__NVIC_SetPriorityGrouping>
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b086      	sub	sp, #24
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	4603      	mov	r3, r0
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
 80019ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019b4:	f7ff ff3e 	bl	8001834 <__NVIC_GetPriorityGrouping>
 80019b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	68b9      	ldr	r1, [r7, #8]
 80019be:	6978      	ldr	r0, [r7, #20]
 80019c0:	f7ff ff8e 	bl	80018e0 <NVIC_EncodePriority>
 80019c4:	4602      	mov	r2, r0
 80019c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ca:	4611      	mov	r1, r2
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff ff5d 	bl	800188c <__NVIC_SetPriority>
}
 80019d2:	bf00      	nop
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	4603      	mov	r3, r0
 80019e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff31 	bl	8001850 <__NVIC_EnableIRQ>
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff ffa2 	bl	8001948 <SysTick_Config>
 8001a04:	4603      	mov	r3, r0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b084      	sub	sp, #16
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a1a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a1c:	f7ff feb6 	bl	800178c <HAL_GetTick>
 8001a20:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d008      	beq.n	8001a40 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2280      	movs	r2, #128	@ 0x80
 8001a32:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e052      	b.n	8001ae6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f022 0216 	bic.w	r2, r2, #22
 8001a4e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	695a      	ldr	r2, [r3, #20]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a5e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d103      	bne.n	8001a70 <HAL_DMA_Abort+0x62>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d007      	beq.n	8001a80 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f022 0208 	bic.w	r2, r2, #8
 8001a7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 0201 	bic.w	r2, r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a90:	e013      	b.n	8001aba <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a92:	f7ff fe7b 	bl	800178c <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b05      	cmp	r3, #5
 8001a9e:	d90c      	bls.n	8001aba <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2220      	movs	r2, #32
 8001aa4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2203      	movs	r2, #3
 8001aaa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e015      	b.n	8001ae6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1e4      	bne.n	8001a92 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001acc:	223f      	movs	r2, #63	@ 0x3f
 8001ace:	409a      	lsls	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d004      	beq.n	8001b0c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2280      	movs	r2, #128	@ 0x80
 8001b06:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e00c      	b.n	8001b26 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2205      	movs	r2, #5
 8001b10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 0201 	bic.w	r2, r2, #1
 8001b22:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
	...

08001b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b089      	sub	sp, #36	@ 0x24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
 8001b4e:	e159      	b.n	8001e04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b50:	2201      	movs	r2, #1
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	4013      	ands	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	f040 8148 	bne.w	8001dfe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d005      	beq.n	8001b86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d130      	bne.n	8001be8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	2203      	movs	r2, #3
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43db      	mvns	r3, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	68da      	ldr	r2, [r3, #12]
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	091b      	lsrs	r3, r3, #4
 8001bd2:	f003 0201 	and.w	r2, r3, #1
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	2b03      	cmp	r3, #3
 8001bf2:	d017      	beq.n	8001c24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	2203      	movs	r2, #3
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d123      	bne.n	8001c78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	08da      	lsrs	r2, r3, #3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3208      	adds	r2, #8
 8001c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	220f      	movs	r2, #15
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	691a      	ldr	r2, [r3, #16]
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	08da      	lsrs	r2, r3, #3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3208      	adds	r2, #8
 8001c72:	69b9      	ldr	r1, [r7, #24]
 8001c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	2203      	movs	r2, #3
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0203 	and.w	r2, r3, #3
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f000 80a2 	beq.w	8001dfe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	4b57      	ldr	r3, [pc, #348]	@ (8001e1c <HAL_GPIO_Init+0x2e8>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc2:	4a56      	ldr	r2, [pc, #344]	@ (8001e1c <HAL_GPIO_Init+0x2e8>)
 8001cc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cca:	4b54      	ldr	r3, [pc, #336]	@ (8001e1c <HAL_GPIO_Init+0x2e8>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cd6:	4a52      	ldr	r2, [pc, #328]	@ (8001e20 <HAL_GPIO_Init+0x2ec>)
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	089b      	lsrs	r3, r3, #2
 8001cdc:	3302      	adds	r3, #2
 8001cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	220f      	movs	r2, #15
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a49      	ldr	r2, [pc, #292]	@ (8001e24 <HAL_GPIO_Init+0x2f0>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d019      	beq.n	8001d36 <HAL_GPIO_Init+0x202>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a48      	ldr	r2, [pc, #288]	@ (8001e28 <HAL_GPIO_Init+0x2f4>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d013      	beq.n	8001d32 <HAL_GPIO_Init+0x1fe>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a47      	ldr	r2, [pc, #284]	@ (8001e2c <HAL_GPIO_Init+0x2f8>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d00d      	beq.n	8001d2e <HAL_GPIO_Init+0x1fa>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a46      	ldr	r2, [pc, #280]	@ (8001e30 <HAL_GPIO_Init+0x2fc>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d007      	beq.n	8001d2a <HAL_GPIO_Init+0x1f6>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a45      	ldr	r2, [pc, #276]	@ (8001e34 <HAL_GPIO_Init+0x300>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d101      	bne.n	8001d26 <HAL_GPIO_Init+0x1f2>
 8001d22:	2304      	movs	r3, #4
 8001d24:	e008      	b.n	8001d38 <HAL_GPIO_Init+0x204>
 8001d26:	2307      	movs	r3, #7
 8001d28:	e006      	b.n	8001d38 <HAL_GPIO_Init+0x204>
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e004      	b.n	8001d38 <HAL_GPIO_Init+0x204>
 8001d2e:	2302      	movs	r3, #2
 8001d30:	e002      	b.n	8001d38 <HAL_GPIO_Init+0x204>
 8001d32:	2301      	movs	r3, #1
 8001d34:	e000      	b.n	8001d38 <HAL_GPIO_Init+0x204>
 8001d36:	2300      	movs	r3, #0
 8001d38:	69fa      	ldr	r2, [r7, #28]
 8001d3a:	f002 0203 	and.w	r2, r2, #3
 8001d3e:	0092      	lsls	r2, r2, #2
 8001d40:	4093      	lsls	r3, r2
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d48:	4935      	ldr	r1, [pc, #212]	@ (8001e20 <HAL_GPIO_Init+0x2ec>)
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	089b      	lsrs	r3, r3, #2
 8001d4e:	3302      	adds	r3, #2
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d56:	4b38      	ldr	r3, [pc, #224]	@ (8001e38 <HAL_GPIO_Init+0x304>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4013      	ands	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d7a:	4a2f      	ldr	r2, [pc, #188]	@ (8001e38 <HAL_GPIO_Init+0x304>)
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d80:	4b2d      	ldr	r3, [pc, #180]	@ (8001e38 <HAL_GPIO_Init+0x304>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001da4:	4a24      	ldr	r2, [pc, #144]	@ (8001e38 <HAL_GPIO_Init+0x304>)
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001daa:	4b23      	ldr	r3, [pc, #140]	@ (8001e38 <HAL_GPIO_Init+0x304>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	43db      	mvns	r3, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4013      	ands	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dce:	4a1a      	ldr	r2, [pc, #104]	@ (8001e38 <HAL_GPIO_Init+0x304>)
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dd4:	4b18      	ldr	r3, [pc, #96]	@ (8001e38 <HAL_GPIO_Init+0x304>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001df8:	4a0f      	ldr	r2, [pc, #60]	@ (8001e38 <HAL_GPIO_Init+0x304>)
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3301      	adds	r3, #1
 8001e02:	61fb      	str	r3, [r7, #28]
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	2b0f      	cmp	r3, #15
 8001e08:	f67f aea2 	bls.w	8001b50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	bf00      	nop
 8001e10:	3724      	adds	r7, #36	@ 0x24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40013800 	.word	0x40013800
 8001e24:	40020000 	.word	0x40020000
 8001e28:	40020400 	.word	0x40020400
 8001e2c:	40020800 	.word	0x40020800
 8001e30:	40020c00 	.word	0x40020c00
 8001e34:	40021000 	.word	0x40021000
 8001e38:	40013c00 	.word	0x40013c00

08001e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	807b      	strh	r3, [r7, #2]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e4c:	787b      	ldrb	r3, [r7, #1]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e52:	887a      	ldrh	r2, [r7, #2]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e58:	e003      	b.n	8001e62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e5a:	887b      	ldrh	r3, [r7, #2]
 8001e5c:	041a      	lsls	r2, r3, #16
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	619a      	str	r2, [r3, #24]
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
	...

08001e70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e7a:	4b08      	ldr	r3, [pc, #32]	@ (8001e9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e7c:	695a      	ldr	r2, [r3, #20]
 8001e7e:	88fb      	ldrh	r3, [r7, #6]
 8001e80:	4013      	ands	r3, r2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d006      	beq.n	8001e94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e86:	4a05      	ldr	r2, [pc, #20]	@ (8001e9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e88:	88fb      	ldrh	r3, [r7, #6]
 8001e8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e8c:	88fb      	ldrh	r3, [r7, #6]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f000 f806 	bl	8001ea0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e94:	bf00      	nop
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40013c00 	.word	0x40013c00

08001ea0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
	...

08001eb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e267      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d075      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ed6:	4b88      	ldr	r3, [pc, #544]	@ (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 030c 	and.w	r3, r3, #12
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	d00c      	beq.n	8001efc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ee2:	4b85      	ldr	r3, [pc, #532]	@ (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eea:	2b08      	cmp	r3, #8
 8001eec:	d112      	bne.n	8001f14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eee:	4b82      	ldr	r3, [pc, #520]	@ (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ef6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001efa:	d10b      	bne.n	8001f14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001efc:	4b7e      	ldr	r3, [pc, #504]	@ (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d05b      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x108>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d157      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e242      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f1c:	d106      	bne.n	8001f2c <HAL_RCC_OscConfig+0x74>
 8001f1e:	4b76      	ldr	r3, [pc, #472]	@ (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a75      	ldr	r2, [pc, #468]	@ (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001f24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	e01d      	b.n	8001f68 <HAL_RCC_OscConfig+0xb0>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f34:	d10c      	bne.n	8001f50 <HAL_RCC_OscConfig+0x98>
 8001f36:	4b70      	ldr	r3, [pc, #448]	@ (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a6f      	ldr	r2, [pc, #444]	@ (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001f3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	4b6d      	ldr	r3, [pc, #436]	@ (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a6c      	ldr	r2, [pc, #432]	@ (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001f48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	e00b      	b.n	8001f68 <HAL_RCC_OscConfig+0xb0>
 8001f50:	4b69      	ldr	r3, [pc, #420]	@ (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a68      	ldr	r2, [pc, #416]	@ (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001f56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f5a:	6013      	str	r3, [r2, #0]
 8001f5c:	4b66      	ldr	r3, [pc, #408]	@ (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a65      	ldr	r2, [pc, #404]	@ (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001f62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d013      	beq.n	8001f98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f70:	f7ff fc0c 	bl	800178c <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f78:	f7ff fc08 	bl	800178c <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b64      	cmp	r3, #100	@ 0x64
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e207      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8a:	4b5b      	ldr	r3, [pc, #364]	@ (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0f0      	beq.n	8001f78 <HAL_RCC_OscConfig+0xc0>
 8001f96:	e014      	b.n	8001fc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f98:	f7ff fbf8 	bl	800178c <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fa0:	f7ff fbf4 	bl	800178c <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b64      	cmp	r3, #100	@ 0x64
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e1f3      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb2:	4b51      	ldr	r3, [pc, #324]	@ (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f0      	bne.n	8001fa0 <HAL_RCC_OscConfig+0xe8>
 8001fbe:	e000      	b.n	8001fc2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d063      	beq.n	8002096 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fce:	4b4a      	ldr	r3, [pc, #296]	@ (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 030c 	and.w	r3, r3, #12
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00b      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fda:	4b47      	ldr	r3, [pc, #284]	@ (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fe2:	2b08      	cmp	r3, #8
 8001fe4:	d11c      	bne.n	8002020 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fe6:	4b44      	ldr	r3, [pc, #272]	@ (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d116      	bne.n	8002020 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ff2:	4b41      	ldr	r3, [pc, #260]	@ (80020f8 <HAL_RCC_OscConfig+0x240>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d005      	beq.n	800200a <HAL_RCC_OscConfig+0x152>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d001      	beq.n	800200a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e1c7      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800200a:	4b3b      	ldr	r3, [pc, #236]	@ (80020f8 <HAL_RCC_OscConfig+0x240>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	4937      	ldr	r1, [pc, #220]	@ (80020f8 <HAL_RCC_OscConfig+0x240>)
 800201a:	4313      	orrs	r3, r2
 800201c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800201e:	e03a      	b.n	8002096 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d020      	beq.n	800206a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002028:	4b34      	ldr	r3, [pc, #208]	@ (80020fc <HAL_RCC_OscConfig+0x244>)
 800202a:	2201      	movs	r2, #1
 800202c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202e:	f7ff fbad 	bl	800178c <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002036:	f7ff fba9 	bl	800178c <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e1a8      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002048:	4b2b      	ldr	r3, [pc, #172]	@ (80020f8 <HAL_RCC_OscConfig+0x240>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0f0      	beq.n	8002036 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002054:	4b28      	ldr	r3, [pc, #160]	@ (80020f8 <HAL_RCC_OscConfig+0x240>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4925      	ldr	r1, [pc, #148]	@ (80020f8 <HAL_RCC_OscConfig+0x240>)
 8002064:	4313      	orrs	r3, r2
 8002066:	600b      	str	r3, [r1, #0]
 8002068:	e015      	b.n	8002096 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800206a:	4b24      	ldr	r3, [pc, #144]	@ (80020fc <HAL_RCC_OscConfig+0x244>)
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002070:	f7ff fb8c 	bl	800178c <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002078:	f7ff fb88 	bl	800178c <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e187      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800208a:	4b1b      	ldr	r3, [pc, #108]	@ (80020f8 <HAL_RCC_OscConfig+0x240>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1f0      	bne.n	8002078 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d036      	beq.n	8002110 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d016      	beq.n	80020d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020aa:	4b15      	ldr	r3, [pc, #84]	@ (8002100 <HAL_RCC_OscConfig+0x248>)
 80020ac:	2201      	movs	r2, #1
 80020ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b0:	f7ff fb6c 	bl	800178c <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020b8:	f7ff fb68 	bl	800178c <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e167      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ca:	4b0b      	ldr	r3, [pc, #44]	@ (80020f8 <HAL_RCC_OscConfig+0x240>)
 80020cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0f0      	beq.n	80020b8 <HAL_RCC_OscConfig+0x200>
 80020d6:	e01b      	b.n	8002110 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020d8:	4b09      	ldr	r3, [pc, #36]	@ (8002100 <HAL_RCC_OscConfig+0x248>)
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020de:	f7ff fb55 	bl	800178c <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020e4:	e00e      	b.n	8002104 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020e6:	f7ff fb51 	bl	800178c <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d907      	bls.n	8002104 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e150      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
 80020f8:	40023800 	.word	0x40023800
 80020fc:	42470000 	.word	0x42470000
 8002100:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002104:	4b88      	ldr	r3, [pc, #544]	@ (8002328 <HAL_RCC_OscConfig+0x470>)
 8002106:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1ea      	bne.n	80020e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 8097 	beq.w	800224c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800211e:	2300      	movs	r3, #0
 8002120:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002122:	4b81      	ldr	r3, [pc, #516]	@ (8002328 <HAL_RCC_OscConfig+0x470>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10f      	bne.n	800214e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	4b7d      	ldr	r3, [pc, #500]	@ (8002328 <HAL_RCC_OscConfig+0x470>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002136:	4a7c      	ldr	r2, [pc, #496]	@ (8002328 <HAL_RCC_OscConfig+0x470>)
 8002138:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800213c:	6413      	str	r3, [r2, #64]	@ 0x40
 800213e:	4b7a      	ldr	r3, [pc, #488]	@ (8002328 <HAL_RCC_OscConfig+0x470>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002142:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002146:	60bb      	str	r3, [r7, #8]
 8002148:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800214a:	2301      	movs	r3, #1
 800214c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800214e:	4b77      	ldr	r3, [pc, #476]	@ (800232c <HAL_RCC_OscConfig+0x474>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002156:	2b00      	cmp	r3, #0
 8002158:	d118      	bne.n	800218c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800215a:	4b74      	ldr	r3, [pc, #464]	@ (800232c <HAL_RCC_OscConfig+0x474>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a73      	ldr	r2, [pc, #460]	@ (800232c <HAL_RCC_OscConfig+0x474>)
 8002160:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002164:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002166:	f7ff fb11 	bl	800178c <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800216e:	f7ff fb0d 	bl	800178c <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e10c      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002180:	4b6a      	ldr	r3, [pc, #424]	@ (800232c <HAL_RCC_OscConfig+0x474>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0f0      	beq.n	800216e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d106      	bne.n	80021a2 <HAL_RCC_OscConfig+0x2ea>
 8002194:	4b64      	ldr	r3, [pc, #400]	@ (8002328 <HAL_RCC_OscConfig+0x470>)
 8002196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002198:	4a63      	ldr	r2, [pc, #396]	@ (8002328 <HAL_RCC_OscConfig+0x470>)
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	6713      	str	r3, [r2, #112]	@ 0x70
 80021a0:	e01c      	b.n	80021dc <HAL_RCC_OscConfig+0x324>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	2b05      	cmp	r3, #5
 80021a8:	d10c      	bne.n	80021c4 <HAL_RCC_OscConfig+0x30c>
 80021aa:	4b5f      	ldr	r3, [pc, #380]	@ (8002328 <HAL_RCC_OscConfig+0x470>)
 80021ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ae:	4a5e      	ldr	r2, [pc, #376]	@ (8002328 <HAL_RCC_OscConfig+0x470>)
 80021b0:	f043 0304 	orr.w	r3, r3, #4
 80021b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80021b6:	4b5c      	ldr	r3, [pc, #368]	@ (8002328 <HAL_RCC_OscConfig+0x470>)
 80021b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ba:	4a5b      	ldr	r2, [pc, #364]	@ (8002328 <HAL_RCC_OscConfig+0x470>)
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80021c2:	e00b      	b.n	80021dc <HAL_RCC_OscConfig+0x324>
 80021c4:	4b58      	ldr	r3, [pc, #352]	@ (8002328 <HAL_RCC_OscConfig+0x470>)
 80021c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021c8:	4a57      	ldr	r2, [pc, #348]	@ (8002328 <HAL_RCC_OscConfig+0x470>)
 80021ca:	f023 0301 	bic.w	r3, r3, #1
 80021ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80021d0:	4b55      	ldr	r3, [pc, #340]	@ (8002328 <HAL_RCC_OscConfig+0x470>)
 80021d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021d4:	4a54      	ldr	r2, [pc, #336]	@ (8002328 <HAL_RCC_OscConfig+0x470>)
 80021d6:	f023 0304 	bic.w	r3, r3, #4
 80021da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d015      	beq.n	8002210 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e4:	f7ff fad2 	bl	800178c <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ea:	e00a      	b.n	8002202 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ec:	f7ff face 	bl	800178c <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e0cb      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002202:	4b49      	ldr	r3, [pc, #292]	@ (8002328 <HAL_RCC_OscConfig+0x470>)
 8002204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0ee      	beq.n	80021ec <HAL_RCC_OscConfig+0x334>
 800220e:	e014      	b.n	800223a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002210:	f7ff fabc 	bl	800178c <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002216:	e00a      	b.n	800222e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002218:	f7ff fab8 	bl	800178c <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002226:	4293      	cmp	r3, r2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e0b5      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800222e:	4b3e      	ldr	r3, [pc, #248]	@ (8002328 <HAL_RCC_OscConfig+0x470>)
 8002230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1ee      	bne.n	8002218 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800223a:	7dfb      	ldrb	r3, [r7, #23]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d105      	bne.n	800224c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002240:	4b39      	ldr	r3, [pc, #228]	@ (8002328 <HAL_RCC_OscConfig+0x470>)
 8002242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002244:	4a38      	ldr	r2, [pc, #224]	@ (8002328 <HAL_RCC_OscConfig+0x470>)
 8002246:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800224a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	2b00      	cmp	r3, #0
 8002252:	f000 80a1 	beq.w	8002398 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002256:	4b34      	ldr	r3, [pc, #208]	@ (8002328 <HAL_RCC_OscConfig+0x470>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 030c 	and.w	r3, r3, #12
 800225e:	2b08      	cmp	r3, #8
 8002260:	d05c      	beq.n	800231c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	2b02      	cmp	r3, #2
 8002268:	d141      	bne.n	80022ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800226a:	4b31      	ldr	r3, [pc, #196]	@ (8002330 <HAL_RCC_OscConfig+0x478>)
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002270:	f7ff fa8c 	bl	800178c <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002278:	f7ff fa88 	bl	800178c <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e087      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800228a:	4b27      	ldr	r3, [pc, #156]	@ (8002328 <HAL_RCC_OscConfig+0x470>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f0      	bne.n	8002278 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69da      	ldr	r2, [r3, #28]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a4:	019b      	lsls	r3, r3, #6
 80022a6:	431a      	orrs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ac:	085b      	lsrs	r3, r3, #1
 80022ae:	3b01      	subs	r3, #1
 80022b0:	041b      	lsls	r3, r3, #16
 80022b2:	431a      	orrs	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022b8:	061b      	lsls	r3, r3, #24
 80022ba:	491b      	ldr	r1, [pc, #108]	@ (8002328 <HAL_RCC_OscConfig+0x470>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002330 <HAL_RCC_OscConfig+0x478>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c6:	f7ff fa61 	bl	800178c <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ce:	f7ff fa5d 	bl	800178c <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e05c      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e0:	4b11      	ldr	r3, [pc, #68]	@ (8002328 <HAL_RCC_OscConfig+0x470>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0x416>
 80022ec:	e054      	b.n	8002398 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ee:	4b10      	ldr	r3, [pc, #64]	@ (8002330 <HAL_RCC_OscConfig+0x478>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f4:	f7ff fa4a 	bl	800178c <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022fc:	f7ff fa46 	bl	800178c <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e045      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800230e:	4b06      	ldr	r3, [pc, #24]	@ (8002328 <HAL_RCC_OscConfig+0x470>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f0      	bne.n	80022fc <HAL_RCC_OscConfig+0x444>
 800231a:	e03d      	b.n	8002398 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d107      	bne.n	8002334 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e038      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
 8002328:	40023800 	.word	0x40023800
 800232c:	40007000 	.word	0x40007000
 8002330:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002334:	4b1b      	ldr	r3, [pc, #108]	@ (80023a4 <HAL_RCC_OscConfig+0x4ec>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d028      	beq.n	8002394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800234c:	429a      	cmp	r2, r3
 800234e:	d121      	bne.n	8002394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800235a:	429a      	cmp	r2, r3
 800235c:	d11a      	bne.n	8002394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002364:	4013      	ands	r3, r2
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800236a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800236c:	4293      	cmp	r3, r2
 800236e:	d111      	bne.n	8002394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800237a:	085b      	lsrs	r3, r3, #1
 800237c:	3b01      	subs	r3, #1
 800237e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002380:	429a      	cmp	r2, r3
 8002382:	d107      	bne.n	8002394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800238e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002390:	429a      	cmp	r2, r3
 8002392:	d001      	beq.n	8002398 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e000      	b.n	800239a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40023800 	.word	0x40023800

080023a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e0cc      	b.n	8002556 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023bc:	4b68      	ldr	r3, [pc, #416]	@ (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d90c      	bls.n	80023e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ca:	4b65      	ldr	r3, [pc, #404]	@ (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d2:	4b63      	ldr	r3, [pc, #396]	@ (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d001      	beq.n	80023e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e0b8      	b.n	8002556 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d020      	beq.n	8002432 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023fc:	4b59      	ldr	r3, [pc, #356]	@ (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	4a58      	ldr	r2, [pc, #352]	@ (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002406:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0308 	and.w	r3, r3, #8
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002414:	4b53      	ldr	r3, [pc, #332]	@ (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	4a52      	ldr	r2, [pc, #328]	@ (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 800241a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800241e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002420:	4b50      	ldr	r3, [pc, #320]	@ (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	494d      	ldr	r1, [pc, #308]	@ (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 800242e:	4313      	orrs	r3, r2
 8002430:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d044      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d107      	bne.n	8002456 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002446:	4b47      	ldr	r3, [pc, #284]	@ (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d119      	bne.n	8002486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e07f      	b.n	8002556 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b02      	cmp	r3, #2
 800245c:	d003      	beq.n	8002466 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002462:	2b03      	cmp	r3, #3
 8002464:	d107      	bne.n	8002476 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002466:	4b3f      	ldr	r3, [pc, #252]	@ (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d109      	bne.n	8002486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e06f      	b.n	8002556 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002476:	4b3b      	ldr	r3, [pc, #236]	@ (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e067      	b.n	8002556 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002486:	4b37      	ldr	r3, [pc, #220]	@ (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f023 0203 	bic.w	r2, r3, #3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	4934      	ldr	r1, [pc, #208]	@ (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002494:	4313      	orrs	r3, r2
 8002496:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002498:	f7ff f978 	bl	800178c <HAL_GetTick>
 800249c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249e:	e00a      	b.n	80024b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a0:	f7ff f974 	bl	800178c <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e04f      	b.n	8002556 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b6:	4b2b      	ldr	r3, [pc, #172]	@ (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 020c 	and.w	r2, r3, #12
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d1eb      	bne.n	80024a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024c8:	4b25      	ldr	r3, [pc, #148]	@ (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d20c      	bcs.n	80024f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d6:	4b22      	ldr	r3, [pc, #136]	@ (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024de:	4b20      	ldr	r3, [pc, #128]	@ (8002560 <HAL_RCC_ClockConfig+0x1b8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d001      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e032      	b.n	8002556 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d008      	beq.n	800250e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024fc:	4b19      	ldr	r3, [pc, #100]	@ (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	4916      	ldr	r1, [pc, #88]	@ (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	4313      	orrs	r3, r2
 800250c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	2b00      	cmp	r3, #0
 8002518:	d009      	beq.n	800252e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800251a:	4b12      	ldr	r3, [pc, #72]	@ (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	490e      	ldr	r1, [pc, #56]	@ (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 800252a:	4313      	orrs	r3, r2
 800252c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800252e:	f000 f821 	bl	8002574 <HAL_RCC_GetSysClockFreq>
 8002532:	4602      	mov	r2, r0
 8002534:	4b0b      	ldr	r3, [pc, #44]	@ (8002564 <HAL_RCC_ClockConfig+0x1bc>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	091b      	lsrs	r3, r3, #4
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	490a      	ldr	r1, [pc, #40]	@ (8002568 <HAL_RCC_ClockConfig+0x1c0>)
 8002540:	5ccb      	ldrb	r3, [r1, r3]
 8002542:	fa22 f303 	lsr.w	r3, r2, r3
 8002546:	4a09      	ldr	r2, [pc, #36]	@ (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002548:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800254a:	4b09      	ldr	r3, [pc, #36]	@ (8002570 <HAL_RCC_ClockConfig+0x1c8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff f8d8 	bl	8001704 <HAL_InitTick>

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40023c00 	.word	0x40023c00
 8002564:	40023800 	.word	0x40023800
 8002568:	080057e4 	.word	0x080057e4
 800256c:	20000000 	.word	0x20000000
 8002570:	20000004 	.word	0x20000004

08002574 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002574:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002578:	b090      	sub	sp, #64	@ 0x40
 800257a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002580:	2300      	movs	r3, #0
 8002582:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002584:	2300      	movs	r3, #0
 8002586:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002588:	2300      	movs	r3, #0
 800258a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800258c:	4b59      	ldr	r3, [pc, #356]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 030c 	and.w	r3, r3, #12
 8002594:	2b08      	cmp	r3, #8
 8002596:	d00d      	beq.n	80025b4 <HAL_RCC_GetSysClockFreq+0x40>
 8002598:	2b08      	cmp	r3, #8
 800259a:	f200 80a1 	bhi.w	80026e0 <HAL_RCC_GetSysClockFreq+0x16c>
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d002      	beq.n	80025a8 <HAL_RCC_GetSysClockFreq+0x34>
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d003      	beq.n	80025ae <HAL_RCC_GetSysClockFreq+0x3a>
 80025a6:	e09b      	b.n	80026e0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025a8:	4b53      	ldr	r3, [pc, #332]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80025aa:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80025ac:	e09b      	b.n	80026e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025ae:	4b53      	ldr	r3, [pc, #332]	@ (80026fc <HAL_RCC_GetSysClockFreq+0x188>)
 80025b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80025b2:	e098      	b.n	80026e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025b4:	4b4f      	ldr	r3, [pc, #316]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025bc:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025be:	4b4d      	ldr	r3, [pc, #308]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d028      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ca:	4b4a      	ldr	r3, [pc, #296]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	099b      	lsrs	r3, r3, #6
 80025d0:	2200      	movs	r2, #0
 80025d2:	623b      	str	r3, [r7, #32]
 80025d4:	627a      	str	r2, [r7, #36]	@ 0x24
 80025d6:	6a3b      	ldr	r3, [r7, #32]
 80025d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80025dc:	2100      	movs	r1, #0
 80025de:	4b47      	ldr	r3, [pc, #284]	@ (80026fc <HAL_RCC_GetSysClockFreq+0x188>)
 80025e0:	fb03 f201 	mul.w	r2, r3, r1
 80025e4:	2300      	movs	r3, #0
 80025e6:	fb00 f303 	mul.w	r3, r0, r3
 80025ea:	4413      	add	r3, r2
 80025ec:	4a43      	ldr	r2, [pc, #268]	@ (80026fc <HAL_RCC_GetSysClockFreq+0x188>)
 80025ee:	fba0 1202 	umull	r1, r2, r0, r2
 80025f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80025f4:	460a      	mov	r2, r1
 80025f6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80025f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025fa:	4413      	add	r3, r2
 80025fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002600:	2200      	movs	r2, #0
 8002602:	61bb      	str	r3, [r7, #24]
 8002604:	61fa      	str	r2, [r7, #28]
 8002606:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800260a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800260e:	f7fd fe37 	bl	8000280 <__aeabi_uldivmod>
 8002612:	4602      	mov	r2, r0
 8002614:	460b      	mov	r3, r1
 8002616:	4613      	mov	r3, r2
 8002618:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800261a:	e053      	b.n	80026c4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800261c:	4b35      	ldr	r3, [pc, #212]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	099b      	lsrs	r3, r3, #6
 8002622:	2200      	movs	r2, #0
 8002624:	613b      	str	r3, [r7, #16]
 8002626:	617a      	str	r2, [r7, #20]
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800262e:	f04f 0b00 	mov.w	fp, #0
 8002632:	4652      	mov	r2, sl
 8002634:	465b      	mov	r3, fp
 8002636:	f04f 0000 	mov.w	r0, #0
 800263a:	f04f 0100 	mov.w	r1, #0
 800263e:	0159      	lsls	r1, r3, #5
 8002640:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002644:	0150      	lsls	r0, r2, #5
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	ebb2 080a 	subs.w	r8, r2, sl
 800264e:	eb63 090b 	sbc.w	r9, r3, fp
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	f04f 0300 	mov.w	r3, #0
 800265a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800265e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002662:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002666:	ebb2 0408 	subs.w	r4, r2, r8
 800266a:	eb63 0509 	sbc.w	r5, r3, r9
 800266e:	f04f 0200 	mov.w	r2, #0
 8002672:	f04f 0300 	mov.w	r3, #0
 8002676:	00eb      	lsls	r3, r5, #3
 8002678:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800267c:	00e2      	lsls	r2, r4, #3
 800267e:	4614      	mov	r4, r2
 8002680:	461d      	mov	r5, r3
 8002682:	eb14 030a 	adds.w	r3, r4, sl
 8002686:	603b      	str	r3, [r7, #0]
 8002688:	eb45 030b 	adc.w	r3, r5, fp
 800268c:	607b      	str	r3, [r7, #4]
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	f04f 0300 	mov.w	r3, #0
 8002696:	e9d7 4500 	ldrd	r4, r5, [r7]
 800269a:	4629      	mov	r1, r5
 800269c:	028b      	lsls	r3, r1, #10
 800269e:	4621      	mov	r1, r4
 80026a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026a4:	4621      	mov	r1, r4
 80026a6:	028a      	lsls	r2, r1, #10
 80026a8:	4610      	mov	r0, r2
 80026aa:	4619      	mov	r1, r3
 80026ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026ae:	2200      	movs	r2, #0
 80026b0:	60bb      	str	r3, [r7, #8]
 80026b2:	60fa      	str	r2, [r7, #12]
 80026b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026b8:	f7fd fde2 	bl	8000280 <__aeabi_uldivmod>
 80026bc:	4602      	mov	r2, r0
 80026be:	460b      	mov	r3, r1
 80026c0:	4613      	mov	r3, r2
 80026c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026c4:	4b0b      	ldr	r3, [pc, #44]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	0c1b      	lsrs	r3, r3, #16
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	3301      	adds	r3, #1
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80026d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80026d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80026de:	e002      	b.n	80026e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026e0:	4b05      	ldr	r3, [pc, #20]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80026e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80026e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3740      	adds	r7, #64	@ 0x40
 80026ec:	46bd      	mov	sp, r7
 80026ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026f2:	bf00      	nop
 80026f4:	40023800 	.word	0x40023800
 80026f8:	00f42400 	.word	0x00f42400
 80026fc:	017d7840 	.word	0x017d7840

08002700 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002704:	4b03      	ldr	r3, [pc, #12]	@ (8002714 <HAL_RCC_GetHCLKFreq+0x14>)
 8002706:	681b      	ldr	r3, [r3, #0]
}
 8002708:	4618      	mov	r0, r3
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	20000000 	.word	0x20000000

08002718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800271c:	f7ff fff0 	bl	8002700 <HAL_RCC_GetHCLKFreq>
 8002720:	4602      	mov	r2, r0
 8002722:	4b05      	ldr	r3, [pc, #20]	@ (8002738 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	0a9b      	lsrs	r3, r3, #10
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	4903      	ldr	r1, [pc, #12]	@ (800273c <HAL_RCC_GetPCLK1Freq+0x24>)
 800272e:	5ccb      	ldrb	r3, [r1, r3]
 8002730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002734:	4618      	mov	r0, r3
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40023800 	.word	0x40023800
 800273c:	080057f4 	.word	0x080057f4

08002740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002744:	f7ff ffdc 	bl	8002700 <HAL_RCC_GetHCLKFreq>
 8002748:	4602      	mov	r2, r0
 800274a:	4b05      	ldr	r3, [pc, #20]	@ (8002760 <HAL_RCC_GetPCLK2Freq+0x20>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	0b5b      	lsrs	r3, r3, #13
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	4903      	ldr	r1, [pc, #12]	@ (8002764 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002756:	5ccb      	ldrb	r3, [r1, r3]
 8002758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800275c:	4618      	mov	r0, r3
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40023800 	.word	0x40023800
 8002764:	080057f4 	.word	0x080057f4

08002768 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e041      	b.n	80027fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d106      	bne.n	8002794 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7fe fd96 	bl	80012c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2202      	movs	r2, #2
 8002798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3304      	adds	r3, #4
 80027a4:	4619      	mov	r1, r3
 80027a6:	4610      	mov	r0, r2
 80027a8:	f000 fe42 	bl	8003430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b082      	sub	sp, #8
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e041      	b.n	800289c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b00      	cmp	r3, #0
 8002822:	d106      	bne.n	8002832 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 f839 	bl	80028a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2202      	movs	r2, #2
 8002836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	3304      	adds	r3, #4
 8002842:	4619      	mov	r1, r3
 8002844:	4610      	mov	r0, r2
 8002846:	f000 fdf3 	bl	8003430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d109      	bne.n	80028dc <HAL_TIM_PWM_Start+0x24>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	bf14      	ite	ne
 80028d4:	2301      	movne	r3, #1
 80028d6:	2300      	moveq	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	e022      	b.n	8002922 <HAL_TIM_PWM_Start+0x6a>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	2b04      	cmp	r3, #4
 80028e0:	d109      	bne.n	80028f6 <HAL_TIM_PWM_Start+0x3e>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	bf14      	ite	ne
 80028ee:	2301      	movne	r3, #1
 80028f0:	2300      	moveq	r3, #0
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	e015      	b.n	8002922 <HAL_TIM_PWM_Start+0x6a>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	d109      	bne.n	8002910 <HAL_TIM_PWM_Start+0x58>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b01      	cmp	r3, #1
 8002906:	bf14      	ite	ne
 8002908:	2301      	movne	r3, #1
 800290a:	2300      	moveq	r3, #0
 800290c:	b2db      	uxtb	r3, r3
 800290e:	e008      	b.n	8002922 <HAL_TIM_PWM_Start+0x6a>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b01      	cmp	r3, #1
 800291a:	bf14      	ite	ne
 800291c:	2301      	movne	r3, #1
 800291e:	2300      	moveq	r3, #0
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e068      	b.n	80029fc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d104      	bne.n	800293a <HAL_TIM_PWM_Start+0x82>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2202      	movs	r2, #2
 8002934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002938:	e013      	b.n	8002962 <HAL_TIM_PWM_Start+0xaa>
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	2b04      	cmp	r3, #4
 800293e:	d104      	bne.n	800294a <HAL_TIM_PWM_Start+0x92>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2202      	movs	r2, #2
 8002944:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002948:	e00b      	b.n	8002962 <HAL_TIM_PWM_Start+0xaa>
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	2b08      	cmp	r3, #8
 800294e:	d104      	bne.n	800295a <HAL_TIM_PWM_Start+0xa2>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2202      	movs	r2, #2
 8002954:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002958:	e003      	b.n	8002962 <HAL_TIM_PWM_Start+0xaa>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2202      	movs	r2, #2
 800295e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2201      	movs	r2, #1
 8002968:	6839      	ldr	r1, [r7, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f001 f930 	bl	8003bd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a23      	ldr	r2, [pc, #140]	@ (8002a04 <HAL_TIM_PWM_Start+0x14c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d107      	bne.n	800298a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002988:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a1d      	ldr	r2, [pc, #116]	@ (8002a04 <HAL_TIM_PWM_Start+0x14c>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d018      	beq.n	80029c6 <HAL_TIM_PWM_Start+0x10e>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800299c:	d013      	beq.n	80029c6 <HAL_TIM_PWM_Start+0x10e>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a19      	ldr	r2, [pc, #100]	@ (8002a08 <HAL_TIM_PWM_Start+0x150>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d00e      	beq.n	80029c6 <HAL_TIM_PWM_Start+0x10e>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a17      	ldr	r2, [pc, #92]	@ (8002a0c <HAL_TIM_PWM_Start+0x154>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d009      	beq.n	80029c6 <HAL_TIM_PWM_Start+0x10e>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a16      	ldr	r2, [pc, #88]	@ (8002a10 <HAL_TIM_PWM_Start+0x158>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d004      	beq.n	80029c6 <HAL_TIM_PWM_Start+0x10e>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a14      	ldr	r2, [pc, #80]	@ (8002a14 <HAL_TIM_PWM_Start+0x15c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d111      	bne.n	80029ea <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2b06      	cmp	r3, #6
 80029d6:	d010      	beq.n	80029fa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0201 	orr.w	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029e8:	e007      	b.n	80029fa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f042 0201 	orr.w	r2, r2, #1
 80029f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40010000 	.word	0x40010000
 8002a08:	40000400 	.word	0x40000400
 8002a0c:	40000800 	.word	0x40000800
 8002a10:	40000c00 	.word	0x40000c00
 8002a14:	40014000 	.word	0x40014000

08002a18 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2200      	movs	r2, #0
 8002a28:	6839      	ldr	r1, [r7, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f001 f8d0 	bl	8003bd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a29      	ldr	r2, [pc, #164]	@ (8002adc <HAL_TIM_PWM_Stop+0xc4>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d117      	bne.n	8002a6a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6a1a      	ldr	r2, [r3, #32]
 8002a40:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002a44:	4013      	ands	r3, r2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10f      	bne.n	8002a6a <HAL_TIM_PWM_Stop+0x52>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6a1a      	ldr	r2, [r3, #32]
 8002a50:	f240 4344 	movw	r3, #1092	@ 0x444
 8002a54:	4013      	ands	r3, r2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d107      	bne.n	8002a6a <HAL_TIM_PWM_Stop+0x52>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a68:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6a1a      	ldr	r2, [r3, #32]
 8002a70:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002a74:	4013      	ands	r3, r2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10f      	bne.n	8002a9a <HAL_TIM_PWM_Stop+0x82>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6a1a      	ldr	r2, [r3, #32]
 8002a80:	f240 4344 	movw	r3, #1092	@ 0x444
 8002a84:	4013      	ands	r3, r2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d107      	bne.n	8002a9a <HAL_TIM_PWM_Stop+0x82>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0201 	bic.w	r2, r2, #1
 8002a98:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d104      	bne.n	8002aaa <HAL_TIM_PWM_Stop+0x92>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002aa8:	e013      	b.n	8002ad2 <HAL_TIM_PWM_Stop+0xba>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	d104      	bne.n	8002aba <HAL_TIM_PWM_Stop+0xa2>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ab8:	e00b      	b.n	8002ad2 <HAL_TIM_PWM_Stop+0xba>
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	2b08      	cmp	r3, #8
 8002abe:	d104      	bne.n	8002aca <HAL_TIM_PWM_Stop+0xb2>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ac8:	e003      	b.n	8002ad2 <HAL_TIM_PWM_Stop+0xba>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40010000 	.word	0x40010000

08002ae0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e041      	b.n	8002b76 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d106      	bne.n	8002b0c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7fe fb72 	bl	80011f0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2202      	movs	r2, #2
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3304      	adds	r3, #4
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4610      	mov	r0, r2
 8002b20:	f000 fc86 	bl	8003430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
	...

08002b80 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d104      	bne.n	8002b9e <HAL_TIM_IC_Start_IT+0x1e>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	e013      	b.n	8002bc6 <HAL_TIM_IC_Start_IT+0x46>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	2b04      	cmp	r3, #4
 8002ba2:	d104      	bne.n	8002bae <HAL_TIM_IC_Start_IT+0x2e>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	e00b      	b.n	8002bc6 <HAL_TIM_IC_Start_IT+0x46>
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d104      	bne.n	8002bbe <HAL_TIM_IC_Start_IT+0x3e>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	e003      	b.n	8002bc6 <HAL_TIM_IC_Start_IT+0x46>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d104      	bne.n	8002bd8 <HAL_TIM_IC_Start_IT+0x58>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	e013      	b.n	8002c00 <HAL_TIM_IC_Start_IT+0x80>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	d104      	bne.n	8002be8 <HAL_TIM_IC_Start_IT+0x68>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	e00b      	b.n	8002c00 <HAL_TIM_IC_Start_IT+0x80>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	2b08      	cmp	r3, #8
 8002bec:	d104      	bne.n	8002bf8 <HAL_TIM_IC_Start_IT+0x78>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	e003      	b.n	8002c00 <HAL_TIM_IC_Start_IT+0x80>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c02:	7bbb      	ldrb	r3, [r7, #14]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d102      	bne.n	8002c0e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002c08:	7b7b      	ldrb	r3, [r7, #13]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d001      	beq.n	8002c12 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e0c2      	b.n	8002d98 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d104      	bne.n	8002c22 <HAL_TIM_IC_Start_IT+0xa2>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c20:	e013      	b.n	8002c4a <HAL_TIM_IC_Start_IT+0xca>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	2b04      	cmp	r3, #4
 8002c26:	d104      	bne.n	8002c32 <HAL_TIM_IC_Start_IT+0xb2>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c30:	e00b      	b.n	8002c4a <HAL_TIM_IC_Start_IT+0xca>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	d104      	bne.n	8002c42 <HAL_TIM_IC_Start_IT+0xc2>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c40:	e003      	b.n	8002c4a <HAL_TIM_IC_Start_IT+0xca>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2202      	movs	r2, #2
 8002c46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d104      	bne.n	8002c5a <HAL_TIM_IC_Start_IT+0xda>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2202      	movs	r2, #2
 8002c54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c58:	e013      	b.n	8002c82 <HAL_TIM_IC_Start_IT+0x102>
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	2b04      	cmp	r3, #4
 8002c5e:	d104      	bne.n	8002c6a <HAL_TIM_IC_Start_IT+0xea>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2202      	movs	r2, #2
 8002c64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c68:	e00b      	b.n	8002c82 <HAL_TIM_IC_Start_IT+0x102>
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	2b08      	cmp	r3, #8
 8002c6e:	d104      	bne.n	8002c7a <HAL_TIM_IC_Start_IT+0xfa>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2202      	movs	r2, #2
 8002c74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c78:	e003      	b.n	8002c82 <HAL_TIM_IC_Start_IT+0x102>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2b0c      	cmp	r3, #12
 8002c86:	d841      	bhi.n	8002d0c <HAL_TIM_IC_Start_IT+0x18c>
 8002c88:	a201      	add	r2, pc, #4	@ (adr r2, 8002c90 <HAL_TIM_IC_Start_IT+0x110>)
 8002c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c8e:	bf00      	nop
 8002c90:	08002cc5 	.word	0x08002cc5
 8002c94:	08002d0d 	.word	0x08002d0d
 8002c98:	08002d0d 	.word	0x08002d0d
 8002c9c:	08002d0d 	.word	0x08002d0d
 8002ca0:	08002cd7 	.word	0x08002cd7
 8002ca4:	08002d0d 	.word	0x08002d0d
 8002ca8:	08002d0d 	.word	0x08002d0d
 8002cac:	08002d0d 	.word	0x08002d0d
 8002cb0:	08002ce9 	.word	0x08002ce9
 8002cb4:	08002d0d 	.word	0x08002d0d
 8002cb8:	08002d0d 	.word	0x08002d0d
 8002cbc:	08002d0d 	.word	0x08002d0d
 8002cc0:	08002cfb 	.word	0x08002cfb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68da      	ldr	r2, [r3, #12]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0202 	orr.w	r2, r2, #2
 8002cd2:	60da      	str	r2, [r3, #12]
      break;
 8002cd4:	e01d      	b.n	8002d12 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68da      	ldr	r2, [r3, #12]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f042 0204 	orr.w	r2, r2, #4
 8002ce4:	60da      	str	r2, [r3, #12]
      break;
 8002ce6:	e014      	b.n	8002d12 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f042 0208 	orr.w	r2, r2, #8
 8002cf6:	60da      	str	r2, [r3, #12]
      break;
 8002cf8:	e00b      	b.n	8002d12 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68da      	ldr	r2, [r3, #12]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f042 0210 	orr.w	r2, r2, #16
 8002d08:	60da      	str	r2, [r3, #12]
      break;
 8002d0a:	e002      	b.n	8002d12 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d10:	bf00      	nop
  }

  if (status == HAL_OK)
 8002d12:	7bfb      	ldrb	r3, [r7, #15]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d13e      	bne.n	8002d96 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	6839      	ldr	r1, [r7, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f000 ff55 	bl	8003bd0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a1d      	ldr	r2, [pc, #116]	@ (8002da0 <HAL_TIM_IC_Start_IT+0x220>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d018      	beq.n	8002d62 <HAL_TIM_IC_Start_IT+0x1e2>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d38:	d013      	beq.n	8002d62 <HAL_TIM_IC_Start_IT+0x1e2>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a19      	ldr	r2, [pc, #100]	@ (8002da4 <HAL_TIM_IC_Start_IT+0x224>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d00e      	beq.n	8002d62 <HAL_TIM_IC_Start_IT+0x1e2>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a17      	ldr	r2, [pc, #92]	@ (8002da8 <HAL_TIM_IC_Start_IT+0x228>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d009      	beq.n	8002d62 <HAL_TIM_IC_Start_IT+0x1e2>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a16      	ldr	r2, [pc, #88]	@ (8002dac <HAL_TIM_IC_Start_IT+0x22c>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d004      	beq.n	8002d62 <HAL_TIM_IC_Start_IT+0x1e2>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a14      	ldr	r2, [pc, #80]	@ (8002db0 <HAL_TIM_IC_Start_IT+0x230>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d111      	bne.n	8002d86 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	2b06      	cmp	r3, #6
 8002d72:	d010      	beq.n	8002d96 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0201 	orr.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d84:	e007      	b.n	8002d96 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f042 0201 	orr.w	r2, r2, #1
 8002d94:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40010000 	.word	0x40010000
 8002da4:	40000400 	.word	0x40000400
 8002da8:	40000800 	.word	0x40000800
 8002dac:	40000c00 	.word	0x40000c00
 8002db0:	40014000 	.word	0x40014000

08002db4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d020      	beq.n	8002e18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d01b      	beq.n	8002e18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f06f 0202 	mvn.w	r2, #2
 8002de8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7fd fe4c 	bl	8000a9c <HAL_TIM_IC_CaptureCallback>
 8002e04:	e005      	b.n	8002e12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 faf3 	bl	80033f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 fafa 	bl	8003406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	f003 0304 	and.w	r3, r3, #4
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d020      	beq.n	8002e64 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d01b      	beq.n	8002e64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f06f 0204 	mvn.w	r2, #4
 8002e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2202      	movs	r2, #2
 8002e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7fd fe26 	bl	8000a9c <HAL_TIM_IC_CaptureCallback>
 8002e50:	e005      	b.n	8002e5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 facd 	bl	80033f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 fad4 	bl	8003406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d020      	beq.n	8002eb0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f003 0308 	and.w	r3, r3, #8
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d01b      	beq.n	8002eb0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f06f 0208 	mvn.w	r2, #8
 8002e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2204      	movs	r2, #4
 8002e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7fd fe00 	bl	8000a9c <HAL_TIM_IC_CaptureCallback>
 8002e9c:	e005      	b.n	8002eaa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 faa7 	bl	80033f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 faae 	bl	8003406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	f003 0310 	and.w	r3, r3, #16
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d020      	beq.n	8002efc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f003 0310 	and.w	r3, r3, #16
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d01b      	beq.n	8002efc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f06f 0210 	mvn.w	r2, #16
 8002ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2208      	movs	r2, #8
 8002ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7fd fdda 	bl	8000a9c <HAL_TIM_IC_CaptureCallback>
 8002ee8:	e005      	b.n	8002ef6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fa81 	bl	80033f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 fa88 	bl	8003406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00c      	beq.n	8002f20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d007      	beq.n	8002f20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f06f 0201 	mvn.w	r2, #1
 8002f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 fa5f 	bl	80033de <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00c      	beq.n	8002f44 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d007      	beq.n	8002f44 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 fee4 	bl	8003d0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00c      	beq.n	8002f68 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d007      	beq.n	8002f68 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 fa59 	bl	800341a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	f003 0320 	and.w	r3, r3, #32
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00c      	beq.n	8002f8c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f003 0320 	and.w	r3, r3, #32
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d007      	beq.n	8002f8c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f06f 0220 	mvn.w	r2, #32
 8002f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 feb6 	bl	8003cf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f8c:	bf00      	nop
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d101      	bne.n	8002fb2 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	e088      	b.n	80030c4 <HAL_TIM_IC_ConfigChannel+0x130>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d11b      	bne.n	8002ff8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002fd0:	f000 fc46 	bl	8003860 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	699a      	ldr	r2, [r3, #24]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 020c 	bic.w	r2, r2, #12
 8002fe2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6999      	ldr	r1, [r3, #24]
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	689a      	ldr	r2, [r3, #8]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	619a      	str	r2, [r3, #24]
 8002ff6:	e060      	b.n	80030ba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d11c      	bne.n	8003038 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800300e:	f000 fcbe 	bl	800398e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	699a      	ldr	r2, [r3, #24]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003020:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6999      	ldr	r1, [r3, #24]
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	021a      	lsls	r2, r3, #8
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	619a      	str	r2, [r3, #24]
 8003036:	e040      	b.n	80030ba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b08      	cmp	r3, #8
 800303c:	d11b      	bne.n	8003076 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800304e:	f000 fd0b 	bl	8003a68 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	69da      	ldr	r2, [r3, #28]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 020c 	bic.w	r2, r2, #12
 8003060:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	69d9      	ldr	r1, [r3, #28]
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	430a      	orrs	r2, r1
 8003072:	61da      	str	r2, [r3, #28]
 8003074:	e021      	b.n	80030ba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b0c      	cmp	r3, #12
 800307a:	d11c      	bne.n	80030b6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800308c:	f000 fd28 	bl	8003ae0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	69da      	ldr	r2, [r3, #28]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800309e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	69d9      	ldr	r1, [r3, #28]
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	021a      	lsls	r2, r3, #8
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	61da      	str	r2, [r3, #28]
 80030b4:	e001      	b.n	80030ba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80030c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030d8:	2300      	movs	r3, #0
 80030da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d101      	bne.n	80030ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80030e6:	2302      	movs	r3, #2
 80030e8:	e0ae      	b.n	8003248 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b0c      	cmp	r3, #12
 80030f6:	f200 809f 	bhi.w	8003238 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80030fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003100 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80030fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003100:	08003135 	.word	0x08003135
 8003104:	08003239 	.word	0x08003239
 8003108:	08003239 	.word	0x08003239
 800310c:	08003239 	.word	0x08003239
 8003110:	08003175 	.word	0x08003175
 8003114:	08003239 	.word	0x08003239
 8003118:	08003239 	.word	0x08003239
 800311c:	08003239 	.word	0x08003239
 8003120:	080031b7 	.word	0x080031b7
 8003124:	08003239 	.word	0x08003239
 8003128:	08003239 	.word	0x08003239
 800312c:	08003239 	.word	0x08003239
 8003130:	080031f7 	.word	0x080031f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68b9      	ldr	r1, [r7, #8]
 800313a:	4618      	mov	r0, r3
 800313c:	f000 fa04 	bl	8003548 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	699a      	ldr	r2, [r3, #24]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0208 	orr.w	r2, r2, #8
 800314e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	699a      	ldr	r2, [r3, #24]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f022 0204 	bic.w	r2, r2, #4
 800315e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6999      	ldr	r1, [r3, #24]
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	691a      	ldr	r2, [r3, #16]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	619a      	str	r2, [r3, #24]
      break;
 8003172:	e064      	b.n	800323e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68b9      	ldr	r1, [r7, #8]
 800317a:	4618      	mov	r0, r3
 800317c:	f000 fa4a 	bl	8003614 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699a      	ldr	r2, [r3, #24]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800318e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	699a      	ldr	r2, [r3, #24]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800319e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6999      	ldr	r1, [r3, #24]
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	021a      	lsls	r2, r3, #8
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	619a      	str	r2, [r3, #24]
      break;
 80031b4:	e043      	b.n	800323e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68b9      	ldr	r1, [r7, #8]
 80031bc:	4618      	mov	r0, r3
 80031be:	f000 fa95 	bl	80036ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	69da      	ldr	r2, [r3, #28]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f042 0208 	orr.w	r2, r2, #8
 80031d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	69da      	ldr	r2, [r3, #28]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0204 	bic.w	r2, r2, #4
 80031e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	69d9      	ldr	r1, [r3, #28]
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	691a      	ldr	r2, [r3, #16]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	61da      	str	r2, [r3, #28]
      break;
 80031f4:	e023      	b.n	800323e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68b9      	ldr	r1, [r7, #8]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 fadf 	bl	80037c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	69da      	ldr	r2, [r3, #28]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003210:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	69da      	ldr	r2, [r3, #28]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003220:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	69d9      	ldr	r1, [r3, #28]
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	021a      	lsls	r2, r3, #8
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	61da      	str	r2, [r3, #28]
      break;
 8003236:	e002      	b.n	800323e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	75fb      	strb	r3, [r7, #23]
      break;
 800323c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003246:	7dfb      	ldrb	r3, [r7, #23]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800325a:	2300      	movs	r3, #0
 800325c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003264:	2b01      	cmp	r3, #1
 8003266:	d101      	bne.n	800326c <HAL_TIM_ConfigClockSource+0x1c>
 8003268:	2302      	movs	r3, #2
 800326a:	e0b4      	b.n	80033d6 <HAL_TIM_ConfigClockSource+0x186>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2202      	movs	r2, #2
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800328a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003292:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032a4:	d03e      	beq.n	8003324 <HAL_TIM_ConfigClockSource+0xd4>
 80032a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032aa:	f200 8087 	bhi.w	80033bc <HAL_TIM_ConfigClockSource+0x16c>
 80032ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032b2:	f000 8086 	beq.w	80033c2 <HAL_TIM_ConfigClockSource+0x172>
 80032b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032ba:	d87f      	bhi.n	80033bc <HAL_TIM_ConfigClockSource+0x16c>
 80032bc:	2b70      	cmp	r3, #112	@ 0x70
 80032be:	d01a      	beq.n	80032f6 <HAL_TIM_ConfigClockSource+0xa6>
 80032c0:	2b70      	cmp	r3, #112	@ 0x70
 80032c2:	d87b      	bhi.n	80033bc <HAL_TIM_ConfigClockSource+0x16c>
 80032c4:	2b60      	cmp	r3, #96	@ 0x60
 80032c6:	d050      	beq.n	800336a <HAL_TIM_ConfigClockSource+0x11a>
 80032c8:	2b60      	cmp	r3, #96	@ 0x60
 80032ca:	d877      	bhi.n	80033bc <HAL_TIM_ConfigClockSource+0x16c>
 80032cc:	2b50      	cmp	r3, #80	@ 0x50
 80032ce:	d03c      	beq.n	800334a <HAL_TIM_ConfigClockSource+0xfa>
 80032d0:	2b50      	cmp	r3, #80	@ 0x50
 80032d2:	d873      	bhi.n	80033bc <HAL_TIM_ConfigClockSource+0x16c>
 80032d4:	2b40      	cmp	r3, #64	@ 0x40
 80032d6:	d058      	beq.n	800338a <HAL_TIM_ConfigClockSource+0x13a>
 80032d8:	2b40      	cmp	r3, #64	@ 0x40
 80032da:	d86f      	bhi.n	80033bc <HAL_TIM_ConfigClockSource+0x16c>
 80032dc:	2b30      	cmp	r3, #48	@ 0x30
 80032de:	d064      	beq.n	80033aa <HAL_TIM_ConfigClockSource+0x15a>
 80032e0:	2b30      	cmp	r3, #48	@ 0x30
 80032e2:	d86b      	bhi.n	80033bc <HAL_TIM_ConfigClockSource+0x16c>
 80032e4:	2b20      	cmp	r3, #32
 80032e6:	d060      	beq.n	80033aa <HAL_TIM_ConfigClockSource+0x15a>
 80032e8:	2b20      	cmp	r3, #32
 80032ea:	d867      	bhi.n	80033bc <HAL_TIM_ConfigClockSource+0x16c>
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d05c      	beq.n	80033aa <HAL_TIM_ConfigClockSource+0x15a>
 80032f0:	2b10      	cmp	r3, #16
 80032f2:	d05a      	beq.n	80033aa <HAL_TIM_ConfigClockSource+0x15a>
 80032f4:	e062      	b.n	80033bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003306:	f000 fc43 	bl	8003b90 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003318:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	609a      	str	r2, [r3, #8]
      break;
 8003322:	e04f      	b.n	80033c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003334:	f000 fc2c 	bl	8003b90 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689a      	ldr	r2, [r3, #8]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003346:	609a      	str	r2, [r3, #8]
      break;
 8003348:	e03c      	b.n	80033c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003356:	461a      	mov	r2, r3
 8003358:	f000 faea 	bl	8003930 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2150      	movs	r1, #80	@ 0x50
 8003362:	4618      	mov	r0, r3
 8003364:	f000 fbf9 	bl	8003b5a <TIM_ITRx_SetConfig>
      break;
 8003368:	e02c      	b.n	80033c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003376:	461a      	mov	r2, r3
 8003378:	f000 fb46 	bl	8003a08 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2160      	movs	r1, #96	@ 0x60
 8003382:	4618      	mov	r0, r3
 8003384:	f000 fbe9 	bl	8003b5a <TIM_ITRx_SetConfig>
      break;
 8003388:	e01c      	b.n	80033c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003396:	461a      	mov	r2, r3
 8003398:	f000 faca 	bl	8003930 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2140      	movs	r1, #64	@ 0x40
 80033a2:	4618      	mov	r0, r3
 80033a4:	f000 fbd9 	bl	8003b5a <TIM_ITRx_SetConfig>
      break;
 80033a8:	e00c      	b.n	80033c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4619      	mov	r1, r3
 80033b4:	4610      	mov	r0, r2
 80033b6:	f000 fbd0 	bl	8003b5a <TIM_ITRx_SetConfig>
      break;
 80033ba:	e003      	b.n	80033c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	73fb      	strb	r3, [r7, #15]
      break;
 80033c0:	e000      	b.n	80033c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80033c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033de:	b480      	push	{r7}
 80033e0:	b083      	sub	sp, #12
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80033e6:	bf00      	nop
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033fa:	bf00      	nop
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800341a:	b480      	push	{r7}
 800341c:	b083      	sub	sp, #12
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
	...

08003430 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a3a      	ldr	r2, [pc, #232]	@ (800352c <TIM_Base_SetConfig+0xfc>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d00f      	beq.n	8003468 <TIM_Base_SetConfig+0x38>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800344e:	d00b      	beq.n	8003468 <TIM_Base_SetConfig+0x38>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a37      	ldr	r2, [pc, #220]	@ (8003530 <TIM_Base_SetConfig+0x100>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d007      	beq.n	8003468 <TIM_Base_SetConfig+0x38>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a36      	ldr	r2, [pc, #216]	@ (8003534 <TIM_Base_SetConfig+0x104>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d003      	beq.n	8003468 <TIM_Base_SetConfig+0x38>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a35      	ldr	r2, [pc, #212]	@ (8003538 <TIM_Base_SetConfig+0x108>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d108      	bne.n	800347a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800346e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	4313      	orrs	r3, r2
 8003478:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a2b      	ldr	r2, [pc, #172]	@ (800352c <TIM_Base_SetConfig+0xfc>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d01b      	beq.n	80034ba <TIM_Base_SetConfig+0x8a>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003488:	d017      	beq.n	80034ba <TIM_Base_SetConfig+0x8a>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a28      	ldr	r2, [pc, #160]	@ (8003530 <TIM_Base_SetConfig+0x100>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d013      	beq.n	80034ba <TIM_Base_SetConfig+0x8a>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a27      	ldr	r2, [pc, #156]	@ (8003534 <TIM_Base_SetConfig+0x104>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d00f      	beq.n	80034ba <TIM_Base_SetConfig+0x8a>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a26      	ldr	r2, [pc, #152]	@ (8003538 <TIM_Base_SetConfig+0x108>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d00b      	beq.n	80034ba <TIM_Base_SetConfig+0x8a>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a25      	ldr	r2, [pc, #148]	@ (800353c <TIM_Base_SetConfig+0x10c>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d007      	beq.n	80034ba <TIM_Base_SetConfig+0x8a>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a24      	ldr	r2, [pc, #144]	@ (8003540 <TIM_Base_SetConfig+0x110>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d003      	beq.n	80034ba <TIM_Base_SetConfig+0x8a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a23      	ldr	r2, [pc, #140]	@ (8003544 <TIM_Base_SetConfig+0x114>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d108      	bne.n	80034cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a0e      	ldr	r2, [pc, #56]	@ (800352c <TIM_Base_SetConfig+0xfc>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d103      	bne.n	8003500 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	691a      	ldr	r2, [r3, #16]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b01      	cmp	r3, #1
 8003510:	d105      	bne.n	800351e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	f023 0201 	bic.w	r2, r3, #1
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	611a      	str	r2, [r3, #16]
  }
}
 800351e:	bf00      	nop
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	40010000 	.word	0x40010000
 8003530:	40000400 	.word	0x40000400
 8003534:	40000800 	.word	0x40000800
 8003538:	40000c00 	.word	0x40000c00
 800353c:	40014000 	.word	0x40014000
 8003540:	40014400 	.word	0x40014400
 8003544:	40014800 	.word	0x40014800

08003548 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003548:	b480      	push	{r7}
 800354a:	b087      	sub	sp, #28
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	f023 0201 	bic.w	r2, r3, #1
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f023 0303 	bic.w	r3, r3, #3
 800357e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	4313      	orrs	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f023 0302 	bic.w	r3, r3, #2
 8003590:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	4313      	orrs	r3, r2
 800359a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a1c      	ldr	r2, [pc, #112]	@ (8003610 <TIM_OC1_SetConfig+0xc8>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d10c      	bne.n	80035be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f023 0308 	bic.w	r3, r3, #8
 80035aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f023 0304 	bic.w	r3, r3, #4
 80035bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a13      	ldr	r2, [pc, #76]	@ (8003610 <TIM_OC1_SetConfig+0xc8>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d111      	bne.n	80035ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80035d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	621a      	str	r2, [r3, #32]
}
 8003604:	bf00      	nop
 8003606:	371c      	adds	r7, #28
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr
 8003610:	40010000 	.word	0x40010000

08003614 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003614:	b480      	push	{r7}
 8003616:	b087      	sub	sp, #28
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	f023 0210 	bic.w	r2, r3, #16
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800364a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	021b      	lsls	r3, r3, #8
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	4313      	orrs	r3, r2
 8003656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f023 0320 	bic.w	r3, r3, #32
 800365e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	011b      	lsls	r3, r3, #4
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	4313      	orrs	r3, r2
 800366a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a1e      	ldr	r2, [pc, #120]	@ (80036e8 <TIM_OC2_SetConfig+0xd4>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d10d      	bne.n	8003690 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800367a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	4313      	orrs	r3, r2
 8003686:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800368e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a15      	ldr	r2, [pc, #84]	@ (80036e8 <TIM_OC2_SetConfig+0xd4>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d113      	bne.n	80036c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800369e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80036a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4313      	orrs	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	621a      	str	r2, [r3, #32]
}
 80036da:	bf00      	nop
 80036dc:	371c      	adds	r7, #28
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	40010000 	.word	0x40010000

080036ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b087      	sub	sp, #28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800371a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f023 0303 	bic.w	r3, r3, #3
 8003722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	4313      	orrs	r3, r2
 800372c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003734:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	021b      	lsls	r3, r3, #8
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	4313      	orrs	r3, r2
 8003740:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a1d      	ldr	r2, [pc, #116]	@ (80037bc <TIM_OC3_SetConfig+0xd0>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d10d      	bne.n	8003766 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003750:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	021b      	lsls	r3, r3, #8
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	4313      	orrs	r3, r2
 800375c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003764:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a14      	ldr	r2, [pc, #80]	@ (80037bc <TIM_OC3_SetConfig+0xd0>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d113      	bne.n	8003796 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003774:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800377c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	4313      	orrs	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	011b      	lsls	r3, r3, #4
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	4313      	orrs	r3, r2
 8003794:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	621a      	str	r2, [r3, #32]
}
 80037b0:	bf00      	nop
 80037b2:	371c      	adds	r7, #28
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	40010000 	.word	0x40010000

080037c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b087      	sub	sp, #28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	021b      	lsls	r3, r3, #8
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	4313      	orrs	r3, r2
 8003802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800380a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	031b      	lsls	r3, r3, #12
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	4313      	orrs	r3, r2
 8003816:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a10      	ldr	r2, [pc, #64]	@ (800385c <TIM_OC4_SetConfig+0x9c>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d109      	bne.n	8003834 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003826:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	019b      	lsls	r3, r3, #6
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	4313      	orrs	r3, r2
 8003832:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	621a      	str	r2, [r3, #32]
}
 800384e:	bf00      	nop
 8003850:	371c      	adds	r7, #28
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	40010000 	.word	0x40010000

08003860 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003860:	b480      	push	{r7}
 8003862:	b087      	sub	sp, #28
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
 800386c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	f023 0201 	bic.w	r2, r3, #1
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	4a24      	ldr	r2, [pc, #144]	@ (800391c <TIM_TI1_SetConfig+0xbc>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d013      	beq.n	80038b6 <TIM_TI1_SetConfig+0x56>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003894:	d00f      	beq.n	80038b6 <TIM_TI1_SetConfig+0x56>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	4a21      	ldr	r2, [pc, #132]	@ (8003920 <TIM_TI1_SetConfig+0xc0>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d00b      	beq.n	80038b6 <TIM_TI1_SetConfig+0x56>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	4a20      	ldr	r2, [pc, #128]	@ (8003924 <TIM_TI1_SetConfig+0xc4>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d007      	beq.n	80038b6 <TIM_TI1_SetConfig+0x56>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	4a1f      	ldr	r2, [pc, #124]	@ (8003928 <TIM_TI1_SetConfig+0xc8>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d003      	beq.n	80038b6 <TIM_TI1_SetConfig+0x56>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	4a1e      	ldr	r2, [pc, #120]	@ (800392c <TIM_TI1_SetConfig+0xcc>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d101      	bne.n	80038ba <TIM_TI1_SetConfig+0x5a>
 80038b6:	2301      	movs	r3, #1
 80038b8:	e000      	b.n	80038bc <TIM_TI1_SetConfig+0x5c>
 80038ba:	2300      	movs	r3, #0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d008      	beq.n	80038d2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	f023 0303 	bic.w	r3, r3, #3
 80038c6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	617b      	str	r3, [r7, #20]
 80038d0:	e003      	b.n	80038da <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f043 0301 	orr.w	r3, r3, #1
 80038d8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	011b      	lsls	r3, r3, #4
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	f023 030a 	bic.w	r3, r3, #10
 80038f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	f003 030a 	and.w	r3, r3, #10
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	4313      	orrs	r3, r2
 8003900:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	621a      	str	r2, [r3, #32]
}
 800390e:	bf00      	nop
 8003910:	371c      	adds	r7, #28
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	40010000 	.word	0x40010000
 8003920:	40000400 	.word	0x40000400
 8003924:	40000800 	.word	0x40000800
 8003928:	40000c00 	.word	0x40000c00
 800392c:	40014000 	.word	0x40014000

08003930 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	f023 0201 	bic.w	r2, r3, #1
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800395a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	4313      	orrs	r3, r2
 8003964:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f023 030a 	bic.w	r3, r3, #10
 800396c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	4313      	orrs	r3, r2
 8003974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	621a      	str	r2, [r3, #32]
}
 8003982:	bf00      	nop
 8003984:	371c      	adds	r7, #28
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800398e:	b480      	push	{r7}
 8003990:	b087      	sub	sp, #28
 8003992:	af00      	add	r7, sp, #0
 8003994:	60f8      	str	r0, [r7, #12]
 8003996:	60b9      	str	r1, [r7, #8]
 8003998:	607a      	str	r2, [r7, #4]
 800399a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	f023 0210 	bic.w	r2, r3, #16
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	021b      	lsls	r3, r3, #8
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80039cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	031b      	lsls	r3, r3, #12
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80039e0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	011b      	lsls	r3, r3, #4
 80039e6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	621a      	str	r2, [r3, #32]
}
 80039fc:	bf00      	nop
 80039fe:	371c      	adds	r7, #28
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b087      	sub	sp, #28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	f023 0210 	bic.w	r2, r3, #16
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	031b      	lsls	r3, r3, #12
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003a44:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	011b      	lsls	r3, r3, #4
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	621a      	str	r2, [r3, #32]
}
 8003a5c:	bf00      	nop
 8003a5e:	371c      	adds	r7, #28
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b087      	sub	sp, #28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
 8003a74:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	69db      	ldr	r3, [r3, #28]
 8003a8c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	f023 0303 	bic.w	r3, r3, #3
 8003a94:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003aa4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	011b      	lsls	r3, r3, #4
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003ab8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	021b      	lsls	r3, r3, #8
 8003abe:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	621a      	str	r2, [r3, #32]
}
 8003ad4:	bf00      	nop
 8003ad6:	371c      	adds	r7, #28
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b087      	sub	sp, #28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
 8003aec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b0c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	021b      	lsls	r3, r3, #8
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b1e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	031b      	lsls	r3, r3, #12
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003b32:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	031b      	lsls	r3, r3, #12
 8003b38:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	621a      	str	r2, [r3, #32]
}
 8003b4e:	bf00      	nop
 8003b50:	371c      	adds	r7, #28
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b085      	sub	sp, #20
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
 8003b62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	f043 0307 	orr.w	r3, r3, #7
 8003b7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	609a      	str	r2, [r3, #8]
}
 8003b84:	bf00      	nop
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
 8003b9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003baa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	021a      	lsls	r2, r3, #8
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	609a      	str	r2, [r3, #8]
}
 8003bc4:	bf00      	nop
 8003bc6:	371c      	adds	r7, #28
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b087      	sub	sp, #28
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	f003 031f 	and.w	r3, r3, #31
 8003be2:	2201      	movs	r2, #1
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6a1a      	ldr	r2, [r3, #32]
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	43db      	mvns	r3, r3
 8003bf2:	401a      	ands	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6a1a      	ldr	r2, [r3, #32]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f003 031f 	and.w	r3, r3, #31
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	fa01 f303 	lsl.w	r3, r1, r3
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	621a      	str	r2, [r3, #32]
}
 8003c0e:	bf00      	nop
 8003c10:	371c      	adds	r7, #28
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
	...

08003c1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d101      	bne.n	8003c34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c30:	2302      	movs	r3, #2
 8003c32:	e050      	b.n	8003cd6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a1c      	ldr	r2, [pc, #112]	@ (8003ce4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d018      	beq.n	8003caa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c80:	d013      	beq.n	8003caa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a18      	ldr	r2, [pc, #96]	@ (8003ce8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d00e      	beq.n	8003caa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a16      	ldr	r2, [pc, #88]	@ (8003cec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d009      	beq.n	8003caa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a15      	ldr	r2, [pc, #84]	@ (8003cf0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d004      	beq.n	8003caa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a13      	ldr	r2, [pc, #76]	@ (8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d10c      	bne.n	8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3714      	adds	r7, #20
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	40010000 	.word	0x40010000
 8003ce8:	40000400 	.word	0x40000400
 8003cec:	40000800 	.word	0x40000800
 8003cf0:	40000c00 	.word	0x40000c00
 8003cf4:	40014000 	.word	0x40014000

08003cf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e042      	b.n	8003db8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d106      	bne.n	8003d4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7fd fb36 	bl	80013b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2224      	movs	r2, #36	@ 0x24
 8003d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68da      	ldr	r2, [r3, #12]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 fd69 	bl	800483c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	691a      	ldr	r2, [r3, #16]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	695a      	ldr	r2, [r3, #20]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68da      	ldr	r2, [r3, #12]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2220      	movs	r2, #32
 8003dac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b08a      	sub	sp, #40	@ 0x28
 8003dc4:	af02      	add	r7, sp, #8
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	603b      	str	r3, [r7, #0]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b20      	cmp	r3, #32
 8003dde:	d175      	bne.n	8003ecc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <HAL_UART_Transmit+0x2c>
 8003de6:	88fb      	ldrh	r3, [r7, #6]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e06e      	b.n	8003ece <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2221      	movs	r2, #33	@ 0x21
 8003dfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dfe:	f7fd fcc5 	bl	800178c <HAL_GetTick>
 8003e02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	88fa      	ldrh	r2, [r7, #6]
 8003e08:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	88fa      	ldrh	r2, [r7, #6]
 8003e0e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e18:	d108      	bne.n	8003e2c <HAL_UART_Transmit+0x6c>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d104      	bne.n	8003e2c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e22:	2300      	movs	r3, #0
 8003e24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	61bb      	str	r3, [r7, #24]
 8003e2a:	e003      	b.n	8003e34 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e30:	2300      	movs	r3, #0
 8003e32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e34:	e02e      	b.n	8003e94 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	2180      	movs	r1, #128	@ 0x80
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f000 fb05 	bl	8004450 <UART_WaitOnFlagUntilTimeout>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d005      	beq.n	8003e58 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e03a      	b.n	8003ece <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10b      	bne.n	8003e76 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	881b      	ldrh	r3, [r3, #0]
 8003e62:	461a      	mov	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	3302      	adds	r3, #2
 8003e72:	61bb      	str	r3, [r7, #24]
 8003e74:	e007      	b.n	8003e86 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	781a      	ldrb	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	3301      	adds	r3, #1
 8003e84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1cb      	bne.n	8003e36 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	2140      	movs	r1, #64	@ 0x40
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f000 fad1 	bl	8004450 <UART_WaitOnFlagUntilTimeout>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d005      	beq.n	8003ec0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e006      	b.n	8003ece <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	e000      	b.n	8003ece <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003ecc:	2302      	movs	r3, #2
  }
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3720      	adds	r7, #32
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
	...

08003ed8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b0ba      	sub	sp, #232	@ 0xe8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003efe:	2300      	movs	r3, #0
 8003f00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003f04:	2300      	movs	r3, #0
 8003f06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f0e:	f003 030f 	and.w	r3, r3, #15
 8003f12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003f16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10f      	bne.n	8003f3e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f22:	f003 0320 	and.w	r3, r3, #32
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d009      	beq.n	8003f3e <HAL_UART_IRQHandler+0x66>
 8003f2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f2e:	f003 0320 	and.w	r3, r3, #32
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 fbc2 	bl	80046c0 <UART_Receive_IT>
      return;
 8003f3c:	e25b      	b.n	80043f6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 80de 	beq.w	8004104 <HAL_UART_IRQHandler+0x22c>
 8003f48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d106      	bne.n	8003f62 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f58:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 80d1 	beq.w	8004104 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00b      	beq.n	8003f86 <HAL_UART_IRQHandler+0xae>
 8003f6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d005      	beq.n	8003f86 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f7e:	f043 0201 	orr.w	r2, r3, #1
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f8a:	f003 0304 	and.w	r3, r3, #4
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00b      	beq.n	8003faa <HAL_UART_IRQHandler+0xd2>
 8003f92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d005      	beq.n	8003faa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fa2:	f043 0202 	orr.w	r2, r3, #2
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00b      	beq.n	8003fce <HAL_UART_IRQHandler+0xf6>
 8003fb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d005      	beq.n	8003fce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc6:	f043 0204 	orr.w	r2, r3, #4
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fd2:	f003 0308 	and.w	r3, r3, #8
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d011      	beq.n	8003ffe <HAL_UART_IRQHandler+0x126>
 8003fda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fde:	f003 0320 	and.w	r3, r3, #32
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d105      	bne.n	8003ff2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003fe6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d005      	beq.n	8003ffe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff6:	f043 0208 	orr.w	r2, r3, #8
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 81f2 	beq.w	80043ec <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800400c:	f003 0320 	and.w	r3, r3, #32
 8004010:	2b00      	cmp	r3, #0
 8004012:	d008      	beq.n	8004026 <HAL_UART_IRQHandler+0x14e>
 8004014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004018:	f003 0320 	and.w	r3, r3, #32
 800401c:	2b00      	cmp	r3, #0
 800401e:	d002      	beq.n	8004026 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 fb4d 	bl	80046c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004030:	2b40      	cmp	r3, #64	@ 0x40
 8004032:	bf0c      	ite	eq
 8004034:	2301      	moveq	r3, #1
 8004036:	2300      	movne	r3, #0
 8004038:	b2db      	uxtb	r3, r3
 800403a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004042:	f003 0308 	and.w	r3, r3, #8
 8004046:	2b00      	cmp	r3, #0
 8004048:	d103      	bne.n	8004052 <HAL_UART_IRQHandler+0x17a>
 800404a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800404e:	2b00      	cmp	r3, #0
 8004050:	d04f      	beq.n	80040f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 fa55 	bl	8004502 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004062:	2b40      	cmp	r3, #64	@ 0x40
 8004064:	d141      	bne.n	80040ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	3314      	adds	r3, #20
 800406c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004070:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004074:	e853 3f00 	ldrex	r3, [r3]
 8004078:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800407c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004080:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004084:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	3314      	adds	r3, #20
 800408e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004092:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004096:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800409e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80040a2:	e841 2300 	strex	r3, r2, [r1]
 80040a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80040aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1d9      	bne.n	8004066 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d013      	beq.n	80040e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040be:	4a7e      	ldr	r2, [pc, #504]	@ (80042b8 <HAL_UART_IRQHandler+0x3e0>)
 80040c0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7fd fd11 	bl	8001aee <HAL_DMA_Abort_IT>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d016      	beq.n	8004100 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80040dc:	4610      	mov	r0, r2
 80040de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e0:	e00e      	b.n	8004100 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f99e 	bl	8004424 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e8:	e00a      	b.n	8004100 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f99a 	bl	8004424 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f0:	e006      	b.n	8004100 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f996 	bl	8004424 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80040fe:	e175      	b.n	80043ec <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004100:	bf00      	nop
    return;
 8004102:	e173      	b.n	80043ec <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004108:	2b01      	cmp	r3, #1
 800410a:	f040 814f 	bne.w	80043ac <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800410e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004112:	f003 0310 	and.w	r3, r3, #16
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 8148 	beq.w	80043ac <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800411c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004120:	f003 0310 	and.w	r3, r3, #16
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 8141 	beq.w	80043ac <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800412a:	2300      	movs	r3, #0
 800412c:	60bb      	str	r3, [r7, #8]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	60bb      	str	r3, [r7, #8]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	60bb      	str	r3, [r7, #8]
 800413e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800414a:	2b40      	cmp	r3, #64	@ 0x40
 800414c:	f040 80b6 	bne.w	80042bc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800415c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004160:	2b00      	cmp	r3, #0
 8004162:	f000 8145 	beq.w	80043f0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800416a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800416e:	429a      	cmp	r2, r3
 8004170:	f080 813e 	bcs.w	80043f0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800417a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004186:	f000 8088 	beq.w	800429a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	330c      	adds	r3, #12
 8004190:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004194:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004198:	e853 3f00 	ldrex	r3, [r3]
 800419c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80041a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80041a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	330c      	adds	r3, #12
 80041b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80041b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80041ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80041c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80041c6:	e841 2300 	strex	r3, r2, [r1]
 80041ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80041ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1d9      	bne.n	800418a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	3314      	adds	r3, #20
 80041dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041e0:	e853 3f00 	ldrex	r3, [r3]
 80041e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80041e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80041e8:	f023 0301 	bic.w	r3, r3, #1
 80041ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	3314      	adds	r3, #20
 80041f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80041fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80041fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004200:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004202:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004206:	e841 2300 	strex	r3, r2, [r1]
 800420a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800420c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1e1      	bne.n	80041d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	3314      	adds	r3, #20
 8004218:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800421c:	e853 3f00 	ldrex	r3, [r3]
 8004220:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004222:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004224:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004228:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	3314      	adds	r3, #20
 8004232:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004236:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004238:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800423c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800423e:	e841 2300 	strex	r3, r2, [r1]
 8004242:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004244:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1e3      	bne.n	8004212 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	330c      	adds	r3, #12
 800425e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004260:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004262:	e853 3f00 	ldrex	r3, [r3]
 8004266:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004268:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800426a:	f023 0310 	bic.w	r3, r3, #16
 800426e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	330c      	adds	r3, #12
 8004278:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800427c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800427e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004280:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004282:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004284:	e841 2300 	strex	r3, r2, [r1]
 8004288:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800428a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1e3      	bne.n	8004258 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004294:	4618      	mov	r0, r3
 8004296:	f7fd fbba 	bl	8001a0e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2202      	movs	r2, #2
 800429e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	4619      	mov	r1, r3
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f8c1 	bl	8004438 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042b6:	e09b      	b.n	80043f0 <HAL_UART_IRQHandler+0x518>
 80042b8:	080045c9 	.word	0x080045c9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f000 808e 	beq.w	80043f4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80042d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 8089 	beq.w	80043f4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	330c      	adds	r3, #12
 80042e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ec:	e853 3f00 	ldrex	r3, [r3]
 80042f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80042f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	330c      	adds	r3, #12
 8004302:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004306:	647a      	str	r2, [r7, #68]	@ 0x44
 8004308:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800430c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800430e:	e841 2300 	strex	r3, r2, [r1]
 8004312:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004314:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1e3      	bne.n	80042e2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	3314      	adds	r3, #20
 8004320:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004324:	e853 3f00 	ldrex	r3, [r3]
 8004328:	623b      	str	r3, [r7, #32]
   return(result);
 800432a:	6a3b      	ldr	r3, [r7, #32]
 800432c:	f023 0301 	bic.w	r3, r3, #1
 8004330:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	3314      	adds	r3, #20
 800433a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800433e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004340:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004342:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004344:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004346:	e841 2300 	strex	r3, r2, [r1]
 800434a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800434c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1e3      	bne.n	800431a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2220      	movs	r2, #32
 8004356:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	330c      	adds	r3, #12
 8004366:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	e853 3f00 	ldrex	r3, [r3]
 800436e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f023 0310 	bic.w	r3, r3, #16
 8004376:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	330c      	adds	r3, #12
 8004380:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004384:	61fa      	str	r2, [r7, #28]
 8004386:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004388:	69b9      	ldr	r1, [r7, #24]
 800438a:	69fa      	ldr	r2, [r7, #28]
 800438c:	e841 2300 	strex	r3, r2, [r1]
 8004390:	617b      	str	r3, [r7, #20]
   return(result);
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1e3      	bne.n	8004360 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2202      	movs	r2, #2
 800439c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800439e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80043a2:	4619      	mov	r1, r3
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f847 	bl	8004438 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043aa:	e023      	b.n	80043f4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80043ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d009      	beq.n	80043cc <HAL_UART_IRQHandler+0x4f4>
 80043b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 f913 	bl	80045f0 <UART_Transmit_IT>
    return;
 80043ca:	e014      	b.n	80043f6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00e      	beq.n	80043f6 <HAL_UART_IRQHandler+0x51e>
 80043d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d008      	beq.n	80043f6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 f953 	bl	8004690 <UART_EndTransmit_IT>
    return;
 80043ea:	e004      	b.n	80043f6 <HAL_UART_IRQHandler+0x51e>
    return;
 80043ec:	bf00      	nop
 80043ee:	e002      	b.n	80043f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80043f0:	bf00      	nop
 80043f2:	e000      	b.n	80043f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80043f4:	bf00      	nop
  }
}
 80043f6:	37e8      	adds	r7, #232	@ 0xe8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	460b      	mov	r3, r1
 8004442:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	603b      	str	r3, [r7, #0]
 800445c:	4613      	mov	r3, r2
 800445e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004460:	e03b      	b.n	80044da <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004468:	d037      	beq.n	80044da <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800446a:	f7fd f98f 	bl	800178c <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	6a3a      	ldr	r2, [r7, #32]
 8004476:	429a      	cmp	r2, r3
 8004478:	d302      	bcc.n	8004480 <UART_WaitOnFlagUntilTimeout+0x30>
 800447a:	6a3b      	ldr	r3, [r7, #32]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d101      	bne.n	8004484 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e03a      	b.n	80044fa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	f003 0304 	and.w	r3, r3, #4
 800448e:	2b00      	cmp	r3, #0
 8004490:	d023      	beq.n	80044da <UART_WaitOnFlagUntilTimeout+0x8a>
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	2b80      	cmp	r3, #128	@ 0x80
 8004496:	d020      	beq.n	80044da <UART_WaitOnFlagUntilTimeout+0x8a>
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	2b40      	cmp	r3, #64	@ 0x40
 800449c:	d01d      	beq.n	80044da <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0308 	and.w	r3, r3, #8
 80044a8:	2b08      	cmp	r3, #8
 80044aa:	d116      	bne.n	80044da <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80044ac:	2300      	movs	r3, #0
 80044ae:	617b      	str	r3, [r7, #20]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	617b      	str	r3, [r7, #20]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	617b      	str	r3, [r7, #20]
 80044c0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f000 f81d 	bl	8004502 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2208      	movs	r2, #8
 80044cc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e00f      	b.n	80044fa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	4013      	ands	r3, r2
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	bf0c      	ite	eq
 80044ea:	2301      	moveq	r3, #1
 80044ec:	2300      	movne	r3, #0
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	461a      	mov	r2, r3
 80044f2:	79fb      	ldrb	r3, [r7, #7]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d0b4      	beq.n	8004462 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3718      	adds	r7, #24
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004502:	b480      	push	{r7}
 8004504:	b095      	sub	sp, #84	@ 0x54
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	330c      	adds	r3, #12
 8004510:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004514:	e853 3f00 	ldrex	r3, [r3]
 8004518:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800451a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800451c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004520:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	330c      	adds	r3, #12
 8004528:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800452a:	643a      	str	r2, [r7, #64]	@ 0x40
 800452c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004530:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004532:	e841 2300 	strex	r3, r2, [r1]
 8004536:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1e5      	bne.n	800450a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	3314      	adds	r3, #20
 8004544:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004546:	6a3b      	ldr	r3, [r7, #32]
 8004548:	e853 3f00 	ldrex	r3, [r3]
 800454c:	61fb      	str	r3, [r7, #28]
   return(result);
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	f023 0301 	bic.w	r3, r3, #1
 8004554:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	3314      	adds	r3, #20
 800455c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800455e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004560:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004562:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004564:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004566:	e841 2300 	strex	r3, r2, [r1]
 800456a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800456c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1e5      	bne.n	800453e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004576:	2b01      	cmp	r3, #1
 8004578:	d119      	bne.n	80045ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	330c      	adds	r3, #12
 8004580:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	e853 3f00 	ldrex	r3, [r3]
 8004588:	60bb      	str	r3, [r7, #8]
   return(result);
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	f023 0310 	bic.w	r3, r3, #16
 8004590:	647b      	str	r3, [r7, #68]	@ 0x44
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	330c      	adds	r3, #12
 8004598:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800459a:	61ba      	str	r2, [r7, #24]
 800459c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459e:	6979      	ldr	r1, [r7, #20]
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	e841 2300 	strex	r3, r2, [r1]
 80045a6:	613b      	str	r3, [r7, #16]
   return(result);
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1e5      	bne.n	800457a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2220      	movs	r2, #32
 80045b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80045bc:	bf00      	nop
 80045be:	3754      	adds	r7, #84	@ 0x54
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f7ff ff1e 	bl	8004424 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045e8:	bf00      	nop
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b21      	cmp	r3, #33	@ 0x21
 8004602:	d13e      	bne.n	8004682 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800460c:	d114      	bne.n	8004638 <UART_Transmit_IT+0x48>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d110      	bne.n	8004638 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	881b      	ldrh	r3, [r3, #0]
 8004620:	461a      	mov	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800462a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	1c9a      	adds	r2, r3, #2
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	621a      	str	r2, [r3, #32]
 8004636:	e008      	b.n	800464a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	1c59      	adds	r1, r3, #1
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	6211      	str	r1, [r2, #32]
 8004642:	781a      	ldrb	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800464e:	b29b      	uxth	r3, r3
 8004650:	3b01      	subs	r3, #1
 8004652:	b29b      	uxth	r3, r3
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	4619      	mov	r1, r3
 8004658:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10f      	bne.n	800467e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68da      	ldr	r2, [r3, #12]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800466c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68da      	ldr	r2, [r3, #12]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800467c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800467e:	2300      	movs	r3, #0
 8004680:	e000      	b.n	8004684 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004682:	2302      	movs	r3, #2
  }
}
 8004684:	4618      	mov	r0, r3
 8004686:	3714      	adds	r7, #20
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68da      	ldr	r2, [r3, #12]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2220      	movs	r2, #32
 80046ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f7ff fea3 	bl	80043fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b08c      	sub	sp, #48	@ 0x30
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b22      	cmp	r3, #34	@ 0x22
 80046d2:	f040 80ae 	bne.w	8004832 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046de:	d117      	bne.n	8004710 <UART_Receive_IT+0x50>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d113      	bne.n	8004710 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80046e8:	2300      	movs	r3, #0
 80046ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046fe:	b29a      	uxth	r2, r3
 8004700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004702:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004708:	1c9a      	adds	r2, r3, #2
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	629a      	str	r2, [r3, #40]	@ 0x28
 800470e:	e026      	b.n	800475e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004714:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004716:	2300      	movs	r3, #0
 8004718:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004722:	d007      	beq.n	8004734 <UART_Receive_IT+0x74>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10a      	bne.n	8004742 <UART_Receive_IT+0x82>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d106      	bne.n	8004742 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	b2da      	uxtb	r2, r3
 800473c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800473e:	701a      	strb	r2, [r3, #0]
 8004740:	e008      	b.n	8004754 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	b2db      	uxtb	r3, r3
 800474a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800474e:	b2da      	uxtb	r2, r3
 8004750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004752:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004758:	1c5a      	adds	r2, r3, #1
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004762:	b29b      	uxth	r3, r3
 8004764:	3b01      	subs	r3, #1
 8004766:	b29b      	uxth	r3, r3
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	4619      	mov	r1, r3
 800476c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800476e:	2b00      	cmp	r3, #0
 8004770:	d15d      	bne.n	800482e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68da      	ldr	r2, [r3, #12]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 0220 	bic.w	r2, r2, #32
 8004780:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68da      	ldr	r2, [r3, #12]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004790:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	695a      	ldr	r2, [r3, #20]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 0201 	bic.w	r2, r2, #1
 80047a0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2220      	movs	r2, #32
 80047a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d135      	bne.n	8004824 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	330c      	adds	r3, #12
 80047c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	e853 3f00 	ldrex	r3, [r3]
 80047cc:	613b      	str	r3, [r7, #16]
   return(result);
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	f023 0310 	bic.w	r3, r3, #16
 80047d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	330c      	adds	r3, #12
 80047dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047de:	623a      	str	r2, [r7, #32]
 80047e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e2:	69f9      	ldr	r1, [r7, #28]
 80047e4:	6a3a      	ldr	r2, [r7, #32]
 80047e6:	e841 2300 	strex	r3, r2, [r1]
 80047ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1e5      	bne.n	80047be <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0310 	and.w	r3, r3, #16
 80047fc:	2b10      	cmp	r3, #16
 80047fe:	d10a      	bne.n	8004816 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004800:	2300      	movs	r3, #0
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	60fb      	str	r3, [r7, #12]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	60fb      	str	r3, [r7, #12]
 8004814:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800481a:	4619      	mov	r1, r3
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f7ff fe0b 	bl	8004438 <HAL_UARTEx_RxEventCallback>
 8004822:	e002      	b.n	800482a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7ff fdf3 	bl	8004410 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800482a:	2300      	movs	r3, #0
 800482c:	e002      	b.n	8004834 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800482e:	2300      	movs	r3, #0
 8004830:	e000      	b.n	8004834 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004832:	2302      	movs	r3, #2
  }
}
 8004834:	4618      	mov	r0, r3
 8004836:	3730      	adds	r7, #48	@ 0x30
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800483c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004840:	b0c0      	sub	sp, #256	@ 0x100
 8004842:	af00      	add	r7, sp, #0
 8004844:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004858:	68d9      	ldr	r1, [r3, #12]
 800485a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	ea40 0301 	orr.w	r3, r0, r1
 8004864:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800486a:	689a      	ldr	r2, [r3, #8]
 800486c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	431a      	orrs	r2, r3
 8004874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	431a      	orrs	r2, r3
 800487c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004880:	69db      	ldr	r3, [r3, #28]
 8004882:	4313      	orrs	r3, r2
 8004884:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004894:	f021 010c 	bic.w	r1, r1, #12
 8004898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80048a2:	430b      	orrs	r3, r1
 80048a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80048b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048b6:	6999      	ldr	r1, [r3, #24]
 80048b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	ea40 0301 	orr.w	r3, r0, r1
 80048c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	4b8f      	ldr	r3, [pc, #572]	@ (8004b08 <UART_SetConfig+0x2cc>)
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d005      	beq.n	80048dc <UART_SetConfig+0xa0>
 80048d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	4b8d      	ldr	r3, [pc, #564]	@ (8004b0c <UART_SetConfig+0x2d0>)
 80048d8:	429a      	cmp	r2, r3
 80048da:	d104      	bne.n	80048e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048dc:	f7fd ff30 	bl	8002740 <HAL_RCC_GetPCLK2Freq>
 80048e0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80048e4:	e003      	b.n	80048ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048e6:	f7fd ff17 	bl	8002718 <HAL_RCC_GetPCLK1Freq>
 80048ea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f2:	69db      	ldr	r3, [r3, #28]
 80048f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048f8:	f040 810c 	bne.w	8004b14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004900:	2200      	movs	r2, #0
 8004902:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004906:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800490a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800490e:	4622      	mov	r2, r4
 8004910:	462b      	mov	r3, r5
 8004912:	1891      	adds	r1, r2, r2
 8004914:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004916:	415b      	adcs	r3, r3
 8004918:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800491a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800491e:	4621      	mov	r1, r4
 8004920:	eb12 0801 	adds.w	r8, r2, r1
 8004924:	4629      	mov	r1, r5
 8004926:	eb43 0901 	adc.w	r9, r3, r1
 800492a:	f04f 0200 	mov.w	r2, #0
 800492e:	f04f 0300 	mov.w	r3, #0
 8004932:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004936:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800493a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800493e:	4690      	mov	r8, r2
 8004940:	4699      	mov	r9, r3
 8004942:	4623      	mov	r3, r4
 8004944:	eb18 0303 	adds.w	r3, r8, r3
 8004948:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800494c:	462b      	mov	r3, r5
 800494e:	eb49 0303 	adc.w	r3, r9, r3
 8004952:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004962:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004966:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800496a:	460b      	mov	r3, r1
 800496c:	18db      	adds	r3, r3, r3
 800496e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004970:	4613      	mov	r3, r2
 8004972:	eb42 0303 	adc.w	r3, r2, r3
 8004976:	657b      	str	r3, [r7, #84]	@ 0x54
 8004978:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800497c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004980:	f7fb fc7e 	bl	8000280 <__aeabi_uldivmod>
 8004984:	4602      	mov	r2, r0
 8004986:	460b      	mov	r3, r1
 8004988:	4b61      	ldr	r3, [pc, #388]	@ (8004b10 <UART_SetConfig+0x2d4>)
 800498a:	fba3 2302 	umull	r2, r3, r3, r2
 800498e:	095b      	lsrs	r3, r3, #5
 8004990:	011c      	lsls	r4, r3, #4
 8004992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004996:	2200      	movs	r2, #0
 8004998:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800499c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80049a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80049a4:	4642      	mov	r2, r8
 80049a6:	464b      	mov	r3, r9
 80049a8:	1891      	adds	r1, r2, r2
 80049aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80049ac:	415b      	adcs	r3, r3
 80049ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80049b4:	4641      	mov	r1, r8
 80049b6:	eb12 0a01 	adds.w	sl, r2, r1
 80049ba:	4649      	mov	r1, r9
 80049bc:	eb43 0b01 	adc.w	fp, r3, r1
 80049c0:	f04f 0200 	mov.w	r2, #0
 80049c4:	f04f 0300 	mov.w	r3, #0
 80049c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049d4:	4692      	mov	sl, r2
 80049d6:	469b      	mov	fp, r3
 80049d8:	4643      	mov	r3, r8
 80049da:	eb1a 0303 	adds.w	r3, sl, r3
 80049de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80049e2:	464b      	mov	r3, r9
 80049e4:	eb4b 0303 	adc.w	r3, fp, r3
 80049e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80049ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80049f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80049fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004a00:	460b      	mov	r3, r1
 8004a02:	18db      	adds	r3, r3, r3
 8004a04:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a06:	4613      	mov	r3, r2
 8004a08:	eb42 0303 	adc.w	r3, r2, r3
 8004a0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004a12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004a16:	f7fb fc33 	bl	8000280 <__aeabi_uldivmod>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	4611      	mov	r1, r2
 8004a20:	4b3b      	ldr	r3, [pc, #236]	@ (8004b10 <UART_SetConfig+0x2d4>)
 8004a22:	fba3 2301 	umull	r2, r3, r3, r1
 8004a26:	095b      	lsrs	r3, r3, #5
 8004a28:	2264      	movs	r2, #100	@ 0x64
 8004a2a:	fb02 f303 	mul.w	r3, r2, r3
 8004a2e:	1acb      	subs	r3, r1, r3
 8004a30:	00db      	lsls	r3, r3, #3
 8004a32:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004a36:	4b36      	ldr	r3, [pc, #216]	@ (8004b10 <UART_SetConfig+0x2d4>)
 8004a38:	fba3 2302 	umull	r2, r3, r3, r2
 8004a3c:	095b      	lsrs	r3, r3, #5
 8004a3e:	005b      	lsls	r3, r3, #1
 8004a40:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004a44:	441c      	add	r4, r3
 8004a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a50:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004a54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004a58:	4642      	mov	r2, r8
 8004a5a:	464b      	mov	r3, r9
 8004a5c:	1891      	adds	r1, r2, r2
 8004a5e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004a60:	415b      	adcs	r3, r3
 8004a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004a68:	4641      	mov	r1, r8
 8004a6a:	1851      	adds	r1, r2, r1
 8004a6c:	6339      	str	r1, [r7, #48]	@ 0x30
 8004a6e:	4649      	mov	r1, r9
 8004a70:	414b      	adcs	r3, r1
 8004a72:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a74:	f04f 0200 	mov.w	r2, #0
 8004a78:	f04f 0300 	mov.w	r3, #0
 8004a7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004a80:	4659      	mov	r1, fp
 8004a82:	00cb      	lsls	r3, r1, #3
 8004a84:	4651      	mov	r1, sl
 8004a86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a8a:	4651      	mov	r1, sl
 8004a8c:	00ca      	lsls	r2, r1, #3
 8004a8e:	4610      	mov	r0, r2
 8004a90:	4619      	mov	r1, r3
 8004a92:	4603      	mov	r3, r0
 8004a94:	4642      	mov	r2, r8
 8004a96:	189b      	adds	r3, r3, r2
 8004a98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a9c:	464b      	mov	r3, r9
 8004a9e:	460a      	mov	r2, r1
 8004aa0:	eb42 0303 	adc.w	r3, r2, r3
 8004aa4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004ab4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004ab8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004abc:	460b      	mov	r3, r1
 8004abe:	18db      	adds	r3, r3, r3
 8004ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	eb42 0303 	adc.w	r3, r2, r3
 8004ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004aca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ace:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004ad2:	f7fb fbd5 	bl	8000280 <__aeabi_uldivmod>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	460b      	mov	r3, r1
 8004ada:	4b0d      	ldr	r3, [pc, #52]	@ (8004b10 <UART_SetConfig+0x2d4>)
 8004adc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ae0:	095b      	lsrs	r3, r3, #5
 8004ae2:	2164      	movs	r1, #100	@ 0x64
 8004ae4:	fb01 f303 	mul.w	r3, r1, r3
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	3332      	adds	r3, #50	@ 0x32
 8004aee:	4a08      	ldr	r2, [pc, #32]	@ (8004b10 <UART_SetConfig+0x2d4>)
 8004af0:	fba2 2303 	umull	r2, r3, r2, r3
 8004af4:	095b      	lsrs	r3, r3, #5
 8004af6:	f003 0207 	and.w	r2, r3, #7
 8004afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4422      	add	r2, r4
 8004b02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b04:	e106      	b.n	8004d14 <UART_SetConfig+0x4d8>
 8004b06:	bf00      	nop
 8004b08:	40011000 	.word	0x40011000
 8004b0c:	40011400 	.word	0x40011400
 8004b10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004b1e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004b22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004b26:	4642      	mov	r2, r8
 8004b28:	464b      	mov	r3, r9
 8004b2a:	1891      	adds	r1, r2, r2
 8004b2c:	6239      	str	r1, [r7, #32]
 8004b2e:	415b      	adcs	r3, r3
 8004b30:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b36:	4641      	mov	r1, r8
 8004b38:	1854      	adds	r4, r2, r1
 8004b3a:	4649      	mov	r1, r9
 8004b3c:	eb43 0501 	adc.w	r5, r3, r1
 8004b40:	f04f 0200 	mov.w	r2, #0
 8004b44:	f04f 0300 	mov.w	r3, #0
 8004b48:	00eb      	lsls	r3, r5, #3
 8004b4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b4e:	00e2      	lsls	r2, r4, #3
 8004b50:	4614      	mov	r4, r2
 8004b52:	461d      	mov	r5, r3
 8004b54:	4643      	mov	r3, r8
 8004b56:	18e3      	adds	r3, r4, r3
 8004b58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004b5c:	464b      	mov	r3, r9
 8004b5e:	eb45 0303 	adc.w	r3, r5, r3
 8004b62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b72:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004b76:	f04f 0200 	mov.w	r2, #0
 8004b7a:	f04f 0300 	mov.w	r3, #0
 8004b7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004b82:	4629      	mov	r1, r5
 8004b84:	008b      	lsls	r3, r1, #2
 8004b86:	4621      	mov	r1, r4
 8004b88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b8c:	4621      	mov	r1, r4
 8004b8e:	008a      	lsls	r2, r1, #2
 8004b90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004b94:	f7fb fb74 	bl	8000280 <__aeabi_uldivmod>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	4b60      	ldr	r3, [pc, #384]	@ (8004d20 <UART_SetConfig+0x4e4>)
 8004b9e:	fba3 2302 	umull	r2, r3, r3, r2
 8004ba2:	095b      	lsrs	r3, r3, #5
 8004ba4:	011c      	lsls	r4, r3, #4
 8004ba6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004baa:	2200      	movs	r2, #0
 8004bac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004bb0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004bb4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004bb8:	4642      	mov	r2, r8
 8004bba:	464b      	mov	r3, r9
 8004bbc:	1891      	adds	r1, r2, r2
 8004bbe:	61b9      	str	r1, [r7, #24]
 8004bc0:	415b      	adcs	r3, r3
 8004bc2:	61fb      	str	r3, [r7, #28]
 8004bc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bc8:	4641      	mov	r1, r8
 8004bca:	1851      	adds	r1, r2, r1
 8004bcc:	6139      	str	r1, [r7, #16]
 8004bce:	4649      	mov	r1, r9
 8004bd0:	414b      	adcs	r3, r1
 8004bd2:	617b      	str	r3, [r7, #20]
 8004bd4:	f04f 0200 	mov.w	r2, #0
 8004bd8:	f04f 0300 	mov.w	r3, #0
 8004bdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004be0:	4659      	mov	r1, fp
 8004be2:	00cb      	lsls	r3, r1, #3
 8004be4:	4651      	mov	r1, sl
 8004be6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bea:	4651      	mov	r1, sl
 8004bec:	00ca      	lsls	r2, r1, #3
 8004bee:	4610      	mov	r0, r2
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	4642      	mov	r2, r8
 8004bf6:	189b      	adds	r3, r3, r2
 8004bf8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004bfc:	464b      	mov	r3, r9
 8004bfe:	460a      	mov	r2, r1
 8004c00:	eb42 0303 	adc.w	r3, r2, r3
 8004c04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c12:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004c14:	f04f 0200 	mov.w	r2, #0
 8004c18:	f04f 0300 	mov.w	r3, #0
 8004c1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004c20:	4649      	mov	r1, r9
 8004c22:	008b      	lsls	r3, r1, #2
 8004c24:	4641      	mov	r1, r8
 8004c26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c2a:	4641      	mov	r1, r8
 8004c2c:	008a      	lsls	r2, r1, #2
 8004c2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004c32:	f7fb fb25 	bl	8000280 <__aeabi_uldivmod>
 8004c36:	4602      	mov	r2, r0
 8004c38:	460b      	mov	r3, r1
 8004c3a:	4611      	mov	r1, r2
 8004c3c:	4b38      	ldr	r3, [pc, #224]	@ (8004d20 <UART_SetConfig+0x4e4>)
 8004c3e:	fba3 2301 	umull	r2, r3, r3, r1
 8004c42:	095b      	lsrs	r3, r3, #5
 8004c44:	2264      	movs	r2, #100	@ 0x64
 8004c46:	fb02 f303 	mul.w	r3, r2, r3
 8004c4a:	1acb      	subs	r3, r1, r3
 8004c4c:	011b      	lsls	r3, r3, #4
 8004c4e:	3332      	adds	r3, #50	@ 0x32
 8004c50:	4a33      	ldr	r2, [pc, #204]	@ (8004d20 <UART_SetConfig+0x4e4>)
 8004c52:	fba2 2303 	umull	r2, r3, r2, r3
 8004c56:	095b      	lsrs	r3, r3, #5
 8004c58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c5c:	441c      	add	r4, r3
 8004c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c62:	2200      	movs	r2, #0
 8004c64:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c66:	677a      	str	r2, [r7, #116]	@ 0x74
 8004c68:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004c6c:	4642      	mov	r2, r8
 8004c6e:	464b      	mov	r3, r9
 8004c70:	1891      	adds	r1, r2, r2
 8004c72:	60b9      	str	r1, [r7, #8]
 8004c74:	415b      	adcs	r3, r3
 8004c76:	60fb      	str	r3, [r7, #12]
 8004c78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c7c:	4641      	mov	r1, r8
 8004c7e:	1851      	adds	r1, r2, r1
 8004c80:	6039      	str	r1, [r7, #0]
 8004c82:	4649      	mov	r1, r9
 8004c84:	414b      	adcs	r3, r1
 8004c86:	607b      	str	r3, [r7, #4]
 8004c88:	f04f 0200 	mov.w	r2, #0
 8004c8c:	f04f 0300 	mov.w	r3, #0
 8004c90:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c94:	4659      	mov	r1, fp
 8004c96:	00cb      	lsls	r3, r1, #3
 8004c98:	4651      	mov	r1, sl
 8004c9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c9e:	4651      	mov	r1, sl
 8004ca0:	00ca      	lsls	r2, r1, #3
 8004ca2:	4610      	mov	r0, r2
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	4642      	mov	r2, r8
 8004caa:	189b      	adds	r3, r3, r2
 8004cac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004cae:	464b      	mov	r3, r9
 8004cb0:	460a      	mov	r2, r1
 8004cb2:	eb42 0303 	adc.w	r3, r2, r3
 8004cb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004cc2:	667a      	str	r2, [r7, #100]	@ 0x64
 8004cc4:	f04f 0200 	mov.w	r2, #0
 8004cc8:	f04f 0300 	mov.w	r3, #0
 8004ccc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004cd0:	4649      	mov	r1, r9
 8004cd2:	008b      	lsls	r3, r1, #2
 8004cd4:	4641      	mov	r1, r8
 8004cd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cda:	4641      	mov	r1, r8
 8004cdc:	008a      	lsls	r2, r1, #2
 8004cde:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004ce2:	f7fb facd 	bl	8000280 <__aeabi_uldivmod>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	460b      	mov	r3, r1
 8004cea:	4b0d      	ldr	r3, [pc, #52]	@ (8004d20 <UART_SetConfig+0x4e4>)
 8004cec:	fba3 1302 	umull	r1, r3, r3, r2
 8004cf0:	095b      	lsrs	r3, r3, #5
 8004cf2:	2164      	movs	r1, #100	@ 0x64
 8004cf4:	fb01 f303 	mul.w	r3, r1, r3
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	011b      	lsls	r3, r3, #4
 8004cfc:	3332      	adds	r3, #50	@ 0x32
 8004cfe:	4a08      	ldr	r2, [pc, #32]	@ (8004d20 <UART_SetConfig+0x4e4>)
 8004d00:	fba2 2303 	umull	r2, r3, r2, r3
 8004d04:	095b      	lsrs	r3, r3, #5
 8004d06:	f003 020f 	and.w	r2, r3, #15
 8004d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4422      	add	r2, r4
 8004d12:	609a      	str	r2, [r3, #8]
}
 8004d14:	bf00      	nop
 8004d16:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d20:	51eb851f 	.word	0x51eb851f

08004d24 <_ZdlPvj>:
 8004d24:	f000 b811 	b.w	8004d4a <_ZdlPv>

08004d28 <_Znwj>:
 8004d28:	2801      	cmp	r0, #1
 8004d2a:	bf38      	it	cc
 8004d2c:	2001      	movcc	r0, #1
 8004d2e:	b510      	push	{r4, lr}
 8004d30:	4604      	mov	r4, r0
 8004d32:	4620      	mov	r0, r4
 8004d34:	f000 f81c 	bl	8004d70 <malloc>
 8004d38:	b100      	cbz	r0, 8004d3c <_Znwj+0x14>
 8004d3a:	bd10      	pop	{r4, pc}
 8004d3c:	f000 f808 	bl	8004d50 <_ZSt15get_new_handlerv>
 8004d40:	b908      	cbnz	r0, 8004d46 <_Znwj+0x1e>
 8004d42:	f000 f80d 	bl	8004d60 <abort>
 8004d46:	4780      	blx	r0
 8004d48:	e7f3      	b.n	8004d32 <_Znwj+0xa>

08004d4a <_ZdlPv>:
 8004d4a:	f000 b819 	b.w	8004d80 <free>
	...

08004d50 <_ZSt15get_new_handlerv>:
 8004d50:	4b02      	ldr	r3, [pc, #8]	@ (8004d5c <_ZSt15get_new_handlerv+0xc>)
 8004d52:	6818      	ldr	r0, [r3, #0]
 8004d54:	f3bf 8f5b 	dmb	ish
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	200001b8 	.word	0x200001b8

08004d60 <abort>:
 8004d60:	b508      	push	{r3, lr}
 8004d62:	2006      	movs	r0, #6
 8004d64:	f000 f926 	bl	8004fb4 <raise>
 8004d68:	2001      	movs	r0, #1
 8004d6a:	f7fc fc2b 	bl	80015c4 <_exit>
	...

08004d70 <malloc>:
 8004d70:	4b02      	ldr	r3, [pc, #8]	@ (8004d7c <malloc+0xc>)
 8004d72:	4601      	mov	r1, r0
 8004d74:	6818      	ldr	r0, [r3, #0]
 8004d76:	f000 b82d 	b.w	8004dd4 <_malloc_r>
 8004d7a:	bf00      	nop
 8004d7c:	2000000c 	.word	0x2000000c

08004d80 <free>:
 8004d80:	4b02      	ldr	r3, [pc, #8]	@ (8004d8c <free+0xc>)
 8004d82:	4601      	mov	r1, r0
 8004d84:	6818      	ldr	r0, [r3, #0]
 8004d86:	f000 b96d 	b.w	8005064 <_free_r>
 8004d8a:	bf00      	nop
 8004d8c:	2000000c 	.word	0x2000000c

08004d90 <sbrk_aligned>:
 8004d90:	b570      	push	{r4, r5, r6, lr}
 8004d92:	4e0f      	ldr	r6, [pc, #60]	@ (8004dd0 <sbrk_aligned+0x40>)
 8004d94:	460c      	mov	r4, r1
 8004d96:	6831      	ldr	r1, [r6, #0]
 8004d98:	4605      	mov	r5, r0
 8004d9a:	b911      	cbnz	r1, 8004da2 <sbrk_aligned+0x12>
 8004d9c:	f000 f926 	bl	8004fec <_sbrk_r>
 8004da0:	6030      	str	r0, [r6, #0]
 8004da2:	4621      	mov	r1, r4
 8004da4:	4628      	mov	r0, r5
 8004da6:	f000 f921 	bl	8004fec <_sbrk_r>
 8004daa:	1c43      	adds	r3, r0, #1
 8004dac:	d103      	bne.n	8004db6 <sbrk_aligned+0x26>
 8004dae:	f04f 34ff 	mov.w	r4, #4294967295
 8004db2:	4620      	mov	r0, r4
 8004db4:	bd70      	pop	{r4, r5, r6, pc}
 8004db6:	1cc4      	adds	r4, r0, #3
 8004db8:	f024 0403 	bic.w	r4, r4, #3
 8004dbc:	42a0      	cmp	r0, r4
 8004dbe:	d0f8      	beq.n	8004db2 <sbrk_aligned+0x22>
 8004dc0:	1a21      	subs	r1, r4, r0
 8004dc2:	4628      	mov	r0, r5
 8004dc4:	f000 f912 	bl	8004fec <_sbrk_r>
 8004dc8:	3001      	adds	r0, #1
 8004dca:	d1f2      	bne.n	8004db2 <sbrk_aligned+0x22>
 8004dcc:	e7ef      	b.n	8004dae <sbrk_aligned+0x1e>
 8004dce:	bf00      	nop
 8004dd0:	200001bc 	.word	0x200001bc

08004dd4 <_malloc_r>:
 8004dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dd8:	1ccd      	adds	r5, r1, #3
 8004dda:	f025 0503 	bic.w	r5, r5, #3
 8004dde:	3508      	adds	r5, #8
 8004de0:	2d0c      	cmp	r5, #12
 8004de2:	bf38      	it	cc
 8004de4:	250c      	movcc	r5, #12
 8004de6:	2d00      	cmp	r5, #0
 8004de8:	4606      	mov	r6, r0
 8004dea:	db01      	blt.n	8004df0 <_malloc_r+0x1c>
 8004dec:	42a9      	cmp	r1, r5
 8004dee:	d904      	bls.n	8004dfa <_malloc_r+0x26>
 8004df0:	230c      	movs	r3, #12
 8004df2:	6033      	str	r3, [r6, #0]
 8004df4:	2000      	movs	r0, #0
 8004df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dfa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004ed0 <_malloc_r+0xfc>
 8004dfe:	f000 f869 	bl	8004ed4 <__malloc_lock>
 8004e02:	f8d8 3000 	ldr.w	r3, [r8]
 8004e06:	461c      	mov	r4, r3
 8004e08:	bb44      	cbnz	r4, 8004e5c <_malloc_r+0x88>
 8004e0a:	4629      	mov	r1, r5
 8004e0c:	4630      	mov	r0, r6
 8004e0e:	f7ff ffbf 	bl	8004d90 <sbrk_aligned>
 8004e12:	1c43      	adds	r3, r0, #1
 8004e14:	4604      	mov	r4, r0
 8004e16:	d158      	bne.n	8004eca <_malloc_r+0xf6>
 8004e18:	f8d8 4000 	ldr.w	r4, [r8]
 8004e1c:	4627      	mov	r7, r4
 8004e1e:	2f00      	cmp	r7, #0
 8004e20:	d143      	bne.n	8004eaa <_malloc_r+0xd6>
 8004e22:	2c00      	cmp	r4, #0
 8004e24:	d04b      	beq.n	8004ebe <_malloc_r+0xea>
 8004e26:	6823      	ldr	r3, [r4, #0]
 8004e28:	4639      	mov	r1, r7
 8004e2a:	4630      	mov	r0, r6
 8004e2c:	eb04 0903 	add.w	r9, r4, r3
 8004e30:	f000 f8dc 	bl	8004fec <_sbrk_r>
 8004e34:	4581      	cmp	r9, r0
 8004e36:	d142      	bne.n	8004ebe <_malloc_r+0xea>
 8004e38:	6821      	ldr	r1, [r4, #0]
 8004e3a:	1a6d      	subs	r5, r5, r1
 8004e3c:	4629      	mov	r1, r5
 8004e3e:	4630      	mov	r0, r6
 8004e40:	f7ff ffa6 	bl	8004d90 <sbrk_aligned>
 8004e44:	3001      	adds	r0, #1
 8004e46:	d03a      	beq.n	8004ebe <_malloc_r+0xea>
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	442b      	add	r3, r5
 8004e4c:	6023      	str	r3, [r4, #0]
 8004e4e:	f8d8 3000 	ldr.w	r3, [r8]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	bb62      	cbnz	r2, 8004eb0 <_malloc_r+0xdc>
 8004e56:	f8c8 7000 	str.w	r7, [r8]
 8004e5a:	e00f      	b.n	8004e7c <_malloc_r+0xa8>
 8004e5c:	6822      	ldr	r2, [r4, #0]
 8004e5e:	1b52      	subs	r2, r2, r5
 8004e60:	d420      	bmi.n	8004ea4 <_malloc_r+0xd0>
 8004e62:	2a0b      	cmp	r2, #11
 8004e64:	d917      	bls.n	8004e96 <_malloc_r+0xc2>
 8004e66:	1961      	adds	r1, r4, r5
 8004e68:	42a3      	cmp	r3, r4
 8004e6a:	6025      	str	r5, [r4, #0]
 8004e6c:	bf18      	it	ne
 8004e6e:	6059      	strne	r1, [r3, #4]
 8004e70:	6863      	ldr	r3, [r4, #4]
 8004e72:	bf08      	it	eq
 8004e74:	f8c8 1000 	streq.w	r1, [r8]
 8004e78:	5162      	str	r2, [r4, r5]
 8004e7a:	604b      	str	r3, [r1, #4]
 8004e7c:	4630      	mov	r0, r6
 8004e7e:	f000 f82f 	bl	8004ee0 <__malloc_unlock>
 8004e82:	f104 000b 	add.w	r0, r4, #11
 8004e86:	1d23      	adds	r3, r4, #4
 8004e88:	f020 0007 	bic.w	r0, r0, #7
 8004e8c:	1ac2      	subs	r2, r0, r3
 8004e8e:	bf1c      	itt	ne
 8004e90:	1a1b      	subne	r3, r3, r0
 8004e92:	50a3      	strne	r3, [r4, r2]
 8004e94:	e7af      	b.n	8004df6 <_malloc_r+0x22>
 8004e96:	6862      	ldr	r2, [r4, #4]
 8004e98:	42a3      	cmp	r3, r4
 8004e9a:	bf0c      	ite	eq
 8004e9c:	f8c8 2000 	streq.w	r2, [r8]
 8004ea0:	605a      	strne	r2, [r3, #4]
 8004ea2:	e7eb      	b.n	8004e7c <_malloc_r+0xa8>
 8004ea4:	4623      	mov	r3, r4
 8004ea6:	6864      	ldr	r4, [r4, #4]
 8004ea8:	e7ae      	b.n	8004e08 <_malloc_r+0x34>
 8004eaa:	463c      	mov	r4, r7
 8004eac:	687f      	ldr	r7, [r7, #4]
 8004eae:	e7b6      	b.n	8004e1e <_malloc_r+0x4a>
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	42a3      	cmp	r3, r4
 8004eb6:	d1fb      	bne.n	8004eb0 <_malloc_r+0xdc>
 8004eb8:	2300      	movs	r3, #0
 8004eba:	6053      	str	r3, [r2, #4]
 8004ebc:	e7de      	b.n	8004e7c <_malloc_r+0xa8>
 8004ebe:	230c      	movs	r3, #12
 8004ec0:	6033      	str	r3, [r6, #0]
 8004ec2:	4630      	mov	r0, r6
 8004ec4:	f000 f80c 	bl	8004ee0 <__malloc_unlock>
 8004ec8:	e794      	b.n	8004df4 <_malloc_r+0x20>
 8004eca:	6005      	str	r5, [r0, #0]
 8004ecc:	e7d6      	b.n	8004e7c <_malloc_r+0xa8>
 8004ece:	bf00      	nop
 8004ed0:	200001c0 	.word	0x200001c0

08004ed4 <__malloc_lock>:
 8004ed4:	4801      	ldr	r0, [pc, #4]	@ (8004edc <__malloc_lock+0x8>)
 8004ed6:	f000 b8c3 	b.w	8005060 <__retarget_lock_acquire_recursive>
 8004eda:	bf00      	nop
 8004edc:	20000300 	.word	0x20000300

08004ee0 <__malloc_unlock>:
 8004ee0:	4801      	ldr	r0, [pc, #4]	@ (8004ee8 <__malloc_unlock+0x8>)
 8004ee2:	f000 b8be 	b.w	8005062 <__retarget_lock_release_recursive>
 8004ee6:	bf00      	nop
 8004ee8:	20000300 	.word	0x20000300

08004eec <sniprintf>:
 8004eec:	b40c      	push	{r2, r3}
 8004eee:	b530      	push	{r4, r5, lr}
 8004ef0:	4b17      	ldr	r3, [pc, #92]	@ (8004f50 <sniprintf+0x64>)
 8004ef2:	1e0c      	subs	r4, r1, #0
 8004ef4:	681d      	ldr	r5, [r3, #0]
 8004ef6:	b09d      	sub	sp, #116	@ 0x74
 8004ef8:	da08      	bge.n	8004f0c <sniprintf+0x20>
 8004efa:	238b      	movs	r3, #139	@ 0x8b
 8004efc:	602b      	str	r3, [r5, #0]
 8004efe:	f04f 30ff 	mov.w	r0, #4294967295
 8004f02:	b01d      	add	sp, #116	@ 0x74
 8004f04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f08:	b002      	add	sp, #8
 8004f0a:	4770      	bx	lr
 8004f0c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004f10:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004f14:	bf14      	ite	ne
 8004f16:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004f1a:	4623      	moveq	r3, r4
 8004f1c:	9304      	str	r3, [sp, #16]
 8004f1e:	9307      	str	r3, [sp, #28]
 8004f20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004f24:	9002      	str	r0, [sp, #8]
 8004f26:	9006      	str	r0, [sp, #24]
 8004f28:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004f2c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004f2e:	ab21      	add	r3, sp, #132	@ 0x84
 8004f30:	a902      	add	r1, sp, #8
 8004f32:	4628      	mov	r0, r5
 8004f34:	9301      	str	r3, [sp, #4]
 8004f36:	f000 f93b 	bl	80051b0 <_svfiprintf_r>
 8004f3a:	1c43      	adds	r3, r0, #1
 8004f3c:	bfbc      	itt	lt
 8004f3e:	238b      	movlt	r3, #139	@ 0x8b
 8004f40:	602b      	strlt	r3, [r5, #0]
 8004f42:	2c00      	cmp	r4, #0
 8004f44:	d0dd      	beq.n	8004f02 <sniprintf+0x16>
 8004f46:	9b02      	ldr	r3, [sp, #8]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	701a      	strb	r2, [r3, #0]
 8004f4c:	e7d9      	b.n	8004f02 <sniprintf+0x16>
 8004f4e:	bf00      	nop
 8004f50:	2000000c 	.word	0x2000000c

08004f54 <memset>:
 8004f54:	4402      	add	r2, r0
 8004f56:	4603      	mov	r3, r0
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d100      	bne.n	8004f5e <memset+0xa>
 8004f5c:	4770      	bx	lr
 8004f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f62:	e7f9      	b.n	8004f58 <memset+0x4>

08004f64 <_raise_r>:
 8004f64:	291f      	cmp	r1, #31
 8004f66:	b538      	push	{r3, r4, r5, lr}
 8004f68:	4605      	mov	r5, r0
 8004f6a:	460c      	mov	r4, r1
 8004f6c:	d904      	bls.n	8004f78 <_raise_r+0x14>
 8004f6e:	2316      	movs	r3, #22
 8004f70:	6003      	str	r3, [r0, #0]
 8004f72:	f04f 30ff 	mov.w	r0, #4294967295
 8004f76:	bd38      	pop	{r3, r4, r5, pc}
 8004f78:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004f7a:	b112      	cbz	r2, 8004f82 <_raise_r+0x1e>
 8004f7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004f80:	b94b      	cbnz	r3, 8004f96 <_raise_r+0x32>
 8004f82:	4628      	mov	r0, r5
 8004f84:	f000 f830 	bl	8004fe8 <_getpid_r>
 8004f88:	4622      	mov	r2, r4
 8004f8a:	4601      	mov	r1, r0
 8004f8c:	4628      	mov	r0, r5
 8004f8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f92:	f000 b817 	b.w	8004fc4 <_kill_r>
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d00a      	beq.n	8004fb0 <_raise_r+0x4c>
 8004f9a:	1c59      	adds	r1, r3, #1
 8004f9c:	d103      	bne.n	8004fa6 <_raise_r+0x42>
 8004f9e:	2316      	movs	r3, #22
 8004fa0:	6003      	str	r3, [r0, #0]
 8004fa2:	2001      	movs	r0, #1
 8004fa4:	e7e7      	b.n	8004f76 <_raise_r+0x12>
 8004fa6:	2100      	movs	r1, #0
 8004fa8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004fac:	4620      	mov	r0, r4
 8004fae:	4798      	blx	r3
 8004fb0:	2000      	movs	r0, #0
 8004fb2:	e7e0      	b.n	8004f76 <_raise_r+0x12>

08004fb4 <raise>:
 8004fb4:	4b02      	ldr	r3, [pc, #8]	@ (8004fc0 <raise+0xc>)
 8004fb6:	4601      	mov	r1, r0
 8004fb8:	6818      	ldr	r0, [r3, #0]
 8004fba:	f7ff bfd3 	b.w	8004f64 <_raise_r>
 8004fbe:	bf00      	nop
 8004fc0:	2000000c 	.word	0x2000000c

08004fc4 <_kill_r>:
 8004fc4:	b538      	push	{r3, r4, r5, lr}
 8004fc6:	4d07      	ldr	r5, [pc, #28]	@ (8004fe4 <_kill_r+0x20>)
 8004fc8:	2300      	movs	r3, #0
 8004fca:	4604      	mov	r4, r0
 8004fcc:	4608      	mov	r0, r1
 8004fce:	4611      	mov	r1, r2
 8004fd0:	602b      	str	r3, [r5, #0]
 8004fd2:	f7fc fae7 	bl	80015a4 <_kill>
 8004fd6:	1c43      	adds	r3, r0, #1
 8004fd8:	d102      	bne.n	8004fe0 <_kill_r+0x1c>
 8004fda:	682b      	ldr	r3, [r5, #0]
 8004fdc:	b103      	cbz	r3, 8004fe0 <_kill_r+0x1c>
 8004fde:	6023      	str	r3, [r4, #0]
 8004fe0:	bd38      	pop	{r3, r4, r5, pc}
 8004fe2:	bf00      	nop
 8004fe4:	200002fc 	.word	0x200002fc

08004fe8 <_getpid_r>:
 8004fe8:	f7fc bad4 	b.w	8001594 <_getpid>

08004fec <_sbrk_r>:
 8004fec:	b538      	push	{r3, r4, r5, lr}
 8004fee:	4d06      	ldr	r5, [pc, #24]	@ (8005008 <_sbrk_r+0x1c>)
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	4604      	mov	r4, r0
 8004ff4:	4608      	mov	r0, r1
 8004ff6:	602b      	str	r3, [r5, #0]
 8004ff8:	f7fc faf0 	bl	80015dc <_sbrk>
 8004ffc:	1c43      	adds	r3, r0, #1
 8004ffe:	d102      	bne.n	8005006 <_sbrk_r+0x1a>
 8005000:	682b      	ldr	r3, [r5, #0]
 8005002:	b103      	cbz	r3, 8005006 <_sbrk_r+0x1a>
 8005004:	6023      	str	r3, [r4, #0]
 8005006:	bd38      	pop	{r3, r4, r5, pc}
 8005008:	200002fc 	.word	0x200002fc

0800500c <__errno>:
 800500c:	4b01      	ldr	r3, [pc, #4]	@ (8005014 <__errno+0x8>)
 800500e:	6818      	ldr	r0, [r3, #0]
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	2000000c 	.word	0x2000000c

08005018 <__libc_init_array>:
 8005018:	b570      	push	{r4, r5, r6, lr}
 800501a:	4d0d      	ldr	r5, [pc, #52]	@ (8005050 <__libc_init_array+0x38>)
 800501c:	4c0d      	ldr	r4, [pc, #52]	@ (8005054 <__libc_init_array+0x3c>)
 800501e:	1b64      	subs	r4, r4, r5
 8005020:	10a4      	asrs	r4, r4, #2
 8005022:	2600      	movs	r6, #0
 8005024:	42a6      	cmp	r6, r4
 8005026:	d109      	bne.n	800503c <__libc_init_array+0x24>
 8005028:	4d0b      	ldr	r5, [pc, #44]	@ (8005058 <__libc_init_array+0x40>)
 800502a:	4c0c      	ldr	r4, [pc, #48]	@ (800505c <__libc_init_array+0x44>)
 800502c:	f000 fba8 	bl	8005780 <_init>
 8005030:	1b64      	subs	r4, r4, r5
 8005032:	10a4      	asrs	r4, r4, #2
 8005034:	2600      	movs	r6, #0
 8005036:	42a6      	cmp	r6, r4
 8005038:	d105      	bne.n	8005046 <__libc_init_array+0x2e>
 800503a:	bd70      	pop	{r4, r5, r6, pc}
 800503c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005040:	4798      	blx	r3
 8005042:	3601      	adds	r6, #1
 8005044:	e7ee      	b.n	8005024 <__libc_init_array+0xc>
 8005046:	f855 3b04 	ldr.w	r3, [r5], #4
 800504a:	4798      	blx	r3
 800504c:	3601      	adds	r6, #1
 800504e:	e7f2      	b.n	8005036 <__libc_init_array+0x1e>
 8005050:	08005838 	.word	0x08005838
 8005054:	08005838 	.word	0x08005838
 8005058:	08005838 	.word	0x08005838
 800505c:	0800583c 	.word	0x0800583c

08005060 <__retarget_lock_acquire_recursive>:
 8005060:	4770      	bx	lr

08005062 <__retarget_lock_release_recursive>:
 8005062:	4770      	bx	lr

08005064 <_free_r>:
 8005064:	b538      	push	{r3, r4, r5, lr}
 8005066:	4605      	mov	r5, r0
 8005068:	2900      	cmp	r1, #0
 800506a:	d041      	beq.n	80050f0 <_free_r+0x8c>
 800506c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005070:	1f0c      	subs	r4, r1, #4
 8005072:	2b00      	cmp	r3, #0
 8005074:	bfb8      	it	lt
 8005076:	18e4      	addlt	r4, r4, r3
 8005078:	f7ff ff2c 	bl	8004ed4 <__malloc_lock>
 800507c:	4a1d      	ldr	r2, [pc, #116]	@ (80050f4 <_free_r+0x90>)
 800507e:	6813      	ldr	r3, [r2, #0]
 8005080:	b933      	cbnz	r3, 8005090 <_free_r+0x2c>
 8005082:	6063      	str	r3, [r4, #4]
 8005084:	6014      	str	r4, [r2, #0]
 8005086:	4628      	mov	r0, r5
 8005088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800508c:	f7ff bf28 	b.w	8004ee0 <__malloc_unlock>
 8005090:	42a3      	cmp	r3, r4
 8005092:	d908      	bls.n	80050a6 <_free_r+0x42>
 8005094:	6820      	ldr	r0, [r4, #0]
 8005096:	1821      	adds	r1, r4, r0
 8005098:	428b      	cmp	r3, r1
 800509a:	bf01      	itttt	eq
 800509c:	6819      	ldreq	r1, [r3, #0]
 800509e:	685b      	ldreq	r3, [r3, #4]
 80050a0:	1809      	addeq	r1, r1, r0
 80050a2:	6021      	streq	r1, [r4, #0]
 80050a4:	e7ed      	b.n	8005082 <_free_r+0x1e>
 80050a6:	461a      	mov	r2, r3
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	b10b      	cbz	r3, 80050b0 <_free_r+0x4c>
 80050ac:	42a3      	cmp	r3, r4
 80050ae:	d9fa      	bls.n	80050a6 <_free_r+0x42>
 80050b0:	6811      	ldr	r1, [r2, #0]
 80050b2:	1850      	adds	r0, r2, r1
 80050b4:	42a0      	cmp	r0, r4
 80050b6:	d10b      	bne.n	80050d0 <_free_r+0x6c>
 80050b8:	6820      	ldr	r0, [r4, #0]
 80050ba:	4401      	add	r1, r0
 80050bc:	1850      	adds	r0, r2, r1
 80050be:	4283      	cmp	r3, r0
 80050c0:	6011      	str	r1, [r2, #0]
 80050c2:	d1e0      	bne.n	8005086 <_free_r+0x22>
 80050c4:	6818      	ldr	r0, [r3, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	6053      	str	r3, [r2, #4]
 80050ca:	4408      	add	r0, r1
 80050cc:	6010      	str	r0, [r2, #0]
 80050ce:	e7da      	b.n	8005086 <_free_r+0x22>
 80050d0:	d902      	bls.n	80050d8 <_free_r+0x74>
 80050d2:	230c      	movs	r3, #12
 80050d4:	602b      	str	r3, [r5, #0]
 80050d6:	e7d6      	b.n	8005086 <_free_r+0x22>
 80050d8:	6820      	ldr	r0, [r4, #0]
 80050da:	1821      	adds	r1, r4, r0
 80050dc:	428b      	cmp	r3, r1
 80050de:	bf04      	itt	eq
 80050e0:	6819      	ldreq	r1, [r3, #0]
 80050e2:	685b      	ldreq	r3, [r3, #4]
 80050e4:	6063      	str	r3, [r4, #4]
 80050e6:	bf04      	itt	eq
 80050e8:	1809      	addeq	r1, r1, r0
 80050ea:	6021      	streq	r1, [r4, #0]
 80050ec:	6054      	str	r4, [r2, #4]
 80050ee:	e7ca      	b.n	8005086 <_free_r+0x22>
 80050f0:	bd38      	pop	{r3, r4, r5, pc}
 80050f2:	bf00      	nop
 80050f4:	200001c0 	.word	0x200001c0

080050f8 <__ssputs_r>:
 80050f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050fc:	688e      	ldr	r6, [r1, #8]
 80050fe:	461f      	mov	r7, r3
 8005100:	42be      	cmp	r6, r7
 8005102:	680b      	ldr	r3, [r1, #0]
 8005104:	4682      	mov	sl, r0
 8005106:	460c      	mov	r4, r1
 8005108:	4690      	mov	r8, r2
 800510a:	d82d      	bhi.n	8005168 <__ssputs_r+0x70>
 800510c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005110:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005114:	d026      	beq.n	8005164 <__ssputs_r+0x6c>
 8005116:	6965      	ldr	r5, [r4, #20]
 8005118:	6909      	ldr	r1, [r1, #16]
 800511a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800511e:	eba3 0901 	sub.w	r9, r3, r1
 8005122:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005126:	1c7b      	adds	r3, r7, #1
 8005128:	444b      	add	r3, r9
 800512a:	106d      	asrs	r5, r5, #1
 800512c:	429d      	cmp	r5, r3
 800512e:	bf38      	it	cc
 8005130:	461d      	movcc	r5, r3
 8005132:	0553      	lsls	r3, r2, #21
 8005134:	d527      	bpl.n	8005186 <__ssputs_r+0x8e>
 8005136:	4629      	mov	r1, r5
 8005138:	f7ff fe4c 	bl	8004dd4 <_malloc_r>
 800513c:	4606      	mov	r6, r0
 800513e:	b360      	cbz	r0, 800519a <__ssputs_r+0xa2>
 8005140:	6921      	ldr	r1, [r4, #16]
 8005142:	464a      	mov	r2, r9
 8005144:	f000 fad8 	bl	80056f8 <memcpy>
 8005148:	89a3      	ldrh	r3, [r4, #12]
 800514a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800514e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005152:	81a3      	strh	r3, [r4, #12]
 8005154:	6126      	str	r6, [r4, #16]
 8005156:	6165      	str	r5, [r4, #20]
 8005158:	444e      	add	r6, r9
 800515a:	eba5 0509 	sub.w	r5, r5, r9
 800515e:	6026      	str	r6, [r4, #0]
 8005160:	60a5      	str	r5, [r4, #8]
 8005162:	463e      	mov	r6, r7
 8005164:	42be      	cmp	r6, r7
 8005166:	d900      	bls.n	800516a <__ssputs_r+0x72>
 8005168:	463e      	mov	r6, r7
 800516a:	6820      	ldr	r0, [r4, #0]
 800516c:	4632      	mov	r2, r6
 800516e:	4641      	mov	r1, r8
 8005170:	f000 faa8 	bl	80056c4 <memmove>
 8005174:	68a3      	ldr	r3, [r4, #8]
 8005176:	1b9b      	subs	r3, r3, r6
 8005178:	60a3      	str	r3, [r4, #8]
 800517a:	6823      	ldr	r3, [r4, #0]
 800517c:	4433      	add	r3, r6
 800517e:	6023      	str	r3, [r4, #0]
 8005180:	2000      	movs	r0, #0
 8005182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005186:	462a      	mov	r2, r5
 8005188:	f000 fac4 	bl	8005714 <_realloc_r>
 800518c:	4606      	mov	r6, r0
 800518e:	2800      	cmp	r0, #0
 8005190:	d1e0      	bne.n	8005154 <__ssputs_r+0x5c>
 8005192:	6921      	ldr	r1, [r4, #16]
 8005194:	4650      	mov	r0, sl
 8005196:	f7ff ff65 	bl	8005064 <_free_r>
 800519a:	230c      	movs	r3, #12
 800519c:	f8ca 3000 	str.w	r3, [sl]
 80051a0:	89a3      	ldrh	r3, [r4, #12]
 80051a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051a6:	81a3      	strh	r3, [r4, #12]
 80051a8:	f04f 30ff 	mov.w	r0, #4294967295
 80051ac:	e7e9      	b.n	8005182 <__ssputs_r+0x8a>
	...

080051b0 <_svfiprintf_r>:
 80051b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051b4:	4698      	mov	r8, r3
 80051b6:	898b      	ldrh	r3, [r1, #12]
 80051b8:	061b      	lsls	r3, r3, #24
 80051ba:	b09d      	sub	sp, #116	@ 0x74
 80051bc:	4607      	mov	r7, r0
 80051be:	460d      	mov	r5, r1
 80051c0:	4614      	mov	r4, r2
 80051c2:	d510      	bpl.n	80051e6 <_svfiprintf_r+0x36>
 80051c4:	690b      	ldr	r3, [r1, #16]
 80051c6:	b973      	cbnz	r3, 80051e6 <_svfiprintf_r+0x36>
 80051c8:	2140      	movs	r1, #64	@ 0x40
 80051ca:	f7ff fe03 	bl	8004dd4 <_malloc_r>
 80051ce:	6028      	str	r0, [r5, #0]
 80051d0:	6128      	str	r0, [r5, #16]
 80051d2:	b930      	cbnz	r0, 80051e2 <_svfiprintf_r+0x32>
 80051d4:	230c      	movs	r3, #12
 80051d6:	603b      	str	r3, [r7, #0]
 80051d8:	f04f 30ff 	mov.w	r0, #4294967295
 80051dc:	b01d      	add	sp, #116	@ 0x74
 80051de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051e2:	2340      	movs	r3, #64	@ 0x40
 80051e4:	616b      	str	r3, [r5, #20]
 80051e6:	2300      	movs	r3, #0
 80051e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80051ea:	2320      	movs	r3, #32
 80051ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80051f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80051f4:	2330      	movs	r3, #48	@ 0x30
 80051f6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005394 <_svfiprintf_r+0x1e4>
 80051fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80051fe:	f04f 0901 	mov.w	r9, #1
 8005202:	4623      	mov	r3, r4
 8005204:	469a      	mov	sl, r3
 8005206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800520a:	b10a      	cbz	r2, 8005210 <_svfiprintf_r+0x60>
 800520c:	2a25      	cmp	r2, #37	@ 0x25
 800520e:	d1f9      	bne.n	8005204 <_svfiprintf_r+0x54>
 8005210:	ebba 0b04 	subs.w	fp, sl, r4
 8005214:	d00b      	beq.n	800522e <_svfiprintf_r+0x7e>
 8005216:	465b      	mov	r3, fp
 8005218:	4622      	mov	r2, r4
 800521a:	4629      	mov	r1, r5
 800521c:	4638      	mov	r0, r7
 800521e:	f7ff ff6b 	bl	80050f8 <__ssputs_r>
 8005222:	3001      	adds	r0, #1
 8005224:	f000 80a7 	beq.w	8005376 <_svfiprintf_r+0x1c6>
 8005228:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800522a:	445a      	add	r2, fp
 800522c:	9209      	str	r2, [sp, #36]	@ 0x24
 800522e:	f89a 3000 	ldrb.w	r3, [sl]
 8005232:	2b00      	cmp	r3, #0
 8005234:	f000 809f 	beq.w	8005376 <_svfiprintf_r+0x1c6>
 8005238:	2300      	movs	r3, #0
 800523a:	f04f 32ff 	mov.w	r2, #4294967295
 800523e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005242:	f10a 0a01 	add.w	sl, sl, #1
 8005246:	9304      	str	r3, [sp, #16]
 8005248:	9307      	str	r3, [sp, #28]
 800524a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800524e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005250:	4654      	mov	r4, sl
 8005252:	2205      	movs	r2, #5
 8005254:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005258:	484e      	ldr	r0, [pc, #312]	@ (8005394 <_svfiprintf_r+0x1e4>)
 800525a:	f7fa ffc1 	bl	80001e0 <memchr>
 800525e:	9a04      	ldr	r2, [sp, #16]
 8005260:	b9d8      	cbnz	r0, 800529a <_svfiprintf_r+0xea>
 8005262:	06d0      	lsls	r0, r2, #27
 8005264:	bf44      	itt	mi
 8005266:	2320      	movmi	r3, #32
 8005268:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800526c:	0711      	lsls	r1, r2, #28
 800526e:	bf44      	itt	mi
 8005270:	232b      	movmi	r3, #43	@ 0x2b
 8005272:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005276:	f89a 3000 	ldrb.w	r3, [sl]
 800527a:	2b2a      	cmp	r3, #42	@ 0x2a
 800527c:	d015      	beq.n	80052aa <_svfiprintf_r+0xfa>
 800527e:	9a07      	ldr	r2, [sp, #28]
 8005280:	4654      	mov	r4, sl
 8005282:	2000      	movs	r0, #0
 8005284:	f04f 0c0a 	mov.w	ip, #10
 8005288:	4621      	mov	r1, r4
 800528a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800528e:	3b30      	subs	r3, #48	@ 0x30
 8005290:	2b09      	cmp	r3, #9
 8005292:	d94b      	bls.n	800532c <_svfiprintf_r+0x17c>
 8005294:	b1b0      	cbz	r0, 80052c4 <_svfiprintf_r+0x114>
 8005296:	9207      	str	r2, [sp, #28]
 8005298:	e014      	b.n	80052c4 <_svfiprintf_r+0x114>
 800529a:	eba0 0308 	sub.w	r3, r0, r8
 800529e:	fa09 f303 	lsl.w	r3, r9, r3
 80052a2:	4313      	orrs	r3, r2
 80052a4:	9304      	str	r3, [sp, #16]
 80052a6:	46a2      	mov	sl, r4
 80052a8:	e7d2      	b.n	8005250 <_svfiprintf_r+0xa0>
 80052aa:	9b03      	ldr	r3, [sp, #12]
 80052ac:	1d19      	adds	r1, r3, #4
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	9103      	str	r1, [sp, #12]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	bfbb      	ittet	lt
 80052b6:	425b      	neglt	r3, r3
 80052b8:	f042 0202 	orrlt.w	r2, r2, #2
 80052bc:	9307      	strge	r3, [sp, #28]
 80052be:	9307      	strlt	r3, [sp, #28]
 80052c0:	bfb8      	it	lt
 80052c2:	9204      	strlt	r2, [sp, #16]
 80052c4:	7823      	ldrb	r3, [r4, #0]
 80052c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80052c8:	d10a      	bne.n	80052e0 <_svfiprintf_r+0x130>
 80052ca:	7863      	ldrb	r3, [r4, #1]
 80052cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80052ce:	d132      	bne.n	8005336 <_svfiprintf_r+0x186>
 80052d0:	9b03      	ldr	r3, [sp, #12]
 80052d2:	1d1a      	adds	r2, r3, #4
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	9203      	str	r2, [sp, #12]
 80052d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80052dc:	3402      	adds	r4, #2
 80052de:	9305      	str	r3, [sp, #20]
 80052e0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80053a4 <_svfiprintf_r+0x1f4>
 80052e4:	7821      	ldrb	r1, [r4, #0]
 80052e6:	2203      	movs	r2, #3
 80052e8:	4650      	mov	r0, sl
 80052ea:	f7fa ff79 	bl	80001e0 <memchr>
 80052ee:	b138      	cbz	r0, 8005300 <_svfiprintf_r+0x150>
 80052f0:	9b04      	ldr	r3, [sp, #16]
 80052f2:	eba0 000a 	sub.w	r0, r0, sl
 80052f6:	2240      	movs	r2, #64	@ 0x40
 80052f8:	4082      	lsls	r2, r0
 80052fa:	4313      	orrs	r3, r2
 80052fc:	3401      	adds	r4, #1
 80052fe:	9304      	str	r3, [sp, #16]
 8005300:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005304:	4824      	ldr	r0, [pc, #144]	@ (8005398 <_svfiprintf_r+0x1e8>)
 8005306:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800530a:	2206      	movs	r2, #6
 800530c:	f7fa ff68 	bl	80001e0 <memchr>
 8005310:	2800      	cmp	r0, #0
 8005312:	d036      	beq.n	8005382 <_svfiprintf_r+0x1d2>
 8005314:	4b21      	ldr	r3, [pc, #132]	@ (800539c <_svfiprintf_r+0x1ec>)
 8005316:	bb1b      	cbnz	r3, 8005360 <_svfiprintf_r+0x1b0>
 8005318:	9b03      	ldr	r3, [sp, #12]
 800531a:	3307      	adds	r3, #7
 800531c:	f023 0307 	bic.w	r3, r3, #7
 8005320:	3308      	adds	r3, #8
 8005322:	9303      	str	r3, [sp, #12]
 8005324:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005326:	4433      	add	r3, r6
 8005328:	9309      	str	r3, [sp, #36]	@ 0x24
 800532a:	e76a      	b.n	8005202 <_svfiprintf_r+0x52>
 800532c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005330:	460c      	mov	r4, r1
 8005332:	2001      	movs	r0, #1
 8005334:	e7a8      	b.n	8005288 <_svfiprintf_r+0xd8>
 8005336:	2300      	movs	r3, #0
 8005338:	3401      	adds	r4, #1
 800533a:	9305      	str	r3, [sp, #20]
 800533c:	4619      	mov	r1, r3
 800533e:	f04f 0c0a 	mov.w	ip, #10
 8005342:	4620      	mov	r0, r4
 8005344:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005348:	3a30      	subs	r2, #48	@ 0x30
 800534a:	2a09      	cmp	r2, #9
 800534c:	d903      	bls.n	8005356 <_svfiprintf_r+0x1a6>
 800534e:	2b00      	cmp	r3, #0
 8005350:	d0c6      	beq.n	80052e0 <_svfiprintf_r+0x130>
 8005352:	9105      	str	r1, [sp, #20]
 8005354:	e7c4      	b.n	80052e0 <_svfiprintf_r+0x130>
 8005356:	fb0c 2101 	mla	r1, ip, r1, r2
 800535a:	4604      	mov	r4, r0
 800535c:	2301      	movs	r3, #1
 800535e:	e7f0      	b.n	8005342 <_svfiprintf_r+0x192>
 8005360:	ab03      	add	r3, sp, #12
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	462a      	mov	r2, r5
 8005366:	4b0e      	ldr	r3, [pc, #56]	@ (80053a0 <_svfiprintf_r+0x1f0>)
 8005368:	a904      	add	r1, sp, #16
 800536a:	4638      	mov	r0, r7
 800536c:	f3af 8000 	nop.w
 8005370:	1c42      	adds	r2, r0, #1
 8005372:	4606      	mov	r6, r0
 8005374:	d1d6      	bne.n	8005324 <_svfiprintf_r+0x174>
 8005376:	89ab      	ldrh	r3, [r5, #12]
 8005378:	065b      	lsls	r3, r3, #25
 800537a:	f53f af2d 	bmi.w	80051d8 <_svfiprintf_r+0x28>
 800537e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005380:	e72c      	b.n	80051dc <_svfiprintf_r+0x2c>
 8005382:	ab03      	add	r3, sp, #12
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	462a      	mov	r2, r5
 8005388:	4b05      	ldr	r3, [pc, #20]	@ (80053a0 <_svfiprintf_r+0x1f0>)
 800538a:	a904      	add	r1, sp, #16
 800538c:	4638      	mov	r0, r7
 800538e:	f000 f879 	bl	8005484 <_printf_i>
 8005392:	e7ed      	b.n	8005370 <_svfiprintf_r+0x1c0>
 8005394:	080057fc 	.word	0x080057fc
 8005398:	08005806 	.word	0x08005806
 800539c:	00000000 	.word	0x00000000
 80053a0:	080050f9 	.word	0x080050f9
 80053a4:	08005802 	.word	0x08005802

080053a8 <_printf_common>:
 80053a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053ac:	4616      	mov	r6, r2
 80053ae:	4698      	mov	r8, r3
 80053b0:	688a      	ldr	r2, [r1, #8]
 80053b2:	690b      	ldr	r3, [r1, #16]
 80053b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80053b8:	4293      	cmp	r3, r2
 80053ba:	bfb8      	it	lt
 80053bc:	4613      	movlt	r3, r2
 80053be:	6033      	str	r3, [r6, #0]
 80053c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80053c4:	4607      	mov	r7, r0
 80053c6:	460c      	mov	r4, r1
 80053c8:	b10a      	cbz	r2, 80053ce <_printf_common+0x26>
 80053ca:	3301      	adds	r3, #1
 80053cc:	6033      	str	r3, [r6, #0]
 80053ce:	6823      	ldr	r3, [r4, #0]
 80053d0:	0699      	lsls	r1, r3, #26
 80053d2:	bf42      	ittt	mi
 80053d4:	6833      	ldrmi	r3, [r6, #0]
 80053d6:	3302      	addmi	r3, #2
 80053d8:	6033      	strmi	r3, [r6, #0]
 80053da:	6825      	ldr	r5, [r4, #0]
 80053dc:	f015 0506 	ands.w	r5, r5, #6
 80053e0:	d106      	bne.n	80053f0 <_printf_common+0x48>
 80053e2:	f104 0a19 	add.w	sl, r4, #25
 80053e6:	68e3      	ldr	r3, [r4, #12]
 80053e8:	6832      	ldr	r2, [r6, #0]
 80053ea:	1a9b      	subs	r3, r3, r2
 80053ec:	42ab      	cmp	r3, r5
 80053ee:	dc26      	bgt.n	800543e <_printf_common+0x96>
 80053f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80053f4:	6822      	ldr	r2, [r4, #0]
 80053f6:	3b00      	subs	r3, #0
 80053f8:	bf18      	it	ne
 80053fa:	2301      	movne	r3, #1
 80053fc:	0692      	lsls	r2, r2, #26
 80053fe:	d42b      	bmi.n	8005458 <_printf_common+0xb0>
 8005400:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005404:	4641      	mov	r1, r8
 8005406:	4638      	mov	r0, r7
 8005408:	47c8      	blx	r9
 800540a:	3001      	adds	r0, #1
 800540c:	d01e      	beq.n	800544c <_printf_common+0xa4>
 800540e:	6823      	ldr	r3, [r4, #0]
 8005410:	6922      	ldr	r2, [r4, #16]
 8005412:	f003 0306 	and.w	r3, r3, #6
 8005416:	2b04      	cmp	r3, #4
 8005418:	bf02      	ittt	eq
 800541a:	68e5      	ldreq	r5, [r4, #12]
 800541c:	6833      	ldreq	r3, [r6, #0]
 800541e:	1aed      	subeq	r5, r5, r3
 8005420:	68a3      	ldr	r3, [r4, #8]
 8005422:	bf0c      	ite	eq
 8005424:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005428:	2500      	movne	r5, #0
 800542a:	4293      	cmp	r3, r2
 800542c:	bfc4      	itt	gt
 800542e:	1a9b      	subgt	r3, r3, r2
 8005430:	18ed      	addgt	r5, r5, r3
 8005432:	2600      	movs	r6, #0
 8005434:	341a      	adds	r4, #26
 8005436:	42b5      	cmp	r5, r6
 8005438:	d11a      	bne.n	8005470 <_printf_common+0xc8>
 800543a:	2000      	movs	r0, #0
 800543c:	e008      	b.n	8005450 <_printf_common+0xa8>
 800543e:	2301      	movs	r3, #1
 8005440:	4652      	mov	r2, sl
 8005442:	4641      	mov	r1, r8
 8005444:	4638      	mov	r0, r7
 8005446:	47c8      	blx	r9
 8005448:	3001      	adds	r0, #1
 800544a:	d103      	bne.n	8005454 <_printf_common+0xac>
 800544c:	f04f 30ff 	mov.w	r0, #4294967295
 8005450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005454:	3501      	adds	r5, #1
 8005456:	e7c6      	b.n	80053e6 <_printf_common+0x3e>
 8005458:	18e1      	adds	r1, r4, r3
 800545a:	1c5a      	adds	r2, r3, #1
 800545c:	2030      	movs	r0, #48	@ 0x30
 800545e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005462:	4422      	add	r2, r4
 8005464:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005468:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800546c:	3302      	adds	r3, #2
 800546e:	e7c7      	b.n	8005400 <_printf_common+0x58>
 8005470:	2301      	movs	r3, #1
 8005472:	4622      	mov	r2, r4
 8005474:	4641      	mov	r1, r8
 8005476:	4638      	mov	r0, r7
 8005478:	47c8      	blx	r9
 800547a:	3001      	adds	r0, #1
 800547c:	d0e6      	beq.n	800544c <_printf_common+0xa4>
 800547e:	3601      	adds	r6, #1
 8005480:	e7d9      	b.n	8005436 <_printf_common+0x8e>
	...

08005484 <_printf_i>:
 8005484:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005488:	7e0f      	ldrb	r7, [r1, #24]
 800548a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800548c:	2f78      	cmp	r7, #120	@ 0x78
 800548e:	4691      	mov	r9, r2
 8005490:	4680      	mov	r8, r0
 8005492:	460c      	mov	r4, r1
 8005494:	469a      	mov	sl, r3
 8005496:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800549a:	d807      	bhi.n	80054ac <_printf_i+0x28>
 800549c:	2f62      	cmp	r7, #98	@ 0x62
 800549e:	d80a      	bhi.n	80054b6 <_printf_i+0x32>
 80054a0:	2f00      	cmp	r7, #0
 80054a2:	f000 80d2 	beq.w	800564a <_printf_i+0x1c6>
 80054a6:	2f58      	cmp	r7, #88	@ 0x58
 80054a8:	f000 80b9 	beq.w	800561e <_printf_i+0x19a>
 80054ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80054b4:	e03a      	b.n	800552c <_printf_i+0xa8>
 80054b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80054ba:	2b15      	cmp	r3, #21
 80054bc:	d8f6      	bhi.n	80054ac <_printf_i+0x28>
 80054be:	a101      	add	r1, pc, #4	@ (adr r1, 80054c4 <_printf_i+0x40>)
 80054c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054c4:	0800551d 	.word	0x0800551d
 80054c8:	08005531 	.word	0x08005531
 80054cc:	080054ad 	.word	0x080054ad
 80054d0:	080054ad 	.word	0x080054ad
 80054d4:	080054ad 	.word	0x080054ad
 80054d8:	080054ad 	.word	0x080054ad
 80054dc:	08005531 	.word	0x08005531
 80054e0:	080054ad 	.word	0x080054ad
 80054e4:	080054ad 	.word	0x080054ad
 80054e8:	080054ad 	.word	0x080054ad
 80054ec:	080054ad 	.word	0x080054ad
 80054f0:	08005631 	.word	0x08005631
 80054f4:	0800555b 	.word	0x0800555b
 80054f8:	080055eb 	.word	0x080055eb
 80054fc:	080054ad 	.word	0x080054ad
 8005500:	080054ad 	.word	0x080054ad
 8005504:	08005653 	.word	0x08005653
 8005508:	080054ad 	.word	0x080054ad
 800550c:	0800555b 	.word	0x0800555b
 8005510:	080054ad 	.word	0x080054ad
 8005514:	080054ad 	.word	0x080054ad
 8005518:	080055f3 	.word	0x080055f3
 800551c:	6833      	ldr	r3, [r6, #0]
 800551e:	1d1a      	adds	r2, r3, #4
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	6032      	str	r2, [r6, #0]
 8005524:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005528:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800552c:	2301      	movs	r3, #1
 800552e:	e09d      	b.n	800566c <_printf_i+0x1e8>
 8005530:	6833      	ldr	r3, [r6, #0]
 8005532:	6820      	ldr	r0, [r4, #0]
 8005534:	1d19      	adds	r1, r3, #4
 8005536:	6031      	str	r1, [r6, #0]
 8005538:	0606      	lsls	r6, r0, #24
 800553a:	d501      	bpl.n	8005540 <_printf_i+0xbc>
 800553c:	681d      	ldr	r5, [r3, #0]
 800553e:	e003      	b.n	8005548 <_printf_i+0xc4>
 8005540:	0645      	lsls	r5, r0, #25
 8005542:	d5fb      	bpl.n	800553c <_printf_i+0xb8>
 8005544:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005548:	2d00      	cmp	r5, #0
 800554a:	da03      	bge.n	8005554 <_printf_i+0xd0>
 800554c:	232d      	movs	r3, #45	@ 0x2d
 800554e:	426d      	negs	r5, r5
 8005550:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005554:	4859      	ldr	r0, [pc, #356]	@ (80056bc <_printf_i+0x238>)
 8005556:	230a      	movs	r3, #10
 8005558:	e011      	b.n	800557e <_printf_i+0xfa>
 800555a:	6821      	ldr	r1, [r4, #0]
 800555c:	6833      	ldr	r3, [r6, #0]
 800555e:	0608      	lsls	r0, r1, #24
 8005560:	f853 5b04 	ldr.w	r5, [r3], #4
 8005564:	d402      	bmi.n	800556c <_printf_i+0xe8>
 8005566:	0649      	lsls	r1, r1, #25
 8005568:	bf48      	it	mi
 800556a:	b2ad      	uxthmi	r5, r5
 800556c:	2f6f      	cmp	r7, #111	@ 0x6f
 800556e:	4853      	ldr	r0, [pc, #332]	@ (80056bc <_printf_i+0x238>)
 8005570:	6033      	str	r3, [r6, #0]
 8005572:	bf14      	ite	ne
 8005574:	230a      	movne	r3, #10
 8005576:	2308      	moveq	r3, #8
 8005578:	2100      	movs	r1, #0
 800557a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800557e:	6866      	ldr	r6, [r4, #4]
 8005580:	60a6      	str	r6, [r4, #8]
 8005582:	2e00      	cmp	r6, #0
 8005584:	bfa2      	ittt	ge
 8005586:	6821      	ldrge	r1, [r4, #0]
 8005588:	f021 0104 	bicge.w	r1, r1, #4
 800558c:	6021      	strge	r1, [r4, #0]
 800558e:	b90d      	cbnz	r5, 8005594 <_printf_i+0x110>
 8005590:	2e00      	cmp	r6, #0
 8005592:	d04b      	beq.n	800562c <_printf_i+0x1a8>
 8005594:	4616      	mov	r6, r2
 8005596:	fbb5 f1f3 	udiv	r1, r5, r3
 800559a:	fb03 5711 	mls	r7, r3, r1, r5
 800559e:	5dc7      	ldrb	r7, [r0, r7]
 80055a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80055a4:	462f      	mov	r7, r5
 80055a6:	42bb      	cmp	r3, r7
 80055a8:	460d      	mov	r5, r1
 80055aa:	d9f4      	bls.n	8005596 <_printf_i+0x112>
 80055ac:	2b08      	cmp	r3, #8
 80055ae:	d10b      	bne.n	80055c8 <_printf_i+0x144>
 80055b0:	6823      	ldr	r3, [r4, #0]
 80055b2:	07df      	lsls	r7, r3, #31
 80055b4:	d508      	bpl.n	80055c8 <_printf_i+0x144>
 80055b6:	6923      	ldr	r3, [r4, #16]
 80055b8:	6861      	ldr	r1, [r4, #4]
 80055ba:	4299      	cmp	r1, r3
 80055bc:	bfde      	ittt	le
 80055be:	2330      	movle	r3, #48	@ 0x30
 80055c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80055c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80055c8:	1b92      	subs	r2, r2, r6
 80055ca:	6122      	str	r2, [r4, #16]
 80055cc:	f8cd a000 	str.w	sl, [sp]
 80055d0:	464b      	mov	r3, r9
 80055d2:	aa03      	add	r2, sp, #12
 80055d4:	4621      	mov	r1, r4
 80055d6:	4640      	mov	r0, r8
 80055d8:	f7ff fee6 	bl	80053a8 <_printf_common>
 80055dc:	3001      	adds	r0, #1
 80055de:	d14a      	bne.n	8005676 <_printf_i+0x1f2>
 80055e0:	f04f 30ff 	mov.w	r0, #4294967295
 80055e4:	b004      	add	sp, #16
 80055e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055ea:	6823      	ldr	r3, [r4, #0]
 80055ec:	f043 0320 	orr.w	r3, r3, #32
 80055f0:	6023      	str	r3, [r4, #0]
 80055f2:	4833      	ldr	r0, [pc, #204]	@ (80056c0 <_printf_i+0x23c>)
 80055f4:	2778      	movs	r7, #120	@ 0x78
 80055f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80055fa:	6823      	ldr	r3, [r4, #0]
 80055fc:	6831      	ldr	r1, [r6, #0]
 80055fe:	061f      	lsls	r7, r3, #24
 8005600:	f851 5b04 	ldr.w	r5, [r1], #4
 8005604:	d402      	bmi.n	800560c <_printf_i+0x188>
 8005606:	065f      	lsls	r7, r3, #25
 8005608:	bf48      	it	mi
 800560a:	b2ad      	uxthmi	r5, r5
 800560c:	6031      	str	r1, [r6, #0]
 800560e:	07d9      	lsls	r1, r3, #31
 8005610:	bf44      	itt	mi
 8005612:	f043 0320 	orrmi.w	r3, r3, #32
 8005616:	6023      	strmi	r3, [r4, #0]
 8005618:	b11d      	cbz	r5, 8005622 <_printf_i+0x19e>
 800561a:	2310      	movs	r3, #16
 800561c:	e7ac      	b.n	8005578 <_printf_i+0xf4>
 800561e:	4827      	ldr	r0, [pc, #156]	@ (80056bc <_printf_i+0x238>)
 8005620:	e7e9      	b.n	80055f6 <_printf_i+0x172>
 8005622:	6823      	ldr	r3, [r4, #0]
 8005624:	f023 0320 	bic.w	r3, r3, #32
 8005628:	6023      	str	r3, [r4, #0]
 800562a:	e7f6      	b.n	800561a <_printf_i+0x196>
 800562c:	4616      	mov	r6, r2
 800562e:	e7bd      	b.n	80055ac <_printf_i+0x128>
 8005630:	6833      	ldr	r3, [r6, #0]
 8005632:	6825      	ldr	r5, [r4, #0]
 8005634:	6961      	ldr	r1, [r4, #20]
 8005636:	1d18      	adds	r0, r3, #4
 8005638:	6030      	str	r0, [r6, #0]
 800563a:	062e      	lsls	r6, r5, #24
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	d501      	bpl.n	8005644 <_printf_i+0x1c0>
 8005640:	6019      	str	r1, [r3, #0]
 8005642:	e002      	b.n	800564a <_printf_i+0x1c6>
 8005644:	0668      	lsls	r0, r5, #25
 8005646:	d5fb      	bpl.n	8005640 <_printf_i+0x1bc>
 8005648:	8019      	strh	r1, [r3, #0]
 800564a:	2300      	movs	r3, #0
 800564c:	6123      	str	r3, [r4, #16]
 800564e:	4616      	mov	r6, r2
 8005650:	e7bc      	b.n	80055cc <_printf_i+0x148>
 8005652:	6833      	ldr	r3, [r6, #0]
 8005654:	1d1a      	adds	r2, r3, #4
 8005656:	6032      	str	r2, [r6, #0]
 8005658:	681e      	ldr	r6, [r3, #0]
 800565a:	6862      	ldr	r2, [r4, #4]
 800565c:	2100      	movs	r1, #0
 800565e:	4630      	mov	r0, r6
 8005660:	f7fa fdbe 	bl	80001e0 <memchr>
 8005664:	b108      	cbz	r0, 800566a <_printf_i+0x1e6>
 8005666:	1b80      	subs	r0, r0, r6
 8005668:	6060      	str	r0, [r4, #4]
 800566a:	6863      	ldr	r3, [r4, #4]
 800566c:	6123      	str	r3, [r4, #16]
 800566e:	2300      	movs	r3, #0
 8005670:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005674:	e7aa      	b.n	80055cc <_printf_i+0x148>
 8005676:	6923      	ldr	r3, [r4, #16]
 8005678:	4632      	mov	r2, r6
 800567a:	4649      	mov	r1, r9
 800567c:	4640      	mov	r0, r8
 800567e:	47d0      	blx	sl
 8005680:	3001      	adds	r0, #1
 8005682:	d0ad      	beq.n	80055e0 <_printf_i+0x15c>
 8005684:	6823      	ldr	r3, [r4, #0]
 8005686:	079b      	lsls	r3, r3, #30
 8005688:	d413      	bmi.n	80056b2 <_printf_i+0x22e>
 800568a:	68e0      	ldr	r0, [r4, #12]
 800568c:	9b03      	ldr	r3, [sp, #12]
 800568e:	4298      	cmp	r0, r3
 8005690:	bfb8      	it	lt
 8005692:	4618      	movlt	r0, r3
 8005694:	e7a6      	b.n	80055e4 <_printf_i+0x160>
 8005696:	2301      	movs	r3, #1
 8005698:	4632      	mov	r2, r6
 800569a:	4649      	mov	r1, r9
 800569c:	4640      	mov	r0, r8
 800569e:	47d0      	blx	sl
 80056a0:	3001      	adds	r0, #1
 80056a2:	d09d      	beq.n	80055e0 <_printf_i+0x15c>
 80056a4:	3501      	adds	r5, #1
 80056a6:	68e3      	ldr	r3, [r4, #12]
 80056a8:	9903      	ldr	r1, [sp, #12]
 80056aa:	1a5b      	subs	r3, r3, r1
 80056ac:	42ab      	cmp	r3, r5
 80056ae:	dcf2      	bgt.n	8005696 <_printf_i+0x212>
 80056b0:	e7eb      	b.n	800568a <_printf_i+0x206>
 80056b2:	2500      	movs	r5, #0
 80056b4:	f104 0619 	add.w	r6, r4, #25
 80056b8:	e7f5      	b.n	80056a6 <_printf_i+0x222>
 80056ba:	bf00      	nop
 80056bc:	0800580d 	.word	0x0800580d
 80056c0:	0800581e 	.word	0x0800581e

080056c4 <memmove>:
 80056c4:	4288      	cmp	r0, r1
 80056c6:	b510      	push	{r4, lr}
 80056c8:	eb01 0402 	add.w	r4, r1, r2
 80056cc:	d902      	bls.n	80056d4 <memmove+0x10>
 80056ce:	4284      	cmp	r4, r0
 80056d0:	4623      	mov	r3, r4
 80056d2:	d807      	bhi.n	80056e4 <memmove+0x20>
 80056d4:	1e43      	subs	r3, r0, #1
 80056d6:	42a1      	cmp	r1, r4
 80056d8:	d008      	beq.n	80056ec <memmove+0x28>
 80056da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80056e2:	e7f8      	b.n	80056d6 <memmove+0x12>
 80056e4:	4402      	add	r2, r0
 80056e6:	4601      	mov	r1, r0
 80056e8:	428a      	cmp	r2, r1
 80056ea:	d100      	bne.n	80056ee <memmove+0x2a>
 80056ec:	bd10      	pop	{r4, pc}
 80056ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80056f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80056f6:	e7f7      	b.n	80056e8 <memmove+0x24>

080056f8 <memcpy>:
 80056f8:	440a      	add	r2, r1
 80056fa:	4291      	cmp	r1, r2
 80056fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005700:	d100      	bne.n	8005704 <memcpy+0xc>
 8005702:	4770      	bx	lr
 8005704:	b510      	push	{r4, lr}
 8005706:	f811 4b01 	ldrb.w	r4, [r1], #1
 800570a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800570e:	4291      	cmp	r1, r2
 8005710:	d1f9      	bne.n	8005706 <memcpy+0xe>
 8005712:	bd10      	pop	{r4, pc}

08005714 <_realloc_r>:
 8005714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005718:	4680      	mov	r8, r0
 800571a:	4615      	mov	r5, r2
 800571c:	460c      	mov	r4, r1
 800571e:	b921      	cbnz	r1, 800572a <_realloc_r+0x16>
 8005720:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005724:	4611      	mov	r1, r2
 8005726:	f7ff bb55 	b.w	8004dd4 <_malloc_r>
 800572a:	b92a      	cbnz	r2, 8005738 <_realloc_r+0x24>
 800572c:	f7ff fc9a 	bl	8005064 <_free_r>
 8005730:	2400      	movs	r4, #0
 8005732:	4620      	mov	r0, r4
 8005734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005738:	f000 f81a 	bl	8005770 <_malloc_usable_size_r>
 800573c:	4285      	cmp	r5, r0
 800573e:	4606      	mov	r6, r0
 8005740:	d802      	bhi.n	8005748 <_realloc_r+0x34>
 8005742:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005746:	d8f4      	bhi.n	8005732 <_realloc_r+0x1e>
 8005748:	4629      	mov	r1, r5
 800574a:	4640      	mov	r0, r8
 800574c:	f7ff fb42 	bl	8004dd4 <_malloc_r>
 8005750:	4607      	mov	r7, r0
 8005752:	2800      	cmp	r0, #0
 8005754:	d0ec      	beq.n	8005730 <_realloc_r+0x1c>
 8005756:	42b5      	cmp	r5, r6
 8005758:	462a      	mov	r2, r5
 800575a:	4621      	mov	r1, r4
 800575c:	bf28      	it	cs
 800575e:	4632      	movcs	r2, r6
 8005760:	f7ff ffca 	bl	80056f8 <memcpy>
 8005764:	4621      	mov	r1, r4
 8005766:	4640      	mov	r0, r8
 8005768:	f7ff fc7c 	bl	8005064 <_free_r>
 800576c:	463c      	mov	r4, r7
 800576e:	e7e0      	b.n	8005732 <_realloc_r+0x1e>

08005770 <_malloc_usable_size_r>:
 8005770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005774:	1f18      	subs	r0, r3, #4
 8005776:	2b00      	cmp	r3, #0
 8005778:	bfbc      	itt	lt
 800577a:	580b      	ldrlt	r3, [r1, r0]
 800577c:	18c0      	addlt	r0, r0, r3
 800577e:	4770      	bx	lr

08005780 <_init>:
 8005780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005782:	bf00      	nop
 8005784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005786:	bc08      	pop	{r3}
 8005788:	469e      	mov	lr, r3
 800578a:	4770      	bx	lr

0800578c <_fini>:
 800578c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800578e:	bf00      	nop
 8005790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005792:	bc08      	pop	{r3}
 8005794:	469e      	mov	lr, r3
 8005796:	4770      	bx	lr
