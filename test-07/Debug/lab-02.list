
lab-02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cec  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003e74  08003e74  00004e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ebc  08003ebc  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003ebc  08003ebc  00004ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ec4  08003ec4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ec4  08003ec4  00004ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ec8  08003ec8  00004ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003ecc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  08003ed8  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08003ed8  00005100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eaa8  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cba  00000000  00000000  00013ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  000157a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b0e  00000000  00000000  000165b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000266d8  00000000  00000000  000170c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001057a  00000000  00000000  0003d79e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1db1  00000000  00000000  0004dd18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013fac9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ba4  00000000  00000000  0013fb0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  001436b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003e5c 	.word	0x08003e5c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003e5c 	.word	0x08003e5c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004be:	f000 fa94 	bl	80009ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c2:	f000 f835 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c6:	f000 f90f 	bl	80006e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ca:	f000 f8dd 	bl	8000688 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80004ce:	f000 f881 	bl	80005d4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80004d2:	2100      	movs	r1, #0
 80004d4:	4814      	ldr	r0, [pc, #80]	@ (8000528 <main+0x70>)
 80004d6:	f002 f941 	bl	800275c <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80004da:	2201      	movs	r2, #1
 80004dc:	2140      	movs	r1, #64	@ 0x40
 80004de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004e2:	f000 fdab 	bl	800103c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80004e6:	2201      	movs	r2, #1
 80004e8:	2180      	movs	r1, #128	@ 0x80
 80004ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004ee:	f000 fda5 	bl	800103c <HAL_GPIO_WritePin>

  int32_t auto_reload_value = htim2.Init.Period;
 80004f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000528 <main+0x70>)
 80004f4:	68db      	ldr	r3, [r3, #12]
 80004f6:	60fb      	str	r3, [r7, #12]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  duty_cycle = 20;
 80004f8:	2314      	movs	r3, #20
 80004fa:	60bb      	str	r3, [r7, #8]
	  compare_value = (100-duty_cycle)*auto_reload_value/100;
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8000502:	68fa      	ldr	r2, [r7, #12]
 8000504:	fb02 f303 	mul.w	r3, r2, r3
 8000508:	4a08      	ldr	r2, [pc, #32]	@ (800052c <main+0x74>)
 800050a:	fb82 1203 	smull	r1, r2, r2, r3
 800050e:	1152      	asrs	r2, r2, #5
 8000510:	17db      	asrs	r3, r3, #31
 8000512:	1ad3      	subs	r3, r2, r3
 8000514:	607b      	str	r3, [r7, #4]

	  //sprintf(buffer,"Values: %i percent = %i/%i.\r\n", duty_cycle, compare_value, auto_reload_value);
	  //HAL_UART_Transmit(&huart2, (uint8_t*)buffer, 50, HAL_MAX_DELAY);

	  // Update duty
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, compare_value);
 8000516:	4b04      	ldr	r3, [pc, #16]	@ (8000528 <main+0x70>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	687a      	ldr	r2, [r7, #4]
 800051c:	635a      	str	r2, [r3, #52]	@ 0x34

	  // Only update PWM every...
	  HAL_Delay(100);
 800051e:	2064      	movs	r0, #100	@ 0x64
 8000520:	f000 fad8 	bl	8000ad4 <HAL_Delay>
	  duty_cycle = 20;
 8000524:	bf00      	nop
 8000526:	e7e7      	b.n	80004f8 <main+0x40>
 8000528:	20000028 	.word	0x20000028
 800052c:	51eb851f 	.word	0x51eb851f

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b096      	sub	sp, #88	@ 0x58
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0314 	add.w	r3, r7, #20
 800053a:	2244      	movs	r2, #68	@ 0x44
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f003 fc5f 	bl	8003e02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	463b      	mov	r3, r7
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
 8000550:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000552:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000556:	f000 fd97 	bl	8001088 <HAL_PWREx_ControlVoltageScaling>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000560:	f000 f900 	bl	8000764 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000564:	2302      	movs	r3, #2
 8000566:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000568:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800056c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056e:	2310      	movs	r3, #16
 8000570:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000572:	2302      	movs	r3, #2
 8000574:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000576:	2302      	movs	r3, #2
 8000578:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800057a:	2301      	movs	r3, #1
 800057c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800057e:	230a      	movs	r3, #10
 8000580:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000582:	2307      	movs	r3, #7
 8000584:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000586:	2302      	movs	r3, #2
 8000588:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800058a:	2302      	movs	r3, #2
 800058c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058e:	f107 0314 	add.w	r3, r7, #20
 8000592:	4618      	mov	r0, r3
 8000594:	f000 fdce 	bl	8001134 <HAL_RCC_OscConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800059e:	f000 f8e1 	bl	8000764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a2:	230f      	movs	r3, #15
 80005a4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a6:	2303      	movs	r3, #3
 80005a8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005b6:	463b      	mov	r3, r7
 80005b8:	2104      	movs	r1, #4
 80005ba:	4618      	mov	r0, r3
 80005bc:	f001 f996 	bl	80018ec <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005c6:	f000 f8cd 	bl	8000764 <Error_Handler>
  }
}
 80005ca:	bf00      	nop
 80005cc:	3758      	adds	r7, #88	@ 0x58
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08a      	sub	sp, #40	@ 0x28
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005da:	f107 031c 	add.w	r3, r7, #28
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005e6:	463b      	mov	r3, r7
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]
 80005f4:	615a      	str	r2, [r3, #20]
 80005f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005f8:	4b22      	ldr	r3, [pc, #136]	@ (8000684 <MX_TIM2_Init+0xb0>)
 80005fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000600:	4b20      	ldr	r3, [pc, #128]	@ (8000684 <MX_TIM2_Init+0xb0>)
 8000602:	2200      	movs	r2, #0
 8000604:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000606:	4b1f      	ldr	r3, [pc, #124]	@ (8000684 <MX_TIM2_Init+0xb0>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3999;
 800060c:	4b1d      	ldr	r3, [pc, #116]	@ (8000684 <MX_TIM2_Init+0xb0>)
 800060e:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000612:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000614:	4b1b      	ldr	r3, [pc, #108]	@ (8000684 <MX_TIM2_Init+0xb0>)
 8000616:	2200      	movs	r2, #0
 8000618:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800061a:	4b1a      	ldr	r3, [pc, #104]	@ (8000684 <MX_TIM2_Init+0xb0>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000620:	4818      	ldr	r0, [pc, #96]	@ (8000684 <MX_TIM2_Init+0xb0>)
 8000622:	f002 f843 	bl	80026ac <HAL_TIM_PWM_Init>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800062c:	f000 f89a 	bl	8000764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000630:	2300      	movs	r3, #0
 8000632:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000634:	2300      	movs	r3, #0
 8000636:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000638:	f107 031c 	add.w	r3, r7, #28
 800063c:	4619      	mov	r1, r3
 800063e:	4811      	ldr	r0, [pc, #68]	@ (8000684 <MX_TIM2_Init+0xb0>)
 8000640:	f002 fe3c 	bl	80032bc <HAL_TIMEx_MasterConfigSynchronization>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800064a:	f000 f88b 	bl	8000764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800064e:	2360      	movs	r3, #96	@ 0x60
 8000650:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000656:	2300      	movs	r3, #0
 8000658:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800065a:	2300      	movs	r3, #0
 800065c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800065e:	463b      	mov	r3, r7
 8000660:	2200      	movs	r2, #0
 8000662:	4619      	mov	r1, r3
 8000664:	4807      	ldr	r0, [pc, #28]	@ (8000684 <MX_TIM2_Init+0xb0>)
 8000666:	f002 f97f 	bl	8002968 <HAL_TIM_PWM_ConfigChannel>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000670:	f000 f878 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000674:	4803      	ldr	r0, [pc, #12]	@ (8000684 <MX_TIM2_Init+0xb0>)
 8000676:	f000 f8bd 	bl	80007f4 <HAL_TIM_MspPostInit>

}
 800067a:	bf00      	nop
 800067c:	3728      	adds	r7, #40	@ 0x28
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000028 	.word	0x20000028

08000688 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800068c:	4b14      	ldr	r3, [pc, #80]	@ (80006e0 <MX_USART2_UART_Init+0x58>)
 800068e:	4a15      	ldr	r2, [pc, #84]	@ (80006e4 <MX_USART2_UART_Init+0x5c>)
 8000690:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <MX_USART2_UART_Init+0x58>)
 8000694:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000698:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800069a:	4b11      	ldr	r3, [pc, #68]	@ (80006e0 <MX_USART2_UART_Init+0x58>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	@ (80006e0 <MX_USART2_UART_Init+0x58>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	@ (80006e0 <MX_USART2_UART_Init+0x58>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006ac:	4b0c      	ldr	r3, [pc, #48]	@ (80006e0 <MX_USART2_UART_Init+0x58>)
 80006ae:	220c      	movs	r2, #12
 80006b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b2:	4b0b      	ldr	r3, [pc, #44]	@ (80006e0 <MX_USART2_UART_Init+0x58>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b8:	4b09      	ldr	r3, [pc, #36]	@ (80006e0 <MX_USART2_UART_Init+0x58>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006be:	4b08      	ldr	r3, [pc, #32]	@ (80006e0 <MX_USART2_UART_Init+0x58>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006c4:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <MX_USART2_UART_Init+0x58>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ca:	4805      	ldr	r0, [pc, #20]	@ (80006e0 <MX_USART2_UART_Init+0x58>)
 80006cc:	f002 fe7e 	bl	80033cc <HAL_UART_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006d6:	f000 f845 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000074 	.word	0x20000074
 80006e4:	40004400 	.word	0x40004400

080006e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b088      	sub	sp, #32
 80006ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	f107 030c 	add.w	r3, r7, #12
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fe:	4b18      	ldr	r3, [pc, #96]	@ (8000760 <MX_GPIO_Init+0x78>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000702:	4a17      	ldr	r2, [pc, #92]	@ (8000760 <MX_GPIO_Init+0x78>)
 8000704:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000708:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800070a:	4b15      	ldr	r3, [pc, #84]	@ (8000760 <MX_GPIO_Init+0x78>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	4b12      	ldr	r3, [pc, #72]	@ (8000760 <MX_GPIO_Init+0x78>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071a:	4a11      	ldr	r2, [pc, #68]	@ (8000760 <MX_GPIO_Init+0x78>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000722:	4b0f      	ldr	r3, [pc, #60]	@ (8000760 <MX_GPIO_Init+0x78>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	21c0      	movs	r1, #192	@ 0xc0
 8000732:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000736:	f000 fc81 	bl	800103c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800073a:	23c0      	movs	r3, #192	@ 0xc0
 800073c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073e:	2301      	movs	r3, #1
 8000740:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	2300      	movs	r3, #0
 8000748:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074a:	f107 030c 	add.w	r3, r7, #12
 800074e:	4619      	mov	r1, r3
 8000750:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000754:	f000 fac8 	bl	8000ce8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000758:	bf00      	nop
 800075a:	3720      	adds	r7, #32
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40021000 	.word	0x40021000

08000764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000768:	b672      	cpsid	i
}
 800076a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <Error_Handler+0x8>

08000770 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000776:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <HAL_MspInit+0x44>)
 8000778:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800077a:	4a0e      	ldr	r2, [pc, #56]	@ (80007b4 <HAL_MspInit+0x44>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6613      	str	r3, [r2, #96]	@ 0x60
 8000782:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <HAL_MspInit+0x44>)
 8000784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078e:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <HAL_MspInit+0x44>)
 8000790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000792:	4a08      	ldr	r2, [pc, #32]	@ (80007b4 <HAL_MspInit+0x44>)
 8000794:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000798:	6593      	str	r3, [r2, #88]	@ 0x58
 800079a:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <HAL_MspInit+0x44>)
 800079c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800079e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	40021000 	.word	0x40021000

080007b8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80007c8:	d10b      	bne.n	80007e2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007ca:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <HAL_TIM_PWM_MspInit+0x38>)
 80007cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ce:	4a08      	ldr	r2, [pc, #32]	@ (80007f0 <HAL_TIM_PWM_MspInit+0x38>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80007d6:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <HAL_TIM_PWM_MspInit+0x38>)
 80007d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80007e2:	bf00      	nop
 80007e4:	3714      	adds	r7, #20
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	40021000 	.word	0x40021000

080007f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b088      	sub	sp, #32
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fc:	f107 030c 	add.w	r3, r7, #12
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000814:	d11c      	bne.n	8000850 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	4b10      	ldr	r3, [pc, #64]	@ (8000858 <HAL_TIM_MspPostInit+0x64>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	4a0f      	ldr	r2, [pc, #60]	@ (8000858 <HAL_TIM_MspPostInit+0x64>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000822:	4b0d      	ldr	r3, [pc, #52]	@ (8000858 <HAL_TIM_MspPostInit+0x64>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800082e:	2320      	movs	r3, #32
 8000830:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800083e:	2301      	movs	r3, #1
 8000840:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	4619      	mov	r1, r3
 8000848:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800084c:	f000 fa4c 	bl	8000ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000850:	bf00      	nop
 8000852:	3720      	adds	r7, #32
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40021000 	.word	0x40021000

0800085c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b0ac      	sub	sp, #176	@ 0xb0
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	2288      	movs	r2, #136	@ 0x88
 800087a:	2100      	movs	r1, #0
 800087c:	4618      	mov	r0, r3
 800087e:	f003 fac0 	bl	8003e02 <memset>
  if(huart->Instance==USART2)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a21      	ldr	r2, [pc, #132]	@ (800090c <HAL_UART_MspInit+0xb0>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d13b      	bne.n	8000904 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800088c:	2302      	movs	r3, #2
 800088e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000890:	2300      	movs	r3, #0
 8000892:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4618      	mov	r0, r3
 800089a:	f001 fa4b 	bl	8001d34 <HAL_RCCEx_PeriphCLKConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008a4:	f7ff ff5e 	bl	8000764 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008a8:	4b19      	ldr	r3, [pc, #100]	@ (8000910 <HAL_UART_MspInit+0xb4>)
 80008aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ac:	4a18      	ldr	r2, [pc, #96]	@ (8000910 <HAL_UART_MspInit+0xb4>)
 80008ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80008b4:	4b16      	ldr	r3, [pc, #88]	@ (8000910 <HAL_UART_MspInit+0xb4>)
 80008b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008bc:	613b      	str	r3, [r7, #16]
 80008be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c0:	4b13      	ldr	r3, [pc, #76]	@ (8000910 <HAL_UART_MspInit+0xb4>)
 80008c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c4:	4a12      	ldr	r2, [pc, #72]	@ (8000910 <HAL_UART_MspInit+0xb4>)
 80008c6:	f043 0301 	orr.w	r3, r3, #1
 80008ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008cc:	4b10      	ldr	r3, [pc, #64]	@ (8000910 <HAL_UART_MspInit+0xb4>)
 80008ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d0:	f003 0301 	and.w	r3, r3, #1
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008d8:	230c      	movs	r3, #12
 80008da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ea:	2303      	movs	r3, #3
 80008ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008f0:	2307      	movs	r3, #7
 80008f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008fa:	4619      	mov	r1, r3
 80008fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000900:	f000 f9f2 	bl	8000ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000904:	bf00      	nop
 8000906:	37b0      	adds	r7, #176	@ 0xb0
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40004400 	.word	0x40004400
 8000910:	40021000 	.word	0x40021000

08000914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <NMI_Handler+0x4>

0800091c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <HardFault_Handler+0x4>

08000924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <MemManage_Handler+0x4>

0800092c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000930:	bf00      	nop
 8000932:	e7fd      	b.n	8000930 <BusFault_Handler+0x4>

08000934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000938:	bf00      	nop
 800093a:	e7fd      	b.n	8000938 <UsageFault_Handler+0x4>

0800093c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800096a:	f000 f893 	bl	8000a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
	...

08000974 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000978:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <SystemInit+0x20>)
 800097a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800097e:	4a05      	ldr	r2, [pc, #20]	@ (8000994 <SystemInit+0x20>)
 8000980:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000984:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000998:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800099c:	f7ff ffea 	bl	8000974 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a0:	480c      	ldr	r0, [pc, #48]	@ (80009d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80009a2:	490d      	ldr	r1, [pc, #52]	@ (80009d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009a4:	4a0d      	ldr	r2, [pc, #52]	@ (80009dc <LoopForever+0xe>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a8:	e002      	b.n	80009b0 <LoopCopyDataInit>

080009aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ae:	3304      	adds	r3, #4

080009b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b4:	d3f9      	bcc.n	80009aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b6:	4a0a      	ldr	r2, [pc, #40]	@ (80009e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009b8:	4c0a      	ldr	r4, [pc, #40]	@ (80009e4 <LoopForever+0x16>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009bc:	e001      	b.n	80009c2 <LoopFillZerobss>

080009be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c0:	3204      	adds	r2, #4

080009c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c4:	d3fb      	bcc.n	80009be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009c6:	f003 fa25 	bl	8003e14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009ca:	f7ff fd75 	bl	80004b8 <main>

080009ce <LoopForever>:

LoopForever:
    b LoopForever
 80009ce:	e7fe      	b.n	80009ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009d0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009dc:	08003ecc 	.word	0x08003ecc
  ldr r2, =_sbss
 80009e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009e4:	20000100 	.word	0x20000100

080009e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009e8:	e7fe      	b.n	80009e8 <ADC1_2_IRQHandler>

080009ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b082      	sub	sp, #8
 80009ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009f0:	2300      	movs	r3, #0
 80009f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f4:	2003      	movs	r0, #3
 80009f6:	f000 f943 	bl	8000c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009fa:	200f      	movs	r0, #15
 80009fc:	f000 f80e 	bl	8000a1c <HAL_InitTick>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d002      	beq.n	8000a0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
 8000a08:	71fb      	strb	r3, [r7, #7]
 8000a0a:	e001      	b.n	8000a10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a0c:	f7ff feb0 	bl	8000770 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a10:	79fb      	ldrb	r3, [r7, #7]
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
	...

08000a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a24:	2300      	movs	r3, #0
 8000a26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a28:	4b17      	ldr	r3, [pc, #92]	@ (8000a88 <HAL_InitTick+0x6c>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d023      	beq.n	8000a78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a30:	4b16      	ldr	r3, [pc, #88]	@ (8000a8c <HAL_InitTick+0x70>)
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	4b14      	ldr	r3, [pc, #80]	@ (8000a88 <HAL_InitTick+0x6c>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 f941 	bl	8000cce <HAL_SYSTICK_Config>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d10f      	bne.n	8000a72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b0f      	cmp	r3, #15
 8000a56:	d809      	bhi.n	8000a6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	6879      	ldr	r1, [r7, #4]
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	f000 f919 	bl	8000c96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a64:	4a0a      	ldr	r2, [pc, #40]	@ (8000a90 <HAL_InitTick+0x74>)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6013      	str	r3, [r2, #0]
 8000a6a:	e007      	b.n	8000a7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	73fb      	strb	r3, [r7, #15]
 8000a70:	e004      	b.n	8000a7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	73fb      	strb	r3, [r7, #15]
 8000a76:	e001      	b.n	8000a7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3710      	adds	r7, #16
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000008 	.word	0x20000008
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	20000004 	.word	0x20000004

08000a94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a98:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <HAL_IncTick+0x20>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4b06      	ldr	r3, [pc, #24]	@ (8000ab8 <HAL_IncTick+0x24>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	4a04      	ldr	r2, [pc, #16]	@ (8000ab8 <HAL_IncTick+0x24>)
 8000aa6:	6013      	str	r3, [r2, #0]
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	20000008 	.word	0x20000008
 8000ab8:	200000fc 	.word	0x200000fc

08000abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac0:	4b03      	ldr	r3, [pc, #12]	@ (8000ad0 <HAL_GetTick+0x14>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	200000fc 	.word	0x200000fc

08000ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000adc:	f7ff ffee 	bl	8000abc <HAL_GetTick>
 8000ae0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aec:	d005      	beq.n	8000afa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000aee:	4b0a      	ldr	r3, [pc, #40]	@ (8000b18 <HAL_Delay+0x44>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	461a      	mov	r2, r3
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	4413      	add	r3, r2
 8000af8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000afa:	bf00      	nop
 8000afc:	f7ff ffde 	bl	8000abc <HAL_GetTick>
 8000b00:	4602      	mov	r2, r0
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	68fa      	ldr	r2, [r7, #12]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d8f7      	bhi.n	8000afc <HAL_Delay+0x28>
  {
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	bf00      	nop
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000008 	.word	0x20000008

08000b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b38:	4013      	ands	r3, r2
 8000b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b4e:	4a04      	ldr	r2, [pc, #16]	@ (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	60d3      	str	r3, [r2, #12]
}
 8000b54:	bf00      	nop
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b68:	4b04      	ldr	r3, [pc, #16]	@ (8000b7c <__NVIC_GetPriorityGrouping+0x18>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	0a1b      	lsrs	r3, r3, #8
 8000b6e:	f003 0307 	and.w	r3, r3, #7
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	6039      	str	r1, [r7, #0]
 8000b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	db0a      	blt.n	8000baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	490c      	ldr	r1, [pc, #48]	@ (8000bcc <__NVIC_SetPriority+0x4c>)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	0112      	lsls	r2, r2, #4
 8000ba0:	b2d2      	uxtb	r2, r2
 8000ba2:	440b      	add	r3, r1
 8000ba4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba8:	e00a      	b.n	8000bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	4908      	ldr	r1, [pc, #32]	@ (8000bd0 <__NVIC_SetPriority+0x50>)
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	f003 030f 	and.w	r3, r3, #15
 8000bb6:	3b04      	subs	r3, #4
 8000bb8:	0112      	lsls	r2, r2, #4
 8000bba:	b2d2      	uxtb	r2, r2
 8000bbc:	440b      	add	r3, r1
 8000bbe:	761a      	strb	r2, [r3, #24]
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000e100 	.word	0xe000e100
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b089      	sub	sp, #36	@ 0x24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	f1c3 0307 	rsb	r3, r3, #7
 8000bee:	2b04      	cmp	r3, #4
 8000bf0:	bf28      	it	cs
 8000bf2:	2304      	movcs	r3, #4
 8000bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	2b06      	cmp	r3, #6
 8000bfc:	d902      	bls.n	8000c04 <NVIC_EncodePriority+0x30>
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3b03      	subs	r3, #3
 8000c02:	e000      	b.n	8000c06 <NVIC_EncodePriority+0x32>
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c08:	f04f 32ff 	mov.w	r2, #4294967295
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43da      	mvns	r2, r3
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	401a      	ands	r2, r3
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	fa01 f303 	lsl.w	r3, r1, r3
 8000c26:	43d9      	mvns	r1, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	4313      	orrs	r3, r2
         );
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3724      	adds	r7, #36	@ 0x24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
	...

08000c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c4c:	d301      	bcc.n	8000c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e00f      	b.n	8000c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c52:	4a0a      	ldr	r2, [pc, #40]	@ (8000c7c <SysTick_Config+0x40>)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3b01      	subs	r3, #1
 8000c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c5a:	210f      	movs	r1, #15
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c60:	f7ff ff8e 	bl	8000b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c64:	4b05      	ldr	r3, [pc, #20]	@ (8000c7c <SysTick_Config+0x40>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6a:	4b04      	ldr	r3, [pc, #16]	@ (8000c7c <SysTick_Config+0x40>)
 8000c6c:	2207      	movs	r2, #7
 8000c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	e000e010 	.word	0xe000e010

08000c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff ff47 	bl	8000b1c <__NVIC_SetPriorityGrouping>
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b086      	sub	sp, #24
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	60b9      	str	r1, [r7, #8]
 8000ca0:	607a      	str	r2, [r7, #4]
 8000ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ca8:	f7ff ff5c 	bl	8000b64 <__NVIC_GetPriorityGrouping>
 8000cac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	68b9      	ldr	r1, [r7, #8]
 8000cb2:	6978      	ldr	r0, [r7, #20]
 8000cb4:	f7ff ff8e 	bl	8000bd4 <NVIC_EncodePriority>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff ff5d 	bl	8000b80 <__NVIC_SetPriority>
}
 8000cc6:	bf00      	nop
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff ffb0 	bl	8000c3c <SysTick_Config>
 8000cdc:	4603      	mov	r3, r0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b087      	sub	sp, #28
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cf6:	e17f      	b.n	8000ff8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	fa01 f303 	lsl.w	r3, r1, r3
 8000d04:	4013      	ands	r3, r2
 8000d06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f000 8171 	beq.w	8000ff2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f003 0303 	and.w	r3, r3, #3
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d005      	beq.n	8000d28 <HAL_GPIO_Init+0x40>
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 0303 	and.w	r3, r3, #3
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d130      	bne.n	8000d8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	2203      	movs	r2, #3
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	68da      	ldr	r2, [r3, #12]
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d5e:	2201      	movs	r2, #1
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43db      	mvns	r3, r3
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	091b      	lsrs	r3, r3, #4
 8000d74:	f003 0201 	and.w	r2, r3, #1
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f003 0303 	and.w	r3, r3, #3
 8000d92:	2b03      	cmp	r3, #3
 8000d94:	d118      	bne.n	8000dc8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	43db      	mvns	r3, r3
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4013      	ands	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	08db      	lsrs	r3, r3, #3
 8000db2:	f003 0201 	and.w	r2, r3, #1
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f003 0303 	and.w	r3, r3, #3
 8000dd0:	2b03      	cmp	r3, #3
 8000dd2:	d017      	beq.n	8000e04 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	2203      	movs	r2, #3
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	43db      	mvns	r3, r3
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4013      	ands	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	689a      	ldr	r2, [r3, #8]
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f003 0303 	and.w	r3, r3, #3
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d123      	bne.n	8000e58 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	08da      	lsrs	r2, r3, #3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3208      	adds	r2, #8
 8000e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	f003 0307 	and.w	r3, r3, #7
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	220f      	movs	r2, #15
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4013      	ands	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	691a      	ldr	r2, [r3, #16]
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	08da      	lsrs	r2, r3, #3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	3208      	adds	r2, #8
 8000e52:	6939      	ldr	r1, [r7, #16]
 8000e54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	2203      	movs	r2, #3
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f003 0203 	and.w	r2, r3, #3
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	f000 80ac 	beq.w	8000ff2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9a:	4b5f      	ldr	r3, [pc, #380]	@ (8001018 <HAL_GPIO_Init+0x330>)
 8000e9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e9e:	4a5e      	ldr	r2, [pc, #376]	@ (8001018 <HAL_GPIO_Init+0x330>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ea6:	4b5c      	ldr	r3, [pc, #368]	@ (8001018 <HAL_GPIO_Init+0x330>)
 8000ea8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000eb2:	4a5a      	ldr	r2, [pc, #360]	@ (800101c <HAL_GPIO_Init+0x334>)
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	089b      	lsrs	r3, r3, #2
 8000eb8:	3302      	adds	r3, #2
 8000eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	f003 0303 	and.w	r3, r3, #3
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	220f      	movs	r2, #15
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000edc:	d025      	beq.n	8000f2a <HAL_GPIO_Init+0x242>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a4f      	ldr	r2, [pc, #316]	@ (8001020 <HAL_GPIO_Init+0x338>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d01f      	beq.n	8000f26 <HAL_GPIO_Init+0x23e>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a4e      	ldr	r2, [pc, #312]	@ (8001024 <HAL_GPIO_Init+0x33c>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d019      	beq.n	8000f22 <HAL_GPIO_Init+0x23a>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a4d      	ldr	r2, [pc, #308]	@ (8001028 <HAL_GPIO_Init+0x340>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d013      	beq.n	8000f1e <HAL_GPIO_Init+0x236>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a4c      	ldr	r2, [pc, #304]	@ (800102c <HAL_GPIO_Init+0x344>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d00d      	beq.n	8000f1a <HAL_GPIO_Init+0x232>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a4b      	ldr	r2, [pc, #300]	@ (8001030 <HAL_GPIO_Init+0x348>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d007      	beq.n	8000f16 <HAL_GPIO_Init+0x22e>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a4a      	ldr	r2, [pc, #296]	@ (8001034 <HAL_GPIO_Init+0x34c>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d101      	bne.n	8000f12 <HAL_GPIO_Init+0x22a>
 8000f0e:	2306      	movs	r3, #6
 8000f10:	e00c      	b.n	8000f2c <HAL_GPIO_Init+0x244>
 8000f12:	2307      	movs	r3, #7
 8000f14:	e00a      	b.n	8000f2c <HAL_GPIO_Init+0x244>
 8000f16:	2305      	movs	r3, #5
 8000f18:	e008      	b.n	8000f2c <HAL_GPIO_Init+0x244>
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	e006      	b.n	8000f2c <HAL_GPIO_Init+0x244>
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e004      	b.n	8000f2c <HAL_GPIO_Init+0x244>
 8000f22:	2302      	movs	r3, #2
 8000f24:	e002      	b.n	8000f2c <HAL_GPIO_Init+0x244>
 8000f26:	2301      	movs	r3, #1
 8000f28:	e000      	b.n	8000f2c <HAL_GPIO_Init+0x244>
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	697a      	ldr	r2, [r7, #20]
 8000f2e:	f002 0203 	and.w	r2, r2, #3
 8000f32:	0092      	lsls	r2, r2, #2
 8000f34:	4093      	lsls	r3, r2
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f3c:	4937      	ldr	r1, [pc, #220]	@ (800101c <HAL_GPIO_Init+0x334>)
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	089b      	lsrs	r3, r3, #2
 8000f42:	3302      	adds	r3, #2
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f4a:	4b3b      	ldr	r3, [pc, #236]	@ (8001038 <HAL_GPIO_Init+0x350>)
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	43db      	mvns	r3, r3
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	4013      	ands	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d003      	beq.n	8000f6e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f6e:	4a32      	ldr	r2, [pc, #200]	@ (8001038 <HAL_GPIO_Init+0x350>)
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f74:	4b30      	ldr	r3, [pc, #192]	@ (8001038 <HAL_GPIO_Init+0x350>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d003      	beq.n	8000f98 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f98:	4a27      	ldr	r2, [pc, #156]	@ (8001038 <HAL_GPIO_Init+0x350>)
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f9e:	4b26      	ldr	r3, [pc, #152]	@ (8001038 <HAL_GPIO_Init+0x350>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4013      	ands	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fc2:	4a1d      	ldr	r2, [pc, #116]	@ (8001038 <HAL_GPIO_Init+0x350>)
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001038 <HAL_GPIO_Init+0x350>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d003      	beq.n	8000fec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fec:	4a12      	ldr	r2, [pc, #72]	@ (8001038 <HAL_GPIO_Init+0x350>)
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8001002:	2b00      	cmp	r3, #0
 8001004:	f47f ae78 	bne.w	8000cf8 <HAL_GPIO_Init+0x10>
  }
}
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	371c      	adds	r7, #28
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40021000 	.word	0x40021000
 800101c:	40010000 	.word	0x40010000
 8001020:	48000400 	.word	0x48000400
 8001024:	48000800 	.word	0x48000800
 8001028:	48000c00 	.word	0x48000c00
 800102c:	48001000 	.word	0x48001000
 8001030:	48001400 	.word	0x48001400
 8001034:	48001800 	.word	0x48001800
 8001038:	40010400 	.word	0x40010400

0800103c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	807b      	strh	r3, [r7, #2]
 8001048:	4613      	mov	r3, r2
 800104a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800104c:	787b      	ldrb	r3, [r7, #1]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001052:	887a      	ldrh	r2, [r7, #2]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001058:	e002      	b.n	8001060 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800105a:	887a      	ldrh	r2, [r7, #2]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001070:	4b04      	ldr	r3, [pc, #16]	@ (8001084 <HAL_PWREx_GetVoltageRange+0x18>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001078:	4618      	mov	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	40007000 	.word	0x40007000

08001088 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001096:	d130      	bne.n	80010fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001098:	4b23      	ldr	r3, [pc, #140]	@ (8001128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80010a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80010a4:	d038      	beq.n	8001118 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a6:	4b20      	ldr	r3, [pc, #128]	@ (8001128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80010ae:	4a1e      	ldr	r2, [pc, #120]	@ (8001128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010b6:	4b1d      	ldr	r3, [pc, #116]	@ (800112c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2232      	movs	r2, #50	@ 0x32
 80010bc:	fb02 f303 	mul.w	r3, r2, r3
 80010c0:	4a1b      	ldr	r2, [pc, #108]	@ (8001130 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80010c2:	fba2 2303 	umull	r2, r3, r2, r3
 80010c6:	0c9b      	lsrs	r3, r3, #18
 80010c8:	3301      	adds	r3, #1
 80010ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010cc:	e002      	b.n	80010d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	3b01      	subs	r3, #1
 80010d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010d4:	4b14      	ldr	r3, [pc, #80]	@ (8001128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010d6:	695b      	ldr	r3, [r3, #20]
 80010d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010e0:	d102      	bne.n	80010e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1f2      	bne.n	80010ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010ea:	695b      	ldr	r3, [r3, #20]
 80010ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010f4:	d110      	bne.n	8001118 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e00f      	b.n	800111a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80010fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001102:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001106:	d007      	beq.n	8001118 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001108:	4b07      	ldr	r3, [pc, #28]	@ (8001128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001110:	4a05      	ldr	r2, [pc, #20]	@ (8001128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001112:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001116:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3714      	adds	r7, #20
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	40007000 	.word	0x40007000
 800112c:	20000000 	.word	0x20000000
 8001130:	431bde83 	.word	0x431bde83

08001134 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e3ca      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001146:	4b97      	ldr	r3, [pc, #604]	@ (80013a4 <HAL_RCC_OscConfig+0x270>)
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f003 030c 	and.w	r3, r3, #12
 800114e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001150:	4b94      	ldr	r3, [pc, #592]	@ (80013a4 <HAL_RCC_OscConfig+0x270>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0310 	and.w	r3, r3, #16
 8001162:	2b00      	cmp	r3, #0
 8001164:	f000 80e4 	beq.w	8001330 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d007      	beq.n	800117e <HAL_RCC_OscConfig+0x4a>
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	2b0c      	cmp	r3, #12
 8001172:	f040 808b 	bne.w	800128c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	2b01      	cmp	r3, #1
 800117a:	f040 8087 	bne.w	800128c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800117e:	4b89      	ldr	r3, [pc, #548]	@ (80013a4 <HAL_RCC_OscConfig+0x270>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d005      	beq.n	8001196 <HAL_RCC_OscConfig+0x62>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e3a2      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6a1a      	ldr	r2, [r3, #32]
 800119a:	4b82      	ldr	r3, [pc, #520]	@ (80013a4 <HAL_RCC_OscConfig+0x270>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0308 	and.w	r3, r3, #8
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d004      	beq.n	80011b0 <HAL_RCC_OscConfig+0x7c>
 80011a6:	4b7f      	ldr	r3, [pc, #508]	@ (80013a4 <HAL_RCC_OscConfig+0x270>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80011ae:	e005      	b.n	80011bc <HAL_RCC_OscConfig+0x88>
 80011b0:	4b7c      	ldr	r3, [pc, #496]	@ (80013a4 <HAL_RCC_OscConfig+0x270>)
 80011b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011b6:	091b      	lsrs	r3, r3, #4
 80011b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80011bc:	4293      	cmp	r3, r2
 80011be:	d223      	bcs.n	8001208 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6a1b      	ldr	r3, [r3, #32]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 fd55 	bl	8001c74 <RCC_SetFlashLatencyFromMSIRange>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e383      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011d4:	4b73      	ldr	r3, [pc, #460]	@ (80013a4 <HAL_RCC_OscConfig+0x270>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a72      	ldr	r2, [pc, #456]	@ (80013a4 <HAL_RCC_OscConfig+0x270>)
 80011da:	f043 0308 	orr.w	r3, r3, #8
 80011de:	6013      	str	r3, [r2, #0]
 80011e0:	4b70      	ldr	r3, [pc, #448]	@ (80013a4 <HAL_RCC_OscConfig+0x270>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a1b      	ldr	r3, [r3, #32]
 80011ec:	496d      	ldr	r1, [pc, #436]	@ (80013a4 <HAL_RCC_OscConfig+0x270>)
 80011ee:	4313      	orrs	r3, r2
 80011f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011f2:	4b6c      	ldr	r3, [pc, #432]	@ (80013a4 <HAL_RCC_OscConfig+0x270>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	021b      	lsls	r3, r3, #8
 8001200:	4968      	ldr	r1, [pc, #416]	@ (80013a4 <HAL_RCC_OscConfig+0x270>)
 8001202:	4313      	orrs	r3, r2
 8001204:	604b      	str	r3, [r1, #4]
 8001206:	e025      	b.n	8001254 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001208:	4b66      	ldr	r3, [pc, #408]	@ (80013a4 <HAL_RCC_OscConfig+0x270>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a65      	ldr	r2, [pc, #404]	@ (80013a4 <HAL_RCC_OscConfig+0x270>)
 800120e:	f043 0308 	orr.w	r3, r3, #8
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	4b63      	ldr	r3, [pc, #396]	@ (80013a4 <HAL_RCC_OscConfig+0x270>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6a1b      	ldr	r3, [r3, #32]
 8001220:	4960      	ldr	r1, [pc, #384]	@ (80013a4 <HAL_RCC_OscConfig+0x270>)
 8001222:	4313      	orrs	r3, r2
 8001224:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001226:	4b5f      	ldr	r3, [pc, #380]	@ (80013a4 <HAL_RCC_OscConfig+0x270>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	021b      	lsls	r3, r3, #8
 8001234:	495b      	ldr	r1, [pc, #364]	@ (80013a4 <HAL_RCC_OscConfig+0x270>)
 8001236:	4313      	orrs	r3, r2
 8001238:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d109      	bne.n	8001254 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a1b      	ldr	r3, [r3, #32]
 8001244:	4618      	mov	r0, r3
 8001246:	f000 fd15 	bl	8001c74 <RCC_SetFlashLatencyFromMSIRange>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e343      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001254:	f000 fc4a 	bl	8001aec <HAL_RCC_GetSysClockFreq>
 8001258:	4602      	mov	r2, r0
 800125a:	4b52      	ldr	r3, [pc, #328]	@ (80013a4 <HAL_RCC_OscConfig+0x270>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	091b      	lsrs	r3, r3, #4
 8001260:	f003 030f 	and.w	r3, r3, #15
 8001264:	4950      	ldr	r1, [pc, #320]	@ (80013a8 <HAL_RCC_OscConfig+0x274>)
 8001266:	5ccb      	ldrb	r3, [r1, r3]
 8001268:	f003 031f 	and.w	r3, r3, #31
 800126c:	fa22 f303 	lsr.w	r3, r2, r3
 8001270:	4a4e      	ldr	r2, [pc, #312]	@ (80013ac <HAL_RCC_OscConfig+0x278>)
 8001272:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001274:	4b4e      	ldr	r3, [pc, #312]	@ (80013b0 <HAL_RCC_OscConfig+0x27c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff fbcf 	bl	8000a1c <HAL_InitTick>
 800127e:	4603      	mov	r3, r0
 8001280:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001282:	7bfb      	ldrb	r3, [r7, #15]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d052      	beq.n	800132e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	e327      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d032      	beq.n	80012fa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001294:	4b43      	ldr	r3, [pc, #268]	@ (80013a4 <HAL_RCC_OscConfig+0x270>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a42      	ldr	r2, [pc, #264]	@ (80013a4 <HAL_RCC_OscConfig+0x270>)
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012a0:	f7ff fc0c 	bl	8000abc <HAL_GetTick>
 80012a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012a8:	f7ff fc08 	bl	8000abc <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e310      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012ba:	4b3a      	ldr	r3, [pc, #232]	@ (80013a4 <HAL_RCC_OscConfig+0x270>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d0f0      	beq.n	80012a8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012c6:	4b37      	ldr	r3, [pc, #220]	@ (80013a4 <HAL_RCC_OscConfig+0x270>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a36      	ldr	r2, [pc, #216]	@ (80013a4 <HAL_RCC_OscConfig+0x270>)
 80012cc:	f043 0308 	orr.w	r3, r3, #8
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	4b34      	ldr	r3, [pc, #208]	@ (80013a4 <HAL_RCC_OscConfig+0x270>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a1b      	ldr	r3, [r3, #32]
 80012de:	4931      	ldr	r1, [pc, #196]	@ (80013a4 <HAL_RCC_OscConfig+0x270>)
 80012e0:	4313      	orrs	r3, r2
 80012e2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012e4:	4b2f      	ldr	r3, [pc, #188]	@ (80013a4 <HAL_RCC_OscConfig+0x270>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	69db      	ldr	r3, [r3, #28]
 80012f0:	021b      	lsls	r3, r3, #8
 80012f2:	492c      	ldr	r1, [pc, #176]	@ (80013a4 <HAL_RCC_OscConfig+0x270>)
 80012f4:	4313      	orrs	r3, r2
 80012f6:	604b      	str	r3, [r1, #4]
 80012f8:	e01a      	b.n	8001330 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80012fa:	4b2a      	ldr	r3, [pc, #168]	@ (80013a4 <HAL_RCC_OscConfig+0x270>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a29      	ldr	r2, [pc, #164]	@ (80013a4 <HAL_RCC_OscConfig+0x270>)
 8001300:	f023 0301 	bic.w	r3, r3, #1
 8001304:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001306:	f7ff fbd9 	bl	8000abc <HAL_GetTick>
 800130a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800130c:	e008      	b.n	8001320 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800130e:	f7ff fbd5 	bl	8000abc <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e2dd      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001320:	4b20      	ldr	r3, [pc, #128]	@ (80013a4 <HAL_RCC_OscConfig+0x270>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1f0      	bne.n	800130e <HAL_RCC_OscConfig+0x1da>
 800132c:	e000      	b.n	8001330 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800132e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	2b00      	cmp	r3, #0
 800133a:	d074      	beq.n	8001426 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	2b08      	cmp	r3, #8
 8001340:	d005      	beq.n	800134e <HAL_RCC_OscConfig+0x21a>
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	2b0c      	cmp	r3, #12
 8001346:	d10e      	bne.n	8001366 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	2b03      	cmp	r3, #3
 800134c:	d10b      	bne.n	8001366 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800134e:	4b15      	ldr	r3, [pc, #84]	@ (80013a4 <HAL_RCC_OscConfig+0x270>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d064      	beq.n	8001424 <HAL_RCC_OscConfig+0x2f0>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d160      	bne.n	8001424 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e2ba      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800136e:	d106      	bne.n	800137e <HAL_RCC_OscConfig+0x24a>
 8001370:	4b0c      	ldr	r3, [pc, #48]	@ (80013a4 <HAL_RCC_OscConfig+0x270>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a0b      	ldr	r2, [pc, #44]	@ (80013a4 <HAL_RCC_OscConfig+0x270>)
 8001376:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800137a:	6013      	str	r3, [r2, #0]
 800137c:	e026      	b.n	80013cc <HAL_RCC_OscConfig+0x298>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001386:	d115      	bne.n	80013b4 <HAL_RCC_OscConfig+0x280>
 8001388:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <HAL_RCC_OscConfig+0x270>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a05      	ldr	r2, [pc, #20]	@ (80013a4 <HAL_RCC_OscConfig+0x270>)
 800138e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001392:	6013      	str	r3, [r2, #0]
 8001394:	4b03      	ldr	r3, [pc, #12]	@ (80013a4 <HAL_RCC_OscConfig+0x270>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a02      	ldr	r2, [pc, #8]	@ (80013a4 <HAL_RCC_OscConfig+0x270>)
 800139a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	e014      	b.n	80013cc <HAL_RCC_OscConfig+0x298>
 80013a2:	bf00      	nop
 80013a4:	40021000 	.word	0x40021000
 80013a8:	08003e74 	.word	0x08003e74
 80013ac:	20000000 	.word	0x20000000
 80013b0:	20000004 	.word	0x20000004
 80013b4:	4ba0      	ldr	r3, [pc, #640]	@ (8001638 <HAL_RCC_OscConfig+0x504>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a9f      	ldr	r2, [pc, #636]	@ (8001638 <HAL_RCC_OscConfig+0x504>)
 80013ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013be:	6013      	str	r3, [r2, #0]
 80013c0:	4b9d      	ldr	r3, [pc, #628]	@ (8001638 <HAL_RCC_OscConfig+0x504>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a9c      	ldr	r2, [pc, #624]	@ (8001638 <HAL_RCC_OscConfig+0x504>)
 80013c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d013      	beq.n	80013fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d4:	f7ff fb72 	bl	8000abc <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013dc:	f7ff fb6e 	bl	8000abc <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b64      	cmp	r3, #100	@ 0x64
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e276      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013ee:	4b92      	ldr	r3, [pc, #584]	@ (8001638 <HAL_RCC_OscConfig+0x504>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0f0      	beq.n	80013dc <HAL_RCC_OscConfig+0x2a8>
 80013fa:	e014      	b.n	8001426 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fc:	f7ff fb5e 	bl	8000abc <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001404:	f7ff fb5a 	bl	8000abc <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b64      	cmp	r3, #100	@ 0x64
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e262      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001416:	4b88      	ldr	r3, [pc, #544]	@ (8001638 <HAL_RCC_OscConfig+0x504>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1f0      	bne.n	8001404 <HAL_RCC_OscConfig+0x2d0>
 8001422:	e000      	b.n	8001426 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d060      	beq.n	80014f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	2b04      	cmp	r3, #4
 8001436:	d005      	beq.n	8001444 <HAL_RCC_OscConfig+0x310>
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	2b0c      	cmp	r3, #12
 800143c:	d119      	bne.n	8001472 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	2b02      	cmp	r3, #2
 8001442:	d116      	bne.n	8001472 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001444:	4b7c      	ldr	r3, [pc, #496]	@ (8001638 <HAL_RCC_OscConfig+0x504>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800144c:	2b00      	cmp	r3, #0
 800144e:	d005      	beq.n	800145c <HAL_RCC_OscConfig+0x328>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d101      	bne.n	800145c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e23f      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145c:	4b76      	ldr	r3, [pc, #472]	@ (8001638 <HAL_RCC_OscConfig+0x504>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	061b      	lsls	r3, r3, #24
 800146a:	4973      	ldr	r1, [pc, #460]	@ (8001638 <HAL_RCC_OscConfig+0x504>)
 800146c:	4313      	orrs	r3, r2
 800146e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001470:	e040      	b.n	80014f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d023      	beq.n	80014c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800147a:	4b6f      	ldr	r3, [pc, #444]	@ (8001638 <HAL_RCC_OscConfig+0x504>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a6e      	ldr	r2, [pc, #440]	@ (8001638 <HAL_RCC_OscConfig+0x504>)
 8001480:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001484:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001486:	f7ff fb19 	bl	8000abc <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800148c:	e008      	b.n	80014a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800148e:	f7ff fb15 	bl	8000abc <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e21d      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014a0:	4b65      	ldr	r3, [pc, #404]	@ (8001638 <HAL_RCC_OscConfig+0x504>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d0f0      	beq.n	800148e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ac:	4b62      	ldr	r3, [pc, #392]	@ (8001638 <HAL_RCC_OscConfig+0x504>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	691b      	ldr	r3, [r3, #16]
 80014b8:	061b      	lsls	r3, r3, #24
 80014ba:	495f      	ldr	r1, [pc, #380]	@ (8001638 <HAL_RCC_OscConfig+0x504>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	604b      	str	r3, [r1, #4]
 80014c0:	e018      	b.n	80014f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014c2:	4b5d      	ldr	r3, [pc, #372]	@ (8001638 <HAL_RCC_OscConfig+0x504>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a5c      	ldr	r2, [pc, #368]	@ (8001638 <HAL_RCC_OscConfig+0x504>)
 80014c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ce:	f7ff faf5 	bl	8000abc <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d6:	f7ff faf1 	bl	8000abc <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e1f9      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014e8:	4b53      	ldr	r3, [pc, #332]	@ (8001638 <HAL_RCC_OscConfig+0x504>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1f0      	bne.n	80014d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0308 	and.w	r3, r3, #8
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d03c      	beq.n	800157a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d01c      	beq.n	8001542 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001508:	4b4b      	ldr	r3, [pc, #300]	@ (8001638 <HAL_RCC_OscConfig+0x504>)
 800150a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800150e:	4a4a      	ldr	r2, [pc, #296]	@ (8001638 <HAL_RCC_OscConfig+0x504>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001518:	f7ff fad0 	bl	8000abc <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001520:	f7ff facc 	bl	8000abc <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e1d4      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001532:	4b41      	ldr	r3, [pc, #260]	@ (8001638 <HAL_RCC_OscConfig+0x504>)
 8001534:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d0ef      	beq.n	8001520 <HAL_RCC_OscConfig+0x3ec>
 8001540:	e01b      	b.n	800157a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001542:	4b3d      	ldr	r3, [pc, #244]	@ (8001638 <HAL_RCC_OscConfig+0x504>)
 8001544:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001548:	4a3b      	ldr	r2, [pc, #236]	@ (8001638 <HAL_RCC_OscConfig+0x504>)
 800154a:	f023 0301 	bic.w	r3, r3, #1
 800154e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001552:	f7ff fab3 	bl	8000abc <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800155a:	f7ff faaf 	bl	8000abc <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e1b7      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800156c:	4b32      	ldr	r3, [pc, #200]	@ (8001638 <HAL_RCC_OscConfig+0x504>)
 800156e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1ef      	bne.n	800155a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	2b00      	cmp	r3, #0
 8001584:	f000 80a6 	beq.w	80016d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001588:	2300      	movs	r3, #0
 800158a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800158c:	4b2a      	ldr	r3, [pc, #168]	@ (8001638 <HAL_RCC_OscConfig+0x504>)
 800158e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001590:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d10d      	bne.n	80015b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001598:	4b27      	ldr	r3, [pc, #156]	@ (8001638 <HAL_RCC_OscConfig+0x504>)
 800159a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800159c:	4a26      	ldr	r2, [pc, #152]	@ (8001638 <HAL_RCC_OscConfig+0x504>)
 800159e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80015a4:	4b24      	ldr	r3, [pc, #144]	@ (8001638 <HAL_RCC_OscConfig+0x504>)
 80015a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015b0:	2301      	movs	r3, #1
 80015b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015b4:	4b21      	ldr	r3, [pc, #132]	@ (800163c <HAL_RCC_OscConfig+0x508>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d118      	bne.n	80015f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015c0:	4b1e      	ldr	r3, [pc, #120]	@ (800163c <HAL_RCC_OscConfig+0x508>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a1d      	ldr	r2, [pc, #116]	@ (800163c <HAL_RCC_OscConfig+0x508>)
 80015c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015cc:	f7ff fa76 	bl	8000abc <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015d4:	f7ff fa72 	bl	8000abc <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e17a      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015e6:	4b15      	ldr	r3, [pc, #84]	@ (800163c <HAL_RCC_OscConfig+0x508>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d0f0      	beq.n	80015d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d108      	bne.n	800160c <HAL_RCC_OscConfig+0x4d8>
 80015fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001638 <HAL_RCC_OscConfig+0x504>)
 80015fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001600:	4a0d      	ldr	r2, [pc, #52]	@ (8001638 <HAL_RCC_OscConfig+0x504>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800160a:	e029      	b.n	8001660 <HAL_RCC_OscConfig+0x52c>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	2b05      	cmp	r3, #5
 8001612:	d115      	bne.n	8001640 <HAL_RCC_OscConfig+0x50c>
 8001614:	4b08      	ldr	r3, [pc, #32]	@ (8001638 <HAL_RCC_OscConfig+0x504>)
 8001616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800161a:	4a07      	ldr	r2, [pc, #28]	@ (8001638 <HAL_RCC_OscConfig+0x504>)
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001624:	4b04      	ldr	r3, [pc, #16]	@ (8001638 <HAL_RCC_OscConfig+0x504>)
 8001626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800162a:	4a03      	ldr	r2, [pc, #12]	@ (8001638 <HAL_RCC_OscConfig+0x504>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001634:	e014      	b.n	8001660 <HAL_RCC_OscConfig+0x52c>
 8001636:	bf00      	nop
 8001638:	40021000 	.word	0x40021000
 800163c:	40007000 	.word	0x40007000
 8001640:	4b9c      	ldr	r3, [pc, #624]	@ (80018b4 <HAL_RCC_OscConfig+0x780>)
 8001642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001646:	4a9b      	ldr	r2, [pc, #620]	@ (80018b4 <HAL_RCC_OscConfig+0x780>)
 8001648:	f023 0301 	bic.w	r3, r3, #1
 800164c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001650:	4b98      	ldr	r3, [pc, #608]	@ (80018b4 <HAL_RCC_OscConfig+0x780>)
 8001652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001656:	4a97      	ldr	r2, [pc, #604]	@ (80018b4 <HAL_RCC_OscConfig+0x780>)
 8001658:	f023 0304 	bic.w	r3, r3, #4
 800165c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d016      	beq.n	8001696 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001668:	f7ff fa28 	bl	8000abc <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800166e:	e00a      	b.n	8001686 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001670:	f7ff fa24 	bl	8000abc <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800167e:	4293      	cmp	r3, r2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e12a      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001686:	4b8b      	ldr	r3, [pc, #556]	@ (80018b4 <HAL_RCC_OscConfig+0x780>)
 8001688:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0ed      	beq.n	8001670 <HAL_RCC_OscConfig+0x53c>
 8001694:	e015      	b.n	80016c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001696:	f7ff fa11 	bl	8000abc <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800169c:	e00a      	b.n	80016b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800169e:	f7ff fa0d 	bl	8000abc <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e113      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016b4:	4b7f      	ldr	r3, [pc, #508]	@ (80018b4 <HAL_RCC_OscConfig+0x780>)
 80016b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1ed      	bne.n	800169e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016c2:	7ffb      	ldrb	r3, [r7, #31]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d105      	bne.n	80016d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016c8:	4b7a      	ldr	r3, [pc, #488]	@ (80018b4 <HAL_RCC_OscConfig+0x780>)
 80016ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016cc:	4a79      	ldr	r2, [pc, #484]	@ (80018b4 <HAL_RCC_OscConfig+0x780>)
 80016ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016d2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f000 80fe 	beq.w	80018da <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	f040 80d0 	bne.w	8001888 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80016e8:	4b72      	ldr	r3, [pc, #456]	@ (80018b4 <HAL_RCC_OscConfig+0x780>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	f003 0203 	and.w	r2, r3, #3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d130      	bne.n	800175e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	3b01      	subs	r3, #1
 8001708:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800170a:	429a      	cmp	r2, r3
 800170c:	d127      	bne.n	800175e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001718:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800171a:	429a      	cmp	r2, r3
 800171c:	d11f      	bne.n	800175e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001728:	2a07      	cmp	r2, #7
 800172a:	bf14      	ite	ne
 800172c:	2201      	movne	r2, #1
 800172e:	2200      	moveq	r2, #0
 8001730:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001732:	4293      	cmp	r3, r2
 8001734:	d113      	bne.n	800175e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001740:	085b      	lsrs	r3, r3, #1
 8001742:	3b01      	subs	r3, #1
 8001744:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001746:	429a      	cmp	r2, r3
 8001748:	d109      	bne.n	800175e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001754:	085b      	lsrs	r3, r3, #1
 8001756:	3b01      	subs	r3, #1
 8001758:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800175a:	429a      	cmp	r2, r3
 800175c:	d06e      	beq.n	800183c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	2b0c      	cmp	r3, #12
 8001762:	d069      	beq.n	8001838 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001764:	4b53      	ldr	r3, [pc, #332]	@ (80018b4 <HAL_RCC_OscConfig+0x780>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d105      	bne.n	800177c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001770:	4b50      	ldr	r3, [pc, #320]	@ (80018b4 <HAL_RCC_OscConfig+0x780>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e0ad      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001780:	4b4c      	ldr	r3, [pc, #304]	@ (80018b4 <HAL_RCC_OscConfig+0x780>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a4b      	ldr	r2, [pc, #300]	@ (80018b4 <HAL_RCC_OscConfig+0x780>)
 8001786:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800178a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800178c:	f7ff f996 	bl	8000abc <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001794:	f7ff f992 	bl	8000abc <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e09a      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017a6:	4b43      	ldr	r3, [pc, #268]	@ (80018b4 <HAL_RCC_OscConfig+0x780>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1f0      	bne.n	8001794 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017b2:	4b40      	ldr	r3, [pc, #256]	@ (80018b4 <HAL_RCC_OscConfig+0x780>)
 80017b4:	68da      	ldr	r2, [r3, #12]
 80017b6:	4b40      	ldr	r3, [pc, #256]	@ (80018b8 <HAL_RCC_OscConfig+0x784>)
 80017b8:	4013      	ands	r3, r2
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80017c2:	3a01      	subs	r2, #1
 80017c4:	0112      	lsls	r2, r2, #4
 80017c6:	4311      	orrs	r1, r2
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80017cc:	0212      	lsls	r2, r2, #8
 80017ce:	4311      	orrs	r1, r2
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80017d4:	0852      	lsrs	r2, r2, #1
 80017d6:	3a01      	subs	r2, #1
 80017d8:	0552      	lsls	r2, r2, #21
 80017da:	4311      	orrs	r1, r2
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80017e0:	0852      	lsrs	r2, r2, #1
 80017e2:	3a01      	subs	r2, #1
 80017e4:	0652      	lsls	r2, r2, #25
 80017e6:	4311      	orrs	r1, r2
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80017ec:	0912      	lsrs	r2, r2, #4
 80017ee:	0452      	lsls	r2, r2, #17
 80017f0:	430a      	orrs	r2, r1
 80017f2:	4930      	ldr	r1, [pc, #192]	@ (80018b4 <HAL_RCC_OscConfig+0x780>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80017f8:	4b2e      	ldr	r3, [pc, #184]	@ (80018b4 <HAL_RCC_OscConfig+0x780>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a2d      	ldr	r2, [pc, #180]	@ (80018b4 <HAL_RCC_OscConfig+0x780>)
 80017fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001802:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001804:	4b2b      	ldr	r3, [pc, #172]	@ (80018b4 <HAL_RCC_OscConfig+0x780>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	4a2a      	ldr	r2, [pc, #168]	@ (80018b4 <HAL_RCC_OscConfig+0x780>)
 800180a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800180e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001810:	f7ff f954 	bl	8000abc <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001818:	f7ff f950 	bl	8000abc <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e058      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800182a:	4b22      	ldr	r3, [pc, #136]	@ (80018b4 <HAL_RCC_OscConfig+0x780>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0f0      	beq.n	8001818 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001836:	e050      	b.n	80018da <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e04f      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800183c:	4b1d      	ldr	r3, [pc, #116]	@ (80018b4 <HAL_RCC_OscConfig+0x780>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d148      	bne.n	80018da <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001848:	4b1a      	ldr	r3, [pc, #104]	@ (80018b4 <HAL_RCC_OscConfig+0x780>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a19      	ldr	r2, [pc, #100]	@ (80018b4 <HAL_RCC_OscConfig+0x780>)
 800184e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001852:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001854:	4b17      	ldr	r3, [pc, #92]	@ (80018b4 <HAL_RCC_OscConfig+0x780>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	4a16      	ldr	r2, [pc, #88]	@ (80018b4 <HAL_RCC_OscConfig+0x780>)
 800185a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800185e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001860:	f7ff f92c 	bl	8000abc <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001868:	f7ff f928 	bl	8000abc <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e030      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800187a:	4b0e      	ldr	r3, [pc, #56]	@ (80018b4 <HAL_RCC_OscConfig+0x780>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0f0      	beq.n	8001868 <HAL_RCC_OscConfig+0x734>
 8001886:	e028      	b.n	80018da <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	2b0c      	cmp	r3, #12
 800188c:	d023      	beq.n	80018d6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800188e:	4b09      	ldr	r3, [pc, #36]	@ (80018b4 <HAL_RCC_OscConfig+0x780>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a08      	ldr	r2, [pc, #32]	@ (80018b4 <HAL_RCC_OscConfig+0x780>)
 8001894:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001898:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189a:	f7ff f90f 	bl	8000abc <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018a0:	e00c      	b.n	80018bc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a2:	f7ff f90b 	bl	8000abc <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d905      	bls.n	80018bc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e013      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
 80018b4:	40021000 	.word	0x40021000
 80018b8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018bc:	4b09      	ldr	r3, [pc, #36]	@ (80018e4 <HAL_RCC_OscConfig+0x7b0>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1ec      	bne.n	80018a2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80018c8:	4b06      	ldr	r3, [pc, #24]	@ (80018e4 <HAL_RCC_OscConfig+0x7b0>)
 80018ca:	68da      	ldr	r2, [r3, #12]
 80018cc:	4905      	ldr	r1, [pc, #20]	@ (80018e4 <HAL_RCC_OscConfig+0x7b0>)
 80018ce:	4b06      	ldr	r3, [pc, #24]	@ (80018e8 <HAL_RCC_OscConfig+0x7b4>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	60cb      	str	r3, [r1, #12]
 80018d4:	e001      	b.n	80018da <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e000      	b.n	80018dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3720      	adds	r7, #32
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40021000 	.word	0x40021000
 80018e8:	feeefffc 	.word	0xfeeefffc

080018ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d101      	bne.n	8001900 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e0e7      	b.n	8001ad0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001900:	4b75      	ldr	r3, [pc, #468]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	429a      	cmp	r2, r3
 800190c:	d910      	bls.n	8001930 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190e:	4b72      	ldr	r3, [pc, #456]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f023 0207 	bic.w	r2, r3, #7
 8001916:	4970      	ldr	r1, [pc, #448]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	4313      	orrs	r3, r2
 800191c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800191e:	4b6e      	ldr	r3, [pc, #440]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	429a      	cmp	r2, r3
 800192a:	d001      	beq.n	8001930 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e0cf      	b.n	8001ad0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d010      	beq.n	800195e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	4b66      	ldr	r3, [pc, #408]	@ (8001adc <HAL_RCC_ClockConfig+0x1f0>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001948:	429a      	cmp	r2, r3
 800194a:	d908      	bls.n	800195e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800194c:	4b63      	ldr	r3, [pc, #396]	@ (8001adc <HAL_RCC_ClockConfig+0x1f0>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	4960      	ldr	r1, [pc, #384]	@ (8001adc <HAL_RCC_ClockConfig+0x1f0>)
 800195a:	4313      	orrs	r3, r2
 800195c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d04c      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b03      	cmp	r3, #3
 8001970:	d107      	bne.n	8001982 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001972:	4b5a      	ldr	r3, [pc, #360]	@ (8001adc <HAL_RCC_ClockConfig+0x1f0>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d121      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e0a6      	b.n	8001ad0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b02      	cmp	r3, #2
 8001988:	d107      	bne.n	800199a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800198a:	4b54      	ldr	r3, [pc, #336]	@ (8001adc <HAL_RCC_ClockConfig+0x1f0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d115      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e09a      	b.n	8001ad0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d107      	bne.n	80019b2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019a2:	4b4e      	ldr	r3, [pc, #312]	@ (8001adc <HAL_RCC_ClockConfig+0x1f0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d109      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e08e      	b.n	8001ad0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019b2:	4b4a      	ldr	r3, [pc, #296]	@ (8001adc <HAL_RCC_ClockConfig+0x1f0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e086      	b.n	8001ad0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019c2:	4b46      	ldr	r3, [pc, #280]	@ (8001adc <HAL_RCC_ClockConfig+0x1f0>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f023 0203 	bic.w	r2, r3, #3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	4943      	ldr	r1, [pc, #268]	@ (8001adc <HAL_RCC_ClockConfig+0x1f0>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019d4:	f7ff f872 	bl	8000abc <HAL_GetTick>
 80019d8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019da:	e00a      	b.n	80019f2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019dc:	f7ff f86e 	bl	8000abc <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e06e      	b.n	8001ad0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f2:	4b3a      	ldr	r3, [pc, #232]	@ (8001adc <HAL_RCC_ClockConfig+0x1f0>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 020c 	and.w	r2, r3, #12
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d1eb      	bne.n	80019dc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d010      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	4b31      	ldr	r3, [pc, #196]	@ (8001adc <HAL_RCC_ClockConfig+0x1f0>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d208      	bcs.n	8001a32 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a20:	4b2e      	ldr	r3, [pc, #184]	@ (8001adc <HAL_RCC_ClockConfig+0x1f0>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	492b      	ldr	r1, [pc, #172]	@ (8001adc <HAL_RCC_ClockConfig+0x1f0>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a32:	4b29      	ldr	r3, [pc, #164]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d210      	bcs.n	8001a62 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a40:	4b25      	ldr	r3, [pc, #148]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f023 0207 	bic.w	r2, r3, #7
 8001a48:	4923      	ldr	r1, [pc, #140]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a50:	4b21      	ldr	r3, [pc, #132]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0307 	and.w	r3, r3, #7
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d001      	beq.n	8001a62 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e036      	b.n	8001ad0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0304 	and.w	r3, r3, #4
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d008      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001adc <HAL_RCC_ClockConfig+0x1f0>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	4918      	ldr	r1, [pc, #96]	@ (8001adc <HAL_RCC_ClockConfig+0x1f0>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0308 	and.w	r3, r3, #8
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d009      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a8c:	4b13      	ldr	r3, [pc, #76]	@ (8001adc <HAL_RCC_ClockConfig+0x1f0>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	4910      	ldr	r1, [pc, #64]	@ (8001adc <HAL_RCC_ClockConfig+0x1f0>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001aa0:	f000 f824 	bl	8001aec <HAL_RCC_GetSysClockFreq>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8001adc <HAL_RCC_ClockConfig+0x1f0>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	091b      	lsrs	r3, r3, #4
 8001aac:	f003 030f 	and.w	r3, r3, #15
 8001ab0:	490b      	ldr	r1, [pc, #44]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1f4>)
 8001ab2:	5ccb      	ldrb	r3, [r1, r3]
 8001ab4:	f003 031f 	and.w	r3, r3, #31
 8001ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8001abc:	4a09      	ldr	r2, [pc, #36]	@ (8001ae4 <HAL_RCC_ClockConfig+0x1f8>)
 8001abe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ac0:	4b09      	ldr	r3, [pc, #36]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1fc>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7fe ffa9 	bl	8000a1c <HAL_InitTick>
 8001aca:	4603      	mov	r3, r0
 8001acc:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ace:	7afb      	ldrb	r3, [r7, #11]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40022000 	.word	0x40022000
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	08003e74 	.word	0x08003e74
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	20000004 	.word	0x20000004

08001aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b089      	sub	sp, #36	@ 0x24
 8001af0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61fb      	str	r3, [r7, #28]
 8001af6:	2300      	movs	r3, #0
 8001af8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001afa:	4b3e      	ldr	r3, [pc, #248]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f003 030c 	and.w	r3, r3, #12
 8001b02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b04:	4b3b      	ldr	r3, [pc, #236]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	f003 0303 	and.w	r3, r3, #3
 8001b0c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d005      	beq.n	8001b20 <HAL_RCC_GetSysClockFreq+0x34>
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	2b0c      	cmp	r3, #12
 8001b18:	d121      	bne.n	8001b5e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d11e      	bne.n	8001b5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b20:	4b34      	ldr	r3, [pc, #208]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0308 	and.w	r3, r3, #8
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d107      	bne.n	8001b3c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b2c:	4b31      	ldr	r3, [pc, #196]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b32:	0a1b      	lsrs	r3, r3, #8
 8001b34:	f003 030f 	and.w	r3, r3, #15
 8001b38:	61fb      	str	r3, [r7, #28]
 8001b3a:	e005      	b.n	8001b48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	091b      	lsrs	r3, r3, #4
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b48:	4a2b      	ldr	r2, [pc, #172]	@ (8001bf8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b50:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d10d      	bne.n	8001b74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b5c:	e00a      	b.n	8001b74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	2b04      	cmp	r3, #4
 8001b62:	d102      	bne.n	8001b6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b64:	4b25      	ldr	r3, [pc, #148]	@ (8001bfc <HAL_RCC_GetSysClockFreq+0x110>)
 8001b66:	61bb      	str	r3, [r7, #24]
 8001b68:	e004      	b.n	8001b74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	2b08      	cmp	r3, #8
 8001b6e:	d101      	bne.n	8001b74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b70:	4b23      	ldr	r3, [pc, #140]	@ (8001c00 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	2b0c      	cmp	r3, #12
 8001b78:	d134      	bne.n	8001be4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b7a:	4b1e      	ldr	r3, [pc, #120]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d003      	beq.n	8001b92 <HAL_RCC_GetSysClockFreq+0xa6>
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	2b03      	cmp	r3, #3
 8001b8e:	d003      	beq.n	8001b98 <HAL_RCC_GetSysClockFreq+0xac>
 8001b90:	e005      	b.n	8001b9e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b92:	4b1a      	ldr	r3, [pc, #104]	@ (8001bfc <HAL_RCC_GetSysClockFreq+0x110>)
 8001b94:	617b      	str	r3, [r7, #20]
      break;
 8001b96:	e005      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b98:	4b19      	ldr	r3, [pc, #100]	@ (8001c00 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b9a:	617b      	str	r3, [r7, #20]
      break;
 8001b9c:	e002      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	617b      	str	r3, [r7, #20]
      break;
 8001ba2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ba4:	4b13      	ldr	r3, [pc, #76]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	091b      	lsrs	r3, r3, #4
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	3301      	adds	r3, #1
 8001bb0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001bb2:	4b10      	ldr	r3, [pc, #64]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	0a1b      	lsrs	r3, r3, #8
 8001bb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	fb03 f202 	mul.w	r2, r3, r2
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bca:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	0e5b      	lsrs	r3, r3, #25
 8001bd0:	f003 0303 	and.w	r3, r3, #3
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001be4:	69bb      	ldr	r3, [r7, #24]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3724      	adds	r7, #36	@ 0x24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	08003e8c 	.word	0x08003e8c
 8001bfc:	00f42400 	.word	0x00f42400
 8001c00:	007a1200 	.word	0x007a1200

08001c04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c08:	4b03      	ldr	r3, [pc, #12]	@ (8001c18 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	20000000 	.word	0x20000000

08001c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c20:	f7ff fff0 	bl	8001c04 <HAL_RCC_GetHCLKFreq>
 8001c24:	4602      	mov	r2, r0
 8001c26:	4b06      	ldr	r3, [pc, #24]	@ (8001c40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	0a1b      	lsrs	r3, r3, #8
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	4904      	ldr	r1, [pc, #16]	@ (8001c44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c32:	5ccb      	ldrb	r3, [r1, r3]
 8001c34:	f003 031f 	and.w	r3, r3, #31
 8001c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40021000 	.word	0x40021000
 8001c44:	08003e84 	.word	0x08003e84

08001c48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c4c:	f7ff ffda 	bl	8001c04 <HAL_RCC_GetHCLKFreq>
 8001c50:	4602      	mov	r2, r0
 8001c52:	4b06      	ldr	r3, [pc, #24]	@ (8001c6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	0adb      	lsrs	r3, r3, #11
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	4904      	ldr	r1, [pc, #16]	@ (8001c70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c5e:	5ccb      	ldrb	r3, [r1, r3]
 8001c60:	f003 031f 	and.w	r3, r3, #31
 8001c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	08003e84 	.word	0x08003e84

08001c74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c80:	4b2a      	ldr	r3, [pc, #168]	@ (8001d2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c8c:	f7ff f9ee 	bl	800106c <HAL_PWREx_GetVoltageRange>
 8001c90:	6178      	str	r0, [r7, #20]
 8001c92:	e014      	b.n	8001cbe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c94:	4b25      	ldr	r3, [pc, #148]	@ (8001d2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c98:	4a24      	ldr	r2, [pc, #144]	@ (8001d2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ca0:	4b22      	ldr	r3, [pc, #136]	@ (8001d2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001cac:	f7ff f9de 	bl	800106c <HAL_PWREx_GetVoltageRange>
 8001cb0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001cb2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb6:	4a1d      	ldr	r2, [pc, #116]	@ (8001d2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cbc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001cc4:	d10b      	bne.n	8001cde <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b80      	cmp	r3, #128	@ 0x80
 8001cca:	d919      	bls.n	8001d00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2ba0      	cmp	r3, #160	@ 0xa0
 8001cd0:	d902      	bls.n	8001cd8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	613b      	str	r3, [r7, #16]
 8001cd6:	e013      	b.n	8001d00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cd8:	2301      	movs	r3, #1
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	e010      	b.n	8001d00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b80      	cmp	r3, #128	@ 0x80
 8001ce2:	d902      	bls.n	8001cea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	e00a      	b.n	8001d00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b80      	cmp	r3, #128	@ 0x80
 8001cee:	d102      	bne.n	8001cf6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	e004      	b.n	8001d00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b70      	cmp	r3, #112	@ 0x70
 8001cfa:	d101      	bne.n	8001d00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d00:	4b0b      	ldr	r3, [pc, #44]	@ (8001d30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f023 0207 	bic.w	r2, r3, #7
 8001d08:	4909      	ldr	r1, [pc, #36]	@ (8001d30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d10:	4b07      	ldr	r3, [pc, #28]	@ (8001d30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d001      	beq.n	8001d22 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e000      	b.n	8001d24 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	40022000 	.word	0x40022000

08001d34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d40:	2300      	movs	r3, #0
 8001d42:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d041      	beq.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d54:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001d58:	d02a      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001d5a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001d5e:	d824      	bhi.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001d60:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001d64:	d008      	beq.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001d66:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001d6a:	d81e      	bhi.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00a      	beq.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001d70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d74:	d010      	beq.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001d76:	e018      	b.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d78:	4b86      	ldr	r3, [pc, #536]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	4a85      	ldr	r2, [pc, #532]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d82:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d84:	e015      	b.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3304      	adds	r3, #4
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f000 fabb 	bl	8002308 <RCCEx_PLLSAI1_Config>
 8001d92:	4603      	mov	r3, r0
 8001d94:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d96:	e00c      	b.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3320      	adds	r3, #32
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f000 fba6 	bl	80024f0 <RCCEx_PLLSAI2_Config>
 8001da4:	4603      	mov	r3, r0
 8001da6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001da8:	e003      	b.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	74fb      	strb	r3, [r7, #19]
      break;
 8001dae:	e000      	b.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001db0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001db2:	7cfb      	ldrb	r3, [r7, #19]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d10b      	bne.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001db8:	4b76      	ldr	r3, [pc, #472]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dbe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001dc6:	4973      	ldr	r1, [pc, #460]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001dce:	e001      	b.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001dd0:	7cfb      	ldrb	r3, [r7, #19]
 8001dd2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d041      	beq.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001de4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001de8:	d02a      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001dea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001dee:	d824      	bhi.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001df0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001df4:	d008      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001df6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001dfa:	d81e      	bhi.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d00a      	beq.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001e00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e04:	d010      	beq.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e06:	e018      	b.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e08:	4b62      	ldr	r3, [pc, #392]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	4a61      	ldr	r2, [pc, #388]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e12:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e14:	e015      	b.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f000 fa73 	bl	8002308 <RCCEx_PLLSAI1_Config>
 8001e22:	4603      	mov	r3, r0
 8001e24:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e26:	e00c      	b.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3320      	adds	r3, #32
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 fb5e 	bl	80024f0 <RCCEx_PLLSAI2_Config>
 8001e34:	4603      	mov	r3, r0
 8001e36:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e38:	e003      	b.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	74fb      	strb	r3, [r7, #19]
      break;
 8001e3e:	e000      	b.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001e40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e42:	7cfb      	ldrb	r3, [r7, #19]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d10b      	bne.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e48:	4b52      	ldr	r3, [pc, #328]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e4e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e56:	494f      	ldr	r1, [pc, #316]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001e5e:	e001      	b.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e60:	7cfb      	ldrb	r3, [r7, #19]
 8001e62:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f000 80a0 	beq.w	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e72:	2300      	movs	r3, #0
 8001e74:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e76:	4b47      	ldr	r3, [pc, #284]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001e82:	2301      	movs	r3, #1
 8001e84:	e000      	b.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001e86:	2300      	movs	r3, #0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00d      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e8c:	4b41      	ldr	r3, [pc, #260]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e90:	4a40      	ldr	r2, [pc, #256]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e96:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e98:	4b3e      	ldr	r3, [pc, #248]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ea8:	4b3b      	ldr	r3, [pc, #236]	@ (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a3a      	ldr	r2, [pc, #232]	@ (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001eae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001eb4:	f7fe fe02 	bl	8000abc <HAL_GetTick>
 8001eb8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001eba:	e009      	b.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ebc:	f7fe fdfe 	bl	8000abc <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d902      	bls.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	74fb      	strb	r3, [r7, #19]
        break;
 8001ece:	e005      	b.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ed0:	4b31      	ldr	r3, [pc, #196]	@ (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0ef      	beq.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001edc:	7cfb      	ldrb	r3, [r7, #19]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d15c      	bne.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ee2:	4b2c      	ldr	r3, [pc, #176]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ee8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001eec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d01f      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d019      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f00:	4b24      	ldr	r3, [pc, #144]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f0a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f0c:	4b21      	ldr	r3, [pc, #132]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f12:	4a20      	ldr	r2, [pc, #128]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f1c:	4b1d      	ldr	r3, [pc, #116]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f22:	4a1c      	ldr	r2, [pc, #112]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f2c:	4a19      	ldr	r2, [pc, #100]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d016      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3e:	f7fe fdbd 	bl	8000abc <HAL_GetTick>
 8001f42:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f44:	e00b      	b.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f46:	f7fe fdb9 	bl	8000abc <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d902      	bls.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	74fb      	strb	r3, [r7, #19]
            break;
 8001f5c:	e006      	b.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0ec      	beq.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001f6c:	7cfb      	ldrb	r3, [r7, #19]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10c      	bne.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f72:	4b08      	ldr	r3, [pc, #32]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f82:	4904      	ldr	r1, [pc, #16]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001f8a:	e009      	b.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f8c:	7cfb      	ldrb	r3, [r7, #19]
 8001f8e:	74bb      	strb	r3, [r7, #18]
 8001f90:	e006      	b.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001f92:	bf00      	nop
 8001f94:	40021000 	.word	0x40021000
 8001f98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f9c:	7cfb      	ldrb	r3, [r7, #19]
 8001f9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fa0:	7c7b      	ldrb	r3, [r7, #17]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d105      	bne.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fa6:	4b9e      	ldr	r3, [pc, #632]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001faa:	4a9d      	ldr	r2, [pc, #628]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fb0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00a      	beq.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fbe:	4b98      	ldr	r3, [pc, #608]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fc4:	f023 0203 	bic.w	r2, r3, #3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fcc:	4994      	ldr	r1, [pc, #592]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00a      	beq.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fe0:	4b8f      	ldr	r3, [pc, #572]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fe6:	f023 020c 	bic.w	r2, r3, #12
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fee:	498c      	ldr	r1, [pc, #560]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0304 	and.w	r3, r3, #4
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00a      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002002:	4b87      	ldr	r3, [pc, #540]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002008:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002010:	4983      	ldr	r1, [pc, #524]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002012:	4313      	orrs	r3, r2
 8002014:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0308 	and.w	r3, r3, #8
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00a      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002024:	4b7e      	ldr	r3, [pc, #504]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800202a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002032:	497b      	ldr	r1, [pc, #492]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002034:	4313      	orrs	r3, r2
 8002036:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0310 	and.w	r3, r3, #16
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00a      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002046:	4b76      	ldr	r3, [pc, #472]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800204c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002054:	4972      	ldr	r1, [pc, #456]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002056:	4313      	orrs	r3, r2
 8002058:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0320 	and.w	r3, r3, #32
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00a      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002068:	4b6d      	ldr	r3, [pc, #436]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800206a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800206e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002076:	496a      	ldr	r1, [pc, #424]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002078:	4313      	orrs	r3, r2
 800207a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00a      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800208a:	4b65      	ldr	r3, [pc, #404]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800208c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002090:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002098:	4961      	ldr	r1, [pc, #388]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800209a:	4313      	orrs	r3, r2
 800209c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00a      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80020ac:	4b5c      	ldr	r3, [pc, #368]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ba:	4959      	ldr	r1, [pc, #356]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00a      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020ce:	4b54      	ldr	r3, [pc, #336]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020dc:	4950      	ldr	r1, [pc, #320]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00a      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020f0:	4b4b      	ldr	r3, [pc, #300]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020f6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020fe:	4948      	ldr	r1, [pc, #288]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002100:	4313      	orrs	r3, r2
 8002102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00a      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002112:	4b43      	ldr	r3, [pc, #268]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002114:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002118:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002120:	493f      	ldr	r1, [pc, #252]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002122:	4313      	orrs	r3, r2
 8002124:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d028      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002134:	4b3a      	ldr	r3, [pc, #232]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800213a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002142:	4937      	ldr	r1, [pc, #220]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002144:	4313      	orrs	r3, r2
 8002146:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800214e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002152:	d106      	bne.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002154:	4b32      	ldr	r3, [pc, #200]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	4a31      	ldr	r2, [pc, #196]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800215e:	60d3      	str	r3, [r2, #12]
 8002160:	e011      	b.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002166:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800216a:	d10c      	bne.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3304      	adds	r3, #4
 8002170:	2101      	movs	r1, #1
 8002172:	4618      	mov	r0, r3
 8002174:	f000 f8c8 	bl	8002308 <RCCEx_PLLSAI1_Config>
 8002178:	4603      	mov	r3, r0
 800217a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800217c:	7cfb      	ldrb	r3, [r7, #19]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002182:	7cfb      	ldrb	r3, [r7, #19]
 8002184:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d028      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002192:	4b23      	ldr	r3, [pc, #140]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002194:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002198:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021a0:	491f      	ldr	r1, [pc, #124]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021b0:	d106      	bne.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	4a1a      	ldr	r2, [pc, #104]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021bc:	60d3      	str	r3, [r2, #12]
 80021be:	e011      	b.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80021c8:	d10c      	bne.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	3304      	adds	r3, #4
 80021ce:	2101      	movs	r1, #1
 80021d0:	4618      	mov	r0, r3
 80021d2:	f000 f899 	bl	8002308 <RCCEx_PLLSAI1_Config>
 80021d6:	4603      	mov	r3, r0
 80021d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021da:	7cfb      	ldrb	r3, [r7, #19]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80021e0:	7cfb      	ldrb	r3, [r7, #19]
 80021e2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d02b      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021fe:	4908      	ldr	r1, [pc, #32]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002200:	4313      	orrs	r3, r2
 8002202:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800220a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800220e:	d109      	bne.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002210:	4b03      	ldr	r3, [pc, #12]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	4a02      	ldr	r2, [pc, #8]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002216:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800221a:	60d3      	str	r3, [r2, #12]
 800221c:	e014      	b.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800221e:	bf00      	nop
 8002220:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002228:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800222c:	d10c      	bne.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3304      	adds	r3, #4
 8002232:	2101      	movs	r1, #1
 8002234:	4618      	mov	r0, r3
 8002236:	f000 f867 	bl	8002308 <RCCEx_PLLSAI1_Config>
 800223a:	4603      	mov	r3, r0
 800223c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800223e:	7cfb      	ldrb	r3, [r7, #19]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002244:	7cfb      	ldrb	r3, [r7, #19]
 8002246:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d02f      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002254:	4b2b      	ldr	r3, [pc, #172]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800225a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002262:	4928      	ldr	r1, [pc, #160]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002264:	4313      	orrs	r3, r2
 8002266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800226e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002272:	d10d      	bne.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3304      	adds	r3, #4
 8002278:	2102      	movs	r1, #2
 800227a:	4618      	mov	r0, r3
 800227c:	f000 f844 	bl	8002308 <RCCEx_PLLSAI1_Config>
 8002280:	4603      	mov	r3, r0
 8002282:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002284:	7cfb      	ldrb	r3, [r7, #19]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d014      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800228a:	7cfb      	ldrb	r3, [r7, #19]
 800228c:	74bb      	strb	r3, [r7, #18]
 800228e:	e011      	b.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002294:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002298:	d10c      	bne.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3320      	adds	r3, #32
 800229e:	2102      	movs	r1, #2
 80022a0:	4618      	mov	r0, r3
 80022a2:	f000 f925 	bl	80024f0 <RCCEx_PLLSAI2_Config>
 80022a6:	4603      	mov	r3, r0
 80022a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022aa:	7cfb      	ldrb	r3, [r7, #19]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80022b0:	7cfb      	ldrb	r3, [r7, #19]
 80022b2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00a      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80022c0:	4b10      	ldr	r3, [pc, #64]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80022ce:	490d      	ldr	r1, [pc, #52]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00b      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80022e2:	4b08      	ldr	r3, [pc, #32]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022f2:	4904      	ldr	r1, [pc, #16]	@ (8002304 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80022fa:	7cbb      	ldrb	r3, [r7, #18]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40021000 	.word	0x40021000

08002308 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002312:	2300      	movs	r3, #0
 8002314:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002316:	4b75      	ldr	r3, [pc, #468]	@ (80024ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d018      	beq.n	8002354 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002322:	4b72      	ldr	r3, [pc, #456]	@ (80024ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	f003 0203 	and.w	r2, r3, #3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	429a      	cmp	r2, r3
 8002330:	d10d      	bne.n	800234e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
       ||
 8002336:	2b00      	cmp	r3, #0
 8002338:	d009      	beq.n	800234e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800233a:	4b6c      	ldr	r3, [pc, #432]	@ (80024ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	091b      	lsrs	r3, r3, #4
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	1c5a      	adds	r2, r3, #1
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
       ||
 800234a:	429a      	cmp	r2, r3
 800234c:	d047      	beq.n	80023de <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	73fb      	strb	r3, [r7, #15]
 8002352:	e044      	b.n	80023de <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b03      	cmp	r3, #3
 800235a:	d018      	beq.n	800238e <RCCEx_PLLSAI1_Config+0x86>
 800235c:	2b03      	cmp	r3, #3
 800235e:	d825      	bhi.n	80023ac <RCCEx_PLLSAI1_Config+0xa4>
 8002360:	2b01      	cmp	r3, #1
 8002362:	d002      	beq.n	800236a <RCCEx_PLLSAI1_Config+0x62>
 8002364:	2b02      	cmp	r3, #2
 8002366:	d009      	beq.n	800237c <RCCEx_PLLSAI1_Config+0x74>
 8002368:	e020      	b.n	80023ac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800236a:	4b60      	ldr	r3, [pc, #384]	@ (80024ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d11d      	bne.n	80023b2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800237a:	e01a      	b.n	80023b2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800237c:	4b5b      	ldr	r3, [pc, #364]	@ (80024ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002384:	2b00      	cmp	r3, #0
 8002386:	d116      	bne.n	80023b6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800238c:	e013      	b.n	80023b6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800238e:	4b57      	ldr	r3, [pc, #348]	@ (80024ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10f      	bne.n	80023ba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800239a:	4b54      	ldr	r3, [pc, #336]	@ (80024ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d109      	bne.n	80023ba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80023aa:	e006      	b.n	80023ba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	73fb      	strb	r3, [r7, #15]
      break;
 80023b0:	e004      	b.n	80023bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023b2:	bf00      	nop
 80023b4:	e002      	b.n	80023bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023b6:	bf00      	nop
 80023b8:	e000      	b.n	80023bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80023bc:	7bfb      	ldrb	r3, [r7, #15]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10d      	bne.n	80023de <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80023c2:	4b4a      	ldr	r3, [pc, #296]	@ (80024ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6819      	ldr	r1, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	011b      	lsls	r3, r3, #4
 80023d6:	430b      	orrs	r3, r1
 80023d8:	4944      	ldr	r1, [pc, #272]	@ (80024ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80023de:	7bfb      	ldrb	r3, [r7, #15]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d17d      	bne.n	80024e0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80023e4:	4b41      	ldr	r3, [pc, #260]	@ (80024ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a40      	ldr	r2, [pc, #256]	@ (80024ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80023ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023f0:	f7fe fb64 	bl	8000abc <HAL_GetTick>
 80023f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023f6:	e009      	b.n	800240c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023f8:	f7fe fb60 	bl	8000abc <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d902      	bls.n	800240c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	73fb      	strb	r3, [r7, #15]
        break;
 800240a:	e005      	b.n	8002418 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800240c:	4b37      	ldr	r3, [pc, #220]	@ (80024ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1ef      	bne.n	80023f8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002418:	7bfb      	ldrb	r3, [r7, #15]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d160      	bne.n	80024e0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d111      	bne.n	8002448 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002424:	4b31      	ldr	r3, [pc, #196]	@ (80024ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800242c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6892      	ldr	r2, [r2, #8]
 8002434:	0211      	lsls	r1, r2, #8
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	68d2      	ldr	r2, [r2, #12]
 800243a:	0912      	lsrs	r2, r2, #4
 800243c:	0452      	lsls	r2, r2, #17
 800243e:	430a      	orrs	r2, r1
 8002440:	492a      	ldr	r1, [pc, #168]	@ (80024ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002442:	4313      	orrs	r3, r2
 8002444:	610b      	str	r3, [r1, #16]
 8002446:	e027      	b.n	8002498 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d112      	bne.n	8002474 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800244e:	4b27      	ldr	r3, [pc, #156]	@ (80024ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002456:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6892      	ldr	r2, [r2, #8]
 800245e:	0211      	lsls	r1, r2, #8
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	6912      	ldr	r2, [r2, #16]
 8002464:	0852      	lsrs	r2, r2, #1
 8002466:	3a01      	subs	r2, #1
 8002468:	0552      	lsls	r2, r2, #21
 800246a:	430a      	orrs	r2, r1
 800246c:	491f      	ldr	r1, [pc, #124]	@ (80024ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800246e:	4313      	orrs	r3, r2
 8002470:	610b      	str	r3, [r1, #16]
 8002472:	e011      	b.n	8002498 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002474:	4b1d      	ldr	r3, [pc, #116]	@ (80024ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800247c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6892      	ldr	r2, [r2, #8]
 8002484:	0211      	lsls	r1, r2, #8
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	6952      	ldr	r2, [r2, #20]
 800248a:	0852      	lsrs	r2, r2, #1
 800248c:	3a01      	subs	r2, #1
 800248e:	0652      	lsls	r2, r2, #25
 8002490:	430a      	orrs	r2, r1
 8002492:	4916      	ldr	r1, [pc, #88]	@ (80024ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002494:	4313      	orrs	r3, r2
 8002496:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002498:	4b14      	ldr	r3, [pc, #80]	@ (80024ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a13      	ldr	r2, [pc, #76]	@ (80024ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800249e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80024a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a4:	f7fe fb0a 	bl	8000abc <HAL_GetTick>
 80024a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024aa:	e009      	b.n	80024c0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024ac:	f7fe fb06 	bl	8000abc <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d902      	bls.n	80024c0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	73fb      	strb	r3, [r7, #15]
          break;
 80024be:	e005      	b.n	80024cc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024c0:	4b0a      	ldr	r3, [pc, #40]	@ (80024ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0ef      	beq.n	80024ac <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d106      	bne.n	80024e0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80024d2:	4b06      	ldr	r3, [pc, #24]	@ (80024ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d4:	691a      	ldr	r2, [r3, #16]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	4904      	ldr	r1, [pc, #16]	@ (80024ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40021000 	.word	0x40021000

080024f0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024fa:	2300      	movs	r3, #0
 80024fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024fe:	4b6a      	ldr	r3, [pc, #424]	@ (80026a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d018      	beq.n	800253c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800250a:	4b67      	ldr	r3, [pc, #412]	@ (80026a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	f003 0203 	and.w	r2, r3, #3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	429a      	cmp	r2, r3
 8002518:	d10d      	bne.n	8002536 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
       ||
 800251e:	2b00      	cmp	r3, #0
 8002520:	d009      	beq.n	8002536 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002522:	4b61      	ldr	r3, [pc, #388]	@ (80026a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	091b      	lsrs	r3, r3, #4
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	1c5a      	adds	r2, r3, #1
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
       ||
 8002532:	429a      	cmp	r2, r3
 8002534:	d047      	beq.n	80025c6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	73fb      	strb	r3, [r7, #15]
 800253a:	e044      	b.n	80025c6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2b03      	cmp	r3, #3
 8002542:	d018      	beq.n	8002576 <RCCEx_PLLSAI2_Config+0x86>
 8002544:	2b03      	cmp	r3, #3
 8002546:	d825      	bhi.n	8002594 <RCCEx_PLLSAI2_Config+0xa4>
 8002548:	2b01      	cmp	r3, #1
 800254a:	d002      	beq.n	8002552 <RCCEx_PLLSAI2_Config+0x62>
 800254c:	2b02      	cmp	r3, #2
 800254e:	d009      	beq.n	8002564 <RCCEx_PLLSAI2_Config+0x74>
 8002550:	e020      	b.n	8002594 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002552:	4b55      	ldr	r3, [pc, #340]	@ (80026a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d11d      	bne.n	800259a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002562:	e01a      	b.n	800259a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002564:	4b50      	ldr	r3, [pc, #320]	@ (80026a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800256c:	2b00      	cmp	r3, #0
 800256e:	d116      	bne.n	800259e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002574:	e013      	b.n	800259e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002576:	4b4c      	ldr	r3, [pc, #304]	@ (80026a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10f      	bne.n	80025a2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002582:	4b49      	ldr	r3, [pc, #292]	@ (80026a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d109      	bne.n	80025a2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002592:	e006      	b.n	80025a2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	73fb      	strb	r3, [r7, #15]
      break;
 8002598:	e004      	b.n	80025a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800259a:	bf00      	nop
 800259c:	e002      	b.n	80025a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800259e:	bf00      	nop
 80025a0:	e000      	b.n	80025a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80025a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10d      	bne.n	80025c6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025aa:	4b3f      	ldr	r3, [pc, #252]	@ (80026a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6819      	ldr	r1, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	3b01      	subs	r3, #1
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	430b      	orrs	r3, r1
 80025c0:	4939      	ldr	r1, [pc, #228]	@ (80026a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025c6:	7bfb      	ldrb	r3, [r7, #15]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d167      	bne.n	800269c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80025cc:	4b36      	ldr	r3, [pc, #216]	@ (80026a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a35      	ldr	r2, [pc, #212]	@ (80026a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025d8:	f7fe fa70 	bl	8000abc <HAL_GetTick>
 80025dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80025de:	e009      	b.n	80025f4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80025e0:	f7fe fa6c 	bl	8000abc <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d902      	bls.n	80025f4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	73fb      	strb	r3, [r7, #15]
        break;
 80025f2:	e005      	b.n	8002600 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80025f4:	4b2c      	ldr	r3, [pc, #176]	@ (80026a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1ef      	bne.n	80025e0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002600:	7bfb      	ldrb	r3, [r7, #15]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d14a      	bne.n	800269c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d111      	bne.n	8002630 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800260c:	4b26      	ldr	r3, [pc, #152]	@ (80026a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002614:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6892      	ldr	r2, [r2, #8]
 800261c:	0211      	lsls	r1, r2, #8
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	68d2      	ldr	r2, [r2, #12]
 8002622:	0912      	lsrs	r2, r2, #4
 8002624:	0452      	lsls	r2, r2, #17
 8002626:	430a      	orrs	r2, r1
 8002628:	491f      	ldr	r1, [pc, #124]	@ (80026a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800262a:	4313      	orrs	r3, r2
 800262c:	614b      	str	r3, [r1, #20]
 800262e:	e011      	b.n	8002654 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002630:	4b1d      	ldr	r3, [pc, #116]	@ (80026a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002638:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6892      	ldr	r2, [r2, #8]
 8002640:	0211      	lsls	r1, r2, #8
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6912      	ldr	r2, [r2, #16]
 8002646:	0852      	lsrs	r2, r2, #1
 8002648:	3a01      	subs	r2, #1
 800264a:	0652      	lsls	r2, r2, #25
 800264c:	430a      	orrs	r2, r1
 800264e:	4916      	ldr	r1, [pc, #88]	@ (80026a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002650:	4313      	orrs	r3, r2
 8002652:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002654:	4b14      	ldr	r3, [pc, #80]	@ (80026a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a13      	ldr	r2, [pc, #76]	@ (80026a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800265a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800265e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002660:	f7fe fa2c 	bl	8000abc <HAL_GetTick>
 8002664:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002666:	e009      	b.n	800267c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002668:	f7fe fa28 	bl	8000abc <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d902      	bls.n	800267c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	73fb      	strb	r3, [r7, #15]
          break;
 800267a:	e005      	b.n	8002688 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800267c:	4b0a      	ldr	r3, [pc, #40]	@ (80026a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0ef      	beq.n	8002668 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002688:	7bfb      	ldrb	r3, [r7, #15]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d106      	bne.n	800269c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800268e:	4b06      	ldr	r3, [pc, #24]	@ (80026a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002690:	695a      	ldr	r2, [r3, #20]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	4904      	ldr	r1, [pc, #16]	@ (80026a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002698:	4313      	orrs	r3, r2
 800269a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800269c:	7bfb      	ldrb	r3, [r7, #15]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40021000 	.word	0x40021000

080026ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e049      	b.n	8002752 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d106      	bne.n	80026d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7fe f870 	bl	80007b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2202      	movs	r2, #2
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3304      	adds	r3, #4
 80026e8:	4619      	mov	r1, r3
 80026ea:	4610      	mov	r0, r2
 80026ec:	f000 fa50 	bl	8002b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
	...

0800275c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d109      	bne.n	8002780 <HAL_TIM_PWM_Start+0x24>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b01      	cmp	r3, #1
 8002776:	bf14      	ite	ne
 8002778:	2301      	movne	r3, #1
 800277a:	2300      	moveq	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	e03c      	b.n	80027fa <HAL_TIM_PWM_Start+0x9e>
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	2b04      	cmp	r3, #4
 8002784:	d109      	bne.n	800279a <HAL_TIM_PWM_Start+0x3e>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b01      	cmp	r3, #1
 8002790:	bf14      	ite	ne
 8002792:	2301      	movne	r3, #1
 8002794:	2300      	moveq	r3, #0
 8002796:	b2db      	uxtb	r3, r3
 8002798:	e02f      	b.n	80027fa <HAL_TIM_PWM_Start+0x9e>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	2b08      	cmp	r3, #8
 800279e:	d109      	bne.n	80027b4 <HAL_TIM_PWM_Start+0x58>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	bf14      	ite	ne
 80027ac:	2301      	movne	r3, #1
 80027ae:	2300      	moveq	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	e022      	b.n	80027fa <HAL_TIM_PWM_Start+0x9e>
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	2b0c      	cmp	r3, #12
 80027b8:	d109      	bne.n	80027ce <HAL_TIM_PWM_Start+0x72>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	bf14      	ite	ne
 80027c6:	2301      	movne	r3, #1
 80027c8:	2300      	moveq	r3, #0
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	e015      	b.n	80027fa <HAL_TIM_PWM_Start+0x9e>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	2b10      	cmp	r3, #16
 80027d2:	d109      	bne.n	80027e8 <HAL_TIM_PWM_Start+0x8c>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b01      	cmp	r3, #1
 80027de:	bf14      	ite	ne
 80027e0:	2301      	movne	r3, #1
 80027e2:	2300      	moveq	r3, #0
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	e008      	b.n	80027fa <HAL_TIM_PWM_Start+0x9e>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	bf14      	ite	ne
 80027f4:	2301      	movne	r3, #1
 80027f6:	2300      	moveq	r3, #0
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e09c      	b.n	800293c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d104      	bne.n	8002812 <HAL_TIM_PWM_Start+0xb6>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2202      	movs	r2, #2
 800280c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002810:	e023      	b.n	800285a <HAL_TIM_PWM_Start+0xfe>
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	2b04      	cmp	r3, #4
 8002816:	d104      	bne.n	8002822 <HAL_TIM_PWM_Start+0xc6>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2202      	movs	r2, #2
 800281c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002820:	e01b      	b.n	800285a <HAL_TIM_PWM_Start+0xfe>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	2b08      	cmp	r3, #8
 8002826:	d104      	bne.n	8002832 <HAL_TIM_PWM_Start+0xd6>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2202      	movs	r2, #2
 800282c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002830:	e013      	b.n	800285a <HAL_TIM_PWM_Start+0xfe>
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	2b0c      	cmp	r3, #12
 8002836:	d104      	bne.n	8002842 <HAL_TIM_PWM_Start+0xe6>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2202      	movs	r2, #2
 800283c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002840:	e00b      	b.n	800285a <HAL_TIM_PWM_Start+0xfe>
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	2b10      	cmp	r3, #16
 8002846:	d104      	bne.n	8002852 <HAL_TIM_PWM_Start+0xf6>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2202      	movs	r2, #2
 800284c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002850:	e003      	b.n	800285a <HAL_TIM_PWM_Start+0xfe>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2202      	movs	r2, #2
 8002856:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2201      	movs	r2, #1
 8002860:	6839      	ldr	r1, [r7, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f000 fd04 	bl	8003270 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a35      	ldr	r2, [pc, #212]	@ (8002944 <HAL_TIM_PWM_Start+0x1e8>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d013      	beq.n	800289a <HAL_TIM_PWM_Start+0x13e>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a34      	ldr	r2, [pc, #208]	@ (8002948 <HAL_TIM_PWM_Start+0x1ec>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d00e      	beq.n	800289a <HAL_TIM_PWM_Start+0x13e>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a32      	ldr	r2, [pc, #200]	@ (800294c <HAL_TIM_PWM_Start+0x1f0>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d009      	beq.n	800289a <HAL_TIM_PWM_Start+0x13e>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a31      	ldr	r2, [pc, #196]	@ (8002950 <HAL_TIM_PWM_Start+0x1f4>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d004      	beq.n	800289a <HAL_TIM_PWM_Start+0x13e>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a2f      	ldr	r2, [pc, #188]	@ (8002954 <HAL_TIM_PWM_Start+0x1f8>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d101      	bne.n	800289e <HAL_TIM_PWM_Start+0x142>
 800289a:	2301      	movs	r3, #1
 800289c:	e000      	b.n	80028a0 <HAL_TIM_PWM_Start+0x144>
 800289e:	2300      	movs	r3, #0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d007      	beq.n	80028b4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80028b2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a22      	ldr	r2, [pc, #136]	@ (8002944 <HAL_TIM_PWM_Start+0x1e8>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d01d      	beq.n	80028fa <HAL_TIM_PWM_Start+0x19e>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028c6:	d018      	beq.n	80028fa <HAL_TIM_PWM_Start+0x19e>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a22      	ldr	r2, [pc, #136]	@ (8002958 <HAL_TIM_PWM_Start+0x1fc>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d013      	beq.n	80028fa <HAL_TIM_PWM_Start+0x19e>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a21      	ldr	r2, [pc, #132]	@ (800295c <HAL_TIM_PWM_Start+0x200>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d00e      	beq.n	80028fa <HAL_TIM_PWM_Start+0x19e>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a1f      	ldr	r2, [pc, #124]	@ (8002960 <HAL_TIM_PWM_Start+0x204>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d009      	beq.n	80028fa <HAL_TIM_PWM_Start+0x19e>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a17      	ldr	r2, [pc, #92]	@ (8002948 <HAL_TIM_PWM_Start+0x1ec>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d004      	beq.n	80028fa <HAL_TIM_PWM_Start+0x19e>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a15      	ldr	r2, [pc, #84]	@ (800294c <HAL_TIM_PWM_Start+0x1f0>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d115      	bne.n	8002926 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	4b18      	ldr	r3, [pc, #96]	@ (8002964 <HAL_TIM_PWM_Start+0x208>)
 8002902:	4013      	ands	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2b06      	cmp	r3, #6
 800290a:	d015      	beq.n	8002938 <HAL_TIM_PWM_Start+0x1dc>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002912:	d011      	beq.n	8002938 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f042 0201 	orr.w	r2, r2, #1
 8002922:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002924:	e008      	b.n	8002938 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f042 0201 	orr.w	r2, r2, #1
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	e000      	b.n	800293a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002938:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40012c00 	.word	0x40012c00
 8002948:	40013400 	.word	0x40013400
 800294c:	40014000 	.word	0x40014000
 8002950:	40014400 	.word	0x40014400
 8002954:	40014800 	.word	0x40014800
 8002958:	40000400 	.word	0x40000400
 800295c:	40000800 	.word	0x40000800
 8002960:	40000c00 	.word	0x40000c00
 8002964:	00010007 	.word	0x00010007

08002968 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002974:	2300      	movs	r3, #0
 8002976:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800297e:	2b01      	cmp	r3, #1
 8002980:	d101      	bne.n	8002986 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002982:	2302      	movs	r3, #2
 8002984:	e0ff      	b.n	8002b86 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b14      	cmp	r3, #20
 8002992:	f200 80f0 	bhi.w	8002b76 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002996:	a201      	add	r2, pc, #4	@ (adr r2, 800299c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800299c:	080029f1 	.word	0x080029f1
 80029a0:	08002b77 	.word	0x08002b77
 80029a4:	08002b77 	.word	0x08002b77
 80029a8:	08002b77 	.word	0x08002b77
 80029ac:	08002a31 	.word	0x08002a31
 80029b0:	08002b77 	.word	0x08002b77
 80029b4:	08002b77 	.word	0x08002b77
 80029b8:	08002b77 	.word	0x08002b77
 80029bc:	08002a73 	.word	0x08002a73
 80029c0:	08002b77 	.word	0x08002b77
 80029c4:	08002b77 	.word	0x08002b77
 80029c8:	08002b77 	.word	0x08002b77
 80029cc:	08002ab3 	.word	0x08002ab3
 80029d0:	08002b77 	.word	0x08002b77
 80029d4:	08002b77 	.word	0x08002b77
 80029d8:	08002b77 	.word	0x08002b77
 80029dc:	08002af5 	.word	0x08002af5
 80029e0:	08002b77 	.word	0x08002b77
 80029e4:	08002b77 	.word	0x08002b77
 80029e8:	08002b77 	.word	0x08002b77
 80029ec:	08002b35 	.word	0x08002b35
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68b9      	ldr	r1, [r7, #8]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f000 f964 	bl	8002cc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	699a      	ldr	r2, [r3, #24]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 0208 	orr.w	r2, r2, #8
 8002a0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	699a      	ldr	r2, [r3, #24]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0204 	bic.w	r2, r2, #4
 8002a1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6999      	ldr	r1, [r3, #24]
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	691a      	ldr	r2, [r3, #16]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	619a      	str	r2, [r3, #24]
      break;
 8002a2e:	e0a5      	b.n	8002b7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68b9      	ldr	r1, [r7, #8]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 f9d4 	bl	8002de4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	699a      	ldr	r2, [r3, #24]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	699a      	ldr	r2, [r3, #24]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6999      	ldr	r1, [r3, #24]
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	021a      	lsls	r2, r3, #8
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	619a      	str	r2, [r3, #24]
      break;
 8002a70:	e084      	b.n	8002b7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68b9      	ldr	r1, [r7, #8]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f000 fa3d 	bl	8002ef8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	69da      	ldr	r2, [r3, #28]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f042 0208 	orr.w	r2, r2, #8
 8002a8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	69da      	ldr	r2, [r3, #28]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 0204 	bic.w	r2, r2, #4
 8002a9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	69d9      	ldr	r1, [r3, #28]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	691a      	ldr	r2, [r3, #16]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	430a      	orrs	r2, r1
 8002aae:	61da      	str	r2, [r3, #28]
      break;
 8002ab0:	e064      	b.n	8002b7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68b9      	ldr	r1, [r7, #8]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f000 faa5 	bl	8003008 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	69da      	ldr	r2, [r3, #28]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002acc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	69da      	ldr	r2, [r3, #28]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002adc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	69d9      	ldr	r1, [r3, #28]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	021a      	lsls	r2, r3, #8
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	61da      	str	r2, [r3, #28]
      break;
 8002af2:	e043      	b.n	8002b7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68b9      	ldr	r1, [r7, #8]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 faee 	bl	80030dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f042 0208 	orr.w	r2, r2, #8
 8002b0e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0204 	bic.w	r2, r2, #4
 8002b1e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	691a      	ldr	r2, [r3, #16]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002b32:	e023      	b.n	8002b7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68b9      	ldr	r1, [r7, #8]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 fb32 	bl	80031a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b4e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b5e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	021a      	lsls	r2, r3, #8
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	430a      	orrs	r2, r1
 8002b72:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002b74:	e002      	b.n	8002b7c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	75fb      	strb	r3, [r7, #23]
      break;
 8002b7a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3718      	adds	r7, #24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop

08002b90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a40      	ldr	r2, [pc, #256]	@ (8002ca4 <TIM_Base_SetConfig+0x114>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d013      	beq.n	8002bd0 <TIM_Base_SetConfig+0x40>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bae:	d00f      	beq.n	8002bd0 <TIM_Base_SetConfig+0x40>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a3d      	ldr	r2, [pc, #244]	@ (8002ca8 <TIM_Base_SetConfig+0x118>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d00b      	beq.n	8002bd0 <TIM_Base_SetConfig+0x40>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a3c      	ldr	r2, [pc, #240]	@ (8002cac <TIM_Base_SetConfig+0x11c>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d007      	beq.n	8002bd0 <TIM_Base_SetConfig+0x40>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a3b      	ldr	r2, [pc, #236]	@ (8002cb0 <TIM_Base_SetConfig+0x120>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d003      	beq.n	8002bd0 <TIM_Base_SetConfig+0x40>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a3a      	ldr	r2, [pc, #232]	@ (8002cb4 <TIM_Base_SetConfig+0x124>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d108      	bne.n	8002be2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a2f      	ldr	r2, [pc, #188]	@ (8002ca4 <TIM_Base_SetConfig+0x114>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d01f      	beq.n	8002c2a <TIM_Base_SetConfig+0x9a>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bf0:	d01b      	beq.n	8002c2a <TIM_Base_SetConfig+0x9a>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a2c      	ldr	r2, [pc, #176]	@ (8002ca8 <TIM_Base_SetConfig+0x118>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d017      	beq.n	8002c2a <TIM_Base_SetConfig+0x9a>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a2b      	ldr	r2, [pc, #172]	@ (8002cac <TIM_Base_SetConfig+0x11c>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d013      	beq.n	8002c2a <TIM_Base_SetConfig+0x9a>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a2a      	ldr	r2, [pc, #168]	@ (8002cb0 <TIM_Base_SetConfig+0x120>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d00f      	beq.n	8002c2a <TIM_Base_SetConfig+0x9a>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a29      	ldr	r2, [pc, #164]	@ (8002cb4 <TIM_Base_SetConfig+0x124>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d00b      	beq.n	8002c2a <TIM_Base_SetConfig+0x9a>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a28      	ldr	r2, [pc, #160]	@ (8002cb8 <TIM_Base_SetConfig+0x128>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d007      	beq.n	8002c2a <TIM_Base_SetConfig+0x9a>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a27      	ldr	r2, [pc, #156]	@ (8002cbc <TIM_Base_SetConfig+0x12c>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d003      	beq.n	8002c2a <TIM_Base_SetConfig+0x9a>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a26      	ldr	r2, [pc, #152]	@ (8002cc0 <TIM_Base_SetConfig+0x130>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d108      	bne.n	8002c3c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a10      	ldr	r2, [pc, #64]	@ (8002ca4 <TIM_Base_SetConfig+0x114>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d00f      	beq.n	8002c88 <TIM_Base_SetConfig+0xf8>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a12      	ldr	r2, [pc, #72]	@ (8002cb4 <TIM_Base_SetConfig+0x124>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d00b      	beq.n	8002c88 <TIM_Base_SetConfig+0xf8>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a11      	ldr	r2, [pc, #68]	@ (8002cb8 <TIM_Base_SetConfig+0x128>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d007      	beq.n	8002c88 <TIM_Base_SetConfig+0xf8>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a10      	ldr	r2, [pc, #64]	@ (8002cbc <TIM_Base_SetConfig+0x12c>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d003      	beq.n	8002c88 <TIM_Base_SetConfig+0xf8>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a0f      	ldr	r2, [pc, #60]	@ (8002cc0 <TIM_Base_SetConfig+0x130>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d103      	bne.n	8002c90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	691a      	ldr	r2, [r3, #16]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	615a      	str	r2, [r3, #20]
}
 8002c96:	bf00      	nop
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	40012c00 	.word	0x40012c00
 8002ca8:	40000400 	.word	0x40000400
 8002cac:	40000800 	.word	0x40000800
 8002cb0:	40000c00 	.word	0x40000c00
 8002cb4:	40013400 	.word	0x40013400
 8002cb8:	40014000 	.word	0x40014000
 8002cbc:	40014400 	.word	0x40014400
 8002cc0:	40014800 	.word	0x40014800

08002cc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b087      	sub	sp, #28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	f023 0201 	bic.w	r2, r3, #1
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f023 0303 	bic.w	r3, r3, #3
 8002cfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	f023 0302 	bic.w	r3, r3, #2
 8002d10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a2c      	ldr	r2, [pc, #176]	@ (8002dd0 <TIM_OC1_SetConfig+0x10c>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d00f      	beq.n	8002d44 <TIM_OC1_SetConfig+0x80>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a2b      	ldr	r2, [pc, #172]	@ (8002dd4 <TIM_OC1_SetConfig+0x110>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d00b      	beq.n	8002d44 <TIM_OC1_SetConfig+0x80>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a2a      	ldr	r2, [pc, #168]	@ (8002dd8 <TIM_OC1_SetConfig+0x114>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d007      	beq.n	8002d44 <TIM_OC1_SetConfig+0x80>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a29      	ldr	r2, [pc, #164]	@ (8002ddc <TIM_OC1_SetConfig+0x118>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d003      	beq.n	8002d44 <TIM_OC1_SetConfig+0x80>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a28      	ldr	r2, [pc, #160]	@ (8002de0 <TIM_OC1_SetConfig+0x11c>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d10c      	bne.n	8002d5e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	f023 0308 	bic.w	r3, r3, #8
 8002d4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f023 0304 	bic.w	r3, r3, #4
 8002d5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a1b      	ldr	r2, [pc, #108]	@ (8002dd0 <TIM_OC1_SetConfig+0x10c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d00f      	beq.n	8002d86 <TIM_OC1_SetConfig+0xc2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a1a      	ldr	r2, [pc, #104]	@ (8002dd4 <TIM_OC1_SetConfig+0x110>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d00b      	beq.n	8002d86 <TIM_OC1_SetConfig+0xc2>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a19      	ldr	r2, [pc, #100]	@ (8002dd8 <TIM_OC1_SetConfig+0x114>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d007      	beq.n	8002d86 <TIM_OC1_SetConfig+0xc2>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a18      	ldr	r2, [pc, #96]	@ (8002ddc <TIM_OC1_SetConfig+0x118>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d003      	beq.n	8002d86 <TIM_OC1_SetConfig+0xc2>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a17      	ldr	r2, [pc, #92]	@ (8002de0 <TIM_OC1_SetConfig+0x11c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d111      	bne.n	8002daa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002d94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	621a      	str	r2, [r3, #32]
}
 8002dc4:	bf00      	nop
 8002dc6:	371c      	adds	r7, #28
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	40012c00 	.word	0x40012c00
 8002dd4:	40013400 	.word	0x40013400
 8002dd8:	40014000 	.word	0x40014000
 8002ddc:	40014400 	.word	0x40014400
 8002de0:	40014800 	.word	0x40014800

08002de4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b087      	sub	sp, #28
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	f023 0210 	bic.w	r2, r3, #16
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	021b      	lsls	r3, r3, #8
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	f023 0320 	bic.w	r3, r3, #32
 8002e32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	011b      	lsls	r3, r3, #4
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a28      	ldr	r2, [pc, #160]	@ (8002ee4 <TIM_OC2_SetConfig+0x100>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d003      	beq.n	8002e50 <TIM_OC2_SetConfig+0x6c>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a27      	ldr	r2, [pc, #156]	@ (8002ee8 <TIM_OC2_SetConfig+0x104>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d10d      	bne.n	8002e6c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	011b      	lsls	r3, r3, #4
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ee4 <TIM_OC2_SetConfig+0x100>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d00f      	beq.n	8002e94 <TIM_OC2_SetConfig+0xb0>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a1c      	ldr	r2, [pc, #112]	@ (8002ee8 <TIM_OC2_SetConfig+0x104>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d00b      	beq.n	8002e94 <TIM_OC2_SetConfig+0xb0>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a1b      	ldr	r2, [pc, #108]	@ (8002eec <TIM_OC2_SetConfig+0x108>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d007      	beq.n	8002e94 <TIM_OC2_SetConfig+0xb0>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a1a      	ldr	r2, [pc, #104]	@ (8002ef0 <TIM_OC2_SetConfig+0x10c>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d003      	beq.n	8002e94 <TIM_OC2_SetConfig+0xb0>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a19      	ldr	r2, [pc, #100]	@ (8002ef4 <TIM_OC2_SetConfig+0x110>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d113      	bne.n	8002ebc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002e9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	621a      	str	r2, [r3, #32]
}
 8002ed6:	bf00      	nop
 8002ed8:	371c      	adds	r7, #28
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40012c00 	.word	0x40012c00
 8002ee8:	40013400 	.word	0x40013400
 8002eec:	40014000 	.word	0x40014000
 8002ef0:	40014400 	.word	0x40014400
 8002ef4:	40014800 	.word	0x40014800

08002ef8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b087      	sub	sp, #28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f023 0303 	bic.w	r3, r3, #3
 8002f32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002f44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	021b      	lsls	r3, r3, #8
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a27      	ldr	r2, [pc, #156]	@ (8002ff4 <TIM_OC3_SetConfig+0xfc>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d003      	beq.n	8002f62 <TIM_OC3_SetConfig+0x6a>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a26      	ldr	r2, [pc, #152]	@ (8002ff8 <TIM_OC3_SetConfig+0x100>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d10d      	bne.n	8002f7e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002f68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	021b      	lsls	r3, r3, #8
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002f7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a1c      	ldr	r2, [pc, #112]	@ (8002ff4 <TIM_OC3_SetConfig+0xfc>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d00f      	beq.n	8002fa6 <TIM_OC3_SetConfig+0xae>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a1b      	ldr	r2, [pc, #108]	@ (8002ff8 <TIM_OC3_SetConfig+0x100>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d00b      	beq.n	8002fa6 <TIM_OC3_SetConfig+0xae>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a1a      	ldr	r2, [pc, #104]	@ (8002ffc <TIM_OC3_SetConfig+0x104>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d007      	beq.n	8002fa6 <TIM_OC3_SetConfig+0xae>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a19      	ldr	r2, [pc, #100]	@ (8003000 <TIM_OC3_SetConfig+0x108>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d003      	beq.n	8002fa6 <TIM_OC3_SetConfig+0xae>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a18      	ldr	r2, [pc, #96]	@ (8003004 <TIM_OC3_SetConfig+0x10c>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d113      	bne.n	8002fce <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002fac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	011b      	lsls	r3, r3, #4
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	621a      	str	r2, [r3, #32]
}
 8002fe8:	bf00      	nop
 8002fea:	371c      	adds	r7, #28
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	40012c00 	.word	0x40012c00
 8002ff8:	40013400 	.word	0x40013400
 8002ffc:	40014000 	.word	0x40014000
 8003000:	40014400 	.word	0x40014400
 8003004:	40014800 	.word	0x40014800

08003008 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003008:	b480      	push	{r7}
 800300a:	b087      	sub	sp, #28
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003036:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800303a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003042:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	021b      	lsls	r3, r3, #8
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	4313      	orrs	r3, r2
 800304e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003056:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	031b      	lsls	r3, r3, #12
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	4313      	orrs	r3, r2
 8003062:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a18      	ldr	r2, [pc, #96]	@ (80030c8 <TIM_OC4_SetConfig+0xc0>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d00f      	beq.n	800308c <TIM_OC4_SetConfig+0x84>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a17      	ldr	r2, [pc, #92]	@ (80030cc <TIM_OC4_SetConfig+0xc4>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d00b      	beq.n	800308c <TIM_OC4_SetConfig+0x84>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a16      	ldr	r2, [pc, #88]	@ (80030d0 <TIM_OC4_SetConfig+0xc8>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d007      	beq.n	800308c <TIM_OC4_SetConfig+0x84>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a15      	ldr	r2, [pc, #84]	@ (80030d4 <TIM_OC4_SetConfig+0xcc>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d003      	beq.n	800308c <TIM_OC4_SetConfig+0x84>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a14      	ldr	r2, [pc, #80]	@ (80030d8 <TIM_OC4_SetConfig+0xd0>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d109      	bne.n	80030a0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003092:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	019b      	lsls	r3, r3, #6
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	4313      	orrs	r3, r2
 800309e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	621a      	str	r2, [r3, #32]
}
 80030ba:	bf00      	nop
 80030bc:	371c      	adds	r7, #28
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	40012c00 	.word	0x40012c00
 80030cc:	40013400 	.word	0x40013400
 80030d0:	40014000 	.word	0x40014000
 80030d4:	40014400 	.word	0x40014400
 80030d8:	40014800 	.word	0x40014800

080030dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80030dc:	b480      	push	{r7}
 80030de:	b087      	sub	sp, #28
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800310a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800310e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	4313      	orrs	r3, r2
 8003118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003120:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	041b      	lsls	r3, r3, #16
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	4313      	orrs	r3, r2
 800312c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a17      	ldr	r2, [pc, #92]	@ (8003190 <TIM_OC5_SetConfig+0xb4>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d00f      	beq.n	8003156 <TIM_OC5_SetConfig+0x7a>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a16      	ldr	r2, [pc, #88]	@ (8003194 <TIM_OC5_SetConfig+0xb8>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d00b      	beq.n	8003156 <TIM_OC5_SetConfig+0x7a>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a15      	ldr	r2, [pc, #84]	@ (8003198 <TIM_OC5_SetConfig+0xbc>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d007      	beq.n	8003156 <TIM_OC5_SetConfig+0x7a>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a14      	ldr	r2, [pc, #80]	@ (800319c <TIM_OC5_SetConfig+0xc0>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d003      	beq.n	8003156 <TIM_OC5_SetConfig+0x7a>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a13      	ldr	r2, [pc, #76]	@ (80031a0 <TIM_OC5_SetConfig+0xc4>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d109      	bne.n	800316a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800315c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	021b      	lsls	r3, r3, #8
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	4313      	orrs	r3, r2
 8003168:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	621a      	str	r2, [r3, #32]
}
 8003184:	bf00      	nop
 8003186:	371c      	adds	r7, #28
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	40012c00 	.word	0x40012c00
 8003194:	40013400 	.word	0x40013400
 8003198:	40014000 	.word	0x40014000
 800319c:	40014400 	.word	0x40014400
 80031a0:	40014800 	.word	0x40014800

080031a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b087      	sub	sp, #28
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	021b      	lsls	r3, r3, #8
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80031ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	051b      	lsls	r3, r3, #20
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a18      	ldr	r2, [pc, #96]	@ (800325c <TIM_OC6_SetConfig+0xb8>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d00f      	beq.n	8003220 <TIM_OC6_SetConfig+0x7c>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a17      	ldr	r2, [pc, #92]	@ (8003260 <TIM_OC6_SetConfig+0xbc>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d00b      	beq.n	8003220 <TIM_OC6_SetConfig+0x7c>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a16      	ldr	r2, [pc, #88]	@ (8003264 <TIM_OC6_SetConfig+0xc0>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d007      	beq.n	8003220 <TIM_OC6_SetConfig+0x7c>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a15      	ldr	r2, [pc, #84]	@ (8003268 <TIM_OC6_SetConfig+0xc4>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d003      	beq.n	8003220 <TIM_OC6_SetConfig+0x7c>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a14      	ldr	r2, [pc, #80]	@ (800326c <TIM_OC6_SetConfig+0xc8>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d109      	bne.n	8003234 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003226:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	029b      	lsls	r3, r3, #10
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	4313      	orrs	r3, r2
 8003232:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	621a      	str	r2, [r3, #32]
}
 800324e:	bf00      	nop
 8003250:	371c      	adds	r7, #28
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	40012c00 	.word	0x40012c00
 8003260:	40013400 	.word	0x40013400
 8003264:	40014000 	.word	0x40014000
 8003268:	40014400 	.word	0x40014400
 800326c:	40014800 	.word	0x40014800

08003270 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003270:	b480      	push	{r7}
 8003272:	b087      	sub	sp, #28
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	f003 031f 	and.w	r3, r3, #31
 8003282:	2201      	movs	r2, #1
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6a1a      	ldr	r2, [r3, #32]
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	43db      	mvns	r3, r3
 8003292:	401a      	ands	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6a1a      	ldr	r2, [r3, #32]
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	f003 031f 	and.w	r3, r3, #31
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	fa01 f303 	lsl.w	r3, r1, r3
 80032a8:	431a      	orrs	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	621a      	str	r2, [r3, #32]
}
 80032ae:	bf00      	nop
 80032b0:	371c      	adds	r7, #28
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
	...

080032bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d101      	bne.n	80032d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032d0:	2302      	movs	r3, #2
 80032d2:	e068      	b.n	80033a6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2202      	movs	r2, #2
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a2e      	ldr	r2, [pc, #184]	@ (80033b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d004      	beq.n	8003308 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a2d      	ldr	r2, [pc, #180]	@ (80033b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d108      	bne.n	800331a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800330e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	4313      	orrs	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003320:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	4313      	orrs	r3, r2
 800332a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a1e      	ldr	r2, [pc, #120]	@ (80033b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d01d      	beq.n	800337a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003346:	d018      	beq.n	800337a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a1b      	ldr	r2, [pc, #108]	@ (80033bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d013      	beq.n	800337a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a1a      	ldr	r2, [pc, #104]	@ (80033c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d00e      	beq.n	800337a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a18      	ldr	r2, [pc, #96]	@ (80033c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d009      	beq.n	800337a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a13      	ldr	r2, [pc, #76]	@ (80033b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d004      	beq.n	800337a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a14      	ldr	r2, [pc, #80]	@ (80033c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d10c      	bne.n	8003394 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003380:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	4313      	orrs	r3, r2
 800338a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3714      	adds	r7, #20
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	40012c00 	.word	0x40012c00
 80033b8:	40013400 	.word	0x40013400
 80033bc:	40000400 	.word	0x40000400
 80033c0:	40000800 	.word	0x40000800
 80033c4:	40000c00 	.word	0x40000c00
 80033c8:	40014000 	.word	0x40014000

080033cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e040      	b.n	8003460 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d106      	bne.n	80033f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7fd fa34 	bl	800085c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2224      	movs	r2, #36	@ 0x24
 80033f8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 0201 	bic.w	r2, r2, #1
 8003408:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340e:	2b00      	cmp	r3, #0
 8003410:	d002      	beq.n	8003418 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 fae0 	bl	80039d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 f825 	bl	8003468 <UART_SetConfig>
 800341e:	4603      	mov	r3, r0
 8003420:	2b01      	cmp	r3, #1
 8003422:	d101      	bne.n	8003428 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e01b      	b.n	8003460 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003436:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689a      	ldr	r2, [r3, #8]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003446:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f042 0201 	orr.w	r2, r2, #1
 8003456:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 fb5f 	bl	8003b1c <UART_CheckIdleState>
 800345e:	4603      	mov	r3, r0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800346c:	b08a      	sub	sp, #40	@ 0x28
 800346e:	af00      	add	r7, sp, #0
 8003470:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003472:	2300      	movs	r3, #0
 8003474:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	689a      	ldr	r2, [r3, #8]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	431a      	orrs	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	431a      	orrs	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	69db      	ldr	r3, [r3, #28]
 800348c:	4313      	orrs	r3, r2
 800348e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	4ba4      	ldr	r3, [pc, #656]	@ (8003728 <UART_SetConfig+0x2c0>)
 8003498:	4013      	ands	r3, r2
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	6812      	ldr	r2, [r2, #0]
 800349e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80034a0:	430b      	orrs	r3, r1
 80034a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a99      	ldr	r2, [pc, #612]	@ (800372c <UART_SetConfig+0x2c4>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d004      	beq.n	80034d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034d0:	4313      	orrs	r3, r2
 80034d2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034e4:	430a      	orrs	r2, r1
 80034e6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a90      	ldr	r2, [pc, #576]	@ (8003730 <UART_SetConfig+0x2c8>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d126      	bne.n	8003540 <UART_SetConfig+0xd8>
 80034f2:	4b90      	ldr	r3, [pc, #576]	@ (8003734 <UART_SetConfig+0x2cc>)
 80034f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034f8:	f003 0303 	and.w	r3, r3, #3
 80034fc:	2b03      	cmp	r3, #3
 80034fe:	d81b      	bhi.n	8003538 <UART_SetConfig+0xd0>
 8003500:	a201      	add	r2, pc, #4	@ (adr r2, 8003508 <UART_SetConfig+0xa0>)
 8003502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003506:	bf00      	nop
 8003508:	08003519 	.word	0x08003519
 800350c:	08003529 	.word	0x08003529
 8003510:	08003521 	.word	0x08003521
 8003514:	08003531 	.word	0x08003531
 8003518:	2301      	movs	r3, #1
 800351a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800351e:	e116      	b.n	800374e <UART_SetConfig+0x2e6>
 8003520:	2302      	movs	r3, #2
 8003522:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003526:	e112      	b.n	800374e <UART_SetConfig+0x2e6>
 8003528:	2304      	movs	r3, #4
 800352a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800352e:	e10e      	b.n	800374e <UART_SetConfig+0x2e6>
 8003530:	2308      	movs	r3, #8
 8003532:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003536:	e10a      	b.n	800374e <UART_SetConfig+0x2e6>
 8003538:	2310      	movs	r3, #16
 800353a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800353e:	e106      	b.n	800374e <UART_SetConfig+0x2e6>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a7c      	ldr	r2, [pc, #496]	@ (8003738 <UART_SetConfig+0x2d0>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d138      	bne.n	80035bc <UART_SetConfig+0x154>
 800354a:	4b7a      	ldr	r3, [pc, #488]	@ (8003734 <UART_SetConfig+0x2cc>)
 800354c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003550:	f003 030c 	and.w	r3, r3, #12
 8003554:	2b0c      	cmp	r3, #12
 8003556:	d82d      	bhi.n	80035b4 <UART_SetConfig+0x14c>
 8003558:	a201      	add	r2, pc, #4	@ (adr r2, 8003560 <UART_SetConfig+0xf8>)
 800355a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355e:	bf00      	nop
 8003560:	08003595 	.word	0x08003595
 8003564:	080035b5 	.word	0x080035b5
 8003568:	080035b5 	.word	0x080035b5
 800356c:	080035b5 	.word	0x080035b5
 8003570:	080035a5 	.word	0x080035a5
 8003574:	080035b5 	.word	0x080035b5
 8003578:	080035b5 	.word	0x080035b5
 800357c:	080035b5 	.word	0x080035b5
 8003580:	0800359d 	.word	0x0800359d
 8003584:	080035b5 	.word	0x080035b5
 8003588:	080035b5 	.word	0x080035b5
 800358c:	080035b5 	.word	0x080035b5
 8003590:	080035ad 	.word	0x080035ad
 8003594:	2300      	movs	r3, #0
 8003596:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800359a:	e0d8      	b.n	800374e <UART_SetConfig+0x2e6>
 800359c:	2302      	movs	r3, #2
 800359e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035a2:	e0d4      	b.n	800374e <UART_SetConfig+0x2e6>
 80035a4:	2304      	movs	r3, #4
 80035a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035aa:	e0d0      	b.n	800374e <UART_SetConfig+0x2e6>
 80035ac:	2308      	movs	r3, #8
 80035ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035b2:	e0cc      	b.n	800374e <UART_SetConfig+0x2e6>
 80035b4:	2310      	movs	r3, #16
 80035b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035ba:	e0c8      	b.n	800374e <UART_SetConfig+0x2e6>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a5e      	ldr	r2, [pc, #376]	@ (800373c <UART_SetConfig+0x2d4>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d125      	bne.n	8003612 <UART_SetConfig+0x1aa>
 80035c6:	4b5b      	ldr	r3, [pc, #364]	@ (8003734 <UART_SetConfig+0x2cc>)
 80035c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035cc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80035d0:	2b30      	cmp	r3, #48	@ 0x30
 80035d2:	d016      	beq.n	8003602 <UART_SetConfig+0x19a>
 80035d4:	2b30      	cmp	r3, #48	@ 0x30
 80035d6:	d818      	bhi.n	800360a <UART_SetConfig+0x1a2>
 80035d8:	2b20      	cmp	r3, #32
 80035da:	d00a      	beq.n	80035f2 <UART_SetConfig+0x18a>
 80035dc:	2b20      	cmp	r3, #32
 80035de:	d814      	bhi.n	800360a <UART_SetConfig+0x1a2>
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d002      	beq.n	80035ea <UART_SetConfig+0x182>
 80035e4:	2b10      	cmp	r3, #16
 80035e6:	d008      	beq.n	80035fa <UART_SetConfig+0x192>
 80035e8:	e00f      	b.n	800360a <UART_SetConfig+0x1a2>
 80035ea:	2300      	movs	r3, #0
 80035ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035f0:	e0ad      	b.n	800374e <UART_SetConfig+0x2e6>
 80035f2:	2302      	movs	r3, #2
 80035f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035f8:	e0a9      	b.n	800374e <UART_SetConfig+0x2e6>
 80035fa:	2304      	movs	r3, #4
 80035fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003600:	e0a5      	b.n	800374e <UART_SetConfig+0x2e6>
 8003602:	2308      	movs	r3, #8
 8003604:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003608:	e0a1      	b.n	800374e <UART_SetConfig+0x2e6>
 800360a:	2310      	movs	r3, #16
 800360c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003610:	e09d      	b.n	800374e <UART_SetConfig+0x2e6>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a4a      	ldr	r2, [pc, #296]	@ (8003740 <UART_SetConfig+0x2d8>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d125      	bne.n	8003668 <UART_SetConfig+0x200>
 800361c:	4b45      	ldr	r3, [pc, #276]	@ (8003734 <UART_SetConfig+0x2cc>)
 800361e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003622:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003626:	2bc0      	cmp	r3, #192	@ 0xc0
 8003628:	d016      	beq.n	8003658 <UART_SetConfig+0x1f0>
 800362a:	2bc0      	cmp	r3, #192	@ 0xc0
 800362c:	d818      	bhi.n	8003660 <UART_SetConfig+0x1f8>
 800362e:	2b80      	cmp	r3, #128	@ 0x80
 8003630:	d00a      	beq.n	8003648 <UART_SetConfig+0x1e0>
 8003632:	2b80      	cmp	r3, #128	@ 0x80
 8003634:	d814      	bhi.n	8003660 <UART_SetConfig+0x1f8>
 8003636:	2b00      	cmp	r3, #0
 8003638:	d002      	beq.n	8003640 <UART_SetConfig+0x1d8>
 800363a:	2b40      	cmp	r3, #64	@ 0x40
 800363c:	d008      	beq.n	8003650 <UART_SetConfig+0x1e8>
 800363e:	e00f      	b.n	8003660 <UART_SetConfig+0x1f8>
 8003640:	2300      	movs	r3, #0
 8003642:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003646:	e082      	b.n	800374e <UART_SetConfig+0x2e6>
 8003648:	2302      	movs	r3, #2
 800364a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800364e:	e07e      	b.n	800374e <UART_SetConfig+0x2e6>
 8003650:	2304      	movs	r3, #4
 8003652:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003656:	e07a      	b.n	800374e <UART_SetConfig+0x2e6>
 8003658:	2308      	movs	r3, #8
 800365a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800365e:	e076      	b.n	800374e <UART_SetConfig+0x2e6>
 8003660:	2310      	movs	r3, #16
 8003662:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003666:	e072      	b.n	800374e <UART_SetConfig+0x2e6>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a35      	ldr	r2, [pc, #212]	@ (8003744 <UART_SetConfig+0x2dc>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d12a      	bne.n	80036c8 <UART_SetConfig+0x260>
 8003672:	4b30      	ldr	r3, [pc, #192]	@ (8003734 <UART_SetConfig+0x2cc>)
 8003674:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003678:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800367c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003680:	d01a      	beq.n	80036b8 <UART_SetConfig+0x250>
 8003682:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003686:	d81b      	bhi.n	80036c0 <UART_SetConfig+0x258>
 8003688:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800368c:	d00c      	beq.n	80036a8 <UART_SetConfig+0x240>
 800368e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003692:	d815      	bhi.n	80036c0 <UART_SetConfig+0x258>
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <UART_SetConfig+0x238>
 8003698:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800369c:	d008      	beq.n	80036b0 <UART_SetConfig+0x248>
 800369e:	e00f      	b.n	80036c0 <UART_SetConfig+0x258>
 80036a0:	2300      	movs	r3, #0
 80036a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036a6:	e052      	b.n	800374e <UART_SetConfig+0x2e6>
 80036a8:	2302      	movs	r3, #2
 80036aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036ae:	e04e      	b.n	800374e <UART_SetConfig+0x2e6>
 80036b0:	2304      	movs	r3, #4
 80036b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036b6:	e04a      	b.n	800374e <UART_SetConfig+0x2e6>
 80036b8:	2308      	movs	r3, #8
 80036ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036be:	e046      	b.n	800374e <UART_SetConfig+0x2e6>
 80036c0:	2310      	movs	r3, #16
 80036c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036c6:	e042      	b.n	800374e <UART_SetConfig+0x2e6>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a17      	ldr	r2, [pc, #92]	@ (800372c <UART_SetConfig+0x2c4>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d13a      	bne.n	8003748 <UART_SetConfig+0x2e0>
 80036d2:	4b18      	ldr	r3, [pc, #96]	@ (8003734 <UART_SetConfig+0x2cc>)
 80036d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036d8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80036dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80036e0:	d01a      	beq.n	8003718 <UART_SetConfig+0x2b0>
 80036e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80036e6:	d81b      	bhi.n	8003720 <UART_SetConfig+0x2b8>
 80036e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036ec:	d00c      	beq.n	8003708 <UART_SetConfig+0x2a0>
 80036ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036f2:	d815      	bhi.n	8003720 <UART_SetConfig+0x2b8>
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <UART_SetConfig+0x298>
 80036f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036fc:	d008      	beq.n	8003710 <UART_SetConfig+0x2a8>
 80036fe:	e00f      	b.n	8003720 <UART_SetConfig+0x2b8>
 8003700:	2300      	movs	r3, #0
 8003702:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003706:	e022      	b.n	800374e <UART_SetConfig+0x2e6>
 8003708:	2302      	movs	r3, #2
 800370a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800370e:	e01e      	b.n	800374e <UART_SetConfig+0x2e6>
 8003710:	2304      	movs	r3, #4
 8003712:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003716:	e01a      	b.n	800374e <UART_SetConfig+0x2e6>
 8003718:	2308      	movs	r3, #8
 800371a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800371e:	e016      	b.n	800374e <UART_SetConfig+0x2e6>
 8003720:	2310      	movs	r3, #16
 8003722:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003726:	e012      	b.n	800374e <UART_SetConfig+0x2e6>
 8003728:	efff69f3 	.word	0xefff69f3
 800372c:	40008000 	.word	0x40008000
 8003730:	40013800 	.word	0x40013800
 8003734:	40021000 	.word	0x40021000
 8003738:	40004400 	.word	0x40004400
 800373c:	40004800 	.word	0x40004800
 8003740:	40004c00 	.word	0x40004c00
 8003744:	40005000 	.word	0x40005000
 8003748:	2310      	movs	r3, #16
 800374a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a9f      	ldr	r2, [pc, #636]	@ (80039d0 <UART_SetConfig+0x568>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d17a      	bne.n	800384e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003758:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800375c:	2b08      	cmp	r3, #8
 800375e:	d824      	bhi.n	80037aa <UART_SetConfig+0x342>
 8003760:	a201      	add	r2, pc, #4	@ (adr r2, 8003768 <UART_SetConfig+0x300>)
 8003762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003766:	bf00      	nop
 8003768:	0800378d 	.word	0x0800378d
 800376c:	080037ab 	.word	0x080037ab
 8003770:	08003795 	.word	0x08003795
 8003774:	080037ab 	.word	0x080037ab
 8003778:	0800379b 	.word	0x0800379b
 800377c:	080037ab 	.word	0x080037ab
 8003780:	080037ab 	.word	0x080037ab
 8003784:	080037ab 	.word	0x080037ab
 8003788:	080037a3 	.word	0x080037a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800378c:	f7fe fa46 	bl	8001c1c <HAL_RCC_GetPCLK1Freq>
 8003790:	61f8      	str	r0, [r7, #28]
        break;
 8003792:	e010      	b.n	80037b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003794:	4b8f      	ldr	r3, [pc, #572]	@ (80039d4 <UART_SetConfig+0x56c>)
 8003796:	61fb      	str	r3, [r7, #28]
        break;
 8003798:	e00d      	b.n	80037b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800379a:	f7fe f9a7 	bl	8001aec <HAL_RCC_GetSysClockFreq>
 800379e:	61f8      	str	r0, [r7, #28]
        break;
 80037a0:	e009      	b.n	80037b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037a6:	61fb      	str	r3, [r7, #28]
        break;
 80037a8:	e005      	b.n	80037b6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80037aa:	2300      	movs	r3, #0
 80037ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80037b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 80fb 	beq.w	80039b4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	4613      	mov	r3, r2
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	4413      	add	r3, r2
 80037c8:	69fa      	ldr	r2, [r7, #28]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d305      	bcc.n	80037da <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037d4:	69fa      	ldr	r2, [r7, #28]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d903      	bls.n	80037e2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80037e0:	e0e8      	b.n	80039b4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	2200      	movs	r2, #0
 80037e6:	461c      	mov	r4, r3
 80037e8:	4615      	mov	r5, r2
 80037ea:	f04f 0200 	mov.w	r2, #0
 80037ee:	f04f 0300 	mov.w	r3, #0
 80037f2:	022b      	lsls	r3, r5, #8
 80037f4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80037f8:	0222      	lsls	r2, r4, #8
 80037fa:	68f9      	ldr	r1, [r7, #12]
 80037fc:	6849      	ldr	r1, [r1, #4]
 80037fe:	0849      	lsrs	r1, r1, #1
 8003800:	2000      	movs	r0, #0
 8003802:	4688      	mov	r8, r1
 8003804:	4681      	mov	r9, r0
 8003806:	eb12 0a08 	adds.w	sl, r2, r8
 800380a:	eb43 0b09 	adc.w	fp, r3, r9
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	603b      	str	r3, [r7, #0]
 8003816:	607a      	str	r2, [r7, #4]
 8003818:	e9d7 2300 	ldrd	r2, r3, [r7]
 800381c:	4650      	mov	r0, sl
 800381e:	4659      	mov	r1, fp
 8003820:	f7fc fcd2 	bl	80001c8 <__aeabi_uldivmod>
 8003824:	4602      	mov	r2, r0
 8003826:	460b      	mov	r3, r1
 8003828:	4613      	mov	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003832:	d308      	bcc.n	8003846 <UART_SetConfig+0x3de>
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800383a:	d204      	bcs.n	8003846 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	60da      	str	r2, [r3, #12]
 8003844:	e0b6      	b.n	80039b4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800384c:	e0b2      	b.n	80039b4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003856:	d15e      	bne.n	8003916 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003858:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800385c:	2b08      	cmp	r3, #8
 800385e:	d828      	bhi.n	80038b2 <UART_SetConfig+0x44a>
 8003860:	a201      	add	r2, pc, #4	@ (adr r2, 8003868 <UART_SetConfig+0x400>)
 8003862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003866:	bf00      	nop
 8003868:	0800388d 	.word	0x0800388d
 800386c:	08003895 	.word	0x08003895
 8003870:	0800389d 	.word	0x0800389d
 8003874:	080038b3 	.word	0x080038b3
 8003878:	080038a3 	.word	0x080038a3
 800387c:	080038b3 	.word	0x080038b3
 8003880:	080038b3 	.word	0x080038b3
 8003884:	080038b3 	.word	0x080038b3
 8003888:	080038ab 	.word	0x080038ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800388c:	f7fe f9c6 	bl	8001c1c <HAL_RCC_GetPCLK1Freq>
 8003890:	61f8      	str	r0, [r7, #28]
        break;
 8003892:	e014      	b.n	80038be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003894:	f7fe f9d8 	bl	8001c48 <HAL_RCC_GetPCLK2Freq>
 8003898:	61f8      	str	r0, [r7, #28]
        break;
 800389a:	e010      	b.n	80038be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800389c:	4b4d      	ldr	r3, [pc, #308]	@ (80039d4 <UART_SetConfig+0x56c>)
 800389e:	61fb      	str	r3, [r7, #28]
        break;
 80038a0:	e00d      	b.n	80038be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038a2:	f7fe f923 	bl	8001aec <HAL_RCC_GetSysClockFreq>
 80038a6:	61f8      	str	r0, [r7, #28]
        break;
 80038a8:	e009      	b.n	80038be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038ae:	61fb      	str	r3, [r7, #28]
        break;
 80038b0:	e005      	b.n	80038be <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80038b2:	2300      	movs	r3, #0
 80038b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80038bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d077      	beq.n	80039b4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	005a      	lsls	r2, r3, #1
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	085b      	lsrs	r3, r3, #1
 80038ce:	441a      	add	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	2b0f      	cmp	r3, #15
 80038de:	d916      	bls.n	800390e <UART_SetConfig+0x4a6>
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038e6:	d212      	bcs.n	800390e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	f023 030f 	bic.w	r3, r3, #15
 80038f0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	085b      	lsrs	r3, r3, #1
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	8afb      	ldrh	r3, [r7, #22]
 8003900:	4313      	orrs	r3, r2
 8003902:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	8afa      	ldrh	r2, [r7, #22]
 800390a:	60da      	str	r2, [r3, #12]
 800390c:	e052      	b.n	80039b4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003914:	e04e      	b.n	80039b4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003916:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800391a:	2b08      	cmp	r3, #8
 800391c:	d827      	bhi.n	800396e <UART_SetConfig+0x506>
 800391e:	a201      	add	r2, pc, #4	@ (adr r2, 8003924 <UART_SetConfig+0x4bc>)
 8003920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003924:	08003949 	.word	0x08003949
 8003928:	08003951 	.word	0x08003951
 800392c:	08003959 	.word	0x08003959
 8003930:	0800396f 	.word	0x0800396f
 8003934:	0800395f 	.word	0x0800395f
 8003938:	0800396f 	.word	0x0800396f
 800393c:	0800396f 	.word	0x0800396f
 8003940:	0800396f 	.word	0x0800396f
 8003944:	08003967 	.word	0x08003967
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003948:	f7fe f968 	bl	8001c1c <HAL_RCC_GetPCLK1Freq>
 800394c:	61f8      	str	r0, [r7, #28]
        break;
 800394e:	e014      	b.n	800397a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003950:	f7fe f97a 	bl	8001c48 <HAL_RCC_GetPCLK2Freq>
 8003954:	61f8      	str	r0, [r7, #28]
        break;
 8003956:	e010      	b.n	800397a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003958:	4b1e      	ldr	r3, [pc, #120]	@ (80039d4 <UART_SetConfig+0x56c>)
 800395a:	61fb      	str	r3, [r7, #28]
        break;
 800395c:	e00d      	b.n	800397a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800395e:	f7fe f8c5 	bl	8001aec <HAL_RCC_GetSysClockFreq>
 8003962:	61f8      	str	r0, [r7, #28]
        break;
 8003964:	e009      	b.n	800397a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003966:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800396a:	61fb      	str	r3, [r7, #28]
        break;
 800396c:	e005      	b.n	800397a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800396e:	2300      	movs	r3, #0
 8003970:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003978:	bf00      	nop
    }

    if (pclk != 0U)
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d019      	beq.n	80039b4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	085a      	lsrs	r2, r3, #1
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	441a      	add	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003992:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	2b0f      	cmp	r3, #15
 8003998:	d909      	bls.n	80039ae <UART_SetConfig+0x546>
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039a0:	d205      	bcs.n	80039ae <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	60da      	str	r2, [r3, #12]
 80039ac:	e002      	b.n	80039b4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80039c0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3728      	adds	r7, #40	@ 0x28
 80039c8:	46bd      	mov	sp, r7
 80039ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039ce:	bf00      	nop
 80039d0:	40008000 	.word	0x40008000
 80039d4:	00f42400 	.word	0x00f42400

080039d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e4:	f003 0308 	and.w	r3, r3, #8
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00a      	beq.n	8003a02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00a      	beq.n	8003a24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	430a      	orrs	r2, r1
 8003a22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00a      	beq.n	8003a46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4a:	f003 0304 	and.w	r3, r3, #4
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00a      	beq.n	8003a68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6c:	f003 0310 	and.w	r3, r3, #16
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00a      	beq.n	8003a8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8e:	f003 0320 	and.w	r3, r3, #32
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00a      	beq.n	8003aac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d01a      	beq.n	8003aee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ad6:	d10a      	bne.n	8003aee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00a      	beq.n	8003b10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	605a      	str	r2, [r3, #4]
  }
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b098      	sub	sp, #96	@ 0x60
 8003b20:	af02      	add	r7, sp, #8
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b2c:	f7fc ffc6 	bl	8000abc <HAL_GetTick>
 8003b30:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0308 	and.w	r3, r3, #8
 8003b3c:	2b08      	cmp	r3, #8
 8003b3e:	d12e      	bne.n	8003b9e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f88c 	bl	8003c6c <UART_WaitOnFlagUntilTimeout>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d021      	beq.n	8003b9e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b62:	e853 3f00 	ldrex	r3, [r3]
 8003b66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	461a      	mov	r2, r3
 8003b76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b78:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b7a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b80:	e841 2300 	strex	r3, r2, [r1]
 8003b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1e6      	bne.n	8003b5a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e062      	b.n	8003c64 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b04      	cmp	r3, #4
 8003baa:	d149      	bne.n	8003c40 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f856 	bl	8003c6c <UART_WaitOnFlagUntilTimeout>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d03c      	beq.n	8003c40 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bce:	e853 3f00 	ldrex	r3, [r3]
 8003bd2:	623b      	str	r3, [r7, #32]
   return(result);
 8003bd4:	6a3b      	ldr	r3, [r7, #32]
 8003bd6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	461a      	mov	r2, r3
 8003be2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003be4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003be6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bec:	e841 2300 	strex	r3, r2, [r1]
 8003bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1e6      	bne.n	8003bc6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	3308      	adds	r3, #8
 8003bfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	e853 3f00 	ldrex	r3, [r3]
 8003c06:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f023 0301 	bic.w	r3, r3, #1
 8003c0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	3308      	adds	r3, #8
 8003c16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c18:	61fa      	str	r2, [r7, #28]
 8003c1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1c:	69b9      	ldr	r1, [r7, #24]
 8003c1e:	69fa      	ldr	r2, [r7, #28]
 8003c20:	e841 2300 	strex	r3, r2, [r1]
 8003c24:	617b      	str	r3, [r7, #20]
   return(result);
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1e5      	bne.n	8003bf8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e011      	b.n	8003c64 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2220      	movs	r2, #32
 8003c44:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2220      	movs	r2, #32
 8003c4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3758      	adds	r7, #88	@ 0x58
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	603b      	str	r3, [r7, #0]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c7c:	e049      	b.n	8003d12 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c84:	d045      	beq.n	8003d12 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c86:	f7fc ff19 	bl	8000abc <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d302      	bcc.n	8003c9c <UART_WaitOnFlagUntilTimeout+0x30>
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e048      	b.n	8003d32 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0304 	and.w	r3, r3, #4
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d031      	beq.n	8003d12 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	69db      	ldr	r3, [r3, #28]
 8003cb4:	f003 0308 	and.w	r3, r3, #8
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	d110      	bne.n	8003cde <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2208      	movs	r2, #8
 8003cc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f000 f838 	bl	8003d3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2208      	movs	r2, #8
 8003cce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e029      	b.n	8003d32 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ce8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cec:	d111      	bne.n	8003d12 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003cf6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f000 f81e 	bl	8003d3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2220      	movs	r2, #32
 8003d02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e00f      	b.n	8003d32 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	69da      	ldr	r2, [r3, #28]
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	bf0c      	ite	eq
 8003d22:	2301      	moveq	r3, #1
 8003d24:	2300      	movne	r3, #0
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	461a      	mov	r2, r3
 8003d2a:	79fb      	ldrb	r3, [r7, #7]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d0a6      	beq.n	8003c7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b095      	sub	sp, #84	@ 0x54
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d4a:	e853 3f00 	ldrex	r3, [r3]
 8003d4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d60:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d62:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d68:	e841 2300 	strex	r3, r2, [r1]
 8003d6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1e6      	bne.n	8003d42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	3308      	adds	r3, #8
 8003d7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7c:	6a3b      	ldr	r3, [r7, #32]
 8003d7e:	e853 3f00 	ldrex	r3, [r3]
 8003d82:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	f023 0301 	bic.w	r3, r3, #1
 8003d8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	3308      	adds	r3, #8
 8003d92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d94:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d9c:	e841 2300 	strex	r3, r2, [r1]
 8003da0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1e5      	bne.n	8003d74 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d118      	bne.n	8003de2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	e853 3f00 	ldrex	r3, [r3]
 8003dbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	f023 0310 	bic.w	r3, r3, #16
 8003dc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dce:	61bb      	str	r3, [r7, #24]
 8003dd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd2:	6979      	ldr	r1, [r7, #20]
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	e841 2300 	strex	r3, r2, [r1]
 8003dda:	613b      	str	r3, [r7, #16]
   return(result);
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1e6      	bne.n	8003db0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2220      	movs	r2, #32
 8003de6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003df6:	bf00      	nop
 8003df8:	3754      	adds	r7, #84	@ 0x54
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <memset>:
 8003e02:	4402      	add	r2, r0
 8003e04:	4603      	mov	r3, r0
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d100      	bne.n	8003e0c <memset+0xa>
 8003e0a:	4770      	bx	lr
 8003e0c:	f803 1b01 	strb.w	r1, [r3], #1
 8003e10:	e7f9      	b.n	8003e06 <memset+0x4>
	...

08003e14 <__libc_init_array>:
 8003e14:	b570      	push	{r4, r5, r6, lr}
 8003e16:	4d0d      	ldr	r5, [pc, #52]	@ (8003e4c <__libc_init_array+0x38>)
 8003e18:	4c0d      	ldr	r4, [pc, #52]	@ (8003e50 <__libc_init_array+0x3c>)
 8003e1a:	1b64      	subs	r4, r4, r5
 8003e1c:	10a4      	asrs	r4, r4, #2
 8003e1e:	2600      	movs	r6, #0
 8003e20:	42a6      	cmp	r6, r4
 8003e22:	d109      	bne.n	8003e38 <__libc_init_array+0x24>
 8003e24:	4d0b      	ldr	r5, [pc, #44]	@ (8003e54 <__libc_init_array+0x40>)
 8003e26:	4c0c      	ldr	r4, [pc, #48]	@ (8003e58 <__libc_init_array+0x44>)
 8003e28:	f000 f818 	bl	8003e5c <_init>
 8003e2c:	1b64      	subs	r4, r4, r5
 8003e2e:	10a4      	asrs	r4, r4, #2
 8003e30:	2600      	movs	r6, #0
 8003e32:	42a6      	cmp	r6, r4
 8003e34:	d105      	bne.n	8003e42 <__libc_init_array+0x2e>
 8003e36:	bd70      	pop	{r4, r5, r6, pc}
 8003e38:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e3c:	4798      	blx	r3
 8003e3e:	3601      	adds	r6, #1
 8003e40:	e7ee      	b.n	8003e20 <__libc_init_array+0xc>
 8003e42:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e46:	4798      	blx	r3
 8003e48:	3601      	adds	r6, #1
 8003e4a:	e7f2      	b.n	8003e32 <__libc_init_array+0x1e>
 8003e4c:	08003ec4 	.word	0x08003ec4
 8003e50:	08003ec4 	.word	0x08003ec4
 8003e54:	08003ec4 	.word	0x08003ec4
 8003e58:	08003ec8 	.word	0x08003ec8

08003e5c <_init>:
 8003e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e5e:	bf00      	nop
 8003e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e62:	bc08      	pop	{r3}
 8003e64:	469e      	mov	lr, r3
 8003e66:	4770      	bx	lr

08003e68 <_fini>:
 8003e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e6a:	bf00      	nop
 8003e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e6e:	bc08      	pop	{r3}
 8003e70:	469e      	mov	lr, r3
 8003e72:	4770      	bx	lr
